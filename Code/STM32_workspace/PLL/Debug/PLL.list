
PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00007af4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081bc  080081bc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081c4  080081c4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080081cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010ddc  20000080  0800824c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010e5c  0800824c  00020e5c  2**0
=======
  1 .text         00007b4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008214  08008214  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800821c  0800821c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010e28  20000080  080082a4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010ea8  080082a4  00020ea8  2**0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001270c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029de  00000000  00000000  000327bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000351a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243ae  00000000  00000000  00037008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 17 .debug_line   0001256f  00000000  00000000  0005b34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df83c  00000000  00000000  0006d8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d0f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004990  00000000  00000000  0014d14c  2**2
=======
 17 .debug_line   0001260d  00000000  00000000  0005b3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df853  00000000  00000000  0006d9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d216  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  0014d26c  2**2
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001f0:	08007cac 	.word	0x08007cac
=======
 80001f0:	08007d04 	.word	0x08007d04
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
<<<<<<< HEAD
 800020c:	08007cac 	.word	0x08007cac
=======
 800020c:	08007d04 	.word	0x08007d04
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000f34:	f001 fa6e 	bl	8002414 <HAL_Init>
=======
 8000f34:	f001 fa98 	bl	8002468 <HAL_Init>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f832 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fa6c 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f40:	f000 fa34 	bl	80013ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f44:	f000 fa08 	bl	8001358 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f48:	f000 f89c 	bl	8001084 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000f4c:	f000 f9ba 	bl	80012c4 <MX_TIM10_Init>
  MX_DAC_Init();
 8000f50:	f000 f98e 	bl	8001270 <MX_DAC_Init>
  MX_ADC2_Init();
 8000f54:	f000 f8e8 	bl	8001128 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000f58:	f000 f938 	bl	80011cc <MX_ADC3_Init>

  // DAC DMA
//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)&adcBuf[0], sizeof(adcReading0), DAC_ALIGN_12B_R);//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)testArray, sizeof(testArray)/sizeof(uint16_t), DAC_ALIGN_12B_R);

  // Timer interrupt start
  HAL_TIM_Base_Start_IT(&htim10);
<<<<<<< HEAD
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <main+0x58>)
 8000f5a:	f003 fbd7 	bl	800470c <HAL_TIM_Base_Start_IT>
=======
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <main+0x5c>)
 8000f5e:	f003 fbff 	bl	8004760 <HAL_TIM_Base_Start_IT>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if (ringBufFlag && !ringBufPrintDone) {
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <main+0x60>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0fb      	beq.n	8000f62 <main+0x32>
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <main+0x64>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f7      	bne.n	8000f62 <main+0x32>
		ringBufPrintDone = printRingBuf(RING_BUF_LEN, ringBuf, readStart);
<<<<<<< HEAD
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <main+0x64>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4908      	ldr	r1, [pc, #32]	; (8000f98 <main+0x68>)
 8000f76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f7a:	f000 fe75 	bl	8001c68 <printRingBuf>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <main+0x60>)
 8000f84:	701a      	strb	r2, [r3, #0]
=======
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <main+0x68>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4908      	ldr	r1, [pc, #32]	; (8000f9c <main+0x6c>)
 8000f7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f7e:	f000 fe6b 	bl	8001c58 <printRingBuf>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <main+0x64>)
 8000f88:	701a      	strb	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
	if (ringBufFlag && !ringBufPrintDone) {
 8000f8a:	e7ea      	b.n	8000f62 <main+0x32>
 8000f8c:	20000284 	.word	0x20000284
 8000f90:	2000009d 	.word	0x2000009d
 8000f94:	2000009e 	.word	0x2000009e
 8000f98:	20010e8c 	.word	0x20010e8c
 8000f9c:	20000400 	.word	0x20000400

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2234      	movs	r2, #52	; 0x34
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 fbb4 	bl	8006718 <memset>
=======
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	2234      	movs	r2, #52	; 0x34
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 fbde 	bl	8006770 <memset>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <SystemClock_Config+0xdc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	; (800107c <SystemClock_Config+0xdc>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <SystemClock_Config+0xdc>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <SystemClock_Config+0xe0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a25      	ldr	r2, [pc, #148]	; (8001080 <SystemClock_Config+0xe0>)
 8000fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <SystemClock_Config+0xe0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001004:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001014:	23b4      	movs	r3, #180	; 0xb4
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001018:	2302      	movs	r3, #2
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f883 	bl	8004130 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001030:	f000 ff6a 	bl	8001f08 <Error_Handler>
=======
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4618      	mov	r0, r3
 800102a:	f003 f8ab 	bl	8004184 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001034:	f000 ff60 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< HEAD
 8001034:	f002 fd60 	bl	8003af8 <HAL_PWREx_EnableOverDrive>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800103e:	f000 ff63 	bl	8001f08 <Error_Handler>
=======
 8001038:	f002 fd88 	bl	8003b4c <HAL_PWREx_EnableOverDrive>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001042:	f000 ff59 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2302      	movs	r3, #2
 800104c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001052:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
<<<<<<< HEAD
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2105      	movs	r1, #5
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fd99 	bl	8003b98 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800106c:	f000 ff4c 	bl	8001f08 <Error_Handler>
=======
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	2105      	movs	r1, #5
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fdc1 	bl	8003bec <HAL_RCC_ClockConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001070:	f000 ff42 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
}
 8001074:	bf00      	nop
 8001076:	3750      	adds	r7, #80	; 0x50
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_ADC1_Init+0x98>)
 8001098:	4a21      	ldr	r2, [pc, #132]	; (8001120 <MX_ADC1_Init+0x9c>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_ADC1_Init+0x98>)
 800109e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_ADC1_Init+0x98>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_ADC1_Init+0x98>)
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <MX_ADC1_Init+0xa0>)
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_ADC1_Init+0x98>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_ADC1_Init+0x98>)
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_ADC1_Init+0x98>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
<<<<<<< HEAD
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_ADC1_Init+0x98>)
 80010e2:	f001 fa09 	bl	80024f8 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 ff0c 	bl	8001f08 <Error_Handler>
=======
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_ADC1_Init+0x98>)
 80010e6:	f001 fa31 	bl	800254c <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010f0:	f000 ff02 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
<<<<<<< HEAD
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_ADC1_Init+0x98>)
 8001102:	f001 fba7 	bl	8002854 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 fefc 	bl	8001f08 <Error_Handler>
=======
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_ADC1_Init+0x98>)
 8001106:	f001 fbcf 	bl	80028a8 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001110:	f000 fef2 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002f8 	.word	0x200002f8
 8001120:	40012000 	.word	0x40012000
 8001124:	0f000001 	.word	0x0f000001

08001128 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_ADC2_Init+0x98>)
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <MX_ADC2_Init+0x9c>)
 800113e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_ADC2_Init+0x98>)
 8001142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001146:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_ADC2_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_ADC2_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_ADC2_Init+0x98>)
 8001156:	2201      	movs	r2, #1
 8001158:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_ADC2_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_ADC2_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_ADC2_Init+0x98>)
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <MX_ADC2_Init+0xa0>)
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_ADC2_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_ADC2_Init+0x98>)
 8001176:	2201      	movs	r2, #1
 8001178:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_ADC2_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_ADC2_Init+0x98>)
 8001184:	2201      	movs	r2, #1
 8001186:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
<<<<<<< HEAD
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_ADC2_Init+0x98>)
 8001186:	f001 f9b7 	bl	80024f8 <HAL_ADC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001190:	f000 feba 	bl	8001f08 <Error_Handler>
=======
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_ADC2_Init+0x98>)
 800118a:	f001 f9df 	bl	800254c <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001194:	f000 feb0 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001198:	2301      	movs	r3, #1
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
<<<<<<< HEAD
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_ADC2_Init+0x98>)
 80011a6:	f001 fb55 	bl	8002854 <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011b0:	f000 feaa 	bl	8001f08 <Error_Handler>
=======
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_ADC2_Init+0x98>)
 80011aa:	f001 fb7d 	bl	80028a8 <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011b4:	f000 fea0 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000238 	.word	0x20000238
 80011c4:	40012100 	.word	0x40012100
 80011c8:	0f000001 	.word	0x0f000001

080011cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_ADC3_Init+0x98>)
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <MX_ADC3_Init+0x9c>)
 80011e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_ADC3_Init+0x98>)
 80011e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_ADC3_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_ADC3_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_ADC3_Init+0x98>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_ADC3_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_ADC3_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_ADC3_Init+0x98>)
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <MX_ADC3_Init+0xa0>)
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_ADC3_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_ADC3_Init+0x98>)
 800121a:	2201      	movs	r2, #1
 800121c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_ADC3_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_ADC3_Init+0x98>)
 8001228:	2201      	movs	r2, #1
 800122a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_ADC3_Init+0x98>)
 800122e:	f001 f98d 	bl	800254c <HAL_ADC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001238:	f000 fe5e 	bl	8001ef8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800123c:	230a      	movs	r3, #10
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_ADC3_Init+0x98>)
 800124e:	f001 fb2b 	bl	80028a8 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001258:	f000 fe4e 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000344 	.word	0x20000344
 8001268:	40012200 	.word	0x40012200
 800126c:	0f000001 	.word	0x0f000001

08001270 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_DAC_Init+0x4c>)
 8001280:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <MX_DAC_Init+0x50>)
 8001282:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
<<<<<<< HEAD
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_DAC_Init+0x4c>)
 80011de:	f001 fe78 	bl	8002ed2 <HAL_DAC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011e8:	f000 fe8e 	bl	8001f08 <Error_Handler>
=======
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_DAC_Init+0x4c>)
 8001286:	f001 fe4e 	bl	8002f26 <HAL_DAC_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001290:	f000 fe32 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
<<<<<<< HEAD
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_DAC_Init+0x4c>)
 80011fc:	f001 ff02 	bl	8003004 <HAL_DAC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001206:	f000 fe7f 	bl	8001f08 <Error_Handler>
=======
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_DAC_Init+0x4c>)
 80012a4:	f001 fed8 	bl	8003058 <HAL_DAC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012ae:	f000 fe23 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200003ec 	.word	0x200003ec
 80012c0:	40007400 	.word	0x40007400

080012c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_TIM10_Init+0x8c>)
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <MX_TIM10_Init+0x90>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 180-1;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_TIM10_Init+0x8c>)
 80012e4:	22b3      	movs	r2, #179	; 0xb3
 80012e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_TIM10_Init+0x8c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_TIM10_Init+0x8c>)
 80012f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_TIM10_Init+0x8c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_TIM10_Init+0x8c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
<<<<<<< HEAD
 800125a:	4813      	ldr	r0, [pc, #76]	; (80012a8 <MX_TIM10_Init+0x8c>)
 800125c:	f003 fa06 	bl	800466c <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001266:	f000 fe4f 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800126a:	480f      	ldr	r0, [pc, #60]	; (80012a8 <MX_TIM10_Init+0x8c>)
 800126c:	f003 fabe 	bl	80047ec <HAL_TIM_OC_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001276:	f000 fe47 	bl	8001f08 <Error_Handler>
=======
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <MX_TIM10_Init+0x8c>)
 8001304:	f003 f9dc 	bl	80046c0 <HAL_TIM_Base_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800130e:	f000 fdf3 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8001312:	480f      	ldr	r0, [pc, #60]	; (8001350 <MX_TIM10_Init+0x8c>)
 8001314:	f003 fa94 	bl	8004840 <HAL_TIM_OC_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800131e:	f000 fdeb 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
<<<<<<< HEAD
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_TIM10_Init+0x8c>)
 8001292:	f003 fc0d 	bl	8004ab0 <HAL_TIM_OC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800129c:	f000 fe34 	bl	8001f08 <Error_Handler>
=======
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_TIM10_Init+0x8c>)
 800133a:	f003 fbe3 	bl	8004b04 <HAL_TIM_OC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001344:	f000 fdd8 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000284 	.word	0x20000284
 8001354:	40014400 	.word	0x40014400

08001358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_USART2_UART_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
<<<<<<< HEAD
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012e8:	f003 fec6 	bl	8005078 <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012f2:	f000 fe09 	bl	8001f08 <Error_Handler>
=======
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001390:	f003 fe9c 	bl	80050cc <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139a:	f000 fdad 	bl	8001ef8 <Error_Handler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20010e48 	.word	0x20010e48
 80013a8:	40004400 	.word	0x40004400

080013ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_DMA_Init+0x68>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <MX_DMA_Init+0x68>)
 80013bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_DMA_Init+0x68>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_DMA_Init+0x68>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <MX_DMA_Init+0x68>)
 80013d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <MX_DMA_Init+0x68>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
<<<<<<< HEAD
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2011      	movs	r0, #17
 8001348:	f001 fd8d 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800134c:	2011      	movs	r0, #17
 800134e:	f001 fda6 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2038      	movs	r0, #56	; 0x38
 8001358:	f001 fd85 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800135c:	2038      	movs	r0, #56	; 0x38
 800135e:	f001 fd9e 	bl	8002e9e <HAL_NVIC_EnableIRQ>
=======
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2011      	movs	r0, #17
 80013f0:	f001 fd63 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013f4:	2011      	movs	r0, #17
 80013f6:	f001 fd7c 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2038      	movs	r0, #56	; 0x38
 8001400:	f001 fd5b 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001404:	2038      	movs	r0, #56	; 0x38
 8001406:	f001 fd74 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <MX_GPIO_Init+0x104>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a39      	ldr	r2, [pc, #228]	; (800151c <MX_GPIO_Init+0x104>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <MX_GPIO_Init+0x104>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b33      	ldr	r3, [pc, #204]	; (800151c <MX_GPIO_Init+0x104>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a32      	ldr	r2, [pc, #200]	; (800151c <MX_GPIO_Init+0x104>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <MX_GPIO_Init+0x104>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_GPIO_Init+0x104>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <MX_GPIO_Init+0x104>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <MX_GPIO_Init+0x104>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_GPIO_Init+0x104>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <MX_GPIO_Init+0x104>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <MX_GPIO_Init+0x104>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <MX_GPIO_Init+0x104>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <MX_GPIO_Init+0x104>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_GPIO_Init+0x104>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2120      	movs	r1, #32
 80013fa:	481f      	ldr	r0, [pc, #124]	; (8001478 <MX_GPIO_Init+0x108>)
 80013fc:	f002 fb62 	bl	8003ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001406:	481d      	ldr	r0, [pc, #116]	; (800147c <MX_GPIO_Init+0x10c>)
 8001408:	f002 fb5c 	bl	8003ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2101      	movs	r1, #1
 8001410:	481b      	ldr	r0, [pc, #108]	; (8001480 <MX_GPIO_Init+0x110>)
 8001412:	f002 fb57 	bl	8003ac4 <HAL_GPIO_WritePin>
=======
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <MX_GPIO_Init+0x104>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a2b      	ldr	r2, [pc, #172]	; (800151c <MX_GPIO_Init+0x104>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <MX_GPIO_Init+0x104>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <MX_GPIO_Init+0x104>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a24      	ldr	r2, [pc, #144]	; (800151c <MX_GPIO_Init+0x104>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_GPIO_Init+0x104>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2120      	movs	r1, #32
 80014a2:	481f      	ldr	r0, [pc, #124]	; (8001520 <MX_GPIO_Init+0x108>)
 80014a4:	f002 fb38 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2101      	movs	r1, #1
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <MX_GPIO_Init+0x10c>)
 80014ae:	f002 fb33 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80014b8:	481b      	ldr	r0, [pc, #108]	; (8001528 <MX_GPIO_Init+0x110>)
 80014ba:	f002 fb2d 	bl	8003b18 <HAL_GPIO_WritePin>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014be:	2320      	movs	r3, #32
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <MX_GPIO_Init+0x108>)
 800142e:	f002 f9b5 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001432:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_GPIO_Init+0x10c>)
 800144c:	f002 f9a6 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
=======
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <MX_GPIO_Init+0x108>)
 80014d6:	f002 f98b 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_GPIO_Init+0x10c>)
 80014f2:	f002 f97d 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80014f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014fa:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
<<<<<<< HEAD
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_GPIO_Init+0x110>)
 8001468:	f002 f998 	bl	800379c <HAL_GPIO_Init>

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020800 	.word	0x40020800
 8001480:	40020400 	.word	0x40020400
 8001484:	00000000 	.word	0x00000000

08001488 <HAL_TIM_PeriodElapsedCallback>:
=======
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_GPIO_Init+0x110>)
 8001510:	f002 f96e 	bl	80037f0 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	00000000 	.word	0x00000000

08001530 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//}

// Timer 10 (TIM10) interrupt:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af02      	add	r7, sp, #8
 8001536:	6078      	str	r0, [r7, #4]
  if (htim == &htim10)
<<<<<<< HEAD
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4ad1      	ldr	r2, [pc, #836]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f040 83d3 	bne.w	8001c40 <HAL_TIM_PeriodElapsedCallback+0x7b8>
=======
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4ad1      	ldr	r2, [pc, #836]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800153c:	4293      	cmp	r3, r2
 800153e:	f040 8342 	bne.w	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x696>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    // Variables declared globally for easier debugging.
    //    static float angleDq, alpha1, beta1, Vq, Vd, alpha2, beta2, cosGrid, sinGrid;
    // PLL variables end

	// Set pin: Start timer
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
<<<<<<< HEAD
 800149a:	2201      	movs	r2, #1
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	48cf      	ldr	r0, [pc, #828]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80014a0:	f002 fb10 	bl	8003ac4 <HAL_GPIO_WritePin>
=======
 8001542:	2201      	movs	r2, #1
 8001544:	2140      	movs	r1, #64	; 0x40
 8001546:	48cf      	ldr	r0, [pc, #828]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001548:	f002 fae6 	bl	8003b18 <HAL_GPIO_WritePin>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2120      	movs	r1, #32
 80014a8:	48cc      	ldr	r0, [pc, #816]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80014aa:	f002 fb0b 	bl	8003ac4 <HAL_GPIO_WritePin>
    // ADC 1
    HAL_ADC_Start(&hadc1);
<<<<<<< HEAD
 80014ae:	48cc      	ldr	r0, [pc, #816]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014b0:	f001 f866 	bl	8002580 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	48c9      	ldr	r0, [pc, #804]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014ba:	f001 f933 	bl	8002724 <HAL_ADC_PollForConversion>
    adcValue1 = HAL_ADC_GetValue(&hadc1);
 80014be:	48c8      	ldr	r0, [pc, #800]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014c0:	f001 f9bb 	bl	800283a <HAL_ADC_GetValue>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4bc6      	ldr	r3, [pc, #792]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80014ca:	801a      	strh	r2, [r3, #0]

    // ADC 2
    HAL_ADC_Start(&hadc2);
 80014cc:	48c6      	ldr	r0, [pc, #792]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80014ce:	f001 f857 	bl	8002580 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80014d2:	f04f 31ff 	mov.w	r1, #4294967295
 80014d6:	48c4      	ldr	r0, [pc, #784]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80014d8:	f001 f924 	bl	8002724 <HAL_ADC_PollForConversion>
    adcValue2 = HAL_ADC_GetValue(&hadc2);
 80014dc:	48c2      	ldr	r0, [pc, #776]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80014de:	f001 f9ac 	bl	800283a <HAL_ADC_GetValue>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4bc1      	ldr	r3, [pc, #772]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x364>)
 80014e8:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2120      	movs	r1, #32
 80014ee:	48bb      	ldr	r0, [pc, #748]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80014f0:	f002 fae8 	bl	8003ac4 <HAL_GPIO_WritePin>
//	sprintf(msg_2, "Adc reading: %u\r\n", adcReading0);	// Update message for usart print
//	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg_2,
//						(uint32_t)&huart2.Instance->DR, strlen(msg_2));

    // Ring buffer trigger test
    if (count == 450) {
 80014f4:	4bbe      	ldr	r3, [pc, #760]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80014fc:	d102      	bne.n	8001504 <HAL_TIM_PeriodElapsedCallback+0x7c>
    	ringBufTrigger = 1;
 80014fe:	4bbd      	ldr	r3, [pc, #756]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
=======
 800154c:	48ce      	ldr	r0, [pc, #824]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800154e:	f001 f841 	bl	80025d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001552:	f04f 31ff 	mov.w	r1, #4294967295
 8001556:	48cc      	ldr	r0, [pc, #816]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001558:	f001 f90e 	bl	8002778 <HAL_ADC_PollForConversion>
    adcValue1 = HAL_ADC_GetValue(&hadc1);
 800155c:	48ca      	ldr	r0, [pc, #808]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800155e:	f001 f996 	bl	800288e <HAL_ADC_GetValue>
 8001562:	4603      	mov	r3, r0
 8001564:	b29a      	uxth	r2, r3
 8001566:	4bc9      	ldr	r3, [pc, #804]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001568:	801a      	strh	r2, [r3, #0]

    // ADC 2
    HAL_ADC_Start(&hadc2);
 800156a:	48c9      	ldr	r0, [pc, #804]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800156c:	f001 f832 	bl	80025d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	48c6      	ldr	r0, [pc, #792]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001576:	f001 f8ff 	bl	8002778 <HAL_ADC_PollForConversion>
    adcValue2 = HAL_ADC_GetValue(&hadc2);
 800157a:	48c5      	ldr	r0, [pc, #788]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800157c:	f001 f987 	bl	800288e <HAL_ADC_GetValue>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	4bc3      	ldr	r3, [pc, #780]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001586:	801a      	strh	r2, [r3, #0]

    HAL_ADC_Start(&hadc3);
 8001588:	48c3      	ldr	r0, [pc, #780]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800158a:	f001 f823 	bl	80025d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800158e:	f04f 31ff 	mov.w	r1, #4294967295
 8001592:	48c1      	ldr	r0, [pc, #772]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001594:	f001 f8f0 	bl	8002778 <HAL_ADC_PollForConversion>
    adcValue3 = HAL_ADC_GetValue(&hadc3);
 8001598:	48bf      	ldr	r0, [pc, #764]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800159a:	f001 f978 	bl	800288e <HAL_ADC_GetValue>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4bbe      	ldr	r3, [pc, #760]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015a4:	801a      	strh	r2, [r3, #0]
//    phaseC = (float)adcValue3/(0xFFF+1);



    // Ring buffer trigger test
    if (count == 450) {
 80015a6:	4bbe      	ldr	r3, [pc, #760]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80015ae:	d102      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x86>
    	ringBufTrigger = 1;
 80015b0:	4bbc      	ldr	r3, [pc, #752]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    // PLL StartT_SAMPLE
    //--------------------------------------------------------------------------------------------
    angleDq = angleDq + T_SAMPLE*F_RAD;
<<<<<<< HEAD
 8001504:	4bbc      	ldr	r3, [pc, #752]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ed9f 7abc 	vldr	s14, [pc, #752]	; 80017fc <HAL_TIM_PeriodElapsedCallback+0x374>
 800150e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001512:	4bb9      	ldr	r3, [pc, #740]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
    if (angleDq > TWO_PI)
 8001518:	4bb7      	ldr	r3, [pc, #732]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f833 	bl	8000588 <__aeabi_f2d>
 8001522:	a3ab      	add	r3, pc, #684	; (adr r3, 80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff fb16 	bl	8000b58 <__aeabi_dcmpgt>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d012      	beq.n	8001558 <HAL_TIM_PeriodElapsedCallback+0xd0>
    {
    	angleDq = angleDq - TWO_PI;
 8001532:	4bb1      	ldr	r3, [pc, #708]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f826 	bl	8000588 <__aeabi_f2d>
 800153c:	a3a4      	add	r3, pc, #656	; (adr r3, 80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7fe fec1 	bl	80002c8 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb23 	bl	8000b98 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	4aa8      	ldr	r2, [pc, #672]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001556:	6013      	str	r3, [r2, #0]
=======
 80015b6:	4bbc      	ldr	r3, [pc, #752]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ed9f 7abb 	vldr	s14, [pc, #748]	; 80018ac <HAL_TIM_PeriodElapsedCallback+0x37c>
 80015c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c4:	4bb8      	ldr	r3, [pc, #736]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015c6:	edc3 7a00 	vstr	s15, [r3]
    if (angleDq > TWO_PI)
 80015ca:	4bb7      	ldr	r3, [pc, #732]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffda 	bl	8000588 <__aeabi_f2d>
 80015d4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001878 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff fabd 	bl	8000b58 <__aeabi_dcmpgt>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d012      	beq.n	800160a <HAL_TIM_PeriodElapsedCallback+0xda>
    {
    	angleDq = angleDq - TWO_PI;
 80015e4:	4bb0      	ldr	r3, [pc, #704]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffcd 	bl	8000588 <__aeabi_f2d>
 80015ee:	a3a2      	add	r3, pc, #648	; (adr r3, 8001878 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7fe fe68 	bl	80002c8 <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faca 	bl	8000b98 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4aa8      	ldr	r2, [pc, #672]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001608:	6013      	str	r3, [r2, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2120      	movs	r1, #32
 800155c:	489f      	ldr	r0, [pc, #636]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 800155e:	f002 fab1 	bl	8003ac4 <HAL_GPIO_WritePin>
    phaseA = sinf(angleDq);
<<<<<<< HEAD
 8001562:	4ba5      	ldr	r3, [pc, #660]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	f005 fd4a 	bl	8007004 <sinf>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	4ba2      	ldr	r3, [pc, #648]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001576:	edc3 7a00 	vstr	s15, [r3]
	phaseB = sinf(angleDq-RAD_120);
 800157a:	4b9f      	ldr	r3, [pc, #636]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001804 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8001584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001588:	eeb0 0a67 	vmov.f32	s0, s15
 800158c:	f005 fd3a 	bl	8007004 <sinf>
 8001590:	eef0 7a40 	vmov.f32	s15, s0
 8001594:	4b9c      	ldr	r3, [pc, #624]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001596:	edc3 7a00 	vstr	s15, [r3]
//	phaseC = two_to_three_phase(&phaseA, &phaseB);
	phaseC = sinf(angleDq+RAD_120);
 800159a:	4b97      	ldr	r3, [pc, #604]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001804 <HAL_TIM_PeriodElapsedCallback+0x37c>
 80015a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f005 fd2a 	bl	8007004 <sinf>
 80015b0:	eef0 7a40 	vmov.f32	s15, s0
 80015b4:	4b95      	ldr	r3, [pc, #596]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80015b6:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	4887      	ldr	r0, [pc, #540]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80015c0:	f002 fa80 	bl	8003ac4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2120      	movs	r1, #32
 80015c8:	4884      	ldr	r0, [pc, #528]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80015ca:	f002 fa7b 	bl	8003ac4 <HAL_GPIO_WritePin>
    alpha1 = abc_to_alpha(phaseA, phaseB, phaseC);
 80015ce:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	4b8c      	ldr	r3, [pc, #560]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80015dc:	edd3 6a00 	vldr	s13, [r3]
 80015e0:	eeb0 1a66 	vmov.f32	s2, s13
 80015e4:	eef0 0a47 	vmov.f32	s1, s14
 80015e8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ec:	f004 fbdc 	bl	8005da8 <abc_to_alpha>
 80015f0:	eef0 7a40 	vmov.f32	s15, s0
 80015f4:	4b86      	ldr	r3, [pc, #536]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80015f6:	edc3 7a00 	vstr	s15, [r3]
    beta1 = abc_to_beta(phaseA, phaseB, phaseC);
 80015fa:	4b81      	ldr	r3, [pc, #516]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001608:	edd3 6a00 	vldr	s13, [r3]
 800160c:	eeb0 1a66 	vmov.f32	s2, s13
 8001610:	eef0 0a47 	vmov.f32	s1, s14
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	f004 fc16 	bl	8005e48 <abc_to_beta>
 800161c:	eef0 7a40 	vmov.f32	s15, s0
 8001620:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001622:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2120      	movs	r1, #32
 800162a:	486c      	ldr	r0, [pc, #432]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 800162c:	f002 fa4a 	bl	8003ac4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2120      	movs	r1, #32
 8001634:	4869      	ldr	r0, [pc, #420]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001636:	f002 fa45 	bl	8003ac4 <HAL_GPIO_WritePin>
    Vd = alphabeta_to_d(alpha1, beta1, angleDq);
 800163a:	4b75      	ldr	r3, [pc, #468]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	4b74      	ldr	r3, [pc, #464]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001642:	ed93 7a00 	vldr	s14, [r3]
 8001646:	4b6c      	ldr	r3, [pc, #432]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001648:	edd3 6a00 	vldr	s13, [r3]
 800164c:	eeb0 1a66 	vmov.f32	s2, s13
 8001650:	eef0 0a47 	vmov.f32	s1, s14
 8001654:	eeb0 0a67 	vmov.f32	s0, s15
 8001658:	f004 fc3a 	bl	8005ed0 <alphabeta_to_d>
 800165c:	eef0 7a40 	vmov.f32	s15, s0
 8001660:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001662:	edc3 7a00 	vstr	s15, [r3]
    Vq = alphabeta_to_q(alpha1, beta1, angleDq);
 8001666:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	4b69      	ldr	r3, [pc, #420]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001674:	edd3 6a00 	vldr	s13, [r3]
 8001678:	eeb0 1a66 	vmov.f32	s2, s13
 800167c:	eef0 0a47 	vmov.f32	s1, s14
 8001680:	eeb0 0a67 	vmov.f32	s0, s15
 8001684:	f004 fc51 	bl	8005f2a <alphabeta_to_q>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
 800168c:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x394>)
 800168e:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2120      	movs	r1, #32
 8001696:	4851      	ldr	r0, [pc, #324]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001698:	f002 fa14 	bl	8003ac4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2120      	movs	r1, #32
 80016a0:	484e      	ldr	r0, [pc, #312]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80016a2:	f002 fa0f 	bl	8003ac4 <HAL_GPIO_WritePin>
    VdMaf = maf1(Vd);
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	f004 faea 	bl	8005c88 <maf1>
 80016b4:	eef0 7a40 	vmov.f32	s15, s0
 80016b8:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]
	VqMaf = maf2(Vq);
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	f004 fb26 	bl	8005d18 <maf2>
 80016cc:	eef0 7a40 	vmov.f32	s15, s0
 80016d0:	4b54      	ldr	r3, [pc, #336]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80016d2:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2120      	movs	r1, #32
 80016da:	4840      	ldr	r0, [pc, #256]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80016dc:	f002 f9f2 	bl	8003ac4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2120      	movs	r1, #32
 80016e4:	483d      	ldr	r0, [pc, #244]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80016e6:	f002 f9ed 	bl	8003ac4 <HAL_GPIO_WritePin>
	alpha2 = dq_to_alpha(VdMaf, VqMaf, angleDq);
 80016ea:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80016f8:	edd3 6a00 	vldr	s13, [r3]
 80016fc:	eeb0 1a66 	vmov.f32	s2, s13
 8001700:	eef0 0a47 	vmov.f32	s1, s14
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	f004 fc3e 	bl	8005f88 <dq_to_alpha>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	4b45      	ldr	r3, [pc, #276]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001712:	edc3 7a00 	vstr	s15, [r3]
	beta2 = dq_to_beta(VdMaf, VqMaf, angleDq);
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001724:	edd3 6a00 	vldr	s13, [r3]
 8001728:	eeb0 1a66 	vmov.f32	s2, s13
 800172c:	eef0 0a47 	vmov.f32	s1, s14
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	f004 fc55 	bl	8005fe2 <dq_to_beta>
 8001738:	eef0 7a40 	vmov.f32	s15, s0
 800173c:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800173e:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	4825      	ldr	r0, [pc, #148]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001748:	f002 f9bc 	bl	8003ac4 <HAL_GPIO_WritePin>
=======
 800160a:	4ba7      	ldr	r3, [pc, #668]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f005 fd22 	bl	800705c <sinf>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	4ba4      	ldr	r3, [pc, #656]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
	phaseB = sinf(angleDq-RAD_120);
 8001622:	4ba1      	ldr	r3, [pc, #644]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80018b4 <HAL_TIM_PeriodElapsedCallback+0x384>
 800162c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001630:	eeb0 0a67 	vmov.f32	s0, s15
 8001634:	f005 fd12 	bl	800705c <sinf>
 8001638:	eef0 7a40 	vmov.f32	s15, s0
 800163c:	4b9e      	ldr	r3, [pc, #632]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800163e:	edc3 7a00 	vstr	s15, [r3]
//	phaseC = two_to_three_phase(&phaseA, &phaseB);
	phaseC = sinf(angleDq+RAD_120);
 8001642:	4b99      	ldr	r3, [pc, #612]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80018b4 <HAL_TIM_PeriodElapsedCallback+0x384>
 800164c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	f005 fd02 	bl	800705c <sinf>
 8001658:	eef0 7a40 	vmov.f32	s15, s0
 800165c:	4b97      	ldr	r3, [pc, #604]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800165e:	edc3 7a00 	vstr	s15, [r3]

    alpha1 = abc_to_alpha(phaseA, phaseB, phaseC);
 8001662:	4b93      	ldr	r3, [pc, #588]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	4b93      	ldr	r3, [pc, #588]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	4b93      	ldr	r3, [pc, #588]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001670:	edd3 6a00 	vldr	s13, [r3]
 8001674:	eeb0 1a66 	vmov.f32	s2, s13
 8001678:	eef0 0a47 	vmov.f32	s1, s14
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	f004 fbbe 	bl	8005e00 <abc_to_alpha>
 8001684:	eef0 7a40 	vmov.f32	s15, s0
 8001688:	4b8d      	ldr	r3, [pc, #564]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800168a:	edc3 7a00 	vstr	s15, [r3]
    beta1 = abc_to_beta(phaseA, phaseB, phaseC);
 800168e:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800169c:	edd3 6a00 	vldr	s13, [r3]
 80016a0:	eeb0 1a66 	vmov.f32	s2, s13
 80016a4:	eef0 0a47 	vmov.f32	s1, s14
 80016a8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ac:	f004 fbf8 	bl	8005ea0 <abc_to_beta>
 80016b0:	eef0 7a40 	vmov.f32	s15, s0
 80016b4:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]

    Vd = alphabeta_to_d(alpha1, beta1, angleDq);
 80016ba:	4b81      	ldr	r3, [pc, #516]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	4b80      	ldr	r3, [pc, #512]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80016c2:	ed93 7a00 	vldr	s14, [r3]
 80016c6:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80016c8:	edd3 6a00 	vldr	s13, [r3]
 80016cc:	eeb0 1a66 	vmov.f32	s2, s13
 80016d0:	eef0 0a47 	vmov.f32	s1, s14
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	f004 fc26 	bl	8005f28 <alphabeta_to_d>
 80016dc:	eef0 7a40 	vmov.f32	s15, s0
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
    Vq = alphabeta_to_q(alpha1, beta1, angleDq);
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80016ee:	ed93 7a00 	vldr	s14, [r3]
 80016f2:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80016f4:	edd3 6a00 	vldr	s13, [r3]
 80016f8:	eeb0 1a66 	vmov.f32	s2, s13
 80016fc:	eef0 0a47 	vmov.f32	s1, s14
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	f004 fc3d 	bl	8005f82 <alphabeta_to_q>
 8001708:	eef0 7a40 	vmov.f32	s15, s0
 800170c:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800170e:	edc3 7a00 	vstr	s15, [r3]

    VdMaf = maf1(Vd);
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f004 fade 	bl	8005cdc <maf1>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
	VqMaf = maf2(Vq);
 800172a:	4b68      	ldr	r3, [pc, #416]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	f004 fb1a 	bl	8005d6c <maf2>
 8001738:	eef0 7a40 	vmov.f32	s15, s0
 800173c:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800173e:	edc3 7a00 	vstr	s15, [r3]

	alpha2 = dq_to_alpha(VdMaf, VqMaf, angleDq);
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001750:	edd3 6a00 	vldr	s13, [r3]
 8001754:	eeb0 1a66 	vmov.f32	s2, s13
 8001758:	eef0 0a47 	vmov.f32	s1, s14
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	f004 fc3e 	bl	8005fe0 <dq_to_alpha>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800176a:	edc3 7a00 	vstr	s15, [r3]
	beta2 = dq_to_beta(VdMaf, VqMaf, angleDq);
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001776:	ed93 7a00 	vldr	s14, [r3]
 800177a:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800177c:	edd3 6a00 	vldr	s13, [r3]
 8001780:	eeb0 1a66 	vmov.f32	s2, s13
 8001784:	eef0 0a47 	vmov.f32	s1, s14
 8001788:	eeb0 0a67 	vmov.f32	s0, s15
 800178c:	f004 fc55 	bl	800603a <dq_to_beta>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	4b51      	ldr	r3, [pc, #324]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
//    alpha2 = dq_to_alpha(Vd, Vq, angleDq);
//    beta2 = dq_to_beta(Vd, Vq, angleDq);


    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	2120      	movs	r1, #32
 8001750:	4822      	ldr	r0, [pc, #136]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001752:	f002 f9b7 	bl	8003ac4 <HAL_GPIO_WritePin>
    cosGrid = cos_grid(alpha2, beta2);
<<<<<<< HEAD
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	eef0 0a47 	vmov.f32	s1, s14
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	f004 fc67 	bl	800603c <cos_grid>
 800176e:	eef0 7a40 	vmov.f32	s15, s0
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001774:	edc3 7a00 	vstr	s15, [r3]
    sinGrid = sin_grid(alpha2, beta2);
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001780:	ed93 7a00 	vldr	s14, [r3]
 8001784:	eef0 0a47 	vmov.f32	s1, s14
 8001788:	eeb0 0a67 	vmov.f32	s0, s15
 800178c:	f004 fc8c 	bl	80060a8 <sin_grid>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	480f      	ldr	r0, [pc, #60]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017a0:	f002 f990 	bl	8003ac4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2120      	movs	r1, #32
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017aa:	f002 f98b 	bl	8003ac4 <HAL_GPIO_WritePin>
    phaseError = phase_detector(cosGrid, sinGrid, anglePllComp);
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80017bc:	edd3 6a00 	vldr	s13, [r3]
 80017c0:	eeb0 1a66 	vmov.f32	s2, s13
 80017c4:	eef0 0a47 	vmov.f32	s1, s14
 80017c8:	e038      	b.n	800183c <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80017ca:	bf00      	nop
 80017cc:	f3af 8000 	nop.w
 80017d0:	54442c46 	.word	0x54442c46
 80017d4:	401921fb 	.word	0x401921fb
 80017d8:	20000280 	.word	0x20000280
 80017dc:	40020800 	.word	0x40020800
 80017e0:	200002f4 	.word	0x200002f4
 80017e4:	20010dc0 	.word	0x20010dc0
 80017e8:	20000234 	.word	0x20000234
 80017ec:	200002f0 	.word	0x200002f0
 80017f0:	200000a0 	.word	0x200000a0
 80017f4:	2000009c 	.word	0x2000009c
 80017f8:	20010e44 	.word	0x20010e44
 80017fc:	3ea0d97c 	.word	0x3ea0d97c
 8001800:	200002c8 	.word	0x200002c8
 8001804:	40060a92 	.word	0x40060a92
 8001808:	20010df4 	.word	0x20010df4
 800180c:	20010d54 	.word	0x20010d54
 8001810:	200002d4 	.word	0x200002d4
 8001814:	20010dcc 	.word	0x20010dcc
 8001818:	200002cc 	.word	0x200002cc
 800181c:	200002d8 	.word	0x200002d8
 8001820:	2000027c 	.word	0x2000027c
 8001824:	20010db8 	.word	0x20010db8
 8001828:	2000033c 	.word	0x2000033c
 800182c:	20000230 	.word	0x20000230
 8001830:	20010dc4 	.word	0x20010dc4
 8001834:	20010dbc 	.word	0x20010dbc
 8001838:	20010dc8 	.word	0x20010dc8
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	f004 fe58 	bl	80064f4 <phase_detector>
 8001844:	eef0 7a40 	vmov.f32	s15, s0
 8001848:	4bc9      	ldr	r3, [pc, #804]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800184a:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2120      	movs	r1, #32
 8001852:	48c8      	ldr	r0, [pc, #800]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001854:	f002 f936 	bl	8003ac4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2120      	movs	r1, #32
 800185c:	48c5      	ldr	r0, [pc, #788]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 800185e:	f002 f931 	bl	8003ac4 <HAL_GPIO_WritePin>
    anglePll = pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 8001862:	4bc3      	ldr	r3, [pc, #780]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	4bc3      	ldr	r3, [pc, #780]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 800186a:	ed93 7a00 	vldr	s14, [r3]
 800186e:	4bc3      	ldr	r3, [pc, #780]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001870:	edd3 6a00 	vldr	s13, [r3]
 8001874:	4bc2      	ldr	r3, [pc, #776]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001876:	ed93 6a00 	vldr	s12, [r3]
 800187a:	eddf 2ac2 	vldr	s5, [pc, #776]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0x6fc>
 800187e:	eeb0 2a46 	vmov.f32	s4, s12
 8001882:	eef0 1a66 	vmov.f32	s3, s13
 8001886:	eeb0 1a47 	vmov.f32	s2, s14
 800188a:	eddf 0abf 	vldr	s1, [pc, #764]	; 8001b88 <HAL_TIM_PeriodElapsedCallback+0x700>
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	f004 fc41 	bl	8006118 <pi_regulator>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	4bbc      	ldr	r3, [pc, #752]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x704>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2120      	movs	r1, #32
 80018a4:	48b3      	ldr	r0, [pc, #716]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 80018a6:	f002 f90d 	bl	8003ac4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	2120      	movs	r1, #32
 80018ae:	48b1      	ldr	r0, [pc, #708]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 80018b0:	f002 f908 	bl	8003ac4 <HAL_GPIO_WritePin>
    anglePllComp = pi_regulator_comp(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 80018b4:	4bae      	ldr	r3, [pc, #696]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	4baf      	ldr	r3, [pc, #700]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	4bae      	ldr	r3, [pc, #696]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 80018c2:	edd3 6a00 	vldr	s13, [r3]
 80018c6:	4bae      	ldr	r3, [pc, #696]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80018c8:	ed93 6a00 	vldr	s12, [r3]
 80018cc:	eddf 2aad 	vldr	s5, [pc, #692]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0x6fc>
 80018d0:	eeb0 2a46 	vmov.f32	s4, s12
 80018d4:	eef0 1a66 	vmov.f32	s3, s13
 80018d8:	eeb0 1a47 	vmov.f32	s2, s14
 80018dc:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8001b88 <HAL_TIM_PeriodElapsedCallback+0x700>
 80018e0:	eeb0 0a67 	vmov.f32	s0, s15
 80018e4:	f004 fd04 	bl	80062f0 <pi_regulator_comp>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4ba8      	ldr	r3, [pc, #672]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x708>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2120      	movs	r1, #32
 80018f6:	489f      	ldr	r0, [pc, #636]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 80018f8:	f002 f8e4 	bl	8003ac4 <HAL_GPIO_WritePin>
=======
 800179a:	4b4f      	ldr	r3, [pc, #316]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80017a2:	ed93 7a00 	vldr	s14, [r3]
 80017a6:	eef0 0a47 	vmov.f32	s1, s14
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	f004 fc71 	bl	8006094 <cos_grid>
 80017b2:	eef0 7a40 	vmov.f32	s15, s0
 80017b6:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80017b8:	edc3 7a00 	vstr	s15, [r3]
    sinGrid = sin_grid(alpha2, beta2);
 80017bc:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80017c4:	ed93 7a00 	vldr	s14, [r3]
 80017c8:	eef0 0a47 	vmov.f32	s1, s14
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	f004 fc96 	bl	8006100 <sin_grid>
 80017d4:	eef0 7a40 	vmov.f32	s15, s0
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80017da:	edc3 7a00 	vstr	s15, [r3]

    phaseError = phase_detector(cosGrid, sinGrid, anglePllComp);
 80017de:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80017e6:	ed93 7a00 	vldr	s14, [r3]
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80017ec:	edd3 6a00 	vldr	s13, [r3]
 80017f0:	eeb0 1a66 	vmov.f32	s2, s13
 80017f4:	eef0 0a47 	vmov.f32	s1, s14
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	f004 fea6 	bl	800654c <phase_detector>
 8001800:	eef0 7a40 	vmov.f32	s15, s0
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001806:	edc3 7a00 	vstr	s15, [r3]

    anglePll = pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001812:	ed93 7a00 	vldr	s14, [r3]
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001818:	edd3 6a00 	vldr	s13, [r3]
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800181e:	ed93 6a00 	vldr	s12, [r3]
 8001822:	eddf 2a36 	vldr	s5, [pc, #216]	; 80018fc <HAL_TIM_PeriodElapsedCallback+0x3cc>
 8001826:	eeb0 2a46 	vmov.f32	s4, s12
 800182a:	eef0 1a66 	vmov.f32	s3, s13
 800182e:	eeb0 1a47 	vmov.f32	s2, s14
 8001832:	eddf 0a34 	vldr	s1, [pc, #208]	; 8001904 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	f004 fc99 	bl	8006170 <pi_regulator>
 800183e:	eef0 7a40 	vmov.f32	s15, s0
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8001844:	edc3 7a00 	vstr	s15, [r3]
    anglePllComp = pi_regulator_comp(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001856:	edd3 6a00 	vldr	s13, [r3]
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800185c:	ed93 6a00 	vldr	s12, [r3]
 8001860:	eddf 2a26 	vldr	s5, [pc, #152]	; 80018fc <HAL_TIM_PeriodElapsedCallback+0x3cc>
 8001864:	eeb0 2a46 	vmov.f32	s4, s12
 8001868:	eef0 1a66 	vmov.f32	s3, s13
 800186c:	eeb0 1a47 	vmov.f32	s2, s14
 8001870:	e04a      	b.n	8001908 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	54442c46 	.word	0x54442c46
 800187c:	401921fb 	.word	0x401921fb
 8001880:	20000284 	.word	0x20000284
 8001884:	40020800 	.word	0x40020800
 8001888:	200002f8 	.word	0x200002f8
 800188c:	20010e0c 	.word	0x20010e0c
 8001890:	20000238 	.word	0x20000238
 8001894:	200002f4 	.word	0x200002f4
 8001898:	20000344 	.word	0x20000344
 800189c:	20000234 	.word	0x20000234
 80018a0:	200000a0 	.word	0x200000a0
 80018a4:	2000009c 	.word	0x2000009c
 80018a8:	20010e90 	.word	0x20010e90
 80018ac:	3ea0d97c 	.word	0x3ea0d97c
 80018b0:	200002cc 	.word	0x200002cc
 80018b4:	40060a92 	.word	0x40060a92
 80018b8:	20010e40 	.word	0x20010e40
 80018bc:	20010da0 	.word	0x20010da0
 80018c0:	200002d8 	.word	0x200002d8
 80018c4:	20010e18 	.word	0x20010e18
 80018c8:	200002d0 	.word	0x200002d0
 80018cc:	200002dc 	.word	0x200002dc
 80018d0:	20000280 	.word	0x20000280
 80018d4:	20010e04 	.word	0x20010e04
 80018d8:	20000340 	.word	0x20000340
 80018dc:	20000230 	.word	0x20000230
 80018e0:	20010e10 	.word	0x20010e10
 80018e4:	20010e08 	.word	0x20010e08
 80018e8:	20010e14 	.word	0x20010e14
 80018ec:	200002d4 	.word	0x200002d4
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004
 80018f8:	20000008 	.word	0x20000008
 80018fc:	3a83126f 	.word	0x3a83126f
 8001900:	20010e44 	.word	0x20010e44
 8001904:	439d1463 	.word	0x439d1463
 8001908:	ed5f 0a02 	vldr	s1, [pc, #-8]	; 8001904 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 800190c:	eeb0 0a67 	vmov.f32	s0, s15
 8001910:	f004 fd1a 	bl	8006348 <pi_regulator_comp>
 8001914:	eef0 7a40 	vmov.f32	s15, s0
 8001918:	4bb1      	ldr	r3, [pc, #708]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800191a:	edc3 7a00 	vstr	s15, [r3]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    //--------------------------------------------------------------------------------------------
    // PLL End

    // DAC
<<<<<<< HEAD
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2120      	movs	r1, #32
 8001900:	489c      	ldr	r0, [pc, #624]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001902:	f002 f8df 	bl	8003ac4 <HAL_GPIO_WritePin>
    dac_temp = (Vd + 1.05) * 4096.0/3.3;	// +1 for offset for negative values, /3.3 for scaling
 8001906:	4ba3      	ldr	r3, [pc, #652]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe3c 	bl	8000588 <__aeabi_f2d>
 8001910:	a393      	add	r3, pc, #588	; (adr r3, 8001b60 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fcd9 	bl	80002cc <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001928:	f7fe fe86 	bl	8000638 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	a38c      	add	r3, pc, #560	; (adr r3, 8001b68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe ffa7 	bl	800088c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f927 	bl	8000b98 <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
 800194c:	4a93      	ldr	r2, [pc, #588]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x714>)
 800194e:	6013      	str	r3, [r2, #0]
    var_dac = (uint16_t)dac_temp; 			// Convert from float to uint16_t
 8001950:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800195a:	ee17 3a90 	vmov	r3, s15
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b8f      	ldr	r3, [pc, #572]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001962:	801a      	strh	r2, [r3, #0]
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 8001964:	2100      	movs	r1, #0
 8001966:	488f      	ldr	r0, [pc, #572]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001968:	f001 fad5 	bl	8002f16 <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var_dac); // Set dac to digital value
 800196c:	4b8c      	ldr	r3, [pc, #560]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	488b      	ldr	r0, [pc, #556]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001976:	f001 fb20 	bl	8002fba <HAL_DAC_SetValue>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2120      	movs	r1, #32
 800197e:	487d      	ldr	r0, [pc, #500]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001980:	f002 f8a0 	bl	8003ac4 <HAL_GPIO_WritePin>
=======
    var_dac_f = (Vd + 1.05) * 4096.0/3.3;	// +1 for offset for negative values, /3.3 for scaling
 800191e:	4bb1      	ldr	r3, [pc, #708]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe30 	bl	8000588 <__aeabi_f2d>
 8001928:	a3a9      	add	r3, pc, #676	; (adr r3, 8001bd0 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fccd 	bl	80002cc <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	4baa      	ldr	r3, [pc, #680]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001940:	f7fe fe7a 	bl	8000638 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	a3a2      	add	r3, pc, #648	; (adr r3, 8001bd8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe ff9b 	bl	800088c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f91b 	bl	8000b98 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	4aa1      	ldr	r2, [pc, #644]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001966:	6013      	str	r3, [r2, #0]
    var_dac = (uint16_t)var_dac_f; 			// Convert from float to uint16_t
 8001968:	4ba0      	ldr	r3, [pc, #640]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001972:	ee17 3a90 	vmov	r3, s15
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b9d      	ldr	r3, [pc, #628]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 800197a:	801a      	strh	r2, [r3, #0]
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 800197c:	2100      	movs	r1, #0
 800197e:	489d      	ldr	r0, [pc, #628]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001980:	f001 faf3 	bl	8002f6a <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var_dac); // Set dac to digital value
 8001984:	4b9a      	ldr	r3, [pc, #616]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	4899      	ldr	r0, [pc, #612]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800198e:	f001 fb3e 	bl	800300e <HAL_DAC_SetValue>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    // Ring buffer
//    ringBufData[0] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
//    ringBufData[1] = ((float)	anglePllComp	* (float)RING_BUF_SCALING);
//    ringBufData[2] = ((float)	angleDq 		* (float)RING_BUF_SCALING);
//    ringBufData[3] = ((float)	beta1 			* (float)RING_BUF_SCALING);
    ringBufData[0] 	= ((float)	phaseA 			* (float)RING_BUF_SCALING);
<<<<<<< HEAD
 8001984:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 800198e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001996:	ee17 3a90 	vmov	r3, s15
 800199a:	b21a      	sxth	r2, r3
 800199c:	4b84      	ldr	r3, [pc, #528]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800199e:	801a      	strh	r2, [r3, #0]
    ringBufData[1] 	= ((float)	phaseB			* (float)RING_BUF_SCALING);
 80019a0:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x72c>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 80019aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	4b7d      	ldr	r3, [pc, #500]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80019ba:	805a      	strh	r2, [r3, #2]
    ringBufData[2] 	= ((float)	phaseC 			* (float)RING_BUF_SCALING);
 80019bc:	4b7e      	ldr	r3, [pc, #504]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ce:	ee17 3a90 	vmov	r3, s15
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80019d6:	809a      	strh	r2, [r3, #4]
    ringBufData[3] 	= ((float)	alpha1 			* (float)RING_BUF_SCALING);
 80019d8:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x734>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 80019e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ea:	ee17 3a90 	vmov	r3, s15
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80019f2:	80da      	strh	r2, [r3, #6]
    ringBufData[4] 	= ((float)	beta1 			* (float)RING_BUF_SCALING);
 80019f4:	4b72      	ldr	r3, [pc, #456]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x738>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 80019fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001a0e:	811a      	strh	r2, [r3, #8]
    ringBufData[5] 	= ((float)	Vd 				* (float)RING_BUF_SCALING);
 8001a10:	4b60      	ldr	r3, [pc, #384]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a22:	ee17 3a90 	vmov	r3, s15
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001a2a:	815a      	strh	r2, [r3, #10]
    ringBufData[6] 	= ((float)	Vq				* (float)RING_BUF_SCALING);
 8001a2c:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001a46:	819a      	strh	r2, [r3, #12]
    ringBufData[7] 	= ((float)	VdMaf 			* (float)RING_BUF_SCALING);
 8001a48:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5a:	ee17 3a90 	vmov	r3, s15
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001a62:	81da      	strh	r2, [r3, #14]
    ringBufData[8] 	= ((float)	VqMaf 			* (float)RING_BUF_SCALING);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x744>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a76:	ee17 3a90 	vmov	r3, s15
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001a7e:	821a      	strh	r2, [r3, #16]
    ringBufData[9] 	= ((float)	alpha2 			* (float)RING_BUF_SCALING);
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a92:	ee17 3a90 	vmov	r3, s15
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001a9a:	825a      	strh	r2, [r3, #18]
    ringBufData[10] = ((float)	beta2			* (float)RING_BUF_SCALING);
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aae:	ee17 3a90 	vmov	r3, s15
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001ab6:	829a      	strh	r2, [r3, #20]
    ringBufData[11] = ((float)	cosGrid			* (float)RING_BUF_SCALING);
 8001ab8:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aca:	ee17 3a90 	vmov	r3, s15
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001ad2:	82da      	strh	r2, [r3, #22]
    ringBufData[12] = ((float)	sinGrid 		* (float)RING_BUF_SCALING);
 8001ad4:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae6:	ee17 3a90 	vmov	r3, s15
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001aee:	831a      	strh	r2, [r3, #24]
    ringBufData[13] = ((float)	phaseError 		* (float)RING_BUF_SCALING);
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b02:	ee17 3a90 	vmov	r3, s15
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001b0a:	835a      	strh	r2, [r3, #26]
    ringBufData[14] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 3a90 	vmov	r3, s15
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001b26:	839a      	strh	r2, [r3, #28]
    ringBufData[15] = ((float)	anglePllComp	* (float)RING_BUF_SCALING);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3a:	ee17 3a90 	vmov	r3, s15
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001b42:	83da      	strh	r2, [r3, #30]
    ringBufData[16] = ((float)	angleDq			* (float)RING_BUF_SCALING);
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001bac <HAL_TIM_PeriodElapsedCallback+0x724>
 8001b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b56:	ee17 3a90 	vmov	r3, s15
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	e042      	b.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x75c>
 8001b5e:	bf00      	nop
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	3ff0cccc 	.word	0x3ff0cccc
 8001b68:	66666666 	.word	0x66666666
 8001b6c:	400a6666 	.word	0x400a6666
 8001b70:	200002d0 	.word	0x200002d0
 8001b74:	40020800 	.word	0x40020800
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	20000008 	.word	0x20000008
 8001b84:	3a83126f 	.word	0x3a83126f
 8001b88:	439d1463 	.word	0x439d1463
 8001b8c:	20010df8 	.word	0x20010df8
 8001b90:	20010dc8 	.word	0x20010dc8
 8001b94:	200002cc 	.word	0x200002cc
 8001b98:	40b00000 	.word	0x40b00000
 8001b9c:	200000a4 	.word	0x200000a4
 8001ba0:	200000a8 	.word	0x200000a8
 8001ba4:	200003a0 	.word	0x200003a0
 8001ba8:	200002c8 	.word	0x200002c8
 8001bac:	459c4000 	.word	0x459c4000
 8001bb0:	20010dd0 	.word	0x20010dd0
 8001bb4:	20010df4 	.word	0x20010df4
 8001bb8:	20010d54 	.word	0x20010d54
 8001bbc:	200002d4 	.word	0x200002d4
 8001bc0:	20010dcc 	.word	0x20010dcc
 8001bc4:	200002d8 	.word	0x200002d8
 8001bc8:	2000027c 	.word	0x2000027c
 8001bcc:	20010db8 	.word	0x20010db8
 8001bd0:	2000033c 	.word	0x2000033c
 8001bd4:	20000230 	.word	0x20000230
 8001bd8:	20010dc4 	.word	0x20010dc4
 8001bdc:	20010dbc 	.word	0x20010dbc
 8001be0:	20010e44 	.word	0x20010e44
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8001be6:	841a      	strh	r2, [r3, #32]


    ringBufFlag = circular_buffer(RING_BUF_LEN, ringBuf, ringBufData, ringBufTrigger, 0.25, &readStart);
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8001bee:	9200      	str	r2, [sp, #0]
 8001bf0:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 8001bf6:	4917      	ldr	r1, [pc, #92]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 8001bf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bfc:	f004 fca8 	bl	8006550 <circular_buffer>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 8001c06:	701a      	strb	r2, [r3, #0]
=======
 8001992:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 800199c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a4:	ee17 3a90 	vmov	r3, s15
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	4b95      	ldr	r3, [pc, #596]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 80019ac:	801a      	strh	r2, [r3, #0]
    ringBufData[1] 	= ((float)	phaseB			* (float)RING_BUF_SCALING);
 80019ae:	4b95      	ldr	r3, [pc, #596]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 80019b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c0:	ee17 3a90 	vmov	r3, s15
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b8e      	ldr	r3, [pc, #568]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 80019c8:	805a      	strh	r2, [r3, #2]
    ringBufData[2] 	= ((float)	phaseC 			* (float)RING_BUF_SCALING);
 80019ca:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 80019d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019dc:	ee17 3a90 	vmov	r3, s15
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b87      	ldr	r3, [pc, #540]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 80019e4:	809a      	strh	r2, [r3, #4]
    ringBufData[3] 	= ((float)	alpha1 			* (float)RING_BUF_SCALING);
 80019e6:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f8:	ee17 3a90 	vmov	r3, s15
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	4b80      	ldr	r3, [pc, #512]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001a00:	80da      	strh	r2, [r3, #6]
    ringBufData[4] 	= ((float)	beta1 			* (float)RING_BUF_SCALING);
 8001a02:	4b83      	ldr	r3, [pc, #524]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a14:	ee17 3a90 	vmov	r3, s15
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001a1c:	811a      	strh	r2, [r3, #8]
    ringBufData[5] 	= ((float)	Vd 				* (float)RING_BUF_SCALING);
 8001a1e:	4b71      	ldr	r3, [pc, #452]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a30:	ee17 3a90 	vmov	r3, s15
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001a38:	815a      	strh	r2, [r3, #10]
    ringBufData[6] 	= ((float)	Vq				* (float)RING_BUF_SCALING);
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4c:	ee17 3a90 	vmov	r3, s15
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	4b6b      	ldr	r3, [pc, #428]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001a54:	819a      	strh	r2, [r3, #12]
    ringBufData[7] 	= ((float)	VdMaf 			* (float)RING_BUF_SCALING);
 8001a56:	4b70      	ldr	r3, [pc, #448]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a68:	ee17 3a90 	vmov	r3, s15
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b64      	ldr	r3, [pc, #400]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001a70:	81da      	strh	r2, [r3, #14]
    ringBufData[8] 	= ((float)	VqMaf 			* (float)RING_BUF_SCALING);
 8001a72:	4b6a      	ldr	r3, [pc, #424]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a84:	ee17 3a90 	vmov	r3, s15
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001a8c:	821a      	strh	r2, [r3, #16]
    ringBufData[9] 	= ((float)	alpha2 			* (float)RING_BUF_SCALING);
 8001a8e:	4b64      	ldr	r3, [pc, #400]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001aa8:	825a      	strh	r2, [r3, #18]
    ringBufData[10] = ((float)	beta2			* (float)RING_BUF_SCALING);
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001abc:	ee17 3a90 	vmov	r3, s15
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ac4:	829a      	strh	r2, [r3, #20]
    ringBufData[11] = ((float)	cosGrid			* (float)RING_BUF_SCALING);
 8001ac6:	4b58      	ldr	r3, [pc, #352]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad8:	ee17 3a90 	vmov	r3, s15
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	4b48      	ldr	r3, [pc, #288]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ae0:	82da      	strh	r2, [r3, #22]
    ringBufData[12] = ((float)	sinGrid 		* (float)RING_BUF_SCALING);
 8001ae2:	4b52      	ldr	r3, [pc, #328]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af4:	ee17 3a90 	vmov	r3, s15
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001afc:	831a      	strh	r2, [r3, #24]
    ringBufData[13] = ((float)	phaseError 		* (float)RING_BUF_SCALING);
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b10:	ee17 3a90 	vmov	r3, s15
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b18:	835a      	strh	r2, [r3, #26]
    ringBufData[14] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2c:	ee17 3a90 	vmov	r3, s15
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b34:	839a      	strh	r2, [r3, #28]
    ringBufData[15] = ((float)	anglePllComp	* (float)RING_BUF_SCALING);
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b48:	ee17 3a90 	vmov	r3, s15
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b50:	83da      	strh	r2, [r3, #30]
    ringBufData[16] = ((float)	angleDq			* (float)RING_BUF_SCALING);
 8001b52:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001bfc <HAL_TIM_PeriodElapsedCallback+0x6cc>
 8001b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b64:	ee17 3a90 	vmov	r3, s15
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b6c:	841a      	strh	r2, [r3, #32]


    ringBufFlag = circular_buffer(RING_BUF_LEN, ringBuf, ringBufData, ringBufTrigger, 0.25, &readStart);
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4a33      	ldr	r2, [pc, #204]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001b7c:	4931      	ldr	r1, [pc, #196]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001b7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b82:	f004 fd11 	bl	80065a8 <circular_buffer>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001b8c:	701a      	strb	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e



    // Count up to size of sine array
	if (count < (F_SAMPLE*T_SINE))
<<<<<<< HEAD
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c14:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001c60 <HAL_TIM_PeriodElapsedCallback+0x7d8>
 8001c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	d506      	bpl.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x7a8>
	{
	  count++;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	e002      	b.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x7ae>
=======
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001c50 <HAL_TIM_PeriodElapsedCallback+0x720>
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	d506      	bpl.n	8001bb6 <HAL_TIM_PeriodElapsedCallback+0x686>
	{
	  count++;
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001bb2:	801a      	strh	r2, [r3, #0]
 8001bb4:	e002      	b.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0x68c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
	}
	else
	{
	  count = 0;
<<<<<<< HEAD
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	801a      	strh	r2, [r3, #0]
=======
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	801a      	strh	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
	}


	// Reset pin: Stop timer
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
<<<<<<< HEAD
 8001c36:	2200      	movs	r2, #0
 8001c38:	2140      	movs	r1, #64	; 0x40
 8001c3a:	480a      	ldr	r0, [pc, #40]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8001c3c:	f001 ff42 	bl	8003ac4 <HAL_GPIO_WritePin>
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20010dd0 	.word	0x20010dd0
 8001c4c:	2000009c 	.word	0x2000009c
 8001c50:	20010e40 	.word	0x20010e40
 8001c54:	200003b4 	.word	0x200003b4
 8001c58:	2000009d 	.word	0x2000009d
 8001c5c:	200000a0 	.word	0x200000a0
 8001c60:	447a0000 	.word	0x447a0000
 8001c64:	40020800 	.word	0x40020800

08001c68 <printRingBuf>:
=======
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2140      	movs	r1, #64	; 0x40
 8001bc0:	4824      	ldr	r0, [pc, #144]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8001bc2:	f001 ffa9 	bl	8003b18 <HAL_GPIO_WritePin>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	cccccccd 	.word	0xcccccccd
 8001bd4:	3ff0cccc 	.word	0x3ff0cccc
 8001bd8:	66666666 	.word	0x66666666
 8001bdc:	400a6666 	.word	0x400a6666
 8001be0:	20010e14 	.word	0x20010e14
 8001be4:	200002d0 	.word	0x200002d0
 8001be8:	40b00000 	.word	0x40b00000
 8001bec:	200000a4 	.word	0x200000a4
 8001bf0:	200000a8 	.word	0x200000a8
 8001bf4:	200003ec 	.word	0x200003ec
 8001bf8:	200002cc 	.word	0x200002cc
 8001bfc:	459c4000 	.word	0x459c4000
 8001c00:	20010e1c 	.word	0x20010e1c
 8001c04:	20010e40 	.word	0x20010e40
 8001c08:	20010da0 	.word	0x20010da0
 8001c0c:	200002d8 	.word	0x200002d8
 8001c10:	20010e18 	.word	0x20010e18
 8001c14:	200002dc 	.word	0x200002dc
 8001c18:	20000280 	.word	0x20000280
 8001c1c:	20010e04 	.word	0x20010e04
 8001c20:	20000340 	.word	0x20000340
 8001c24:	20000230 	.word	0x20000230
 8001c28:	20010e10 	.word	0x20010e10
 8001c2c:	20010e08 	.word	0x20010e08
 8001c30:	200002d4 	.word	0x200002d4
 8001c34:	20010e44 	.word	0x20010e44
 8001c38:	20010e90 	.word	0x20010e90
 8001c3c:	2000009c 	.word	0x2000009c
 8001c40:	20010e8c 	.word	0x20010e8c
 8001c44:	20000400 	.word	0x20000400
 8001c48:	2000009d 	.word	0x2000009d
 8001c4c:	200000a0 	.word	0x200000a0
 8001c50:	447a0000 	.word	0x447a0000
 8001c54:	40020800 	.word	0x40020800

08001c58 <printRingBuf>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
//  Description :   prints the ring buffer values
//  Parameters  :   uint16_t bufferSize: pointer to an int to store the number
//                  uint16_t circularBuffer: Pointer to circular buffer array
//                  uint16_t readStart: starting index of the circular buffer
//  Returns     :	none
uint8_t printRingBuf(uint16_t bufferSize, int16_t circularBuffer[][17], uint16_t readStart) {
<<<<<<< HEAD
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	b09f      	sub	sp, #124	; 0x7c
 8001c6c:	af10      	add	r7, sp, #64	; 0x40
 8001c6e:	4603      	mov	r3, r0
 8001c70:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c72:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c74:	4613      	mov	r3, r2
 8001c76:	85bb      	strh	r3, [r7, #44]	; 0x2c
=======
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5a:	b09f      	sub	sp, #124	; 0x7c
 8001c5c:	af10      	add	r7, sp, #64	; 0x40
 8001c5e:	4603      	mov	r3, r0
 8001c60:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c64:	4613      	mov	r3, r2
 8001c66:	85bb      	strh	r3, [r7, #44]	; 0x2c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    static uint8_t init         =   0;

    static char msg[150];	// Initialize string to be written to USART

    // Initialize readIndex to readStart
    if (!init) {
<<<<<<< HEAD
 8001c78:	4b9d      	ldr	r3, [pc, #628]	; (8001ef0 <printRingBuf+0x288>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <printRingBuf+0x24>
        readIndex = readStart;
 8001c80:	4a9c      	ldr	r2, [pc, #624]	; (8001ef4 <printRingBuf+0x28c>)
 8001c82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c84:	8013      	strh	r3, [r2, #0]
        init = 1;
 8001c86:	4b9a      	ldr	r3, [pc, #616]	; (8001ef0 <printRingBuf+0x288>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
    }

	sprintf(msg, "phaseA, phaseB, phaseC, alpha1, beta1, Vd, Vq, VdMaf, VqMaf, alpha2, beta2, cosGrid, sinGrid, phaseError, anglePll, anglePllComp, angleDq\r\n");
 8001c8c:	499a      	ldr	r1, [pc, #616]	; (8001ef8 <printRingBuf+0x290>)
 8001c8e:	489b      	ldr	r0, [pc, #620]	; (8001efc <printRingBuf+0x294>)
 8001c90:	f004 fd4a 	bl	8006728 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001c94:	4899      	ldr	r0, [pc, #612]	; (8001efc <printRingBuf+0x294>)
 8001c96:	f7fe fabb 	bl	8000210 <strlen>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	4996      	ldr	r1, [pc, #600]	; (8001efc <printRingBuf+0x294>)
 8001ca4:	4896      	ldr	r0, [pc, #600]	; (8001f00 <printRingBuf+0x298>)
 8001ca6:	f003 fa34 	bl	8005112 <HAL_UART_Transmit>


    for (int i = 0; i < bufferSize; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
 8001cae:	e115      	b.n	8001edc <printRingBuf+0x274>
=======
 8001c68:	4b9d      	ldr	r3, [pc, #628]	; (8001ee0 <printRingBuf+0x288>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <printRingBuf+0x24>
        readIndex = readStart;
 8001c70:	4a9c      	ldr	r2, [pc, #624]	; (8001ee4 <printRingBuf+0x28c>)
 8001c72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c74:	8013      	strh	r3, [r2, #0]
        init = 1;
 8001c76:	4b9a      	ldr	r3, [pc, #616]	; (8001ee0 <printRingBuf+0x288>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
    }

	sprintf(msg, "phaseA, phaseB, phaseC, alpha1, beta1, Vd, Vq, VdMaf, VqMaf, alpha2, beta2, cosGrid, sinGrid, phaseError, anglePll, anglePllComp, angleDq\r\n");
 8001c7c:	499a      	ldr	r1, [pc, #616]	; (8001ee8 <printRingBuf+0x290>)
 8001c7e:	489b      	ldr	r0, [pc, #620]	; (8001eec <printRingBuf+0x294>)
 8001c80:	f004 fd7e 	bl	8006780 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001c84:	4899      	ldr	r0, [pc, #612]	; (8001eec <printRingBuf+0x294>)
 8001c86:	f7fe fac3 	bl	8000210 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	4996      	ldr	r1, [pc, #600]	; (8001eec <printRingBuf+0x294>)
 8001c94:	4896      	ldr	r0, [pc, #600]	; (8001ef0 <printRingBuf+0x298>)
 8001c96:	f003 fa66 	bl	8005166 <HAL_UART_Transmit>


    for (int i = 0; i < bufferSize; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9e:	e115      	b.n	8001ecc <printRingBuf+0x274>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        //printf("Buffervalue at index [%d] = %d\n", readIndex, circularBuffer[readIndex]);

//    	sprintf(msg, "%d, %d, %d, %d\r\n", circularBuffer[readIndex][0], circularBuffer[readIndex][1],
//									circularBuffer[readIndex][2], circularBuffer[readIndex][3]);	// Update message for usart print
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
											circularBuffer[readIndex][0], 	circularBuffer[readIndex][1],
<<<<<<< HEAD
 8001cb0:	4b90      	ldr	r3, [pc, #576]	; (8001ef4 <printRingBuf+0x28c>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001cc8:	469c      	mov	ip, r3
											circularBuffer[readIndex][0], 	circularBuffer[readIndex][1],
 8001cca:	4b8a      	ldr	r3, [pc, #552]	; (8001ef4 <printRingBuf+0x28c>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	4413      	add	r3, r2
 8001cde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001ce2:	469e      	mov	lr, r3
											circularBuffer[readIndex][2], 	circularBuffer[readIndex][3],
 8001ce4:	4b83      	ldr	r3, [pc, #524]	; (8001ef4 <printRingBuf+0x28c>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4413      	add	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001cfc:	461e      	mov	r6, r3
											circularBuffer[readIndex][2], 	circularBuffer[readIndex][3],
 8001cfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <printRingBuf+0x28c>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	4613      	mov	r3, r2
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	4413      	add	r3, r2
 8001d12:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
											circularBuffer[readIndex][4], 	circularBuffer[readIndex][5],
 8001d18:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <printRingBuf+0x28c>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	461a      	mov	r2, r3
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d30:	623b      	str	r3, [r7, #32]
											circularBuffer[readIndex][4], 	circularBuffer[readIndex][5],
 8001d32:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <printRingBuf+0x28c>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	4613      	mov	r3, r2
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	461a      	mov	r2, r3
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	4413      	add	r3, r2
 8001d46:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d4a:	61fb      	str	r3, [r7, #28]
											circularBuffer[readIndex][6], 	circularBuffer[readIndex][7],
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <printRingBuf+0x28c>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	4413      	add	r3, r2
 8001d60:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d64:	61bb      	str	r3, [r7, #24]
											circularBuffer[readIndex][6], 	circularBuffer[readIndex][7],
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <printRingBuf+0x28c>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	461a      	mov	r2, r3
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	4413      	add	r3, r2
 8001d7a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d7e:	617b      	str	r3, [r7, #20]
											circularBuffer[readIndex][8], 	circularBuffer[readIndex][9],
 8001d80:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <printRingBuf+0x28c>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4613      	mov	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	4413      	add	r3, r2
 8001d94:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d98:	613b      	str	r3, [r7, #16]
											circularBuffer[readIndex][8], 	circularBuffer[readIndex][9],
 8001d9a:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <printRingBuf+0x28c>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	461a      	mov	r2, r3
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	4413      	add	r3, r2
 8001dae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001db2:	60fb      	str	r3, [r7, #12]
											circularBuffer[readIndex][10], 	circularBuffer[readIndex][11],
 8001db4:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <printRingBuf+0x28c>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001dcc:	60bb      	str	r3, [r7, #8]
											circularBuffer[readIndex][10], 	circularBuffer[readIndex][11],
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <printRingBuf+0x28c>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4413      	add	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	461a      	mov	r2, r3
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	4413      	add	r3, r2
 8001de2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001de6:	607b      	str	r3, [r7, #4]
											circularBuffer[readIndex][12], 	circularBuffer[readIndex][13],
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <printRingBuf+0x28c>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4613      	mov	r3, r2
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	461a      	mov	r2, r3
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e00:	461d      	mov	r5, r3
											circularBuffer[readIndex][12], 	circularBuffer[readIndex][13],
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <printRingBuf+0x28c>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	4413      	add	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	461a      	mov	r2, r3
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	4413      	add	r3, r2
 8001e16:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e1a:	461c      	mov	r4, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <printRingBuf+0x28c>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	4413      	add	r3, r2
 8001e30:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e34:	4618      	mov	r0, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <printRingBuf+0x28c>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	461a      	mov	r2, r3
 8001e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e48:	4413      	add	r3, r2
 8001e4a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e4e:	4619      	mov	r1, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <printRingBuf+0x28c>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4613      	mov	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e62:	4413      	add	r3, r2
 8001e64:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e68:	930e      	str	r3, [sp, #56]	; 0x38
 8001e6a:	910d      	str	r1, [sp, #52]	; 0x34
 8001e6c:	900c      	str	r0, [sp, #48]	; 0x30
 8001e6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001e70:	950a      	str	r5, [sp, #40]	; 0x28
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	9209      	str	r2, [sp, #36]	; 0x24
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	9208      	str	r2, [sp, #32]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	9207      	str	r2, [sp, #28]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	9206      	str	r2, [sp, #24]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	9205      	str	r2, [sp, #20]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	9204      	str	r2, [sp, #16]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	9203      	str	r2, [sp, #12]
 8001e8e:	6a3a      	ldr	r2, [r7, #32]
 8001e90:	9202      	str	r2, [sp, #8]
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	9600      	str	r6, [sp, #0]
 8001e98:	4673      	mov	r3, lr
 8001e9a:	4662      	mov	r2, ip
 8001e9c:	4919      	ldr	r1, [pc, #100]	; (8001f04 <printRingBuf+0x29c>)
 8001e9e:	4817      	ldr	r0, [pc, #92]	; (8001efc <printRingBuf+0x294>)
 8001ea0:	f004 fc42 	bl	8006728 <siprintf>
=======
 8001ca0:	4b90      	ldr	r3, [pc, #576]	; (8001ee4 <printRingBuf+0x28c>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001cb8:	469c      	mov	ip, r3
											circularBuffer[readIndex][0], 	circularBuffer[readIndex][1],
 8001cba:	4b8a      	ldr	r3, [pc, #552]	; (8001ee4 <printRingBuf+0x28c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	4413      	add	r3, r2
 8001cce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001cd2:	469e      	mov	lr, r3
											circularBuffer[readIndex][2], 	circularBuffer[readIndex][3],
 8001cd4:	4b83      	ldr	r3, [pc, #524]	; (8001ee4 <printRingBuf+0x28c>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4613      	mov	r3, r2
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001cec:	461e      	mov	r6, r3
											circularBuffer[readIndex][2], 	circularBuffer[readIndex][3],
 8001cee:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <printRingBuf+0x28c>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	4413      	add	r3, r2
 8001d02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
											circularBuffer[readIndex][4], 	circularBuffer[readIndex][5],
 8001d08:	4b76      	ldr	r3, [pc, #472]	; (8001ee4 <printRingBuf+0x28c>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4613      	mov	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	461a      	mov	r2, r3
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d20:	623b      	str	r3, [r7, #32]
											circularBuffer[readIndex][4], 	circularBuffer[readIndex][5],
 8001d22:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <printRingBuf+0x28c>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	461a      	mov	r2, r3
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	4413      	add	r3, r2
 8001d36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d3a:	61fb      	str	r3, [r7, #28]
											circularBuffer[readIndex][6], 	circularBuffer[readIndex][7],
 8001d3c:	4b69      	ldr	r3, [pc, #420]	; (8001ee4 <printRingBuf+0x28c>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4413      	add	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	4413      	add	r3, r2
 8001d50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d54:	61bb      	str	r3, [r7, #24]
											circularBuffer[readIndex][6], 	circularBuffer[readIndex][7],
 8001d56:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <printRingBuf+0x28c>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	461a      	mov	r2, r3
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	4413      	add	r3, r2
 8001d6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d6e:	617b      	str	r3, [r7, #20]
											circularBuffer[readIndex][8], 	circularBuffer[readIndex][9],
 8001d70:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <printRingBuf+0x28c>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	4413      	add	r3, r2
 8001d84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d88:	613b      	str	r3, [r7, #16]
											circularBuffer[readIndex][8], 	circularBuffer[readIndex][9],
 8001d8a:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <printRingBuf+0x28c>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	461a      	mov	r2, r3
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001da2:	60fb      	str	r3, [r7, #12]
											circularBuffer[readIndex][10], 	circularBuffer[readIndex][11],
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <printRingBuf+0x28c>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4613      	mov	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	461a      	mov	r2, r3
 8001db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db6:	4413      	add	r3, r2
 8001db8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001dbc:	60bb      	str	r3, [r7, #8]
											circularBuffer[readIndex][10], 	circularBuffer[readIndex][11],
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <printRingBuf+0x28c>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001dd6:	607b      	str	r3, [r7, #4]
											circularBuffer[readIndex][12], 	circularBuffer[readIndex][13],
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <printRingBuf+0x28c>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4613      	mov	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	461a      	mov	r2, r3
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	4413      	add	r3, r2
 8001dec:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001df0:	461d      	mov	r5, r3
											circularBuffer[readIndex][12], 	circularBuffer[readIndex][13],
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <printRingBuf+0x28c>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4613      	mov	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	461a      	mov	r2, r3
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	4413      	add	r3, r2
 8001e06:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e0a:	461c      	mov	r4, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001e0c:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <printRingBuf+0x28c>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4613      	mov	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4413      	add	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	4413      	add	r3, r2
 8001e20:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e24:	4618      	mov	r0, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001e26:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <printRingBuf+0x28c>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	4413      	add	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	461a      	mov	r2, r3
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	4413      	add	r3, r2
 8001e3a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e3e:	4619      	mov	r1, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <printRingBuf+0x28c>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	4413      	add	r3, r2
 8001e54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001e58:	930e      	str	r3, [sp, #56]	; 0x38
 8001e5a:	910d      	str	r1, [sp, #52]	; 0x34
 8001e5c:	900c      	str	r0, [sp, #48]	; 0x30
 8001e5e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001e60:	950a      	str	r5, [sp, #40]	; 0x28
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	9209      	str	r2, [sp, #36]	; 0x24
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	9208      	str	r2, [sp, #32]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	9207      	str	r2, [sp, #28]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	9206      	str	r2, [sp, #24]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	9205      	str	r2, [sp, #20]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	9204      	str	r2, [sp, #16]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	9203      	str	r2, [sp, #12]
 8001e7e:	6a3a      	ldr	r2, [r7, #32]
 8001e80:	9202      	str	r2, [sp, #8]
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	9600      	str	r6, [sp, #0]
 8001e88:	4673      	mov	r3, lr
 8001e8a:	4662      	mov	r2, ip
 8001e8c:	4919      	ldr	r1, [pc, #100]	; (8001ef4 <printRingBuf+0x29c>)
 8001e8e:	4817      	ldr	r0, [pc, #92]	; (8001eec <printRingBuf+0x294>)
 8001e90:	f004 fc76 	bl	8006780 <siprintf>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    	// sprintf(msg, "[%d] = %d\r\n", readIndex, circularBuffer[readIndex]);	// Update message for usart print


    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
<<<<<<< HEAD
 8001ea4:	4815      	ldr	r0, [pc, #84]	; (8001efc <printRingBuf+0x294>)
 8001ea6:	f7fe f9b3 	bl	8000210 <strlen>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	4912      	ldr	r1, [pc, #72]	; (8001efc <printRingBuf+0x294>)
 8001eb4:	4812      	ldr	r0, [pc, #72]	; (8001f00 <printRingBuf+0x298>)
 8001eb6:	f003 f92c 	bl	8005112 <HAL_UART_Transmit>
=======
 8001e94:	4815      	ldr	r0, [pc, #84]	; (8001eec <printRingBuf+0x294>)
 8001e96:	f7fe f9bb 	bl	8000210 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	4912      	ldr	r1, [pc, #72]	; (8001eec <printRingBuf+0x294>)
 8001ea4:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <printRingBuf+0x298>)
 8001ea6:	f003 f95e 	bl	8005166 <HAL_UART_Transmit>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    	huart2.Instance->CR3 |= USART_CR3_DMAT;
    	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg,
    							(uint32_t)&huart2.Instance->DR, strlen(msg));
		*/

        readIndex++;
<<<<<<< HEAD
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <printRingBuf+0x28c>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <printRingBuf+0x28c>)
 8001ec4:	801a      	strh	r2, [r3, #0]
        if (readIndex > bufferSize) {
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <printRingBuf+0x28c>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d202      	bcs.n	8001ed6 <printRingBuf+0x26e>
            readIndex = 0;
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <printRingBuf+0x28c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferSize; i++)
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed8:	3301      	adds	r3, #1
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
 8001edc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f6ff aee5 	blt.w	8001cb0 <printRingBuf+0x48>
        }
    }
    return 1;
 8001ee6:	2301      	movs	r3, #1

}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	373c      	adds	r7, #60	; 0x3c
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef0:	200000aa 	.word	0x200000aa
 8001ef4:	200000ac 	.word	0x200000ac
 8001ef8:	08007cc4 	.word	0x08007cc4
 8001efc:	200000b0 	.word	0x200000b0
 8001f00:	20010dfc 	.word	0x20010dfc
 8001f04:	08007d50 	.word	0x08007d50

08001f08 <Error_Handler>:
=======
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <printRingBuf+0x28c>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <printRingBuf+0x28c>)
 8001eb4:	801a      	strh	r2, [r3, #0]
        if (readIndex > bufferSize) {
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <printRingBuf+0x28c>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d202      	bcs.n	8001ec6 <printRingBuf+0x26e>
            readIndex = 0;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <printRingBuf+0x28c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferSize; i++)
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	3301      	adds	r3, #1
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
 8001ecc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f6ff aee5 	blt.w	8001ca0 <printRingBuf+0x48>
        }
    }
    return 1;
 8001ed6:	2301      	movs	r3, #1

}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	373c      	adds	r7, #60	; 0x3c
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee0:	200000aa 	.word	0x200000aa
 8001ee4:	200000ac 	.word	0x200000ac
 8001ee8:	08007d1c 	.word	0x08007d1c
 8001eec:	200000b0 	.word	0x200000b0
 8001ef0:	20010e48 	.word	0x20010e48
 8001ef4:	08007da8 	.word	0x08007da8

08001ef8 <Error_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
=======
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
=======
 8001efc:	b672      	cpsid	i
}
 8001efe:	bf00      	nop
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001f10:	e7fe      	b.n	8001f10 <Error_Handler+0x8>
	...

08001f14 <HAL_MspInit>:
=======
 8001f00:	e7fe      	b.n	8001f00 <Error_Handler+0x8>
	...

08001f04 <HAL_MspInit>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
=======
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
=======
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_ADC_MspInit>:
=======
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_ADC_MspInit>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a45      	ldr	r2, [pc, #276]	; (8002098 <HAL_ADC_MspInit+0x134>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d157      	bne.n	8002036 <HAL_ADC_MspInit+0xd2>
=======
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	; 0x38
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a5c      	ldr	r2, [pc, #368]	; (80020e4 <HAL_ADC_MspInit+0x190>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d157      	bne.n	8002026 <HAL_ADC_MspInit+0xd2>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	4b44      	ldr	r3, [pc, #272]	; (800209c <HAL_ADC_MspInit+0x138>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a43      	ldr	r2, [pc, #268]	; (800209c <HAL_ADC_MspInit+0x138>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_ADC_MspInit+0x138>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_ADC_MspInit+0x138>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a3c      	ldr	r2, [pc, #240]	; (800209c <HAL_ADC_MspInit+0x138>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_ADC_MspInit+0x138>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]
=======
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a5a      	ldr	r2, [pc, #360]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a53      	ldr	r2, [pc, #332]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
<<<<<<< HEAD
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4833      	ldr	r0, [pc, #204]	; (80020a0 <HAL_ADC_MspInit+0x13c>)
 8001fd2:	f001 fbe3 	bl	800379c <HAL_GPIO_Init>
=======
 8001fae:	2301      	movs	r3, #1
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	484a      	ldr	r0, [pc, #296]	; (80020ec <HAL_ADC_MspInit+0x198>)
 8001fc2:	f001 fc15 	bl	80037f0 <HAL_GPIO_Init>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
<<<<<<< HEAD
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8001fd8:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <HAL_ADC_MspInit+0x144>)
 8001fda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8001ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8001ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002002:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8002006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800200a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002018:	4822      	ldr	r0, [pc, #136]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 800201a:	f001 f843 	bl	80030a4 <HAL_DMA_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002024:	f7ff ff70 	bl	8001f08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 800202c:	639a      	str	r2, [r3, #56]	; 0x38
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_ADC_MspInit+0x140>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002034:	e02c      	b.n	8002090 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <HAL_ADC_MspInit+0x148>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d127      	bne.n	8002090 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_ADC_MspInit+0x138>)
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <HAL_ADC_MspInit+0x138>)
 800204a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204e:	6453      	str	r3, [r2, #68]	; 0x44
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_ADC_MspInit+0x138>)
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_ADC_MspInit+0x138>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_ADC_MspInit+0x138>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6313      	str	r3, [r2, #48]	; 0x30
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_ADC_MspInit+0x138>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002078:	2302      	movs	r3, #2
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207c:	2303      	movs	r3, #3
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <HAL_ADC_MspInit+0x13c>)
 800208c:	f001 fb86 	bl	800379c <HAL_GPIO_Init>
}
 8002090:	bf00      	nop
 8002092:	3730      	adds	r7, #48	; 0x30
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40012000 	.word	0x40012000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	20010d58 	.word	0x20010d58
 80020a8:	40026410 	.word	0x40026410
 80020ac:	40012100 	.word	0x40012100

080020b0 <HAL_DAC_MspInit>:
=======
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001fc8:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <HAL_ADC_MspInit+0x1a0>)
 8001fca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fcc:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd8:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001fde:	4b44      	ldr	r3, [pc, #272]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe4:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fec:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ffa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002008:	4839      	ldr	r0, [pc, #228]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 800200a:	f001 f875 	bl	80030f8 <HAL_DMA_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002014:	f7ff ff70 	bl	8001ef8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a35      	ldr	r2, [pc, #212]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
 800201e:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <HAL_ADC_MspInit+0x19c>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002024:	e05a      	b.n	80020dc <HAL_ADC_MspInit+0x188>
  else if(hadc->Instance==ADC2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a33      	ldr	r2, [pc, #204]	; (80020f8 <HAL_ADC_MspInit+0x1a4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d128      	bne.n	8002082 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6453      	str	r3, [r2, #68]	; 0x44
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002068:	2302      	movs	r3, #2
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206c:	2303      	movs	r3, #3
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002078:	4619      	mov	r1, r3
 800207a:	481c      	ldr	r0, [pc, #112]	; (80020ec <HAL_ADC_MspInit+0x198>)
 800207c:	f001 fbb8 	bl	80037f0 <HAL_GPIO_Init>
}
 8002080:	e02c      	b.n	80020dc <HAL_ADC_MspInit+0x188>
  else if(hadc->Instance==ADC3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_ADC_MspInit+0x1a8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d127      	bne.n	80020dc <HAL_ADC_MspInit+0x188>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 8002096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209a:	6453      	str	r3, [r2, #68]	; 0x44
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6313      	str	r3, [r2, #48]	; 0x30
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_ADC_MspInit+0x194>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020c4:	2301      	movs	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c8:	2303      	movs	r3, #3
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	4619      	mov	r1, r3
 80020d6:	480a      	ldr	r0, [pc, #40]	; (8002100 <HAL_ADC_MspInit+0x1ac>)
 80020d8:	f001 fb8a 	bl	80037f0 <HAL_GPIO_Init>
}
 80020dc:	bf00      	nop
 80020de:	3738      	adds	r7, #56	; 0x38
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40012000 	.word	0x40012000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020000 	.word	0x40020000
 80020f0:	20010da4 	.word	0x20010da4
 80020f4:	40026410 	.word	0x40026410
 80020f8:	40012100 	.word	0x40012100
 80020fc:	40012200 	.word	0x40012200
 8002100:	40020800 	.word	0x40020800

08002104 <HAL_DAC_MspInit>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
<<<<<<< HEAD
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_DAC_MspInit+0x7c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d127      	bne.n	8002122 <HAL_DAC_MspInit+0x72>
=======
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_DAC_MspInit+0x7c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d127      	bne.n	8002176 <HAL_DAC_MspInit+0x72>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
<<<<<<< HEAD
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_DAC_MspInit+0x80>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <HAL_DAC_MspInit+0x80>)
 80020dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_DAC_MspInit+0x80>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_DAC_MspInit+0x80>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_DAC_MspInit+0x80>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_DAC_MspInit+0x80>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
=======
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_DAC_MspInit+0x80>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_DAC_MspInit+0x80>)
 8002130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_DAC_MspInit+0x80>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_DAC_MspInit+0x80>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_DAC_MspInit+0x80>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_DAC_MspInit+0x80>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
<<<<<<< HEAD
 800210a:	2310      	movs	r3, #16
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210e:	2303      	movs	r3, #3
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <HAL_DAC_MspInit+0x84>)
 800211e:	f001 fb3d 	bl	800379c <HAL_GPIO_Init>
=======
 800215e:	2310      	movs	r3, #16
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002162:	2303      	movs	r3, #3
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <HAL_DAC_MspInit+0x84>)
 8002172:	f001 fb3d 	bl	80037f0 <HAL_GPIO_Init>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40007400 	.word	0x40007400
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_TIM_Base_MspInit>:
=======
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40007400 	.word	0x40007400
 8002184:	40023800 	.word	0x40023800
 8002188:	40020000 	.word	0x40020000

0800218c <HAL_TIM_Base_MspInit>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_TIM_Base_MspInit+0x48>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d115      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x3e>
=======
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <HAL_TIM_Base_MspInit+0x48>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d115      	bne.n	80021ca <HAL_TIM_Base_MspInit+0x3e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
<<<<<<< HEAD
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_TIM_Base_MspInit+0x4c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_TIM_Base_MspInit+0x4c>)
 8002154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_TIM_Base_MspInit+0x4c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	2019      	movs	r0, #25
 800216c:	f000 fe7b 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002170:	2019      	movs	r0, #25
 8002172:	f000 fe94 	bl	8002e9e <HAL_NVIC_EnableIRQ>
=======
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_TIM_Base_MspInit+0x4c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <HAL_TIM_Base_MspInit+0x4c>)
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_TIM_Base_MspInit+0x4c>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2019      	movs	r0, #25
 80021c0:	f000 fe7b 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021c4:	2019      	movs	r0, #25
 80021c6:	f000 fe94 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40014400 	.word	0x40014400
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_UART_MspInit>:
=======
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40014400 	.word	0x40014400
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_UART_MspInit>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a34      	ldr	r2, [pc, #208]	; (8002278 <HAL_UART_MspInit+0xf0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d161      	bne.n	800226e <HAL_UART_MspInit+0xe6>
=======
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a34      	ldr	r2, [pc, #208]	; (80022cc <HAL_UART_MspInit+0xf0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d161      	bne.n	80022c2 <HAL_UART_MspInit+0xe6>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_UART_MspInit+0xf4>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a32      	ldr	r2, [pc, #200]	; (800227c <HAL_UART_MspInit+0xf4>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_UART_MspInit+0xf4>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_UART_MspInit+0xf4>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a2b      	ldr	r2, [pc, #172]	; (800227c <HAL_UART_MspInit+0xf4>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_UART_MspInit+0xf4>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
=======
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_UART_MspInit+0xf4>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_UART_MspInit+0xf4>)
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_UART_MspInit+0xf4>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_UART_MspInit+0xf4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <HAL_UART_MspInit+0xf4>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_UART_MspInit+0xf4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< HEAD
 80021e2:	230c      	movs	r3, #12
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f2:	2307      	movs	r3, #7
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4820      	ldr	r0, [pc, #128]	; (8002280 <HAL_UART_MspInit+0xf8>)
 80021fe:	f001 facd 	bl	800379c <HAL_GPIO_Init>
=======
 8002236:	230c      	movs	r3, #12
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002246:	2307      	movs	r3, #7
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4820      	ldr	r0, [pc, #128]	; (80022d4 <HAL_UART_MspInit+0xf8>)
 8002252:	f001 facd 	bl	80037f0 <HAL_GPIO_Init>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
<<<<<<< HEAD
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_UART_MspInit+0xfc>)
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_UART_MspInit+0x100>)
 8002206:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_UART_MspInit+0xfc>)
 800220a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800220e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_UART_MspInit+0xfc>)
 8002212:	2240      	movs	r2, #64	; 0x40
 8002214:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_UART_MspInit+0xfc>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_UART_MspInit+0xfc>)
 800221e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002222:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_UART_MspInit+0xfc>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_UART_MspInit+0xfc>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_UART_MspInit+0xfc>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_UART_MspInit+0xfc>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_UART_MspInit+0xfc>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002242:	4810      	ldr	r0, [pc, #64]	; (8002284 <HAL_UART_MspInit+0xfc>)
 8002244:	f000 ff2e 	bl	80030a4 <HAL_DMA_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800224e:	f7ff fe5b 	bl	8001f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_UART_MspInit+0xfc>)
 8002256:	635a      	str	r2, [r3, #52]	; 0x34
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_UART_MspInit+0xfc>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2026      	movs	r0, #38	; 0x26
 8002264:	f000 fdff 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002268:	2026      	movs	r0, #38	; 0x26
 800226a:	f000 fe18 	bl	8002e9e <HAL_NVIC_EnableIRQ>
=======
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 8002258:	4a20      	ldr	r2, [pc, #128]	; (80022dc <HAL_UART_MspInit+0x100>)
 800225a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 800225e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002262:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 8002272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002276:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 800227a:	2200      	movs	r2, #0
 800227c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002296:	4810      	ldr	r0, [pc, #64]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 8002298:	f000 ff2e 	bl	80030f8 <HAL_DMA_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80022a2:	f7ff fe29 	bl	8001ef8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_UART_MspInit+0xfc>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	2026      	movs	r0, #38	; 0x26
 80022b8:	f000 fdff 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022bc:	2026      	movs	r0, #38	; 0x26
 80022be:	f000 fe18 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< HEAD
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40004400 	.word	0x40004400
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000
 8002284:	20000340 	.word	0x20000340
 8002288:	400260a0 	.word	0x400260a0

0800228c <NMI_Handler>:
=======
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40004400 	.word	0x40004400
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	2000038c 	.word	0x2000038c
 80022dc:	400260a0 	.word	0x400260a0

080022e0 <NMI_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
=======
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8002290:	e7fe      	b.n	8002290 <NMI_Handler+0x4>

08002292 <HardFault_Handler>:
=======
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
=======
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002296:	e7fe      	b.n	8002296 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:
=======
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
=======
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800229c:	e7fe      	b.n	800229c <MemManage_Handler+0x4>

0800229e <BusFault_Handler>:
=======
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
=======
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80022a2:	e7fe      	b.n	80022a2 <BusFault_Handler+0x4>

080022a4 <UsageFault_Handler>:
=======
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
=======
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80022a8:	e7fe      	b.n	80022a8 <UsageFault_Handler+0x4>

080022aa <SVC_Handler>:
=======
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <SVC_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
=======
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DebugMon_Handler>:
=======
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DebugMon_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
=======
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <PendSV_Handler>:
=======
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
=======
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Handler>:
=======
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SysTick_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
=======
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80022d8:	f000 f8ee 	bl	80024b8 <HAL_IncTick>
=======
 800232c:	f000 f8ee 	bl	800250c <HAL_IncTick>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <DMA1_Stream6_IRQHandler>:
=======
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <DMA1_Stream6_IRQHandler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
<<<<<<< HEAD
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
=======
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
<<<<<<< HEAD
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <DMA1_Stream6_IRQHandler+0x10>)
 80022e6:	f001 f81d 	bl	8003324 <HAL_DMA_IRQHandler>
=======
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <DMA1_Stream6_IRQHandler+0x10>)
 800233a:	f001 f81d 	bl	8003378 <HAL_DMA_IRQHandler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
<<<<<<< HEAD
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000340 	.word	0x20000340

080022f4 <TIM1_UP_TIM10_IRQHandler>:
=======
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000038c 	.word	0x2000038c

08002348 <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< HEAD
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
=======
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
<<<<<<< HEAD
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022fa:	f002 fad0 	bl	800489e <HAL_TIM_IRQHandler>
=======
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800234e:	f002 fad0 	bl	80048f2 <HAL_TIM_IRQHandler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< HEAD
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000280 	.word	0x20000280

08002308 <USART2_IRQHandler>:
=======
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000284 	.word	0x20000284

0800235c <USART2_IRQHandler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
=======
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <USART2_IRQHandler+0x10>)
 800230e:	f002 ff93 	bl	8005238 <HAL_UART_IRQHandler>
=======
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <USART2_IRQHandler+0x10>)
 8002362:	f002 ff93 	bl	800528c <HAL_UART_IRQHandler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20010dfc 	.word	0x20010dfc

0800231c <DMA2_Stream0_IRQHandler>:
=======
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20010e48 	.word	0x20010e48

08002370 <DMA2_Stream0_IRQHandler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
=======
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <DMA2_Stream0_IRQHandler+0x10>)
 8002322:	f000 ffff 	bl	8003324 <HAL_DMA_IRQHandler>
=======
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA2_Stream0_IRQHandler+0x10>)
 8002376:	f000 ffff 	bl	8003378 <HAL_DMA_IRQHandler>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20010d58 	.word	0x20010d58

08002330 <_sbrk>:
=======
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20010da4 	.word	0x20010da4

08002384 <_sbrk>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
=======
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
=======
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
=======
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f004 f9b0 	bl	80066c4 <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20020000 	.word	0x20020000
 8002390:	00000400 	.word	0x00000400
 8002394:	20000148 	.word	0x20000148
 8002398:	20010e60 	.word	0x20010e60

0800239c <SystemInit>:
=======
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f004 f9b2 	bl	800671c <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20020000 	.word	0x20020000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	20000148 	.word	0x20000148
 80023ec:	20010ea8 	.word	0x20010ea8

080023f0 <SystemInit>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <SystemInit+0x20>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <SystemInit+0x20>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <Reset_Handler>:
=======
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023c6:	490e      	ldr	r1, [pc, #56]	; (8002400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023dc:	4c0b      	ldr	r4, [pc, #44]	; (800240c <LoopFillZerobss+0x26>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023ea:	f7ff ffd7 	bl	800239c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ee:	f004 f96f 	bl	80066d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f2:	f7fe fd9d 	bl	8000f30 <main>
  bx  lr    
 80023f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002404:	080081cc 	.word	0x080081cc
  ldr r2, =_sbss
 8002408:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800240c:	20010e5c 	.word	0x20010e5c

08002410 <ADC_IRQHandler>:
=======
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002430:	4c0b      	ldr	r4, [pc, #44]	; (8002460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800243e:	f7ff ffd7 	bl	80023f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002442:	f004 f971 	bl	8006728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002446:	f7fe fd73 	bl	8000f30 <main>
  bx  lr    
 800244a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800244c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002458:	08008224 	.word	0x08008224
  ldr r2, =_sbss
 800245c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002460:	20010ea8 	.word	0x20010ea8

08002464 <ADC_IRQHandler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8002410:	e7fe      	b.n	8002410 <ADC_IRQHandler>
	...

08002414 <HAL_Init>:
=======
 8002464:	e7fe      	b.n	8002464 <ADC_IRQHandler>
	...

08002468 <HAL_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_Init+0x40>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	6013      	str	r3, [r2, #0]
=======
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_Init+0x40>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <HAL_Init+0x40>)
 8002472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002476:	6013      	str	r3, [r2, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_Init+0x40>)
 800242a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242e:	6013      	str	r3, [r2, #0]
=======
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_Init+0x40>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_Init+0x40>)
 800247e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002482:	6013      	str	r3, [r2, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_Init+0x40>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]
=======
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_Init+0x40>)
 800248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248e:	6013      	str	r3, [r2, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 800243c:	2003      	movs	r0, #3
 800243e:	f000 fd07 	bl	8002e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f808 	bl	8002458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fd64 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00

08002458 <HAL_InitTick>:
=======
 8002490:	2003      	movs	r0, #3
 8002492:	f000 fd07 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002496:	2000      	movs	r0, #0
 8002498:	f000 f808 	bl	80024ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249c:	f7ff fd32 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00

080024ac <HAL_InitTick>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x54>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x58>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fd1f 	bl	8002eba <HAL_SYSTICK_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00e      	b.n	80024a4 <HAL_InitTick+0x4c>
=======
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x54>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x58>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fd1f 	bl	8002f0e <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00e      	b.n	80024f8 <HAL_InitTick+0x4c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d80a      	bhi.n	80024a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	2200      	movs	r2, #0
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 fce7 	bl	8002e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_InitTick+0x5c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
=======
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b0f      	cmp	r3, #15
 80024de:	d80a      	bhi.n	80024f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e0:	2200      	movs	r2, #0
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f000 fce7 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <HAL_InitTick+0x5c>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2000000c 	.word	0x2000000c
 80024b0:	20000014 	.word	0x20000014
 80024b4:	20000010 	.word	0x20000010

080024b8 <HAL_IncTick>:
=======
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000000c 	.word	0x2000000c
 8002504:	20000014 	.word	0x20000014
 8002508:	20000010 	.word	0x20000010

0800250c <HAL_IncTick>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000014 	.word	0x20000014
 80024dc:	20010e48 	.word	0x20010e48

080024e0 <HAL_GetTick>:
=======
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x20>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x24>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_IncTick+0x24>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000014 	.word	0x20000014
 8002530:	20010e94 	.word	0x20010e94

08002534 <HAL_GetTick>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20010e48 	.word	0x20010e48

080024f8 <HAL_ADC_Init>:
=======
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20010e94 	.word	0x20010e94

0800254c <HAL_ADC_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e033      	b.n	8002576 <HAL_ADC_Init+0x7e>
=======
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e033      	b.n	80025ca <HAL_ADC_Init+0x7e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_ADC_Init+0x32>
=======
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_ADC_Init+0x32>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fd24 	bl	8001f64 <HAL_ADC_MspInit>
=======
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fcf2 	bl	8001f54 <HAL_ADC_MspInit>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800253e:	f023 0302 	bic.w	r3, r3, #2
 8002542:	f043 0202 	orr.w	r2, r3, #2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002592:	f023 0302 	bic.w	r3, r3, #2
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fab4 	bl	8002ab8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
 8002566:	e001      	b.n	800256c <HAL_ADC_Init+0x74>
=======
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fab4 	bl	8002b0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ba:	e001      	b.n	80025c0 <HAL_ADC_Init+0x74>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
=======
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_ADC_Start>:
=======
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_ADC_Start>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
=======
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_ADC_Start+0x1a>
 8002596:	2302      	movs	r3, #2
 8002598:	e0b2      	b.n	8002700 <HAL_ADC_Start+0x180>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_Start+0x1a>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0b2      	b.n	8002754 <HAL_ADC_Start+0x180>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d018      	beq.n	80025e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	609a      	str	r2, [r3, #8]
=======
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d018      	beq.n	8002636 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	609a      	str	r2, [r3, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 80025c0:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_ADC_Start+0x18c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_ADC_Start+0x190>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0c9a      	lsrs	r2, r3, #18
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025d4:	e002      	b.n	80025dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	3b01      	subs	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f9      	bne.n	80025d6 <HAL_ADC_Start+0x56>
=======
 8002614:	4b52      	ldr	r3, [pc, #328]	; (8002760 <HAL_ADC_Start+0x18c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_ADC_Start+0x190>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0c9a      	lsrs	r2, r3, #18
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002628:	e002      	b.n	8002630 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3b01      	subs	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_Start+0x56>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d17a      	bne.n	80026e6 <HAL_ADC_Start+0x166>
=======
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d17a      	bne.n	800273a <HAL_ADC_Start+0x166>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800261a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800266e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262e:	d106      	bne.n	800263e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	f023 0206 	bic.w	r2, r3, #6
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
 800263c:	e002      	b.n	8002644 <HAL_ADC_Start+0xc4>
=======
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	d106      	bne.n	8002692 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f023 0206 	bic.w	r2, r3, #6
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
 8002690:	e002      	b.n	8002698 <HAL_ADC_Start+0xc4>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800264c:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_ADC_Start+0x194>)
 800264e:	60fb      	str	r3, [r7, #12]
=======
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_ADC_Start+0x194>)
 80026a2:	60fb      	str	r3, [r7, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002658:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2b00      	cmp	r3, #0
 8002664:	d12a      	bne.n	80026bc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <HAL_ADC_Start+0x198>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d015      	beq.n	800269c <HAL_ADC_Start+0x11c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a29      	ldr	r2, [pc, #164]	; (800271c <HAL_ADC_Start+0x19c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d105      	bne.n	8002686 <HAL_ADC_Start+0x106>
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_ADC_Start+0x194>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a25      	ldr	r2, [pc, #148]	; (8002720 <HAL_ADC_Start+0x1a0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d136      	bne.n	80026fe <HAL_ADC_Start+0x17e>
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_ADC_Start+0x194>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d130      	bne.n	80026fe <HAL_ADC_Start+0x17e>
=======
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d12a      	bne.n	8002710 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2b      	ldr	r2, [pc, #172]	; (800276c <HAL_ADC_Start+0x198>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d015      	beq.n	80026f0 <HAL_ADC_Start+0x11c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a29      	ldr	r2, [pc, #164]	; (8002770 <HAL_ADC_Start+0x19c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d105      	bne.n	80026da <HAL_ADC_Start+0x106>
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_ADC_Start+0x194>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a25      	ldr	r2, [pc, #148]	; (8002774 <HAL_ADC_Start+0x1a0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d136      	bne.n	8002752 <HAL_ADC_Start+0x17e>
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_ADC_Start+0x194>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d130      	bne.n	8002752 <HAL_ADC_Start+0x17e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
<<<<<<< HEAD
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d129      	bne.n	80026fe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	e020      	b.n	80026fe <HAL_ADC_Start+0x17e>
=======
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d129      	bne.n	8002752 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	e020      	b.n	8002752 <HAL_ADC_Start+0x17e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a15      	ldr	r2, [pc, #84]	; (8002718 <HAL_ADC_Start+0x198>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d11b      	bne.n	80026fe <HAL_ADC_Start+0x17e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d114      	bne.n	80026fe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	e00b      	b.n	80026fe <HAL_ADC_Start+0x17e>
=======
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_ADC_Start+0x198>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11b      	bne.n	8002752 <HAL_ADC_Start+0x17e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d114      	bne.n	8002752 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e00b      	b.n	8002752 <HAL_ADC_Start+0x17e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0210 	orr.w	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	2000000c 	.word	0x2000000c
 8002710:	431bde83 	.word	0x431bde83
 8002714:	40012300 	.word	0x40012300
 8002718:	40012000 	.word	0x40012000
 800271c:	40012100 	.word	0x40012100
 8002720:	40012200 	.word	0x40012200

08002724 <HAL_ADC_PollForConversion>:
=======
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	2000000c 	.word	0x2000000c
 8002764:	431bde83 	.word	0x431bde83
 8002768:	40012300 	.word	0x40012300
 800276c:	40012000 	.word	0x40012000
 8002770:	40012100 	.word	0x40012100
 8002774:	40012200 	.word	0x40012200

08002778 <HAL_ADC_PollForConversion>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
<<<<<<< HEAD
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
=======
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
<<<<<<< HEAD
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002740:	d113      	bne.n	800276a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800274c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002750:	d10b      	bne.n	800276a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e063      	b.n	8002832 <HAL_ADC_PollForConversion+0x10e>
=======
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002794:	d113      	bne.n	80027be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a4:	d10b      	bne.n	80027be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e063      	b.n	8002886 <HAL_ADC_PollForConversion+0x10e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
<<<<<<< HEAD
 800276a:	f7ff feb9 	bl	80024e0 <HAL_GetTick>
 800276e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002770:	e021      	b.n	80027b6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d01d      	beq.n	80027b6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_ADC_PollForConversion+0x6c>
 8002780:	f7ff feae 	bl	80024e0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d212      	bcs.n	80027b6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d00b      	beq.n	80027b6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0204 	orr.w	r2, r3, #4
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e03d      	b.n	8002832 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d1d6      	bne.n	8002772 <HAL_ADC_PollForConversion+0x4e>
=======
 80027be:	f7ff feb9 	bl	8002534 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027c4:	e021      	b.n	800280a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d01d      	beq.n	800280a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <HAL_ADC_PollForConversion+0x6c>
 80027d4:	f7ff feae 	bl	8002534 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d212      	bcs.n	800280a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d00b      	beq.n	800280a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f043 0204 	orr.w	r2, r3, #4
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e03d      	b.n	8002886 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b02      	cmp	r3, #2
 8002816:	d1d6      	bne.n	80027c6 <HAL_ADC_PollForConversion+0x4e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0212 	mvn.w	r2, #18
 80027cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0212 	mvn.w	r2, #18
 8002820:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d123      	bne.n	8002830 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11f      	bne.n	8002830 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002808:	2b00      	cmp	r3, #0
 800280a:	d111      	bne.n	8002830 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d123      	bne.n	8002884 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d11f      	bne.n	8002884 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
<<<<<<< HEAD
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_ADC_GetValue>:
=======
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_ADC_GetValue>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
<<<<<<< HEAD
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADC_ConfigChannel>:
=======
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_ADC_ConfigChannel>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
=======
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x1c>
 800286c:	2302      	movs	r3, #2
 800286e:	e113      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x244>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b09      	cmp	r3, #9
 800287e:	d925      	bls.n	80028cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	3b1e      	subs	r3, #30
 8002896:	2207      	movs	r2, #7
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43da      	mvns	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	400a      	ands	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68d9      	ldr	r1, [r3, #12]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	4603      	mov	r3, r0
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4403      	add	r3, r0
 80028be:	3b1e      	subs	r3, #30
 80028c0:	409a      	lsls	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	e022      	b.n	8002912 <HAL_ADC_ConfigChannel+0xbe>
=======
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x1c>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e113      	b.n	8002aec <HAL_ADC_ConfigChannel+0x244>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d925      	bls.n	8002920 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68d9      	ldr	r1, [r3, #12]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	3b1e      	subs	r3, #30
 80028ea:	2207      	movs	r2, #7
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68d9      	ldr	r1, [r3, #12]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	4603      	mov	r3, r0
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4403      	add	r3, r0
 8002912:	3b1e      	subs	r3, #30
 8002914:	409a      	lsls	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e022      	b.n	8002966 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6919      	ldr	r1, [r3, #16]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	2207      	movs	r2, #7
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6919      	ldr	r1, [r3, #16]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4618      	mov	r0, r3
 8002902:	4603      	mov	r3, r0
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4403      	add	r3, r0
 8002908:	409a      	lsls	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	611a      	str	r2, [r3, #16]
=======
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	2207      	movs	r2, #7
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	4618      	mov	r0, r3
 8002956:	4603      	mov	r3, r0
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4403      	add	r3, r0
 800295c:	409a      	lsls	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	611a      	str	r2, [r3, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b06      	cmp	r3, #6
 8002918:	d824      	bhi.n	8002964 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	3b05      	subs	r3, #5
 800292c:	221f      	movs	r2, #31
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	400a      	ands	r2, r1
 800293a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	3b05      	subs	r3, #5
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	635a      	str	r2, [r3, #52]	; 0x34
 8002962:	e04c      	b.n	80029fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d824      	bhi.n	80029b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	3b23      	subs	r3, #35	; 0x23
 800297e:	221f      	movs	r2, #31
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43da      	mvns	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	400a      	ands	r2, r1
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b23      	subs	r3, #35	; 0x23
 80029a8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
 80029b4:	e023      	b.n	80029fe <HAL_ADC_ConfigChannel+0x1aa>
=======
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d824      	bhi.n	80029b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	3b05      	subs	r3, #5
 8002980:	221f      	movs	r2, #31
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	400a      	ands	r2, r1
 800298e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b05      	subs	r3, #5
 80029aa:	fa00 f203 	lsl.w	r2, r0, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
 80029b6:	e04c      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d824      	bhi.n	8002a0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b23      	subs	r3, #35	; 0x23
 80029d2:	221f      	movs	r2, #31
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43da      	mvns	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	400a      	ands	r2, r1
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	3b23      	subs	r3, #35	; 0x23
 80029fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
 8002a08:	e023      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b41      	subs	r3, #65	; 0x41
 80029c8:	221f      	movs	r2, #31
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	3b41      	subs	r3, #65	; 0x41
 80029f2:	fa00 f203 	lsl.w	r2, r0, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b41      	subs	r3, #65	; 0x41
 8002a1c:	221f      	movs	r2, #31
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	400a      	ands	r2, r1
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	3b41      	subs	r3, #65	; 0x41
 8002a46:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80029fe:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_ADC_ConfigChannel+0x250>)
 8002a00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <HAL_ADC_ConfigChannel+0x254>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10f      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x1d8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b12      	cmp	r3, #18
 8002a12:	d10b      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x1d8>
=======
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_ADC_ConfigChannel+0x250>)
 8002a54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_ADC_ConfigChannel+0x254>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10f      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1d8>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b12      	cmp	r3, #18
 8002a66:	d10b      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1d8>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	605a      	str	r2, [r3, #4]
=======
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_ADC_ConfigChannel+0x254>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d12b      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x23a>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <HAL_ADC_ConfigChannel+0x258>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d003      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0x1f4>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b11      	cmp	r3, #17
 8002a46:	d122      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x23a>
=======
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_ADC_ConfigChannel+0x254>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12b      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_ADC_ConfigChannel+0x258>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x1f4>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b11      	cmp	r3, #17
 8002a9a:	d122      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
<<<<<<< HEAD
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_ADC_ConfigChannel+0x258>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x23a>
=======
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_ADC_ConfigChannel+0x258>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d111      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_ADC_ConfigChannel+0x25c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_ADC_ConfigChannel+0x260>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	0c9a      	lsrs	r2, r3, #18
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a80:	e002      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f9      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x22e>
=======
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_ADC_ConfigChannel+0x25c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <HAL_ADC_ConfigChannel+0x260>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	0c9a      	lsrs	r2, r3, #18
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x22e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40012300 	.word	0x40012300
 8002aa8:	40012000 	.word	0x40012000
 8002aac:	10000012 	.word	0x10000012
 8002ab0:	2000000c 	.word	0x2000000c
 8002ab4:	431bde83 	.word	0x431bde83

08002ab8 <ADC_Init>:
=======
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012300 	.word	0x40012300
 8002afc:	40012000 	.word	0x40012000
 8002b00:	10000012 	.word	0x10000012
 8002b04:	2000000c 	.word	0x2000000c
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <ADC_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
=======
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8002ac0:	4b79      	ldr	r3, [pc, #484]	; (8002ca8 <ADC_Init+0x1f0>)
 8002ac2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	021a      	lsls	r2, r3, #8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6899      	ldr	r1, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]
=======
 8002b14:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <ADC_Init+0x1f0>)
 8002b16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	021a      	lsls	r2, r3, #8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	4a58      	ldr	r2, [pc, #352]	; (8002cac <ADC_Init+0x1f4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	e00f      	b.n	8002bb6 <ADC_Init+0xfe>
=======
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <ADC_Init+0x1f4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	e00f      	b.n	8002c0a <ADC_Init+0xfe>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb4:	609a      	str	r2, [r3, #8]
=======
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c08:	609a      	str	r2, [r3, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0202 	bic.w	r2, r2, #2
 8002bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6899      	ldr	r1, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7e1b      	ldrb	r3, [r3, #24]
 8002bd0:	005a      	lsls	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <ADC_Init+0x164>
=======
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0202 	bic.w	r2, r2, #2
 8002c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7e1b      	ldrb	r3, [r3, #24]
 8002c24:	005a      	lsls	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01b      	beq.n	8002c70 <ADC_Init+0x164>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	035a      	lsls	r2, r3, #13
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	e007      	b.n	8002c2c <ADC_Init+0x174>
=======
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	3b01      	subs	r3, #1
 8002c64:	035a      	lsls	r2, r3, #13
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	e007      	b.n	8002c80 <ADC_Init+0x174>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c2a:	605a      	str	r2, [r3, #4]
=======
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7e:	605a      	str	r2, [r3, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	051a      	lsls	r2, r3, #20
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c6e:	025a      	lsls	r2, r3, #9
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	029a      	lsls	r2, r3, #10
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40012300 	.word	0x40012300
 8002cac:	0f000001 	.word	0x0f000001

08002cb0 <__NVIC_SetPriorityGrouping>:
=======
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	051a      	lsls	r2, r3, #20
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6899      	ldr	r1, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc2:	025a      	lsls	r2, r3, #9
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	029a      	lsls	r2, r3, #10
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40012300 	.word	0x40012300
 8002d00:	0f000001 	.word	0x0f000001

08002d04 <__NVIC_SetPriorityGrouping>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	60d3      	str	r3, [r2, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_GetPriorityGrouping>:
=======
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60d3      	str	r3, [r2, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_GetPriorityGrouping>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <__NVIC_GetPriorityGrouping+0x18>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0307 	and.w	r3, r3, #7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_EnableIRQ>:
=======
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_EnableIRQ>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db0b      	blt.n	8002d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <__NVIC_EnableIRQ+0x38>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100

08002d50 <__NVIC_SetPriority>:
=======
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db0b      	blt.n	8002d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4907      	ldr	r1, [pc, #28]	; (8002da0 <__NVIC_EnableIRQ+0x38>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <__NVIC_SetPriority>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db0a      	blt.n	8002d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	490c      	ldr	r1, [pc, #48]	; (8002d9c <__NVIC_SetPriority+0x4c>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	440b      	add	r3, r1
 8002d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	; (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002d78:	e00a      	b.n	8002d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <__NVIC_SetPriority+0x50>)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	3b04      	subs	r3, #4
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	761a      	strb	r2, [r3, #24]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <NVIC_EncodePriority>:
=======
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	61fb      	str	r3, [r7, #28]
=======
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	bf28      	it	cs
 8002dc2:	2304      	movcs	r3, #4
 8002dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d902      	bls.n	8002dd4 <NVIC_EncodePriority+0x30>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3b03      	subs	r3, #3
 8002dd2:	e000      	b.n	8002dd6 <NVIC_EncodePriority+0x32>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	401a      	ands	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	4313      	orrs	r3, r2
         );
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <SysTick_Config>:
=======
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e1c:	d301      	bcc.n	8002e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00f      	b.n	8002e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <SysTick_Config+0x40>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f7ff ff8e 	bl	8002d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <SysTick_Config+0x40>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <SysTick_Config+0x40>)
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	e000e010 	.word	0xe000e010

08002e50 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
=======
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff29 	bl	8002cb0 <__NVIC_SetPriorityGrouping>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_SetPriority>:
=======
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff29 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
=======
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002e78:	f7ff ff3e 	bl	8002cf8 <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff8e 	bl	8002da4 <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5d 	bl	8002d50 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_EnableIRQ>:
=======
 8002ecc:	f7ff ff3e 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff8e 	bl	8002df8 <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5d 	bl	8002da4 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_EnableIRQ>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
=======
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff31 	bl	8002d14 <__NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SYSTICK_Config>:
=======
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff31 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa2 	bl	8002e0c <SysTick_Config>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_DAC_Init>:
=======
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffa2 	bl	8002e60 <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_DAC_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
<<<<<<< HEAD
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e014      	b.n	8002f0e <HAL_DAC_Init+0x3c>
=======
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e014      	b.n	8002f62 <HAL_DAC_Init+0x3c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
<<<<<<< HEAD
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	791b      	ldrb	r3, [r3, #4]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <HAL_DAC_Init+0x28>
=======
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <HAL_DAC_Init+0x28>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	715a      	strb	r2, [r3, #5]
=======
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	715a      	strb	r2, [r3, #5]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
<<<<<<< HEAD
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff f8db 	bl	80020b0 <HAL_DAC_MspInit>
=======
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff f8db 	bl	8002104 <HAL_DAC_MspInit>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
<<<<<<< HEAD
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DAC_Start>:
=======
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DAC_Start>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
<<<<<<< HEAD
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
=======
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< HEAD
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	795b      	ldrb	r3, [r3, #5]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_DAC_Start+0x16>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e040      	b.n	8002fae <HAL_DAC_Start+0x98>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2201      	movs	r2, #1
 8002f46:	409a      	lsls	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002f60:	2b3c      	cmp	r3, #60	; 0x3c
 8002f62:	d11d      	bne.n	8002fa0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	e014      	b.n	8002fa0 <HAL_DAC_Start+0x8a>
=======
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	795b      	ldrb	r3, [r3, #5]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_DAC_Start+0x16>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e040      	b.n	8003002 <HAL_DAC_Start+0x98>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2201      	movs	r2, #1
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002fb4:	2b3c      	cmp	r3, #60	; 0x3c
 8002fb6:	d11d      	bne.n	8002ff4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	e014      	b.n	8002ff4 <HAL_DAC_Start+0x8a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
<<<<<<< HEAD
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	213c      	movs	r1, #60	; 0x3c
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d107      	bne.n	8002fa0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0202 	orr.w	r2, r2, #2
 8002f9e:	605a      	str	r2, [r3, #4]
=======
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	213c      	movs	r1, #60	; 0x3c
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0202 	orr.w	r2, r2, #2
 8002ff2:	605a      	str	r2, [r3, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
<<<<<<< HEAD
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_DAC_SetValue>:
=======
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_DAC_SetValue>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
<<<<<<< HEAD
 8002fba:	b480      	push	{r7}
 8002fbc:	b087      	sub	sp, #28
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
=======
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
<<<<<<< HEAD
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3308      	adds	r3, #8
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e004      	b.n	8002fee <HAL_DAC_SetValue+0x34>
=======
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	3308      	adds	r3, #8
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e004      	b.n	8003042 <HAL_DAC_SetValue+0x34>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
<<<<<<< HEAD
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3314      	adds	r3, #20
 8002fec:	617b      	str	r3, [r7, #20]
=======
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	3314      	adds	r3, #20
 8003040:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
<<<<<<< HEAD
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_DAC_ConfigChannel>:
=======
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	461a      	mov	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_DAC_ConfigChannel>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< HEAD
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
=======
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< HEAD
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	795b      	ldrb	r3, [r3, #5]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_DAC_ConfigChannel+0x18>
 8003018:	2302      	movs	r3, #2
 800301a:	e03c      	b.n	8003096 <HAL_DAC_ConfigChannel+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2202      	movs	r2, #2
 8003026:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	f640 72fe 	movw	r2, #4094	; 0xffe
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4013      	ands	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
=======
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	795b      	ldrb	r3, [r3, #5]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_DAC_ConfigChannel+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e03c      	b.n	80030ea <HAL_DAC_ConfigChannel+0x92>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2202      	movs	r2, #2
 800307a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4013      	ands	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
<<<<<<< HEAD
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	22c0      	movs	r2, #192	; 0xc0
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	400a      	ands	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_DMA_Init>:
=======
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	22c0      	movs	r2, #192	; 0xc0
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	400a      	ands	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_DMA_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030b0:	f7ff fa16 	bl	80024e0 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]
=======
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff fa16 	bl	8002534 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e099      	b.n	80031f4 <HAL_DMA_Init+0x150>
=======
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e099      	b.n	8003248 <HAL_DMA_Init+0x150>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e0:	e00f      	b.n	8003102 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030e2:	f7ff f9fd 	bl	80024e0 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d908      	bls.n	8003102 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2203      	movs	r2, #3
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e078      	b.n	80031f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e8      	bne.n	80030e2 <HAL_DMA_Init+0x3e>
=======
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003134:	e00f      	b.n	8003156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003136:	f7ff f9fd 	bl	8002534 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b05      	cmp	r3, #5
 8003142:	d908      	bls.n	8003156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2203      	movs	r2, #3
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e078      	b.n	8003248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e8      	bne.n	8003136 <HAL_DMA_Init+0x3e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <HAL_DMA_Init+0x158>)
 800311c:	4013      	ands	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
=======
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_DMA_Init+0x158>)
 8003170:	4013      	ands	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800312e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	2b04      	cmp	r3, #4
 800315a:	d107      	bne.n	800316c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	4313      	orrs	r3, r2
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
=======
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d107      	bne.n	80031c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	4313      	orrs	r3, r2
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f023 0307 	bic.w	r3, r3, #7
 8003182:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2b04      	cmp	r3, #4
 8003194:	d117      	bne.n	80031c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
=======
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0307 	bic.w	r3, r3, #7
 80031d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d117      	bne.n	800321a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00e      	beq.n	80031c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fa7b 	bl	80036a4 <DMA_CheckFifoParam>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031c2:	2301      	movs	r3, #1
 80031c4:	e016      	b.n	80031f4 <HAL_DMA_Init+0x150>
=======
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fa7b 	bl	80036f8 <DMA_CheckFifoParam>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2240      	movs	r2, #64	; 0x40
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003216:	2301      	movs	r3, #1
 8003218:	e016      	b.n	8003248 <HAL_DMA_Init+0x150>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	615a      	str	r2, [r3, #20]
=======
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	615a      	str	r2, [r3, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa32 	bl	8003638 <DMA_CalcBaseAndBitshift>
 80031d4:	4603      	mov	r3, r0
 80031d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	223f      	movs	r2, #63	; 0x3f
 80031de:	409a      	lsls	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	f010803f 	.word	0xf010803f

08003200 <HAL_DMA_Abort>:
=======
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fa32 	bl	800368c <DMA_CalcBaseAndBitshift>
 8003228:	4603      	mov	r3, r0
 800322a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	223f      	movs	r2, #63	; 0x3f
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	f010803f 	.word	0xf010803f

08003254 <HAL_DMA_Abort>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800320e:	f7ff f967 	bl	80024e0 <HAL_GetTick>
 8003212:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d008      	beq.n	8003232 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e052      	b.n	80032d8 <HAL_DMA_Abort+0xd8>
=======
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003262:	f7ff f967 	bl	8002534 <HAL_GetTick>
 8003266:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d008      	beq.n	8003286 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e052      	b.n	800332c <HAL_DMA_Abort+0xd8>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0216 	bic.w	r2, r2, #22
 8003240:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003250:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_DMA_Abort+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0208 	bic.w	r2, r2, #8
 8003270:	601a      	str	r2, [r3, #0]
=======
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0216 	bic.w	r2, r2, #22
 8003294:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <HAL_DMA_Abort+0x62>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0208 	bic.w	r2, r2, #8
 80032c4:	601a      	str	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003282:	e013      	b.n	80032ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003284:	f7ff f92c 	bl	80024e0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b05      	cmp	r3, #5
 8003290:	d90c      	bls.n	80032ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e015      	b.n	80032d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e4      	bne.n	8003284 <HAL_DMA_Abort+0x84>
=======
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d6:	e013      	b.n	8003300 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d8:	f7ff f92c 	bl	8002534 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d90c      	bls.n	8003300 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2203      	movs	r2, #3
 80032f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e015      	b.n	800332c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e4      	bne.n	80032d8 <HAL_DMA_Abort+0x84>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	223f      	movs	r2, #63	; 0x3f
 80032c0:	409a      	lsls	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_DMA_Abort_IT>:
=======
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	223f      	movs	r2, #63	; 0x3f
 8003314:	409a      	lsls	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DMA_Abort_IT>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d004      	beq.n	80032fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00c      	b.n	8003318 <HAL_DMA_Abort_IT+0x38>
=======
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d004      	beq.n	8003352 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e00c      	b.n	800336c <HAL_DMA_Abort_IT+0x38>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2205      	movs	r2, #5
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_DMA_IRQHandler>:
=======
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2205      	movs	r2, #5
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_DMA_IRQHandler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003330:	4b92      	ldr	r3, [pc, #584]	; (800357c <HAL_DMA_IRQHandler+0x258>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a92      	ldr	r2, [pc, #584]	; (8003580 <HAL_DMA_IRQHandler+0x25c>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0a9b      	lsrs	r3, r3, #10
 800333c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	2208      	movs	r2, #8
 8003350:	409a      	lsls	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01a      	beq.n	8003390 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0204 	bic.w	r2, r2, #4
 8003376:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	2208      	movs	r2, #8
 800337e:	409a      	lsls	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003384:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_DMA_IRQHandler+0x258>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a92      	ldr	r2, [pc, #584]	; (80035d4 <HAL_DMA_IRQHandler+0x25c>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a9b      	lsrs	r3, r3, #10
 8003390:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2208      	movs	r2, #8
 80033a4:	409a      	lsls	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2208      	movs	r2, #8
 80033d2:	409a      	lsls	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	2201      	movs	r2, #1
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d012      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2201      	movs	r2, #1
 80033b4:	409a      	lsls	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2201      	movs	r2, #1
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2201      	movs	r2, #1
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	2204      	movs	r2, #4
 80033cc:	409a      	lsls	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d012      	beq.n	80033fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2204      	movs	r2, #4
 80033ea:	409a      	lsls	r2, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f043 0204 	orr.w	r2, r3, #4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2204      	movs	r2, #4
 8003420:	409a      	lsls	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d012      	beq.n	8003450 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2204      	movs	r2, #4
 800343e:	409a      	lsls	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0204 	orr.w	r2, r3, #4
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	2210      	movs	r2, #16
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d043      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d03c      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2210      	movs	r2, #16
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d018      	beq.n	8003466 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d024      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e01f      	b.n	8003494 <HAL_DMA_IRQHandler+0x170>
=======
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	2210      	movs	r2, #16
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d043      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03c      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2210      	movs	r2, #16
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d018      	beq.n	80034ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d024      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	e01f      	b.n	80034e8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01b      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
 8003464:	e016      	b.n	8003494 <HAL_DMA_IRQHandler+0x170>
=======
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e016      	b.n	80034e8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0208 	bic.w	r2, r2, #8
 8003482:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
=======
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0208 	bic.w	r2, r2, #8
 80034d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	2220      	movs	r2, #32
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 808e 	beq.w	80035c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8086 	beq.w	80035c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	2220      	movs	r2, #32
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d136      	bne.n	800353c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0216 	bic.w	r2, r2, #22
 80034dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <HAL_DMA_IRQHandler+0x1da>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0208 	bic.w	r2, r2, #8
 800350c:	601a      	str	r2, [r3, #0]
=======
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	2220      	movs	r2, #32
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 808e 	beq.w	8003616 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8086 	beq.w	8003616 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	2220      	movs	r2, #32
 8003510:	409a      	lsls	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b05      	cmp	r3, #5
 8003520:	d136      	bne.n	8003590 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0216 	bic.w	r2, r2, #22
 8003530:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003540:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_DMA_IRQHandler+0x1da>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0208 	bic.w	r2, r2, #8
 8003560:	601a      	str	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	223f      	movs	r2, #63	; 0x3f
 8003514:	409a      	lsls	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	2b00      	cmp	r3, #0
 8003530:	d07d      	beq.n	800362e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
        }
        return;
 800353a:	e078      	b.n	800362e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01c      	beq.n	8003584 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d108      	bne.n	800356a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	2b00      	cmp	r3, #0
 800355e:	d030      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
 8003568:	e02b      	b.n	80035c2 <HAL_DMA_IRQHandler+0x29e>
=======
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	223f      	movs	r2, #63	; 0x3f
 8003568:	409a      	lsls	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	2b00      	cmp	r3, #0
 8003584:	d07d      	beq.n	8003682 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
        }
        return;
 800358e:	e078      	b.n	8003682 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01c      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d030      	beq.n	8003616 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
 80035bc:	e02b      	b.n	8003616 <HAL_DMA_IRQHandler+0x29e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d027      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
 800357a:	e022      	b.n	80035c2 <HAL_DMA_IRQHandler+0x29e>
 800357c:	2000000c 	.word	0x2000000c
 8003580:	1b4e81b5 	.word	0x1b4e81b5
=======
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d027      	beq.n	8003616 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
 80035ce:	e022      	b.n	8003616 <HAL_DMA_IRQHandler+0x29e>
 80035d0:	2000000c 	.word	0x2000000c
 80035d4:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0210 	bic.w	r2, r2, #16
 80035a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
=======
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0210 	bic.w	r2, r2, #16
 80035f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d032      	beq.n	8003630 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d022      	beq.n	800361c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2205      	movs	r2, #5
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
=======
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	2b00      	cmp	r3, #0
 800361c:	d032      	beq.n	8003684 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d022      	beq.n	8003670 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2205      	movs	r2, #5
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3301      	adds	r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d307      	bcc.n	800360a <HAL_DMA_IRQHandler+0x2e6>
=======
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3301      	adds	r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	429a      	cmp	r2, r3
 800364c:	d307      	bcc.n	800365e <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f2      	bne.n	80035ee <HAL_DMA_IRQHandler+0x2ca>
 8003608:	e000      	b.n	800360c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800360a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
 800362c:	e000      	b.n	8003630 <HAL_DMA_IRQHandler+0x30c>
        return;
 800362e:	bf00      	nop
    }
  }
}
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop

08003638 <DMA_CalcBaseAndBitshift>:
=======
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f2      	bne.n	8003642 <HAL_DMA_IRQHandler+0x2ca>
 800365c:	e000      	b.n	8003660 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800365e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
 8003680:	e000      	b.n	8003684 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003682:	bf00      	nop
    }
  }
}
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop

0800368c <DMA_CalcBaseAndBitshift>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3b10      	subs	r3, #16
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <DMA_CalcBaseAndBitshift+0x64>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	60fb      	str	r3, [r7, #12]
=======
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3b10      	subs	r3, #16
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <DMA_CalcBaseAndBitshift+0x64>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d909      	bls.n	800367a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	659a      	str	r2, [r3, #88]	; 0x58
 8003678:	e007      	b.n	800368a <DMA_CalcBaseAndBitshift+0x52>
=======
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <DMA_CalcBaseAndBitshift+0x68>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d909      	bls.n	80036ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
 80036cc:	e007      	b.n	80036de <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	aaaaaaab 	.word	0xaaaaaaab
 80036a0:	08007db0 	.word	0x08007db0

080036a4 <DMA_CheckFifoParam>:
=======
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	aaaaaaab 	.word	0xaaaaaaab
 80036f4:	08007e08 	.word	0x08007e08

080036f8 <DMA_CheckFifoParam>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11f      	bne.n	80036fe <DMA_CheckFifoParam+0x5a>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d856      	bhi.n	8003772 <DMA_CheckFifoParam+0xce>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <DMA_CheckFifoParam+0x28>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036ef 	.word	0x080036ef
 80036d4:	080036dd 	.word	0x080036dd
 80036d8:	08003773 	.word	0x08003773
=======
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11f      	bne.n	8003752 <DMA_CheckFifoParam+0x5a>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d856      	bhi.n	80037c6 <DMA_CheckFifoParam+0xce>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <DMA_CheckFifoParam+0x28>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	08003743 	.word	0x08003743
 8003728:	08003731 	.word	0x08003731
 800372c:	080037c7 	.word	0x080037c7
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d046      	beq.n	8003776 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e043      	b.n	8003776 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f6:	d140      	bne.n	800377a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fc:	e03d      	b.n	800377a <DMA_CheckFifoParam+0xd6>
=======
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d046      	beq.n	80037ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e043      	b.n	80037ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800374a:	d140      	bne.n	80037ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e03d      	b.n	80037ce <DMA_CheckFifoParam+0xd6>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003706:	d121      	bne.n	800374c <DMA_CheckFifoParam+0xa8>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d837      	bhi.n	800377e <DMA_CheckFifoParam+0xda>
 800370e:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <DMA_CheckFifoParam+0x70>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	08003725 	.word	0x08003725
 8003718:	0800372b 	.word	0x0800372b
 800371c:	08003725 	.word	0x08003725
 8003720:	0800373d 	.word	0x0800373d
=======
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d121      	bne.n	80037a0 <DMA_CheckFifoParam+0xa8>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d837      	bhi.n	80037d2 <DMA_CheckFifoParam+0xda>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <DMA_CheckFifoParam+0x70>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003779 	.word	0x08003779
 800376c:	0800377f 	.word	0x0800377f
 8003770:	08003779 	.word	0x08003779
 8003774:	08003791 	.word	0x08003791
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      break;
 8003728:	e030      	b.n	800378c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d025      	beq.n	8003782 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373a:	e022      	b.n	8003782 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003744:	d11f      	bne.n	8003786 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800374a:	e01c      	b.n	8003786 <DMA_CheckFifoParam+0xe2>
=======
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e030      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d025      	beq.n	80037d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378e:	e022      	b.n	80037d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800379e:	e01c      	b.n	80037da <DMA_CheckFifoParam+0xe2>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d903      	bls.n	800375a <DMA_CheckFifoParam+0xb6>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d003      	beq.n	8003760 <DMA_CheckFifoParam+0xbc>
=======
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d903      	bls.n	80037ae <DMA_CheckFifoParam+0xb6>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d003      	beq.n	80037b4 <DMA_CheckFifoParam+0xbc>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 8003758:	e018      	b.n	800378c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      break;
 800375e:	e015      	b.n	800378c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00e      	beq.n	800378a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e00b      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      break;
 8003772:	bf00      	nop
 8003774:	e00a      	b.n	800378c <DMA_CheckFifoParam+0xe8>
      break;
 8003776:	bf00      	nop
 8003778:	e008      	b.n	800378c <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
 800377c:	e006      	b.n	800378c <DMA_CheckFifoParam+0xe8>
      break;
 800377e:	bf00      	nop
 8003780:	e004      	b.n	800378c <DMA_CheckFifoParam+0xe8>
      break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <DMA_CheckFifoParam+0xe8>
      break;   
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <DMA_CheckFifoParam+0xe8>
      break;
 800378a:	bf00      	nop
=======
 80037ac:	e018      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      break;
 80037b2:	e015      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00e      	beq.n	80037de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	e00b      	b.n	80037de <DMA_CheckFifoParam+0xe6>
      break;
 80037c6:	bf00      	nop
 80037c8:	e00a      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
 80037cc:	e008      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ce:	bf00      	nop
 80037d0:	e006      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  } 
  
  return status; 
<<<<<<< HEAD
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop

0800379c <HAL_GPIO_Init>:
=======
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <HAL_GPIO_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
=======
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e165      	b.n	8003a84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b8:	2201      	movs	r2, #1
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	f040 8154 	bne.w	8003a7e <HAL_GPIO_Init+0x2e2>
=======
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e165      	b.n	8003ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	429a      	cmp	r2, r3
 8003826:	f040 8154 	bne.w	8003ad2 <HAL_GPIO_Init+0x2e2>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d005      	beq.n	80037ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d130      	bne.n	8003850 <HAL_GPIO_Init+0xb4>
=======
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d005      	beq.n	8003842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800383e:	2b02      	cmp	r3, #2
 8003840:	d130      	bne.n	80038a4 <HAL_GPIO_Init+0xb4>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	2203      	movs	r2, #3
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 0201 	and.w	r2, r3, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b03      	cmp	r3, #3
 800385a:	d017      	beq.n	800388c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2203      	movs	r2, #3
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	60da      	str	r2, [r3, #12]
=======
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0201 	and.w	r2, r3, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d017      	beq.n	80038e0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d123      	bne.n	80038e0 <HAL_GPIO_Init+0x144>
=======
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d123      	bne.n	8003934 <HAL_GPIO_Init+0x144>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	08da      	lsrs	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3208      	adds	r2, #8
 80038a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	220f      	movs	r2, #15
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	08da      	lsrs	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3208      	adds	r2, #8
 80038da:	69b9      	ldr	r1, [r7, #24]
 80038dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	69b9      	ldr	r1, [r7, #24]
 8003930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0203 	and.w	r2, r3, #3
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	601a      	str	r2, [r3, #0]
=======
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	601a      	str	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80ae 	beq.w	8003a7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <HAL_GPIO_Init+0x300>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4a5c      	ldr	r2, [pc, #368]	; (8003a9c <HAL_GPIO_Init+0x300>)
 800392c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003930:	6453      	str	r3, [r2, #68]	; 0x44
 8003932:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <HAL_GPIO_Init+0x300>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800393e:	4a58      	ldr	r2, [pc, #352]	; (8003aa0 <HAL_GPIO_Init+0x304>)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	3302      	adds	r3, #2
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	220f      	movs	r2, #15
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4f      	ldr	r2, [pc, #316]	; (8003aa4 <HAL_GPIO_Init+0x308>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d025      	beq.n	80039b6 <HAL_GPIO_Init+0x21a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4e      	ldr	r2, [pc, #312]	; (8003aa8 <HAL_GPIO_Init+0x30c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01f      	beq.n	80039b2 <HAL_GPIO_Init+0x216>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4d      	ldr	r2, [pc, #308]	; (8003aac <HAL_GPIO_Init+0x310>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d019      	beq.n	80039ae <HAL_GPIO_Init+0x212>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4c      	ldr	r2, [pc, #304]	; (8003ab0 <HAL_GPIO_Init+0x314>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_GPIO_Init+0x20e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4b      	ldr	r2, [pc, #300]	; (8003ab4 <HAL_GPIO_Init+0x318>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00d      	beq.n	80039a6 <HAL_GPIO_Init+0x20a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4a      	ldr	r2, [pc, #296]	; (8003ab8 <HAL_GPIO_Init+0x31c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <HAL_GPIO_Init+0x206>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a49      	ldr	r2, [pc, #292]	; (8003abc <HAL_GPIO_Init+0x320>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_GPIO_Init+0x202>
 800399a:	2306      	movs	r3, #6
 800399c:	e00c      	b.n	80039b8 <HAL_GPIO_Init+0x21c>
 800399e:	2307      	movs	r3, #7
 80039a0:	e00a      	b.n	80039b8 <HAL_GPIO_Init+0x21c>
 80039a2:	2305      	movs	r3, #5
 80039a4:	e008      	b.n	80039b8 <HAL_GPIO_Init+0x21c>
 80039a6:	2304      	movs	r3, #4
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x21c>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e004      	b.n	80039b8 <HAL_GPIO_Init+0x21c>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_Init+0x21c>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_GPIO_Init+0x21c>
 80039b6:	2300      	movs	r3, #0
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	f002 0203 	and.w	r2, r2, #3
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	4093      	lsls	r3, r2
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039c8:	4935      	ldr	r1, [pc, #212]	; (8003aa0 <HAL_GPIO_Init+0x304>)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d6:	4b3a      	ldr	r3, [pc, #232]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039fa:	4a31      	ldr	r2, [pc, #196]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a00:	4b2f      	ldr	r3, [pc, #188]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a24:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2a:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a78:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <HAL_GPIO_Init+0x324>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3301      	adds	r3, #1
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	f67f ae96 	bls.w	80037b8 <HAL_GPIO_Init+0x1c>
=======
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80ae 	beq.w	8003ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b5d      	ldr	r3, [pc, #372]	; (8003af0 <HAL_GPIO_Init+0x300>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a5c      	ldr	r2, [pc, #368]	; (8003af0 <HAL_GPIO_Init+0x300>)
 8003980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b5a      	ldr	r3, [pc, #360]	; (8003af0 <HAL_GPIO_Init+0x300>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003992:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4f      	ldr	r2, [pc, #316]	; (8003af8 <HAL_GPIO_Init+0x308>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d025      	beq.n	8003a0a <HAL_GPIO_Init+0x21a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4e      	ldr	r2, [pc, #312]	; (8003afc <HAL_GPIO_Init+0x30c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01f      	beq.n	8003a06 <HAL_GPIO_Init+0x216>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4d      	ldr	r2, [pc, #308]	; (8003b00 <HAL_GPIO_Init+0x310>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d019      	beq.n	8003a02 <HAL_GPIO_Init+0x212>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4c      	ldr	r2, [pc, #304]	; (8003b04 <HAL_GPIO_Init+0x314>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_GPIO_Init+0x20e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4b      	ldr	r2, [pc, #300]	; (8003b08 <HAL_GPIO_Init+0x318>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00d      	beq.n	80039fa <HAL_GPIO_Init+0x20a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_GPIO_Init+0x31c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <HAL_GPIO_Init+0x206>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <HAL_GPIO_Init+0x320>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_GPIO_Init+0x202>
 80039ee:	2306      	movs	r3, #6
 80039f0:	e00c      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e00a      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 80039f6:	2305      	movs	r3, #5
 80039f8:	e008      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 80039fa:	2304      	movs	r3, #4
 80039fc:	e006      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 80039fe:	2303      	movs	r3, #3
 8003a00:	e004      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e002      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_GPIO_Init+0x21c>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	f002 0203 	and.w	r2, r2, #3
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	4093      	lsls	r3, r2
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a1c:	4935      	ldr	r1, [pc, #212]	; (8003af4 <HAL_GPIO_Init+0x304>)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a2a:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a4e:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a7e:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003acc:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	f67f ae96 	bls.w	800380c <HAL_GPIO_Init+0x1c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
  }
}
<<<<<<< HEAD
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3724      	adds	r7, #36	; 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40021400 	.word	0x40021400
 8003abc:	40021800 	.word	0x40021800
 8003ac0:	40013c00 	.word	0x40013c00

08003ac4 <HAL_GPIO_WritePin>:
=======
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40020800 	.word	0x40020800
 8003b04:	40020c00 	.word	0x40020c00
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40021400 	.word	0x40021400
 8003b10:	40021800 	.word	0x40021800
 8003b14:	40013c00 	.word	0x40013c00

08003b18 <HAL_GPIO_WritePin>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	707b      	strb	r3, [r7, #1]
=======
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
 8003b24:	4613      	mov	r3, r2
 8003b26:	707b      	strb	r3, [r7, #1]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003ad4:	787b      	ldrb	r3, [r7, #1]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	619a      	str	r2, [r3, #24]
=======
 8003b28:	787b      	ldrb	r3, [r7, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8003ae0:	e003      	b.n	8003aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ae2:	887b      	ldrh	r3, [r7, #2]
 8003ae4:	041a      	lsls	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	619a      	str	r2, [r3, #24]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_PWREx_EnableOverDrive>:
=======
 8003b34:	e003      	b.n	8003b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	041a      	lsls	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	619a      	str	r2, [r3, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_PWREx_EnableOverDrive>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< HEAD
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_PWREx_EnableOverDrive+0x94>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b24:	f7fe fcdc 	bl	80024e0 <HAL_GetTick>
 8003b28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b2a:	e009      	b.n	8003b40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b2c:	f7fe fcd8 	bl	80024e0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b3a:	d901      	bls.n	8003b40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e01f      	b.n	8003b80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4c:	d1ee      	bne.n	8003b2c <HAL_PWREx_EnableOverDrive+0x34>
=======
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_PWREx_EnableOverDrive+0x90>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b78:	f7fe fcdc 	bl	8002534 <HAL_GetTick>
 8003b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b7e:	e009      	b.n	8003b94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b80:	f7fe fcd8 	bl	8002534 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b8e:	d901      	bls.n	8003b94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e01f      	b.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_PWREx_EnableOverDrive+0x34>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< HEAD
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b54:	f7fe fcc4 	bl	80024e0 <HAL_GetTick>
 8003b58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b5a:	e009      	b.n	8003b70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b5c:	f7fe fcc0 	bl	80024e0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b6a:	d901      	bls.n	8003b70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e007      	b.n	8003b80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b7c:	d1ee      	bne.n	8003b5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	420e0040 	.word	0x420e0040
 8003b90:	40007000 	.word	0x40007000
 8003b94:	420e0044 	.word	0x420e0044

08003b98 <HAL_RCC_ClockConfig>:
=======
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba8:	f7fe fcc4 	bl	8002534 <HAL_GetTick>
 8003bac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bae:	e009      	b.n	8003bc4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bb0:	f7fe fcc0 	bl	8002534 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bbe:	d901      	bls.n	8003bc4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e007      	b.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd0:	d1ee      	bne.n	8003bb0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	420e0040 	.word	0x420e0040
 8003be4:	40007000 	.word	0x40007000
 8003be8:	420e0044 	.word	0x420e0044

08003bec <HAL_RCC_ClockConfig>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
=======
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0cc      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0cc      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003bac:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d90c      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]
=======
 8003c00:	4b68      	ldr	r3, [pc, #416]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d90c      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x8a>
=======
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0e:	6093      	str	r3, [r2, #8]
=======
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
=======
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d044      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x120>
=======
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d044      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d119      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8003c66:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e067      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e067      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4934      	ldr	r1, [pc, #208]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7fe fc2a 	bl	80024e0 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7fe fc26 	bl	80024e0 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e04f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 020c 	and.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1eb      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xf8>
=======
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4934      	ldr	r1, [pc, #208]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fe fc2a 	bl	8002534 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fe fc26 	bl	8002534 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d20c      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]
=======
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d20c      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e032      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
=======
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
=======
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8003d1e:	f000 f855 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	490a      	ldr	r1, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	5ccb      	ldrb	r3, [r1, r3]
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fb8a 	bl	8002458 <HAL_InitTick>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023c00 	.word	0x40023c00
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08007d98 	.word	0x08007d98
 8003d5c:	2000000c 	.word	0x2000000c
 8003d60:	20000010 	.word	0x20000010

08003d64 <HAL_RCC_GetHCLKFreq>:
=======
 8003d72:	f000 f855 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490a      	ldr	r1, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fb8a 	bl	80024ac <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08007df0 	.word	0x08007df0
 8003db0:	2000000c 	.word	0x2000000c
 8003db4:	20000010 	.word	0x20000010

08003db8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <HAL_RCC_GetPCLK1Freq>:
=======
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c

08003dd0 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08007da8 	.word	0x08007da8

08003da4 <HAL_RCC_GetPCLK2Freq>:
=======
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd4:	f7ff fff0 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0a9b      	lsrs	r3, r3, #10
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08007e00 	.word	0x08007e00

08003df8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffdc 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0b5b      	lsrs	r3, r3, #13
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08007da8 	.word	0x08007da8

08003dcc <HAL_RCC_GetSysClockFreq>:
=======
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dfc:	f7ff ffdc 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0b5b      	lsrs	r3, r3, #13
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	08007e00 	.word	0x08007e00

08003e20 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b088      	sub	sp, #32
 8003dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de8:	4bce      	ldr	r3, [pc, #824]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	f200 818d 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x344>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <HAL_RCC_GetSysClockFreq+0x30>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08004111 	.word	0x08004111
 8003e04:	08004111 	.word	0x08004111
 8003e08:	08004111 	.word	0x08004111
 8003e0c:	08003e37 	.word	0x08003e37
 8003e10:	08004111 	.word	0x08004111
 8003e14:	08004111 	.word	0x08004111
 8003e18:	08004111 	.word	0x08004111
 8003e1c:	08003e3d 	.word	0x08003e3d
 8003e20:	08004111 	.word	0x08004111
 8003e24:	08004111 	.word	0x08004111
 8003e28:	08004111 	.word	0x08004111
 8003e2c:	08003fb1 	.word	0x08003fb1
=======
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b088      	sub	sp, #32
 8003e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e3c:	4bce      	ldr	r3, [pc, #824]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	f200 818d 	bhi.w	8004164 <HAL_RCC_GetSysClockFreq+0x344>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_RCC_GetSysClockFreq+0x30>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08004165 	.word	0x08004165
 8003e58:	08004165 	.word	0x08004165
 8003e5c:	08004165 	.word	0x08004165
 8003e60:	08003e8b 	.word	0x08003e8b
 8003e64:	08004165 	.word	0x08004165
 8003e68:	08004165 	.word	0x08004165
 8003e6c:	08004165 	.word	0x08004165
 8003e70:	08003e91 	.word	0x08003e91
 8003e74:	08004165 	.word	0x08004165
 8003e78:	08004165 	.word	0x08004165
 8003e7c:	08004165 	.word	0x08004165
 8003e80:	08004005 	.word	0x08004005
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003e30:	4bbd      	ldr	r3, [pc, #756]	; (8004128 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e32:	61bb      	str	r3, [r7, #24]
       break;
 8003e34:	e16f      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x34a>
=======
 8003e84:	4bbd      	ldr	r3, [pc, #756]	; (800417c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e86:	61bb      	str	r3, [r7, #24]
       break;
 8003e88:	e16f      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x34a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003e36:	4bbd      	ldr	r3, [pc, #756]	; (800412c <HAL_RCC_GetSysClockFreq+0x360>)
 8003e38:	61bb      	str	r3, [r7, #24]
      break;
 8003e3a:	e16c      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x34a>
=======
 8003e8a:	4bbd      	ldr	r3, [pc, #756]	; (8004180 <HAL_RCC_GetSysClockFreq+0x360>)
 8003e8c:	61bb      	str	r3, [r7, #24]
      break;
 8003e8e:	e16c      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x34a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003e3c:	4bb9      	ldr	r3, [pc, #740]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e46:	4bb7      	ldr	r3, [pc, #732]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d053      	beq.n	8003efa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e52:	4bb4      	ldr	r3, [pc, #720]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	ea02 0400 	and.w	r4, r2, r0
 8003e6a:	603c      	str	r4, [r7, #0]
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	014b      	lsls	r3, r1, #5
 8003e82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e86:	0142      	lsls	r2, r0, #5
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	1ac0      	subs	r0, r0, r3
 8003e90:	462b      	mov	r3, r5
 8003e92:	eb61 0103 	sbc.w	r1, r1, r3
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	018b      	lsls	r3, r1, #6
 8003ea0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ea4:	0182      	lsls	r2, r0, #6
 8003ea6:	1a12      	subs	r2, r2, r0
 8003ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8003eac:	f04f 0000 	mov.w	r0, #0
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	00d9      	lsls	r1, r3, #3
 8003eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eba:	00d0      	lsls	r0, r2, #3
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	1852      	adds	r2, r2, r1
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	eb43 0101 	adc.w	r1, r3, r1
 8003eca:	460b      	mov	r3, r1
 8003ecc:	f04f 0000 	mov.w	r0, #0
 8003ed0:	f04f 0100 	mov.w	r1, #0
 8003ed4:	0259      	lsls	r1, r3, #9
 8003ed6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003eda:	0250      	lsls	r0, r2, #9
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	f7fc fea4 	bl	8000c38 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	e04c      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x1c8>
=======
 8003e90:	4bb9      	ldr	r3, [pc, #740]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e98:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e9a:	4bb7      	ldr	r3, [pc, #732]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d053      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea6:	4bb4      	ldr	r3, [pc, #720]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	461a      	mov	r2, r3
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	ea02 0400 	and.w	r4, r2, r0
 8003ebe:	603c      	str	r4, [r7, #0]
 8003ec0:	400b      	ands	r3, r1
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ec8:	4620      	mov	r0, r4
 8003eca:	4629      	mov	r1, r5
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	014b      	lsls	r3, r1, #5
 8003ed6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eda:	0142      	lsls	r2, r0, #5
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	1ac0      	subs	r0, r0, r3
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	eb61 0103 	sbc.w	r1, r1, r3
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	018b      	lsls	r3, r1, #6
 8003ef4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ef8:	0182      	lsls	r2, r0, #6
 8003efa:	1a12      	subs	r2, r2, r0
 8003efc:	eb63 0301 	sbc.w	r3, r3, r1
 8003f00:	f04f 0000 	mov.w	r0, #0
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	00d9      	lsls	r1, r3, #3
 8003f0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f0e:	00d0      	lsls	r0, r2, #3
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4621      	mov	r1, r4
 8003f16:	1852      	adds	r2, r2, r1
 8003f18:	4629      	mov	r1, r5
 8003f1a:	eb43 0101 	adc.w	r1, r3, r1
 8003f1e:	460b      	mov	r3, r1
 8003f20:	f04f 0000 	mov.w	r0, #0
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	0259      	lsls	r1, r3, #9
 8003f2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f2e:	0250      	lsls	r0, r2, #9
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	f7fc fe7a 	bl	8000c38 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4613      	mov	r3, r2
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e04c      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x1c8>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8003efa:	4b8a      	ldr	r3, [pc, #552]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	099b      	lsrs	r3, r3, #6
 8003f00:	461a      	mov	r2, r3
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	ea02 0a00 	and.w	sl, r2, r0
 8003f12:	ea03 0b01 	and.w	fp, r3, r1
 8003f16:	4650      	mov	r0, sl
 8003f18:	4659      	mov	r1, fp
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	014b      	lsls	r3, r1, #5
 8003f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f28:	0142      	lsls	r2, r0, #5
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	ebb0 000a 	subs.w	r0, r0, sl
 8003f32:	eb61 010b 	sbc.w	r1, r1, fp
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	018b      	lsls	r3, r1, #6
 8003f40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f44:	0182      	lsls	r2, r0, #6
 8003f46:	1a12      	subs	r2, r2, r0
 8003f48:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4c:	f04f 0000 	mov.w	r0, #0
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	00d9      	lsls	r1, r3, #3
 8003f56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f5a:	00d0      	lsls	r0, r2, #3
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	eb12 020a 	adds.w	r2, r2, sl
 8003f64:	eb43 030b 	adc.w	r3, r3, fp
 8003f68:	f04f 0000 	mov.w	r0, #0
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	0299      	lsls	r1, r3, #10
 8003f72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f76:	0290      	lsls	r0, r2, #10
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	f7fc fe56 	bl	8000c38 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f94:	4b63      	ldr	r3, [pc, #396]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	61bb      	str	r3, [r7, #24]
      break;
 8003fae:	e0b2      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x34a>
=======
 8003f4e:	4b8a      	ldr	r3, [pc, #552]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	461a      	mov	r2, r3
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	ea02 0a00 	and.w	sl, r2, r0
 8003f66:	ea03 0b01 	and.w	fp, r3, r1
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	014b      	lsls	r3, r1, #5
 8003f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f7c:	0142      	lsls	r2, r0, #5
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	ebb0 000a 	subs.w	r0, r0, sl
 8003f86:	eb61 010b 	sbc.w	r1, r1, fp
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	018b      	lsls	r3, r1, #6
 8003f94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f98:	0182      	lsls	r2, r0, #6
 8003f9a:	1a12      	subs	r2, r2, r0
 8003f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa0:	f04f 0000 	mov.w	r0, #0
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	00d9      	lsls	r1, r3, #3
 8003faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fae:	00d0      	lsls	r0, r2, #3
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	eb12 020a 	adds.w	r2, r2, sl
 8003fb8:	eb43 030b 	adc.w	r3, r3, fp
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	0299      	lsls	r1, r3, #10
 8003fc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fca:	0290      	lsls	r0, r2, #10
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f7fc fe2c 	bl	8000c38 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fe8:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	61bb      	str	r3, [r7, #24]
      break;
 8004002:	e0b2      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x34a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003fb0:	4b5c      	ldr	r3, [pc, #368]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fba:	4b5a      	ldr	r3, [pc, #360]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04d      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b57      	ldr	r3, [pc, #348]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	ea02 0800 	and.w	r8, r2, r0
 8003fde:	ea03 0901 	and.w	r9, r3, r1
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	014b      	lsls	r3, r1, #5
 8003ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ff4:	0142      	lsls	r2, r0, #5
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	ebb0 0008 	subs.w	r0, r0, r8
 8003ffe:	eb61 0109 	sbc.w	r1, r1, r9
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	018b      	lsls	r3, r1, #6
 800400c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004010:	0182      	lsls	r2, r0, #6
 8004012:	1a12      	subs	r2, r2, r0
 8004014:	eb63 0301 	sbc.w	r3, r3, r1
 8004018:	f04f 0000 	mov.w	r0, #0
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	00d9      	lsls	r1, r3, #3
 8004022:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004026:	00d0      	lsls	r0, r2, #3
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	eb12 0208 	adds.w	r2, r2, r8
 8004030:	eb43 0309 	adc.w	r3, r3, r9
 8004034:	f04f 0000 	mov.w	r0, #0
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	0259      	lsls	r1, r3, #9
 800403e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004042:	0250      	lsls	r0, r2, #9
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	461a      	mov	r2, r3
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	f7fc fdf0 	bl	8000c38 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	e04a      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x32c>
=======
 8004004:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800400c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400e:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04d      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b57      	ldr	r3, [pc, #348]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	461a      	mov	r2, r3
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	f240 10ff 	movw	r0, #511	; 0x1ff
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	ea02 0800 	and.w	r8, r2, r0
 8004032:	ea03 0901 	and.w	r9, r3, r1
 8004036:	4640      	mov	r0, r8
 8004038:	4649      	mov	r1, r9
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	014b      	lsls	r3, r1, #5
 8004044:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004048:	0142      	lsls	r2, r0, #5
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	ebb0 0008 	subs.w	r0, r0, r8
 8004052:	eb61 0109 	sbc.w	r1, r1, r9
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	018b      	lsls	r3, r1, #6
 8004060:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004064:	0182      	lsls	r2, r0, #6
 8004066:	1a12      	subs	r2, r2, r0
 8004068:	eb63 0301 	sbc.w	r3, r3, r1
 800406c:	f04f 0000 	mov.w	r0, #0
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	00d9      	lsls	r1, r3, #3
 8004076:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800407a:	00d0      	lsls	r0, r2, #3
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	eb12 0208 	adds.w	r2, r2, r8
 8004084:	eb43 0309 	adc.w	r3, r3, r9
 8004088:	f04f 0000 	mov.w	r0, #0
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	0259      	lsls	r1, r3, #9
 8004092:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004096:	0250      	lsls	r0, r2, #9
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	f7fc fdc6 	bl	8000c38 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	e04a      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x32c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8004062:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	461a      	mov	r2, r3
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	ea02 0400 	and.w	r4, r2, r0
 800407a:	ea03 0501 	and.w	r5, r3, r1
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	014b      	lsls	r3, r1, #5
 800408c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004090:	0142      	lsls	r2, r0, #5
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	1b00      	subs	r0, r0, r4
 8004098:	eb61 0105 	sbc.w	r1, r1, r5
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	018b      	lsls	r3, r1, #6
 80040a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040aa:	0182      	lsls	r2, r0, #6
 80040ac:	1a12      	subs	r2, r2, r0
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	00d9      	lsls	r1, r3, #3
 80040bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040c0:	00d0      	lsls	r0, r2, #3
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	1912      	adds	r2, r2, r4
 80040c8:	eb45 0303 	adc.w	r3, r5, r3
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	0299      	lsls	r1, r3, #10
 80040d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040da:	0290      	lsls	r0, r2, #10
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	f7fc fda4 	bl	8000c38 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0f1b      	lsrs	r3, r3, #28
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	61bb      	str	r3, [r7, #24]
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x34a>
=======
 80040b6:	4b30      	ldr	r3, [pc, #192]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	461a      	mov	r2, r3
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	ea02 0400 	and.w	r4, r2, r0
 80040ce:	ea03 0501 	and.w	r5, r3, r1
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	014b      	lsls	r3, r1, #5
 80040e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040e4:	0142      	lsls	r2, r0, #5
 80040e6:	4610      	mov	r0, r2
 80040e8:	4619      	mov	r1, r3
 80040ea:	1b00      	subs	r0, r0, r4
 80040ec:	eb61 0105 	sbc.w	r1, r1, r5
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	018b      	lsls	r3, r1, #6
 80040fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040fe:	0182      	lsls	r2, r0, #6
 8004100:	1a12      	subs	r2, r2, r0
 8004102:	eb63 0301 	sbc.w	r3, r3, r1
 8004106:	f04f 0000 	mov.w	r0, #0
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	00d9      	lsls	r1, r3, #3
 8004110:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004114:	00d0      	lsls	r0, r2, #3
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	1912      	adds	r2, r2, r4
 800411c:	eb45 0303 	adc.w	r3, r5, r3
 8004120:	f04f 0000 	mov.w	r0, #0
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	0299      	lsls	r1, r3, #10
 800412a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800412e:	0290      	lsls	r0, r2, #10
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	461a      	mov	r2, r3
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	f7fc fd7a 	bl	8000c38 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4613      	mov	r3, r2
 800414a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	0f1b      	lsrs	r3, r3, #28
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	61bb      	str	r3, [r7, #24]
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x34a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004112:	61bb      	str	r3, [r7, #24]
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	69bb      	ldr	r3, [r7, #24]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	007a1200 	.word	0x007a1200

08004130 <HAL_RCC_OscConfig>:
=======
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004166:	61bb      	str	r3, [r7, #24]
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	69bb      	ldr	r3, [r7, #24]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	00f42400 	.word	0x00f42400
 8004180:	007a1200 	.word	0x007a1200

08004184 <HAL_RCC_OscConfig>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
=======
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e28d      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
=======
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e28d      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8083 	beq.w	8004256 <HAL_RCC_OscConfig+0x126>
=======
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8083 	beq.w	80042aa <HAL_RCC_OscConfig+0x126>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
<<<<<<< HEAD
 8004150:	4b94      	ldr	r3, [pc, #592]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b04      	cmp	r3, #4
 800415a:	d019      	beq.n	8004190 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800415c:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004164:	2b08      	cmp	r3, #8
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004168:	4b8e      	ldr	r3, [pc, #568]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004174:	d00c      	beq.n	8004190 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004176:	4b8b      	ldr	r3, [pc, #556]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d112      	bne.n	80041a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004182:	4b88      	ldr	r3, [pc, #544]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418e:	d10b      	bne.n	80041a8 <HAL_RCC_OscConfig+0x78>
=======
 80041a4:	4b94      	ldr	r3, [pc, #592]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d019      	beq.n	80041e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041b0:	4b91      	ldr	r3, [pc, #580]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041bc:	4b8e      	ldr	r3, [pc, #568]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c8:	d00c      	beq.n	80041e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ca:	4b8b      	ldr	r3, [pc, #556]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d112      	bne.n	80041fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d6:	4b88      	ldr	r3, [pc, #544]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e2:	d10b      	bne.n	80041fc <HAL_RCC_OscConfig+0x78>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8004190:	4b84      	ldr	r3, [pc, #528]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05b      	beq.n	8004254 <HAL_RCC_OscConfig+0x124>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d157      	bne.n	8004254 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e25a      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
=======
 80041e4:	4b84      	ldr	r3, [pc, #528]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d05b      	beq.n	80042a8 <HAL_RCC_OscConfig+0x124>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d157      	bne.n	80042a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e25a      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b0:	d106      	bne.n	80041c0 <HAL_RCC_OscConfig+0x90>
 80041b2:	4b7c      	ldr	r3, [pc, #496]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a7b      	ldr	r2, [pc, #492]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e01d      	b.n	80041fc <HAL_RCC_OscConfig+0xcc>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0xb4>
 80041ca:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a75      	ldr	r2, [pc, #468]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a72      	ldr	r2, [pc, #456]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0xcc>
 80041e4:	4b6f      	ldr	r3, [pc, #444]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6e      	ldr	r2, [pc, #440]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b6c      	ldr	r3, [pc, #432]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6b      	ldr	r2, [pc, #428]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80041f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d013      	beq.n	800422c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fe f96c 	bl	80024e0 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fe f968 	bl	80024e0 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e21f      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0xdc>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x126>
=======
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d106      	bne.n	8004214 <HAL_RCC_OscConfig+0x90>
 8004206:	4b7c      	ldr	r3, [pc, #496]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7b      	ldr	r2, [pc, #492]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e01d      	b.n	8004250 <HAL_RCC_OscConfig+0xcc>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0xb4>
 800421e:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a75      	ldr	r2, [pc, #468]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 8004224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b73      	ldr	r3, [pc, #460]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a72      	ldr	r2, [pc, #456]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xcc>
 8004238:	4b6f      	ldr	r3, [pc, #444]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6e      	ldr	r2, [pc, #440]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b6c      	ldr	r3, [pc, #432]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6b      	ldr	r2, [pc, #428]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe f96c 	bl	8002534 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004260:	f7fe f968 	bl	8002534 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e21f      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b61      	ldr	r3, [pc, #388]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0xdc>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x126>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800422c:	f7fe f958 	bl	80024e0 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7fe f954 	bl	80024e0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e20b      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004246:	4b57      	ldr	r3, [pc, #348]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x104>
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	bf00      	nop
=======
 8004280:	f7fe f958 	bl	8002534 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe f954 	bl	8002534 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e20b      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	4b57      	ldr	r3, [pc, #348]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x104>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d06f      	beq.n	8004342 <HAL_RCC_OscConfig+0x212>
=======
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d06f      	beq.n	8004396 <HAL_RCC_OscConfig+0x212>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
<<<<<<< HEAD
 8004262:	4b50      	ldr	r3, [pc, #320]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b00      	cmp	r3, #0
 800426c:	d017      	beq.n	800429e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800426e:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004276:	2b08      	cmp	r3, #8
 8004278:	d105      	bne.n	8004286 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004292:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x19c>
=======
 80042b6:	4b50      	ldr	r3, [pc, #320]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d017      	beq.n	80042f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042c2:	4b4d      	ldr	r3, [pc, #308]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d105      	bne.n	80042da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ce:	4b4a      	ldr	r3, [pc, #296]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042da:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d11c      	bne.n	8004320 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b44      	ldr	r3, [pc, #272]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d116      	bne.n	8004320 <HAL_RCC_OscConfig+0x19c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 800429e:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x186>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1d3      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
=======
 80042f2:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_RCC_OscConfig+0x186>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d001      	beq.n	800430a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e1d3      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80042b6:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4937      	ldr	r1, [pc, #220]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e03a      	b.n	8004342 <HAL_RCC_OscConfig+0x212>
=======
 800430a:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4937      	ldr	r1, [pc, #220]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	e03a      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCC_OscConfig+0x278>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fe f901 	bl	80024e0 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fe f8fd 	bl	80024e0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1b4      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1b2>
=======
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d020      	beq.n	800436a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <HAL_RCC_OscConfig+0x278>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fe f901 	bl	8002534 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004336:	f7fe f8fd 	bl	8002534 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e1b4      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x1b2>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004300:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4925      	ldr	r1, [pc, #148]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x212>
=======
 8004354:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4925      	ldr	r1, [pc, #148]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]
 8004368:	e015      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_OscConfig+0x278>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fe f8e0 	bl	80024e0 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004324:	f7fe f8dc 	bl	80024e0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e193      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1f4>
=======
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCC_OscConfig+0x278>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fe f8e0 	bl	8002534 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004378:	f7fe f8dc 	bl	8002534 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e193      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d036      	beq.n	80043bc <HAL_RCC_OscConfig+0x28c>
=======
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d036      	beq.n	8004410 <HAL_RCC_OscConfig+0x28c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fe f8c0 	bl	80024e0 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004364:	f7fe f8bc 	bl	80024e0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e173      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x234>
 8004382:	e01b      	b.n	80043bc <HAL_RCC_OscConfig+0x28c>
=======
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <HAL_RCC_OscConfig+0x27c>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fe f8c0 	bl	8002534 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b8:	f7fe f8bc 	bl	8002534 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e173      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0x234>
 80043d6:	e01b      	b.n	8004410 <HAL_RCC_OscConfig+0x28c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fe f8a9 	bl	80024e0 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004390:	e00e      	b.n	80043b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004392:	f7fe f8a5 	bl	80024e0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d907      	bls.n	80043b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e15c      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	42470000 	.word	0x42470000
 80043ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	4b8a      	ldr	r3, [pc, #552]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ea      	bne.n	8004392 <HAL_RCC_OscConfig+0x262>
=======
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_OscConfig+0x27c>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fe f8a9 	bl	8002534 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e4:	e00e      	b.n	8004404 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e6:	f7fe f8a5 	bl	8002534 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d907      	bls.n	8004404 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e15c      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
 80043f8:	40023800 	.word	0x40023800
 80043fc:	42470000 	.word	0x42470000
 8004400:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	4b8a      	ldr	r3, [pc, #552]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ea      	bne.n	80043e6 <HAL_RCC_OscConfig+0x262>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8097 	beq.w	80044f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]
=======
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8097 	beq.w	800454c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80043ce:	4b83      	ldr	r3, [pc, #524]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	4b7f      	ldr	r3, [pc, #508]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a7e      	ldr	r2, [pc, #504]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ea:	4b7c      	ldr	r3, [pc, #496]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4b79      	ldr	r3, [pc, #484]	; (80045e0 <HAL_RCC_OscConfig+0x4b0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d118      	bne.n	8004438 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004406:	4b76      	ldr	r3, [pc, #472]	; (80045e0 <HAL_RCC_OscConfig+0x4b0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a75      	ldr	r2, [pc, #468]	; (80045e0 <HAL_RCC_OscConfig+0x4b0>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004412:	f7fe f865 	bl	80024e0 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441a:	f7fe f861 	bl	80024e0 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e118      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	4b6c      	ldr	r3, [pc, #432]	; (80045e0 <HAL_RCC_OscConfig+0x4b0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x2ea>
=======
 8004422:	4b83      	ldr	r3, [pc, #524]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	4b7f      	ldr	r3, [pc, #508]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a7e      	ldr	r2, [pc, #504]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b7c      	ldr	r3, [pc, #496]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4b79      	ldr	r3, [pc, #484]	; (8004634 <HAL_RCC_OscConfig+0x4b0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x4b0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x4b0>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fe f865 	bl	8002534 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fe f861 	bl	8002534 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e118      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x4b0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2ea>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x31e>
 8004440:	4b66      	ldr	r3, [pc, #408]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a65      	ldr	r2, [pc, #404]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	e01c      	b.n	8004488 <HAL_RCC_OscConfig+0x358>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b05      	cmp	r3, #5
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x340>
 8004456:	4b61      	ldr	r3, [pc, #388]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a60      	ldr	r2, [pc, #384]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	6713      	str	r3, [r2, #112]	; 0x70
 8004462:	4b5e      	ldr	r3, [pc, #376]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	4a5d      	ldr	r2, [pc, #372]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6713      	str	r3, [r2, #112]	; 0x70
 800446e:	e00b      	b.n	8004488 <HAL_RCC_OscConfig+0x358>
 8004470:	4b5a      	ldr	r3, [pc, #360]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	4a59      	ldr	r2, [pc, #356]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6713      	str	r3, [r2, #112]	; 0x70
 800447c:	4b57      	ldr	r3, [pc, #348]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a56      	ldr	r2, [pc, #344]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004482:	f023 0304 	bic.w	r3, r3, #4
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d015      	beq.n	80044bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fe f826 	bl	80024e0 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fe f822 	bl	80024e0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0d7      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ae:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ee      	beq.n	8004498 <HAL_RCC_OscConfig+0x368>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x3b6>
=======
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x31e>
 8004494:	4b66      	ldr	r3, [pc, #408]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a65      	ldr	r2, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	e01c      	b.n	80044dc <HAL_RCC_OscConfig+0x358>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x340>
 80044aa:	4b61      	ldr	r3, [pc, #388]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a60      	ldr	r2, [pc, #384]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	f043 0304 	orr.w	r3, r3, #4
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
 80044b6:	4b5e      	ldr	r3, [pc, #376]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a5d      	ldr	r2, [pc, #372]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0x358>
 80044c4:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a59      	ldr	r2, [pc, #356]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
 80044d0:	4b57      	ldr	r3, [pc, #348]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a56      	ldr	r2, [pc, #344]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	f023 0304 	bic.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fe f826 	bl	8002534 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7fe f822 	bl	8002534 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0d7      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0ee      	beq.n	80044ec <HAL_RCC_OscConfig+0x368>
 800450e:	e014      	b.n	800453a <HAL_RCC_OscConfig+0x3b6>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80044bc:	f7fe f810 	bl	80024e0 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c2:	e00a      	b.n	80044da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fe f80c 	bl	80024e0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0c1      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044da:	4b40      	ldr	r3, [pc, #256]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ee      	bne.n	80044c4 <HAL_RCC_OscConfig+0x394>
=======
 8004510:	f7fe f810 	bl	8002534 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fe f80c 	bl	8002534 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0c1      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452e:	4b40      	ldr	r3, [pc, #256]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1ee      	bne.n	8004518 <HAL_RCC_OscConfig+0x394>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ec:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6413      	str	r3, [r2, #64]	; 0x40
=======
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004540:	4b3b      	ldr	r3, [pc, #236]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	4a3a      	ldr	r2, [pc, #232]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454a:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80ad 	beq.w	800465c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b08      	cmp	r3, #8
 800450c:	d060      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d145      	bne.n	80045a2 <HAL_RCC_OscConfig+0x472>
=======
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80ad 	beq.w	80046b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b08      	cmp	r3, #8
 8004560:	d060      	beq.n	8004624 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d145      	bne.n	80045f6 <HAL_RCC_OscConfig+0x472>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_RCC_OscConfig+0x4b4>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd ffe0 	bl	80024e0 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004524:	f7fd ffdc 	bl	80024e0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e093      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	4b29      	ldr	r3, [pc, #164]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x3f4>
=======
 800456a:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_RCC_OscConfig+0x4b4>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd ffe0 	bl	8002534 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004578:	f7fd ffdc 	bl	8002534 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e093      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x3f4>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	071b      	lsls	r3, r3, #28
 800456e:	491b      	ldr	r1, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
=======
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	3b01      	subs	r3, #1
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	071b      	lsls	r3, r3, #28
 80045c2:	491b      	ldr	r1, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x4b4>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fd ffb1 	bl	80024e0 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004582:	f7fd ffad 	bl	80024e0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e064      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x452>
 80045a0:	e05c      	b.n	800465c <HAL_RCC_OscConfig+0x52c>
=======
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x4b4>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fd ffb1 	bl	8002534 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fd ffad 	bl	8002534 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e064      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x452>
 80045f4:	e05c      	b.n	80046b0 <HAL_RCC_OscConfig+0x52c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCC_OscConfig+0x4b4>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd ff9a 	bl	80024e0 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd ff96 	bl	80024e0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e04d      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_OscConfig+0x4ac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x480>
 80045ce:	e045      	b.n	800465c <HAL_RCC_OscConfig+0x52c>
=======
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCC_OscConfig+0x4b4>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fd ff9a 	bl	8002534 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd ff96 	bl	8002534 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e04d      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x480>
 8004622:	e045      	b.n	80046b0 <HAL_RCC_OscConfig+0x52c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e040      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40007000 	.word	0x40007000
 80045e4:	42470060 	.word	0x42470060
=======
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e040      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
 8004638:	42470060 	.word	0x42470060
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <HAL_RCC_OscConfig+0x538>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d030      	beq.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d129      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d122      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004620:	4293      	cmp	r3, r2
 8004622:	d119      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	3b01      	subs	r3, #1
 8004632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d10f      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d107      	bne.n	8004658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d001      	beq.n	800465c <HAL_RCC_OscConfig+0x52c>
=======
 800463c:	4b1f      	ldr	r3, [pc, #124]	; (80046bc <HAL_RCC_OscConfig+0x538>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d030      	beq.n	80046ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d129      	bne.n	80046ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d122      	bne.n	80046ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004674:	4293      	cmp	r3, r2
 8004676:	d119      	bne.n	80046ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d10f      	bne.n	80046ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d107      	bne.n	80046ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_OscConfig+0x52c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
<<<<<<< HEAD
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x52e>
=======
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <HAL_RCC_OscConfig+0x52e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023800 	.word	0x40023800

0800466c <HAL_TIM_Base_Init>:
=======
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800

080046c0 <HAL_TIM_Base_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e041      	b.n	8004702 <HAL_TIM_Base_Init+0x96>
=======
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e041      	b.n	8004756 <HAL_TIM_Base_Init+0x96>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd fd50 	bl	8002138 <HAL_TIM_Base_MspInit>
=======
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fd fd50 	bl	800218c <HAL_TIM_Base_MspInit>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 fa80 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_TIM_Base_Start_IT>:
=======
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f000 fa80 	bl	8004c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_TIM_Base_Start_IT>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
=======
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d001      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e04e      	b.n	80047c2 <HAL_TIM_Base_Start_IT+0xb6>
=======
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d001      	beq.n	8004778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e04e      	b.n	8004816 <HAL_TIM_Base_Start_IT+0xb6>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d01d      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_TIM_Base_Start_IT+0xd0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d111      	bne.n	80047b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b06      	cmp	r3, #6
 800479c:	d010      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	e007      	b.n	80047c0 <HAL_TIM_Base_Start_IT+0xb4>
=======
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a23      	ldr	r2, [pc, #140]	; (8004824 <HAL_TIM_Base_Start_IT+0xc4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d022      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x80>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a2:	d01d      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x80>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <HAL_TIM_Base_Start_IT+0xc8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d018      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1e      	ldr	r2, [pc, #120]	; (800482c <HAL_TIM_Base_Start_IT+0xcc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d013      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <HAL_TIM_Base_Start_IT+0xd0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_TIM_Base_Start_IT+0xd4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x80>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_TIM_Base_Start_IT+0xd8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x80>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a18      	ldr	r2, [pc, #96]	; (800483c <HAL_TIM_Base_Start_IT+0xdc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d111      	bne.n	8004804 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b06      	cmp	r3, #6
 80047f0:	d010      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004802:	e007      	b.n	8004814 <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
=======
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40001800 	.word	0x40001800

080047ec <HAL_TIM_OC_Init>:
=======
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40010400 	.word	0x40010400
 8004838:	40014000 	.word	0x40014000
 800483c:	40001800 	.word	0x40001800

08004840 <HAL_TIM_OC_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e041      	b.n	8004882 <HAL_TIM_OC_Init+0x96>
=======
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e041      	b.n	80048d6 <HAL_TIM_OC_Init+0x96>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
<<<<<<< HEAD
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f839 	bl	800488a <HAL_TIM_OC_MspInit>
=======
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f839 	bl	80048de <HAL_TIM_OC_MspInit>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f000 f9c0 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_OC_MspInit>:
=======
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 f9c0 	bl	8004c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_TIM_OC_MspInit>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
=======
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_IRQHandler>:
=======
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIM_IRQHandler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d122      	bne.n	80048fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d11b      	bne.n	80048fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0202 	mvn.w	r2, #2
 80048ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x4a>
=======
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d122      	bne.n	800494e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d11b      	bne.n	800494e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f06f 0202 	mvn.w	r2, #2
 800491e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f947 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 80048e6:	e005      	b.n	80048f4 <HAL_TIM_IRQHandler+0x56>
=======
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f947 	bl	8004bc8 <HAL_TIM_IC_CaptureCallback>
 800493a:	e005      	b.n	8004948 <HAL_TIM_IRQHandler+0x56>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f939 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f94a 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	771a      	strb	r2, [r3, #28]
=======
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f939 	bl	8004bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f94a 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	771a      	strb	r2, [r3, #28]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d122      	bne.n	800494e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b04      	cmp	r3, #4
 8004914:	d11b      	bne.n	800494e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f06f 0204 	mvn.w	r2, #4
 800491e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_TIM_IRQHandler+0x9e>
=======
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d122      	bne.n	80049a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d11b      	bne.n	80049a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0204 	mvn.w	r2, #4
 8004972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f91d 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 800493a:	e005      	b.n	8004948 <HAL_TIM_IRQHandler+0xaa>
=======
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f91d 	bl	8004bc8 <HAL_TIM_IC_CaptureCallback>
 800498e:	e005      	b.n	800499c <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f90f 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f920 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	771a      	strb	r2, [r3, #28]
=======
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f90f 	bl	8004bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f920 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	771a      	strb	r2, [r3, #28]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d122      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b08      	cmp	r3, #8
 8004968:	d11b      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0208 	mvn.w	r2, #8
 8004972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2204      	movs	r2, #4
 8004978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_TIM_IRQHandler+0xf2>
=======
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d122      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d11b      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f06f 0208 	mvn.w	r2, #8
 80049c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2204      	movs	r2, #4
 80049cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8f3 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 800498e:	e005      	b.n	800499c <HAL_TIM_IRQHandler+0xfe>
=======
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f8f3 	bl	8004bc8 <HAL_TIM_IC_CaptureCallback>
 80049e2:	e005      	b.n	80049f0 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f8e5 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8f6 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	771a      	strb	r2, [r3, #28]
=======
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f8e5 	bl	8004bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8f6 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	771a      	strb	r2, [r3, #28]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d122      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d11b      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f06f 0210 	mvn.w	r2, #16
 80049c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2208      	movs	r2, #8
 80049cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x146>
=======
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d122      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d11b      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f06f 0210 	mvn.w	r2, #16
 8004a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2208      	movs	r2, #8
 8004a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x146>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f8c9 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 80049e2:	e005      	b.n	80049f0 <HAL_TIM_IRQHandler+0x152>
=======
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f8c9 	bl	8004bc8 <HAL_TIM_IC_CaptureCallback>
 8004a36:	e005      	b.n	8004a44 <HAL_TIM_IRQHandler+0x152>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f8bb 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8cc 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	771a      	strb	r2, [r3, #28]
=======
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f8bb 	bl	8004bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f8cc 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	771a      	strb	r2, [r3, #28]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10e      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f06f 0201 	mvn.w	r2, #1
 8004a1a:	611a      	str	r2, [r3, #16]
=======
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10e      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f06f 0201 	mvn.w	r2, #1
 8004a6e:	611a      	str	r2, [r3, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fc fd33 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
=======
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fc fd5d 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d10e      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a46:	611a      	str	r2, [r3, #16]
=======
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d10e      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b80      	cmp	r3, #128	; 0x80
 8004a90:	d107      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a9a:	611a      	str	r2, [r3, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb0b 	bl	8005064 <HAL_TIMEx_BreakCallback>
=======
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fb0b 	bl	80050b8 <HAL_TIMEx_BreakCallback>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d10e      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d107      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a72:	611a      	str	r2, [r3, #16]
=======
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d10e      	bne.n	8004ace <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d107      	bne.n	8004ace <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac6:	611a      	str	r2, [r3, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f891 	bl	8004b9c <HAL_TIM_TriggerCallback>
=======
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f891 	bl	8004bf0 <HAL_TIM_TriggerCallback>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d10e      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d107      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0220 	mvn.w	r2, #32
 8004a9e:	611a      	str	r2, [r3, #16]
=======
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d10e      	bne.n	8004afa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0220 	mvn.w	r2, #32
 8004af2:	611a      	str	r2, [r3, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fad5 	bl	8005050 <HAL_TIMEx_CommutCallback>
=======
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fad5 	bl	80050a4 <HAL_TIMEx_CommutCallback>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_TIM_OC_ConfigChannel>:
=======
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <HAL_TIM_OC_ConfigChannel>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
<<<<<<< HEAD
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
=======
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_OC_ConfigChannel+0x1a>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e046      	b.n	8004b58 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	d839      	bhi.n	8004b4c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004b4d 	.word	0x08004b4d
 8004aec:	08004b4d 	.word	0x08004b4d
 8004af0:	08004b23 	.word	0x08004b23
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004b4d 	.word	0x08004b4d
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b4d 	.word	0x08004b4d
 8004b0c:	08004b4d 	.word	0x08004b4d
 8004b10:	08004b3f 	.word	0x08004b3f
=======
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_OC_ConfigChannel+0x1a>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e046      	b.n	8004bac <HAL_TIM_OC_ConfigChannel+0xa8>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	d839      	bhi.n	8004ba0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004ba1 	.word	0x08004ba1
 8004b3c:	08004ba1 	.word	0x08004ba1
 8004b40:	08004ba1 	.word	0x08004ba1
 8004b44:	08004b77 	.word	0x08004b77
 8004b48:	08004ba1 	.word	0x08004ba1
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004ba1 	.word	0x08004ba1
 8004b54:	08004b85 	.word	0x08004b85
 8004b58:	08004ba1 	.word	0x08004ba1
 8004b5c:	08004ba1 	.word	0x08004ba1
 8004b60:	08004ba1 	.word	0x08004ba1
 8004b64:	08004b93 	.word	0x08004b93
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f8e8 	bl	8004cf0 <TIM_OC1_SetConfig>
      break;
 8004b20:	e015      	b.n	8004b4e <HAL_TIM_OC_ConfigChannel+0x9e>
=======
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f8e8 	bl	8004d44 <TIM_OC1_SetConfig>
      break;
 8004b74:	e015      	b.n	8004ba2 <HAL_TIM_OC_ConfigChannel+0x9e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f951 	bl	8004dd0 <TIM_OC2_SetConfig>
      break;
 8004b2e:	e00e      	b.n	8004b4e <HAL_TIM_OC_ConfigChannel+0x9e>
=======
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f951 	bl	8004e24 <TIM_OC2_SetConfig>
      break;
 8004b82:	e00e      	b.n	8004ba2 <HAL_TIM_OC_ConfigChannel+0x9e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f9c0 	bl	8004ebc <TIM_OC3_SetConfig>
      break;
 8004b3c:	e007      	b.n	8004b4e <HAL_TIM_OC_ConfigChannel+0x9e>
=======
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f9c0 	bl	8004f10 <TIM_OC3_SetConfig>
      break;
 8004b90:	e007      	b.n	8004ba2 <HAL_TIM_OC_ConfigChannel+0x9e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fa2d 	bl	8004fa4 <TIM_OC4_SetConfig>
      break;
 8004b4a:	e000      	b.n	8004b4e <HAL_TIM_OC_ConfigChannel+0x9e>
=======
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fa2d 	bl	8004ff8 <TIM_OC4_SetConfig>
      break;
 8004b9e:	e000      	b.n	8004ba2 <HAL_TIM_OC_ConfigChannel+0x9e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    default:
      break;
<<<<<<< HEAD
 8004b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8004ba0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
=======
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIM_IC_CaptureCallback>:
=======
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
=======
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
=======
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_TriggerCallback>:
=======
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIM_TriggerCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
=======
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_Base_SetConfig>:
=======
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <TIM_Base_SetConfig>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bce:	d00f      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3d      	ldr	r2, [pc, #244]	; (8004cc8 <TIM_Base_SetConfig+0x118>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a3c      	ldr	r2, [pc, #240]	; (8004ccc <TIM_Base_SetConfig+0x11c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a3b      	ldr	r2, [pc, #236]	; (8004cd0 <TIM_Base_SetConfig+0x120>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a3a      	ldr	r2, [pc, #232]	; (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d108      	bne.n	8004c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2f      	ldr	r2, [pc, #188]	; (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d027      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2c      	ldr	r2, [pc, #176]	; (8004cc8 <TIM_Base_SetConfig+0x118>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d023      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <TIM_Base_SetConfig+0x11c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01f      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <TIM_Base_SetConfig+0x120>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d01b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d017      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <TIM_Base_SetConfig+0x128>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00f      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a26      	ldr	r2, [pc, #152]	; (8004ce0 <TIM_Base_SetConfig+0x130>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a25      	ldr	r2, [pc, #148]	; (8004ce4 <TIM_Base_SetConfig+0x134>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <TIM_Base_SetConfig+0x138>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a23      	ldr	r2, [pc, #140]	; (8004cec <TIM_Base_SetConfig+0x13c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
=======
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a40      	ldr	r2, [pc, #256]	; (8004d18 <TIM_Base_SetConfig+0x114>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c22:	d00f      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3d      	ldr	r2, [pc, #244]	; (8004d1c <TIM_Base_SetConfig+0x118>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3c      	ldr	r2, [pc, #240]	; (8004d20 <TIM_Base_SetConfig+0x11c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3b      	ldr	r2, [pc, #236]	; (8004d24 <TIM_Base_SetConfig+0x120>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a3a      	ldr	r2, [pc, #232]	; (8004d28 <TIM_Base_SetConfig+0x124>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d108      	bne.n	8004c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2f      	ldr	r2, [pc, #188]	; (8004d18 <TIM_Base_SetConfig+0x114>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d02b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d027      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <TIM_Base_SetConfig+0x118>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d023      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <TIM_Base_SetConfig+0x11c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <TIM_Base_SetConfig+0x120>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a29      	ldr	r2, [pc, #164]	; (8004d28 <TIM_Base_SetConfig+0x124>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d017      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <TIM_Base_SetConfig+0x128>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a27      	ldr	r2, [pc, #156]	; (8004d30 <TIM_Base_SetConfig+0x12c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <TIM_Base_SetConfig+0x130>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <TIM_Base_SetConfig+0x134>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a24      	ldr	r2, [pc, #144]	; (8004d3c <TIM_Base_SetConfig+0x138>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <TIM_Base_SetConfig+0x13c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0xf8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d103      	bne.n	8004cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <TIM_Base_SetConfig+0x114>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0xf8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0c      	ldr	r2, [pc, #48]	; (8004d28 <TIM_Base_SetConfig+0x124>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	615a      	str	r2, [r3, #20]
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40010400 	.word	0x40010400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800
 8004ce4:	40001800 	.word	0x40001800
 8004ce8:	40001c00 	.word	0x40001c00
 8004cec:	40002000 	.word	0x40002000

08004cf0 <TIM_OC1_SetConfig>:
=======
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	615a      	str	r2, [r3, #20]
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40010400 	.word	0x40010400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800
 8004d38:	40001800 	.word	0x40001800
 8004d3c:	40001c00 	.word	0x40001c00
 8004d40:	40002000 	.word	0x40002000

08004d44 <TIM_OC1_SetConfig>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
=======
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0201 	bic.w	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 0302 	bic.w	r3, r3, #2
 8004d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a20      	ldr	r2, [pc, #128]	; (8004dc8 <TIM_OC1_SetConfig+0xd8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC1_SetConfig+0x64>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <TIM_OC1_SetConfig+0xdc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10c      	bne.n	8004d6e <TIM_OC1_SetConfig+0x7e>
=======
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f023 0201 	bic.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 0302 	bic.w	r3, r3, #2
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <TIM_OC1_SetConfig+0xd8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC1_SetConfig+0x64>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <TIM_OC1_SetConfig+0xdc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10c      	bne.n	8004dc2 <TIM_OC1_SetConfig+0x7e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0308 	bic.w	r3, r3, #8
 8004d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 0304 	bic.w	r3, r3, #4
 8004d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <TIM_OC1_SetConfig+0xd8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_OC1_SetConfig+0x8e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a14      	ldr	r2, [pc, #80]	; (8004dcc <TIM_OC1_SetConfig+0xdc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d111      	bne.n	8004da2 <TIM_OC1_SetConfig+0xb2>
=======
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0308 	bic.w	r3, r3, #8
 8004dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <TIM_OC1_SetConfig+0xd8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_OC1_SetConfig+0x8e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <TIM_OC1_SetConfig+0xdc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <TIM_OC1_SetConfig+0xb2>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
=======
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <TIM_OC2_SetConfig>:
=======
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40010400 	.word	0x40010400

08004e24 <TIM_OC2_SetConfig>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
=======
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f023 0210 	bic.w	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <TIM_OC2_SetConfig+0xe4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC2_SetConfig+0x68>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <TIM_OC2_SetConfig+0xe8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10d      	bne.n	8004e54 <TIM_OC2_SetConfig+0x84>
=======
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0210 	bic.w	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0320 	bic.w	r3, r3, #32
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a22      	ldr	r2, [pc, #136]	; (8004f08 <TIM_OC2_SetConfig+0xe4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_OC2_SetConfig+0x68>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <TIM_OC2_SetConfig+0xe8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d10d      	bne.n	8004ea8 <TIM_OC2_SetConfig+0x84>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e52:	617b      	str	r3, [r7, #20]
=======
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea6:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <TIM_OC2_SetConfig+0xe4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_OC2_SetConfig+0x94>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <TIM_OC2_SetConfig+0xe8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d113      	bne.n	8004e8c <TIM_OC2_SetConfig+0xbc>
=======
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <TIM_OC2_SetConfig+0xe4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_OC2_SetConfig+0x94>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <TIM_OC2_SetConfig+0xe8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d113      	bne.n	8004ee0 <TIM_OC2_SetConfig+0xbc>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
=======
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40010400 	.word	0x40010400

08004ebc <TIM_OC3_SetConfig>:
=======
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400

08004f10 <TIM_OC3_SetConfig>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
=======
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a21      	ldr	r2, [pc, #132]	; (8004f9c <TIM_OC3_SetConfig+0xe0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_OC3_SetConfig+0x66>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <TIM_OC3_SetConfig+0xe4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d10d      	bne.n	8004f3e <TIM_OC3_SetConfig+0x82>
=======
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a21      	ldr	r2, [pc, #132]	; (8004ff0 <TIM_OC3_SetConfig+0xe0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC3_SetConfig+0x66>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a20      	ldr	r2, [pc, #128]	; (8004ff4 <TIM_OC3_SetConfig+0xe4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10d      	bne.n	8004f92 <TIM_OC3_SetConfig+0x82>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <TIM_OC3_SetConfig+0xe0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <TIM_OC3_SetConfig+0x92>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <TIM_OC3_SetConfig+0xe4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d113      	bne.n	8004f76 <TIM_OC3_SetConfig+0xba>
=======
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <TIM_OC3_SetConfig+0xe0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC3_SetConfig+0x92>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a15      	ldr	r2, [pc, #84]	; (8004ff4 <TIM_OC3_SetConfig+0xe4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <TIM_OC3_SetConfig+0xba>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
=======
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40010400 	.word	0x40010400

08004fa4 <TIM_OC4_SetConfig>:
=======
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <TIM_OC4_SetConfig>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
=======
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	031b      	lsls	r3, r3, #12
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <TIM_OC4_SetConfig+0xa4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_OC4_SetConfig+0x68>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a11      	ldr	r2, [pc, #68]	; (800504c <TIM_OC4_SetConfig+0xa8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d109      	bne.n	8005020 <TIM_OC4_SetConfig+0x7c>
=======
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	031b      	lsls	r3, r3, #12
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <TIM_OC4_SetConfig+0xa4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC4_SetConfig+0x68>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <TIM_OC4_SetConfig+0xa8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d109      	bne.n	8005074 <TIM_OC4_SetConfig+0x7c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
=======
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010000 	.word	0x40010000
 800504c:	40010400 	.word	0x40010400

08005050 <HAL_TIMEx_CommutCallback>:
=======
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40010400 	.word	0x40010400

080050a4 <HAL_TIMEx_CommutCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
=======
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_BreakCallback>:
=======
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIMEx_BreakCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
=======
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_UART_Init>:
=======
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_UART_Init>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e03f      	b.n	800510a <HAL_UART_Init+0x92>
=======
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e03f      	b.n	800515e <HAL_UART_Init+0x92>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fd f872 	bl	8002188 <HAL_UART_MspInit>
=======
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd f872 	bl	80021dc <HAL_UART_MspInit>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fc1b 	bl	80058f8 <UART_SetConfig>
=======
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800510e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fc1b 	bl	800594c <UART_SetConfig>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_UART_Transmit>:
=======
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_UART_Transmit>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8005112:	b580      	push	{r7, lr}
 8005114:	b08a      	sub	sp, #40	; 0x28
 8005116:	af02      	add	r7, sp, #8
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b20      	cmp	r3, #32
 8005130:	d17c      	bne.n	800522c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_UART_Transmit+0x2c>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e075      	b.n	800522e <HAL_UART_Transmit+0x11c>
=======
 8005166:	b580      	push	{r7, lr}
 8005168:	b08a      	sub	sp, #40	; 0x28
 800516a:	af02      	add	r7, sp, #8
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	603b      	str	r3, [r7, #0]
 8005172:	4613      	mov	r3, r2
 8005174:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b20      	cmp	r3, #32
 8005184:	d17c      	bne.n	8005280 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_UART_Transmit+0x2c>
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e075      	b.n	8005282 <HAL_UART_Transmit+0x11c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UART_Transmit+0x3e>
 800514c:	2302      	movs	r3, #2
 800514e:	e06e      	b.n	800522e <HAL_UART_Transmit+0x11c>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2221      	movs	r2, #33	; 0x21
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005166:	f7fd f9bb 	bl	80024e0 <HAL_GetTick>
 800516a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d108      	bne.n	8005194 <HAL_UART_Transmit+0x82>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e003      	b.n	800519c <HAL_UART_Transmit+0x8a>
=======
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_UART_Transmit+0x3e>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e06e      	b.n	8005282 <HAL_UART_Transmit+0x11c>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2221      	movs	r2, #33	; 0x21
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ba:	f7fd f9bb 	bl	8002534 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	d108      	bne.n	80051e8 <HAL_UART_Transmit+0x82>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e003      	b.n	80051f0 <HAL_UART_Transmit+0x8a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
=======
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051a4:	e02a      	b.n	80051fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2180      	movs	r1, #128	; 0x80
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fa17 	bl	80055e4 <UART_WaitOnFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e036      	b.n	800522e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	3302      	adds	r3, #2
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e007      	b.n	80051ee <HAL_UART_Transmit+0xdc>
=======
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051f8:	e02a      	b.n	8005250 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2200      	movs	r2, #0
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fa17 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e036      	b.n	8005282 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005228:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3302      	adds	r3, #2
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e007      	b.n	8005242 <HAL_UART_Transmit+0xdc>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1cf      	bne.n	80051a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2140      	movs	r1, #64	; 0x40
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f9e7 	bl	80055e4 <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e006      	b.n	800522e <HAL_UART_Transmit+0x11c>
=======
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	781a      	ldrb	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1cf      	bne.n	80051fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	2140      	movs	r1, #64	; 0x40
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f9e7 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e006      	b.n	8005282 <HAL_UART_Transmit+0x11c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e000      	b.n	800522e <HAL_UART_Transmit+0x11c>
=======
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <HAL_UART_Transmit+0x11c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800522c:	2302      	movs	r3, #2
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_UART_IRQHandler>:
=======
 8005280:	2302      	movs	r3, #2
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <HAL_UART_IRQHandler>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_UART_IRQHandler+0x52>
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 faa1 	bl	80057ca <UART_Receive_IT>
      return;
 8005288:	e17c      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
=======
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10d      	bne.n	80052de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_UART_IRQHandler+0x52>
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 faa1 	bl	800581e <UART_Receive_IT>
      return;
 80052dc:	e17c      	b.n	80055d8 <HAL_UART_IRQHandler+0x34c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< HEAD
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80b1 	beq.w	80053f4 <HAL_UART_IRQHandler+0x1bc>
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <HAL_UART_IRQHandler+0x70>
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80a6 	beq.w	80053f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_UART_IRQHandler+0x90>
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	f043 0201 	orr.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80b1 	beq.w	8005448 <HAL_UART_IRQHandler+0x1bc>
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d105      	bne.n	80052fc <HAL_UART_IRQHandler+0x70>
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80a6 	beq.w	8005448 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_UART_IRQHandler+0x90>
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	f043 0201 	orr.w	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_UART_IRQHandler+0xb0>
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	f043 0202 	orr.w	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_UART_IRQHandler+0xb0>
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f043 0202 	orr.w	r2, r3, #2
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_UART_IRQHandler+0xd0>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f043 0204 	orr.w	r2, r3, #4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <HAL_UART_IRQHandler+0xd0>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f043 0204 	orr.w	r2, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< HEAD
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00f      	beq.n	8005332 <HAL_UART_IRQHandler+0xfa>
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <HAL_UART_IRQHandler+0xee>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f043 0208 	orr.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00f      	beq.n	8005386 <HAL_UART_IRQHandler+0xfa>
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <HAL_UART_IRQHandler+0xee>
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f043 0208 	orr.w	r2, r3, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 811f 	beq.w	800557a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_UART_IRQHandler+0x11e>
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fa3a 	bl	80057ca <UART_Receive_IT>
=======
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 811f 	beq.w	80055ce <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_UART_IRQHandler+0x11e>
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fa3a 	bl	800581e <UART_Receive_IT>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <HAL_UART_IRQHandler+0x146>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d031      	beq.n	80053e2 <HAL_UART_IRQHandler+0x1aa>
=======
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <HAL_UART_IRQHandler+0x146>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d031      	beq.n	8005436 <HAL_UART_IRQHandler+0x1aa>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f97a 	bl	8005678 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d123      	bne.n	80053da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d013      	beq.n	80053d2 <HAL_UART_IRQHandler+0x19a>
=======
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f97a 	bl	80056cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b40      	cmp	r3, #64	; 0x40
 80053e4:	d123      	bne.n	800542e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d013      	beq.n	8005426 <HAL_UART_IRQHandler+0x19a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	4a77      	ldr	r2, [pc, #476]	; (800558c <HAL_UART_IRQHandler+0x354>)
 80053b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fd ff92 	bl	80032e0 <HAL_DMA_Abort_IT>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053cc:	4610      	mov	r0, r2
 80053ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d0:	e00e      	b.n	80053f0 <HAL_UART_IRQHandler+0x1b8>
=======
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	4a77      	ldr	r2, [pc, #476]	; (80055e0 <HAL_UART_IRQHandler+0x354>)
 8005404:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	4618      	mov	r0, r3
 800540c:	f7fd ff92 	bl	8003334 <HAL_DMA_Abort_IT>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d016      	beq.n	8005444 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005420:	4610      	mov	r0, r2
 8005422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	e00e      	b.n	8005444 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8f0 	bl	80055b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	e00a      	b.n	80053f0 <HAL_UART_IRQHandler+0x1b8>
=======
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8f0 	bl	800560c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	e00a      	b.n	8005444 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8ec 	bl	80055b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	e006      	b.n	80053f0 <HAL_UART_IRQHandler+0x1b8>
=======
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f8ec 	bl	800560c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e006      	b.n	8005444 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8e8 	bl	80055b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053ee:	e0c4      	b.n	800557a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	bf00      	nop
    return;
 80053f2:	e0c2      	b.n	800557a <HAL_UART_IRQHandler+0x342>
=======
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f8e8 	bl	800560c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005442:	e0c4      	b.n	80055ce <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	bf00      	nop
    return;
 8005446:	e0c2      	b.n	80055ce <HAL_UART_IRQHandler+0x342>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f040 80a2 	bne.w	8005542 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 809c 	beq.w	8005542 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8096 	beq.w	8005542 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d14f      	bne.n	80054da <HAL_UART_IRQHandler+0x2a2>
=======
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	2b01      	cmp	r3, #1
 800544e:	f040 80a2 	bne.w	8005596 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 809c 	beq.w	8005596 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8096 	beq.w	8005596 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d14f      	bne.n	800552e <HAL_UART_IRQHandler+0x2a2>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005444:	8a3b      	ldrh	r3, [r7, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8099 	beq.w	800557e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005450:	8a3a      	ldrh	r2, [r7, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	f080 8093 	bcs.w	800557e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8a3a      	ldrh	r2, [r7, #16]
 800545c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005468:	d02b      	beq.n	80054c2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005478:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	615a      	str	r2, [r3, #20]
=======
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005498:	8a3b      	ldrh	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 8099 	beq.w	80055d2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054a4:	8a3a      	ldrh	r2, [r7, #16]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	f080 8093 	bcs.w	80055d2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	8a3a      	ldrh	r2, [r7, #16]
 80054b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054bc:	d02b      	beq.n	8005516 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054cc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	615a      	str	r2, [r3, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005498:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0210 	bic.w	r2, r2, #16
 80054b6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fd fe9f 	bl	8003200 <HAL_DMA_Abort>
=======
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ec:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0210 	bic.w	r2, r2, #16
 800550a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	4618      	mov	r0, r3
 8005512:	f7fd fe9f 	bl	8003254 <HAL_DMA_Abort>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f87a 	bl	80055cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80054d8:	e051      	b.n	800557e <HAL_UART_IRQHandler+0x346>
=======
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551e:	b29b      	uxth	r3, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	b29b      	uxth	r3, r3
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f87a 	bl	8005620 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800552c:	e051      	b.n	80055d2 <HAL_UART_IRQHandler+0x346>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d047      	beq.n	8005582 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80054f2:	8a7b      	ldrh	r3, [r7, #18]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d044      	beq.n	8005582 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005506:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0210 	bic.w	r2, r2, #16
 8005534:	60da      	str	r2, [r3, #12]
=======
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005536:	b29b      	uxth	r3, r3
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d047      	beq.n	80055d6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005546:	8a7b      	ldrh	r3, [r7, #18]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d044      	beq.n	80055d6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800555a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0201 	bic.w	r2, r2, #1
 800556a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0210 	bic.w	r2, r2, #16
 8005588:	60da      	str	r2, [r3, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8005536:	8a7b      	ldrh	r3, [r7, #18]
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f846 	bl	80055cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005540:	e01f      	b.n	8005582 <HAL_UART_IRQHandler+0x34a>
=======
 800558a:	8a7b      	ldrh	r3, [r7, #18]
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f846 	bl	8005620 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005594:	e01f      	b.n	80055d6 <HAL_UART_IRQHandler+0x34a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_UART_IRQHandler+0x326>
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8cf 	bl	80056fa <UART_Transmit_IT>
    return;
 800555c:	e012      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
=======
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_UART_IRQHandler+0x326>
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8cf 	bl	800574e <UART_Transmit_IT>
    return;
 80055b0:	e012      	b.n	80055d8 <HAL_UART_IRQHandler+0x34c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <HAL_UART_IRQHandler+0x34c>
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f911 	bl	800579a <UART_EndTransmit_IT>
    return;
 8005578:	e004      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
    return;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
      return;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
      return;
 8005582:	bf00      	nop
  }
}
 8005584:	3728      	adds	r7, #40	; 0x28
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	080056d3 	.word	0x080056d3

08005590 <HAL_UART_TxCpltCallback>:
=======
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00d      	beq.n	80055d8 <HAL_UART_IRQHandler+0x34c>
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f911 	bl	80057ee <UART_EndTransmit_IT>
    return;
 80055cc:	e004      	b.n	80055d8 <HAL_UART_IRQHandler+0x34c>
    return;
 80055ce:	bf00      	nop
 80055d0:	e002      	b.n	80055d8 <HAL_UART_IRQHandler+0x34c>
      return;
 80055d2:	bf00      	nop
 80055d4:	e000      	b.n	80055d8 <HAL_UART_IRQHandler+0x34c>
      return;
 80055d6:	bf00      	nop
  }
}
 80055d8:	3728      	adds	r7, #40	; 0x28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	08005727 	.word	0x08005727

080055e4 <HAL_UART_TxCpltCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
=======
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_RxCpltCallback>:
=======
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_UART_RxCpltCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
=======
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_ErrorCallback>:
=======
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UART_ErrorCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
=======
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_UARTEx_RxEventCallback>:
=======
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_UARTEx_RxEventCallback>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	807b      	strh	r3, [r7, #2]
=======
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	807b      	strh	r3, [r7, #2]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <UART_WaitOnFlagUntilTimeout>:
=======
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f4:	e02c      	b.n	8005650 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d028      	beq.n	8005650 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <UART_WaitOnFlagUntilTimeout+0x30>
 8005604:	f7fc ff6c 	bl	80024e0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	429a      	cmp	r2, r3
 8005612:	d21d      	bcs.n	8005650 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005622:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e00f      	b.n	8005670 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	429a      	cmp	r2, r3
 800566c:	d0c3      	beq.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005648:	e02c      	b.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d028      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x30>
 8005658:	f7fc ff6c 	bl	8002534 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	429a      	cmp	r2, r3
 8005666:	d21d      	bcs.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005676:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e00f      	b.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d0c3      	beq.n	800564a <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <UART_EndRxTransfer>:
=======
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UART_EndRxTransfer>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800568e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d107      	bne.n	80056b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0210 	bic.w	r2, r2, #16
 80056b6:	60da      	str	r2, [r3, #12]
=======
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d107      	bne.n	800570c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0210 	bic.w	r2, r2, #16
 800570a:	60da      	str	r2, [r3, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <UART_DMAAbortOnError>:
=======
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <UART_DMAAbortOnError>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff ff63 	bl	80055b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f2:	bf00      	nop
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <UART_Transmit_IT>:
=======
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff ff63 	bl	800560c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_Transmit_IT>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
=======
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b21      	cmp	r3, #33	; 0x21
 800570c:	d13e      	bne.n	800578c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	d114      	bne.n	8005742 <UART_Transmit_IT+0x48>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d110      	bne.n	8005742 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005734:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	1c9a      	adds	r2, r3, #2
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	621a      	str	r2, [r3, #32]
 8005740:	e008      	b.n	8005754 <UART_Transmit_IT+0x5a>
=======
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b21      	cmp	r3, #33	; 0x21
 8005760:	d13e      	bne.n	80057e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576a:	d114      	bne.n	8005796 <UART_Transmit_IT+0x48>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d110      	bne.n	8005796 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005788:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	1c9a      	adds	r2, r3, #2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	621a      	str	r2, [r3, #32]
 8005794:	e008      	b.n	80057a8 <UART_Transmit_IT+0x5a>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	1c59      	adds	r1, r3, #1
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6211      	str	r1, [r2, #32]
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29b      	uxth	r3, r3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4619      	mov	r1, r3
 8005762:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10f      	bne.n	8005788 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <UART_Transmit_IT+0x94>
=======
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6211      	str	r1, [r2, #32]
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	4619      	mov	r1, r3
 80057b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10f      	bne.n	80057dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e000      	b.n	80057e2 <UART_Transmit_IT+0x94>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <UART_EndTransmit_IT>:
=======
 80057e0:	2302      	movs	r3, #2
  }
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <UART_EndTransmit_IT>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005804:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fee8 	bl	8005590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_Receive_IT>:
=======
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fee8 	bl	80055e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <UART_Receive_IT>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
=======
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b22      	cmp	r3, #34	; 0x22
 80057dc:	f040 8087 	bne.w	80058ee <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e8:	d117      	bne.n	800581a <UART_Receive_IT+0x50>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d113      	bne.n	800581a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005808:	b29a      	uxth	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	1c9a      	adds	r2, r3, #2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
 8005818:	e026      	b.n	8005868 <UART_Receive_IT+0x9e>
=======
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b22      	cmp	r3, #34	; 0x22
 8005830:	f040 8087 	bne.w	8005942 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583c:	d117      	bne.n	800586e <UART_Receive_IT+0x50>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d113      	bne.n	800586e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585c:	b29a      	uxth	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	1c9a      	adds	r2, r3, #2
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28
 800586c:	e026      	b.n	80058bc <UART_Receive_IT+0x9e>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005820:	2300      	movs	r3, #0
 8005822:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d007      	beq.n	800583e <UART_Receive_IT+0x74>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <UART_Receive_IT+0x82>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e008      	b.n	800585e <UART_Receive_IT+0x94>
=======
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005874:	2300      	movs	r3, #0
 8005876:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d007      	beq.n	8005892 <UART_Receive_IT+0x74>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <UART_Receive_IT+0x82>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	e008      	b.n	80058b2 <UART_Receive_IT+0x94>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005858:	b2da      	uxtb	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29b      	uxth	r3, r3
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4619      	mov	r1, r3
 8005876:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005878:	2b00      	cmp	r3, #0
 800587a:	d136      	bne.n	80058ea <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0220 	bic.w	r2, r2, #32
 800588a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800589a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0201 	bic.w	r2, r2, #1
 80058aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	4619      	mov	r1, r3
 80058ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d136      	bne.n	800593e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0220 	bic.w	r2, r2, #32
 80058de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10e      	bne.n	80058da <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0210 	bic.w	r2, r2, #16
 80058ca:	60da      	str	r2, [r3, #12]
=======
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	2b01      	cmp	r3, #1
 800590e:	d10e      	bne.n	800592e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0210 	bic.w	r2, r2, #16
 800591e:	60da      	str	r2, [r3, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fe7a 	bl	80055cc <HAL_UARTEx_RxEventCallback>
 80058d8:	e002      	b.n	80058e0 <UART_Receive_IT+0x116>
=======
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fe7a 	bl	8005620 <HAL_UARTEx_RxEventCallback>
 800592c:	e002      	b.n	8005934 <UART_Receive_IT+0x116>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fe62 	bl	80055a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e002      	b.n	80058f0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e000      	b.n	80058f0 <UART_Receive_IT+0x126>
=======
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fe62 	bl	80055f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	e002      	b.n	8005944 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e000      	b.n	8005944 <UART_Receive_IT+0x126>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80058ee:	2302      	movs	r3, #2
  }
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_SetConfig>:
=======
 8005942:	2302      	movs	r3, #2
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <UART_SetConfig>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80058f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	b09f      	sub	sp, #124	; 0x7c
 80058fe:	af00      	add	r7, sp, #0
 8005900:	66f8      	str	r0, [r7, #108]	; 0x6c
=======
 800594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005950:	b09f      	sub	sp, #124	; 0x7c
 8005952:	af00      	add	r7, sp, #0
 8005954:	66f8      	str	r0, [r7, #108]	; 0x6c
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8005902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800590c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590e:	68d9      	ldr	r1, [r3, #12]
 8005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	ea40 0301 	orr.w	r3, r0, r1
 8005918:	6113      	str	r3, [r2, #16]
=======
 8005956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005962:	68d9      	ldr	r1, [r3, #12]
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	ea40 0301 	orr.w	r3, r0, r1
 800596c:	6113      	str	r3, [r2, #16]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	431a      	orrs	r2, r3
 8005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	431a      	orrs	r2, r3
 800592a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	4313      	orrs	r3, r2
 8005930:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800593c:	f021 010c 	bic.w	r1, r1, #12
 8005940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005946:	430b      	orrs	r3, r1
 8005948:	60d3      	str	r3, [r2, #12]
=======
 800596e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	431a      	orrs	r2, r3
 8005978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	431a      	orrs	r2, r3
 800597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	4313      	orrs	r3, r2
 8005984:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005990:	f021 010c 	bic.w	r1, r1, #12
 8005994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800599a:	430b      	orrs	r3, r1
 800599c:	60d3      	str	r3, [r2, #12]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005956:	6999      	ldr	r1, [r3, #24]
 8005958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	ea40 0301 	orr.w	r3, r0, r1
 8005960:	6153      	str	r3, [r2, #20]
=======
 800599e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059aa:	6999      	ldr	r1, [r3, #24]
 80059ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	ea40 0301 	orr.w	r3, r0, r1
 80059b4:	6153      	str	r3, [r2, #20]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8005962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4bc5      	ldr	r3, [pc, #788]	; (8005c7c <UART_SetConfig+0x384>)
 8005968:	429a      	cmp	r2, r3
 800596a:	d004      	beq.n	8005976 <UART_SetConfig+0x7e>
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4bc3      	ldr	r3, [pc, #780]	; (8005c80 <UART_SetConfig+0x388>)
 8005972:	429a      	cmp	r2, r3
 8005974:	d103      	bne.n	800597e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005976:	f7fe fa15 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 800597a:	6778      	str	r0, [r7, #116]	; 0x74
 800597c:	e002      	b.n	8005984 <UART_SetConfig+0x8c>
=======
 80059b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4bc5      	ldr	r3, [pc, #788]	; (8005cd0 <UART_SetConfig+0x384>)
 80059bc:	429a      	cmp	r2, r3
 80059be:	d004      	beq.n	80059ca <UART_SetConfig+0x7e>
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4bc3      	ldr	r3, [pc, #780]	; (8005cd4 <UART_SetConfig+0x388>)
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d103      	bne.n	80059d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059ca:	f7fe fa15 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 80059ce:	6778      	str	r0, [r7, #116]	; 0x74
 80059d0:	e002      	b.n	80059d8 <UART_SetConfig+0x8c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 800597e:	f7fe f9fd 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8005982:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598c:	f040 80b6 	bne.w	8005afc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005992:	461c      	mov	r4, r3
 8005994:	f04f 0500 	mov.w	r5, #0
 8005998:	4622      	mov	r2, r4
 800599a:	462b      	mov	r3, r5
 800599c:	1891      	adds	r1, r2, r2
 800599e:	6439      	str	r1, [r7, #64]	; 0x40
 80059a0:	415b      	adcs	r3, r3
 80059a2:	647b      	str	r3, [r7, #68]	; 0x44
 80059a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059a8:	1912      	adds	r2, r2, r4
 80059aa:	eb45 0303 	adc.w	r3, r5, r3
 80059ae:	f04f 0000 	mov.w	r0, #0
 80059b2:	f04f 0100 	mov.w	r1, #0
 80059b6:	00d9      	lsls	r1, r3, #3
 80059b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059bc:	00d0      	lsls	r0, r2, #3
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	1911      	adds	r1, r2, r4
 80059c4:	6639      	str	r1, [r7, #96]	; 0x60
 80059c6:	416b      	adcs	r3, r5
 80059c8:	667b      	str	r3, [r7, #100]	; 0x64
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	1891      	adds	r1, r2, r2
 80059d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80059d8:	415b      	adcs	r3, r3
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059e4:	f7fb f928 	bl	8000c38 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4ba5      	ldr	r3, [pc, #660]	; (8005c84 <UART_SetConfig+0x38c>)
 80059ee:	fba3 2302 	umull	r2, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	011e      	lsls	r6, r3, #4
 80059f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f8:	461c      	mov	r4, r3
 80059fa:	f04f 0500 	mov.w	r5, #0
 80059fe:	4622      	mov	r2, r4
 8005a00:	462b      	mov	r3, r5
 8005a02:	1891      	adds	r1, r2, r2
 8005a04:	6339      	str	r1, [r7, #48]	; 0x30
 8005a06:	415b      	adcs	r3, r3
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a0e:	1912      	adds	r2, r2, r4
 8005a10:	eb45 0303 	adc.w	r3, r5, r3
 8005a14:	f04f 0000 	mov.w	r0, #0
 8005a18:	f04f 0100 	mov.w	r1, #0
 8005a1c:	00d9      	lsls	r1, r3, #3
 8005a1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a22:	00d0      	lsls	r0, r2, #3
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	1911      	adds	r1, r2, r4
 8005a2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a2c:	416b      	adcs	r3, r5
 8005a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	1891      	adds	r1, r2, r2
 8005a3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a3e:	415b      	adcs	r3, r3
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a4a:	f7fb f8f5 	bl	8000c38 <__aeabi_uldivmod>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4b8c      	ldr	r3, [pc, #560]	; (8005c84 <UART_SetConfig+0x38c>)
 8005a54:	fba3 1302 	umull	r1, r3, r3, r2
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	2164      	movs	r1, #100	; 0x64
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	3332      	adds	r3, #50	; 0x32
 8005a66:	4a87      	ldr	r2, [pc, #540]	; (8005c84 <UART_SetConfig+0x38c>)
 8005a68:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a74:	441e      	add	r6, r3
 8005a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f04f 0100 	mov.w	r1, #0
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	1894      	adds	r4, r2, r2
 8005a84:	623c      	str	r4, [r7, #32]
 8005a86:	415b      	adcs	r3, r3
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a8e:	1812      	adds	r2, r2, r0
 8005a90:	eb41 0303 	adc.w	r3, r1, r3
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	f04f 0500 	mov.w	r5, #0
 8005a9c:	00dd      	lsls	r5, r3, #3
 8005a9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005aa2:	00d4      	lsls	r4, r2, #3
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	462b      	mov	r3, r5
 8005aa8:	1814      	adds	r4, r2, r0
 8005aaa:	653c      	str	r4, [r7, #80]	; 0x50
 8005aac:	414b      	adcs	r3, r1
 8005aae:	657b      	str	r3, [r7, #84]	; 0x54
 8005ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	1891      	adds	r1, r2, r2
 8005abc:	61b9      	str	r1, [r7, #24]
 8005abe:	415b      	adcs	r3, r3
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005aca:	f7fb f8b5 	bl	8000c38 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4b6c      	ldr	r3, [pc, #432]	; (8005c84 <UART_SetConfig+0x38c>)
 8005ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2164      	movs	r1, #100	; 0x64
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	3332      	adds	r3, #50	; 0x32
 8005ae6:	4a67      	ldr	r2, [pc, #412]	; (8005c84 <UART_SetConfig+0x38c>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 0207 	and.w	r2, r3, #7
 8005af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4432      	add	r2, r6
 8005af8:	609a      	str	r2, [r3, #8]
=======
 80059d2:	f7fe f9fd 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 80059d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e0:	f040 80b6 	bne.w	8005b50 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e6:	461c      	mov	r4, r3
 80059e8:	f04f 0500 	mov.w	r5, #0
 80059ec:	4622      	mov	r2, r4
 80059ee:	462b      	mov	r3, r5
 80059f0:	1891      	adds	r1, r2, r2
 80059f2:	6439      	str	r1, [r7, #64]	; 0x40
 80059f4:	415b      	adcs	r3, r3
 80059f6:	647b      	str	r3, [r7, #68]	; 0x44
 80059f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059fc:	1912      	adds	r2, r2, r4
 80059fe:	eb45 0303 	adc.w	r3, r5, r3
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f04f 0100 	mov.w	r1, #0
 8005a0a:	00d9      	lsls	r1, r3, #3
 8005a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a10:	00d0      	lsls	r0, r2, #3
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	1911      	adds	r1, r2, r4
 8005a18:	6639      	str	r1, [r7, #96]	; 0x60
 8005a1a:	416b      	adcs	r3, r5
 8005a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	1891      	adds	r1, r2, r2
 8005a2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a2c:	415b      	adcs	r3, r3
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a38:	f7fb f8fe 	bl	8000c38 <__aeabi_uldivmod>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4ba5      	ldr	r3, [pc, #660]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005a42:	fba3 2302 	umull	r2, r3, r3, r2
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	011e      	lsls	r6, r3, #4
 8005a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a4c:	461c      	mov	r4, r3
 8005a4e:	f04f 0500 	mov.w	r5, #0
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	1891      	adds	r1, r2, r2
 8005a58:	6339      	str	r1, [r7, #48]	; 0x30
 8005a5a:	415b      	adcs	r3, r3
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a62:	1912      	adds	r2, r2, r4
 8005a64:	eb45 0303 	adc.w	r3, r5, r3
 8005a68:	f04f 0000 	mov.w	r0, #0
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	00d9      	lsls	r1, r3, #3
 8005a72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a76:	00d0      	lsls	r0, r2, #3
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	1911      	adds	r1, r2, r4
 8005a7e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a80:	416b      	adcs	r3, r5
 8005a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	1891      	adds	r1, r2, r2
 8005a90:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a92:	415b      	adcs	r3, r3
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a9e:	f7fb f8cb 	bl	8000c38 <__aeabi_uldivmod>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4b8c      	ldr	r3, [pc, #560]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	2164      	movs	r1, #100	; 0x64
 8005ab0:	fb01 f303 	mul.w	r3, r1, r3
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	3332      	adds	r3, #50	; 0x32
 8005aba:	4a87      	ldr	r2, [pc, #540]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ac8:	441e      	add	r6, r3
 8005aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005acc:	4618      	mov	r0, r3
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	1894      	adds	r4, r2, r2
 8005ad8:	623c      	str	r4, [r7, #32]
 8005ada:	415b      	adcs	r3, r3
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ae2:	1812      	adds	r2, r2, r0
 8005ae4:	eb41 0303 	adc.w	r3, r1, r3
 8005ae8:	f04f 0400 	mov.w	r4, #0
 8005aec:	f04f 0500 	mov.w	r5, #0
 8005af0:	00dd      	lsls	r5, r3, #3
 8005af2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005af6:	00d4      	lsls	r4, r2, #3
 8005af8:	4622      	mov	r2, r4
 8005afa:	462b      	mov	r3, r5
 8005afc:	1814      	adds	r4, r2, r0
 8005afe:	653c      	str	r4, [r7, #80]	; 0x50
 8005b00:	414b      	adcs	r3, r1
 8005b02:	657b      	str	r3, [r7, #84]	; 0x54
 8005b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	1891      	adds	r1, r2, r2
 8005b10:	61b9      	str	r1, [r7, #24]
 8005b12:	415b      	adcs	r3, r3
 8005b14:	61fb      	str	r3, [r7, #28]
 8005b16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b1e:	f7fb f88b 	bl	8000c38 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4b6c      	ldr	r3, [pc, #432]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005b28:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	3332      	adds	r3, #50	; 0x32
 8005b3a:	4a67      	ldr	r2, [pc, #412]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 0207 	and.w	r2, r3, #7
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4432      	add	r2, r6
 8005b4c:	609a      	str	r2, [r3, #8]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 8005afa:	e0b9      	b.n	8005c70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005afe:	461c      	mov	r4, r3
 8005b00:	f04f 0500 	mov.w	r5, #0
 8005b04:	4622      	mov	r2, r4
 8005b06:	462b      	mov	r3, r5
 8005b08:	1891      	adds	r1, r2, r2
 8005b0a:	6139      	str	r1, [r7, #16]
 8005b0c:	415b      	adcs	r3, r3
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b14:	1912      	adds	r2, r2, r4
 8005b16:	eb45 0303 	adc.w	r3, r5, r3
 8005b1a:	f04f 0000 	mov.w	r0, #0
 8005b1e:	f04f 0100 	mov.w	r1, #0
 8005b22:	00d9      	lsls	r1, r3, #3
 8005b24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b28:	00d0      	lsls	r0, r2, #3
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	eb12 0804 	adds.w	r8, r2, r4
 8005b32:	eb43 0905 	adc.w	r9, r3, r5
 8005b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f04f 0100 	mov.w	r1, #0
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	008b      	lsls	r3, r1, #2
 8005b4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b4e:	0082      	lsls	r2, r0, #2
 8005b50:	4640      	mov	r0, r8
 8005b52:	4649      	mov	r1, r9
 8005b54:	f7fb f870 	bl	8000c38 <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4b49      	ldr	r3, [pc, #292]	; (8005c84 <UART_SetConfig+0x38c>)
 8005b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	011e      	lsls	r6, r3, #4
 8005b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f04f 0100 	mov.w	r1, #0
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	1894      	adds	r4, r2, r2
 8005b74:	60bc      	str	r4, [r7, #8]
 8005b76:	415b      	adcs	r3, r3
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b7e:	1812      	adds	r2, r2, r0
 8005b80:	eb41 0303 	adc.w	r3, r1, r3
 8005b84:	f04f 0400 	mov.w	r4, #0
 8005b88:	f04f 0500 	mov.w	r5, #0
 8005b8c:	00dd      	lsls	r5, r3, #3
 8005b8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b92:	00d4      	lsls	r4, r2, #3
 8005b94:	4622      	mov	r2, r4
 8005b96:	462b      	mov	r3, r5
 8005b98:	1814      	adds	r4, r2, r0
 8005b9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b9c:	414b      	adcs	r3, r1
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f04f 0100 	mov.w	r1, #0
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	008b      	lsls	r3, r1, #2
 8005bb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bb8:	0082      	lsls	r2, r0, #2
 8005bba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005bbe:	f7fb f83b 	bl	8000c38 <__aeabi_uldivmod>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4b2f      	ldr	r3, [pc, #188]	; (8005c84 <UART_SetConfig+0x38c>)
 8005bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	2164      	movs	r1, #100	; 0x64
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	3332      	adds	r3, #50	; 0x32
 8005bda:	4a2a      	ldr	r2, [pc, #168]	; (8005c84 <UART_SetConfig+0x38c>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be6:	441e      	add	r6, r3
 8005be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bea:	4618      	mov	r0, r3
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	1894      	adds	r4, r2, r2
 8005bf6:	603c      	str	r4, [r7, #0]
 8005bf8:	415b      	adcs	r3, r3
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c00:	1812      	adds	r2, r2, r0
 8005c02:	eb41 0303 	adc.w	r3, r1, r3
 8005c06:	f04f 0400 	mov.w	r4, #0
 8005c0a:	f04f 0500 	mov.w	r5, #0
 8005c0e:	00dd      	lsls	r5, r3, #3
 8005c10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c14:	00d4      	lsls	r4, r2, #3
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	eb12 0a00 	adds.w	sl, r2, r0
 8005c1e:	eb43 0b01 	adc.w	fp, r3, r1
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f04f 0100 	mov.w	r1, #0
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	008b      	lsls	r3, r1, #2
 8005c36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c3a:	0082      	lsls	r2, r0, #2
 8005c3c:	4650      	mov	r0, sl
 8005c3e:	4659      	mov	r1, fp
 8005c40:	f7fa fffa 	bl	8000c38 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <UART_SetConfig+0x38c>)
 8005c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	2164      	movs	r1, #100	; 0x64
 8005c52:	fb01 f303 	mul.w	r3, r1, r3
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	3332      	adds	r3, #50	; 0x32
 8005c5c:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <UART_SetConfig+0x38c>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4432      	add	r2, r6
 8005c6e:	609a      	str	r2, [r3, #8]
}
 8005c70:	bf00      	nop
 8005c72:	377c      	adds	r7, #124	; 0x7c
 8005c74:	46bd      	mov	sp, r7
 8005c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40011000 	.word	0x40011000
 8005c80:	40011400 	.word	0x40011400
 8005c84:	51eb851f 	.word	0x51eb851f

08005c88 <maf1>:
=======
 8005b4e:	e0b9      	b.n	8005cc4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b52:	461c      	mov	r4, r3
 8005b54:	f04f 0500 	mov.w	r5, #0
 8005b58:	4622      	mov	r2, r4
 8005b5a:	462b      	mov	r3, r5
 8005b5c:	1891      	adds	r1, r2, r2
 8005b5e:	6139      	str	r1, [r7, #16]
 8005b60:	415b      	adcs	r3, r3
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b68:	1912      	adds	r2, r2, r4
 8005b6a:	eb45 0303 	adc.w	r3, r5, r3
 8005b6e:	f04f 0000 	mov.w	r0, #0
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	00d9      	lsls	r1, r3, #3
 8005b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b7c:	00d0      	lsls	r0, r2, #3
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	eb12 0804 	adds.w	r8, r2, r4
 8005b86:	eb43 0905 	adc.w	r9, r3, r5
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	008b      	lsls	r3, r1, #2
 8005b9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ba2:	0082      	lsls	r2, r0, #2
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	f7fb f846 	bl	8000c38 <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	011e      	lsls	r6, r3, #4
 8005bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f04f 0100 	mov.w	r1, #0
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	1894      	adds	r4, r2, r2
 8005bc8:	60bc      	str	r4, [r7, #8]
 8005bca:	415b      	adcs	r3, r3
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd2:	1812      	adds	r2, r2, r0
 8005bd4:	eb41 0303 	adc.w	r3, r1, r3
 8005bd8:	f04f 0400 	mov.w	r4, #0
 8005bdc:	f04f 0500 	mov.w	r5, #0
 8005be0:	00dd      	lsls	r5, r3, #3
 8005be2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005be6:	00d4      	lsls	r4, r2, #3
 8005be8:	4622      	mov	r2, r4
 8005bea:	462b      	mov	r3, r5
 8005bec:	1814      	adds	r4, r2, r0
 8005bee:	64bc      	str	r4, [r7, #72]	; 0x48
 8005bf0:	414b      	adcs	r3, r1
 8005bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f04f 0100 	mov.w	r1, #0
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	008b      	lsls	r3, r1, #2
 8005c08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c0c:	0082      	lsls	r2, r0, #2
 8005c0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c12:	f7fb f811 	bl	8000c38 <__aeabi_uldivmod>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	2164      	movs	r1, #100	; 0x64
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	3332      	adds	r3, #50	; 0x32
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3a:	441e      	add	r6, r3
 8005c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	1894      	adds	r4, r2, r2
 8005c4a:	603c      	str	r4, [r7, #0]
 8005c4c:	415b      	adcs	r3, r3
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c54:	1812      	adds	r2, r2, r0
 8005c56:	eb41 0303 	adc.w	r3, r1, r3
 8005c5a:	f04f 0400 	mov.w	r4, #0
 8005c5e:	f04f 0500 	mov.w	r5, #0
 8005c62:	00dd      	lsls	r5, r3, #3
 8005c64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c68:	00d4      	lsls	r4, r2, #3
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	eb12 0a00 	adds.w	sl, r2, r0
 8005c72:	eb43 0b01 	adc.w	fp, r3, r1
 8005c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f04f 0100 	mov.w	r1, #0
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	008b      	lsls	r3, r1, #2
 8005c8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c8e:	0082      	lsls	r2, r0, #2
 8005c90:	4650      	mov	r0, sl
 8005c92:	4659      	mov	r1, fp
 8005c94:	f7fa ffd0 	bl	8000c38 <__aeabi_uldivmod>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	2164      	movs	r1, #100	; 0x64
 8005ca6:	fb01 f303 	mul.w	r3, r1, r3
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	3332      	adds	r3, #50	; 0x32
 8005cb0:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <UART_SetConfig+0x38c>)
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4432      	add	r2, r6
 8005cc2:	609a      	str	r2, [r3, #8]
}
 8005cc4:	bf00      	nop
 8005cc6:	377c      	adds	r7, #124	; 0x7c
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cce:	bf00      	nop
 8005cd0:	40011000 	.word	0x40011000
 8005cd4:	40011400 	.word	0x40011400
 8005cd8:	51eb851f 	.word	0x51eb851f

08005cdc <maf1>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
// This file contains functions that are associated with moving average filter


float maf1(float nextSample) //float t is not supposed to be included in stm
{
<<<<<<< HEAD
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float sum;
  static int pos;
  int len = 20;
 8005c92:	2314      	movs	r3, #20
 8005c94:	60fb      	str	r3, [r7, #12]
  static float sampleArr[20] = {0}; // tried parsing len instead of 200 but didnt work

  sum = sum - sampleArr[pos] + nextSample;
 8005c96:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <maf1+0x84>)
 8005c98:	ed93 7a00 	vldr	s14, [r3]
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <maf1+0x88>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <maf1+0x8c>)
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	edd3 7a00 	vldr	s15, [r3]
 8005caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb6:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <maf1+0x84>)
 8005cb8:	edc3 7a00 	vstr	s15, [r3]
  sampleArr[pos] = nextSample;
 8005cbc:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <maf1+0x88>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <maf1+0x8c>)
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
  pos++;
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <maf1+0x88>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <maf1+0x88>)
 8005cd2:	6013      	str	r3, [r2, #0]
  if(pos>=len)
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <maf1+0x88>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	dc02      	bgt.n	8005ce4 <maf1+0x5c>
  {
      pos = 0; 
 8005cde:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <maf1+0x88>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
  }

  return sum / (float) len; 
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <maf1+0x84>)
 8005ce6:	ed93 7a00 	vldr	s14, [r3]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cf4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005cf8:	eef0 7a66 	vmov.f32	s15, s13
}
 8005cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	2000014c 	.word	0x2000014c
 8005d10:	20000150 	.word	0x20000150
 8005d14:	20000154 	.word	0x20000154

08005d18 <maf2>:

float maf2(float nextSample) //float t is not supposed to be included in stm
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float sum;
  static int pos;
  int len = 20;
 8005d22:	2314      	movs	r3, #20
 8005d24:	60fb      	str	r3, [r7, #12]
  static float sampleArr[20] = {0}; // tried parsing len instead of 200 but didnt work

  sum = sum - sampleArr[pos] + nextSample;
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <maf2+0x84>)
 8005d28:	ed93 7a00 	vldr	s14, [r3]
 8005d2c:	4b1c      	ldr	r3, [pc, #112]	; (8005da0 <maf2+0x88>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <maf2+0x8c>)
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	edd3 7a00 	vldr	s15, [r3]
 8005d3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d46:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <maf2+0x84>)
 8005d48:	edc3 7a00 	vstr	s15, [r3]
  sampleArr[pos] = nextSample;
 8005d4c:	4b14      	ldr	r3, [pc, #80]	; (8005da0 <maf2+0x88>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <maf2+0x8c>)
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]
  pos++;
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <maf2+0x88>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <maf2+0x88>)
 8005d62:	6013      	str	r3, [r2, #0]
  if(pos>=len)
 8005d64:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <maf2+0x88>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	dc02      	bgt.n	8005d74 <maf2+0x5c>
  {
      pos = 0; 
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <maf2+0x88>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
  }
  return sum / (float) len;
 8005d74:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <maf2+0x84>)
 8005d76:	ed93 7a00 	vldr	s14, [r3]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d88:	eef0 7a66 	vmov.f32	s15, s13
}
 8005d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	200001a4 	.word	0x200001a4
 8005da0:	200001a8 	.word	0x200001a8
 8005da4:	200001ac 	.word	0x200001ac

08005da8 <abc_to_alpha>:
// this file contains all the functions of PLL.
=======
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	ed87 0a01 	vstr	s0, [r7, #4]
  static float sum;
  static int pos;
  int len = 20;
 8005ce6:	2314      	movs	r3, #20
 8005ce8:	60fb      	str	r3, [r7, #12]
  static float sampleArr[20] = {0}; // tried parsing len instead of 200 but didnt work

  sum = sum - sampleArr[pos] + nextSample;
 8005cea:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <maf1+0x84>)
 8005cec:	ed93 7a00 	vldr	s14, [r3]
 8005cf0:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <maf1+0x88>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <maf1+0x8c>)
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	edd3 7a00 	vldr	s15, [r3]
 8005cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d02:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <maf1+0x84>)
 8005d0c:	edc3 7a00 	vstr	s15, [r3]
  sampleArr[pos] = nextSample;
 8005d10:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <maf1+0x88>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <maf1+0x8c>)
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
  pos++;
 8005d1e:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <maf1+0x88>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4a0f      	ldr	r2, [pc, #60]	; (8005d64 <maf1+0x88>)
 8005d26:	6013      	str	r3, [r2, #0]
  if(pos>=len)
 8005d28:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <maf1+0x88>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	dc02      	bgt.n	8005d38 <maf1+0x5c>
  {
      pos = 0; 
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <maf1+0x88>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
  }

  return sum / (float) len; 
 8005d38:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <maf1+0x84>)
 8005d3a:	ed93 7a00 	vldr	s14, [r3]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d4c:	eef0 7a66 	vmov.f32	s15, s13
}
 8005d50:	eeb0 0a67 	vmov.f32	s0, s15
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	2000014c 	.word	0x2000014c
 8005d64:	20000150 	.word	0x20000150
 8005d68:	20000154 	.word	0x20000154

08005d6c <maf2>:

float maf2(float nextSample) //float t is not supposed to be included in stm
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	ed87 0a01 	vstr	s0, [r7, #4]
  static float sum;
  static int pos;
  int len = 20;
 8005d76:	2314      	movs	r3, #20
 8005d78:	60fb      	str	r3, [r7, #12]
  static float sampleArr[20] = {0}; // tried parsing len instead of 200 but didnt work

  sum = sum - sampleArr[pos] + nextSample;
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <maf2+0x84>)
 8005d7c:	ed93 7a00 	vldr	s14, [r3]
 8005d80:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <maf2+0x88>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <maf2+0x8c>)
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	edd3 7a00 	vldr	s15, [r3]
 8005d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d9a:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <maf2+0x84>)
 8005d9c:	edc3 7a00 	vstr	s15, [r3]
  sampleArr[pos] = nextSample;
 8005da0:	4b14      	ldr	r3, [pc, #80]	; (8005df4 <maf2+0x88>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <maf2+0x8c>)
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
  pos++;
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <maf2+0x88>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a0f      	ldr	r2, [pc, #60]	; (8005df4 <maf2+0x88>)
 8005db6:	6013      	str	r3, [r2, #0]
  if(pos>=len)
 8005db8:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <maf2+0x88>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	dc02      	bgt.n	8005dc8 <maf2+0x5c>
  {
      pos = 0; 
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <maf2+0x88>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
  }
  return sum / (float) len;
 8005dc8:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <maf2+0x84>)
 8005dca:	ed93 7a00 	vldr	s14, [r3]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ddc:	eef0 7a66 	vmov.f32	s15, s13
}
 8005de0:	eeb0 0a67 	vmov.f32	s0, s15
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	200001a4 	.word	0x200001a4
 8005df4:	200001a8 	.word	0x200001a8
 8005df8:	200001ac 	.word	0x200001ac
 8005dfc:	00000000 	.word	0x00000000

08005e00 <abc_to_alpha>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
#include <math.h>

#include "CONSTANTS.h"

float abc_to_alpha(float a, float b, float c)
{
<<<<<<< HEAD
 8005da8:	b5b0      	push	{r4, r5, r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	ed87 0a03 	vstr	s0, [r7, #12]
 8005db2:	edc7 0a02 	vstr	s1, [r7, #8]
 8005db6:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;
    // alpha = (float)2 * (float)a / ((float) 3); // - 0.3333333 * b - 0.3333333 * c;
    alpha =  0.66666667 * a - 0.3333333 * b - 0.3333333 * c;
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7fa fbe4 	bl	8000588 <__aeabi_f2d>
 8005dc0:	a31d      	add	r3, pc, #116	; (adr r3, 8005e38 <abc_to_alpha+0x90>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f7fa fc37 	bl	8000638 <__aeabi_dmul>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4614      	mov	r4, r2
 8005dd0:	461d      	mov	r5, r3
 8005dd2:	68b8      	ldr	r0, [r7, #8]
 8005dd4:	f7fa fbd8 	bl	8000588 <__aeabi_f2d>
 8005dd8:	a319      	add	r3, pc, #100	; (adr r3, 8005e40 <abc_to_alpha+0x98>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fc2b 	bl	8000638 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4620      	mov	r0, r4
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7fa fa6d 	bl	80002c8 <__aeabi_dsub>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4614      	mov	r4, r2
 8005df4:	461d      	mov	r5, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fa fbc6 	bl	8000588 <__aeabi_f2d>
 8005dfc:	a310      	add	r3, pc, #64	; (adr r3, 8005e40 <abc_to_alpha+0x98>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f7fa fc19 	bl	8000638 <__aeabi_dmul>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7fa fa5b 	bl	80002c8 <__aeabi_dsub>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f7fa febd 	bl	8000b98 <__aeabi_d2f>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	617b      	str	r3, [r7, #20]
    // alpha = 2.0/3.0 * a - 1.0/3.0 * b - 1.0/3.0 * c;

    return alpha;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	ee07 3a90 	vmov	s15, r3
    // return a;
}
 8005e28:	eeb0 0a67 	vmov.f32	s0, s15
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bdb0      	pop	{r4, r5, r7, pc}
 8005e32:	bf00      	nop
 8005e34:	f3af 8000 	nop.w
 8005e38:	571f7693 	.word	0x571f7693
 8005e3c:	3fe55555 	.word	0x3fe55555
 8005e40:	318abc87 	.word	0x318abc87
 8005e44:	3fd55555 	.word	0x3fd55555

08005e48 <abc_to_beta>:

float abc_to_beta(float a, float b, float c)
{
 8005e48:	b5b0      	push	{r4, r5, r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005e52:	edc7 0a02 	vstr	s1, [r7, #8]
 8005e56:	ed87 1a01 	vstr	s2, [r7, #4]
=======
 8005e00:	b5b0      	push	{r4, r5, r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	ed87 0a03 	vstr	s0, [r7, #12]
 8005e0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005e0e:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;
    // alpha = (float)2 * (float)a / ((float) 3); // - 0.3333333 * b - 0.3333333 * c;
    alpha =  0.66666667 * a - 0.3333333 * b - 0.3333333 * c;
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7fa fbb8 	bl	8000588 <__aeabi_f2d>
 8005e18:	a31d      	add	r3, pc, #116	; (adr r3, 8005e90 <abc_to_alpha+0x90>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f7fa fc0b 	bl	8000638 <__aeabi_dmul>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4614      	mov	r4, r2
 8005e28:	461d      	mov	r5, r3
 8005e2a:	68b8      	ldr	r0, [r7, #8]
 8005e2c:	f7fa fbac 	bl	8000588 <__aeabi_f2d>
 8005e30:	a319      	add	r3, pc, #100	; (adr r3, 8005e98 <abc_to_alpha+0x98>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa fbff 	bl	8000638 <__aeabi_dmul>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa fa41 	bl	80002c8 <__aeabi_dsub>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4614      	mov	r4, r2
 8005e4c:	461d      	mov	r5, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fa fb9a 	bl	8000588 <__aeabi_f2d>
 8005e54:	a310      	add	r3, pc, #64	; (adr r3, 8005e98 <abc_to_alpha+0x98>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa fbed 	bl	8000638 <__aeabi_dmul>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	f7fa fa2f 	bl	80002c8 <__aeabi_dsub>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	f7fa fe91 	bl	8000b98 <__aeabi_d2f>
 8005e76:	4603      	mov	r3, r0
 8005e78:	617b      	str	r3, [r7, #20]
    // alpha = 2.0/3.0 * a - 1.0/3.0 * b - 1.0/3.0 * c;

    return alpha;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	ee07 3a90 	vmov	s15, r3
    // return a;
}
 8005e80:	eeb0 0a67 	vmov.f32	s0, s15
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bdb0      	pop	{r4, r5, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w
 8005e90:	571f7693 	.word	0x571f7693
 8005e94:	3fe55555 	.word	0x3fe55555
 8005e98:	318abc87 	.word	0x318abc87
 8005e9c:	3fd55555 	.word	0x3fd55555

08005ea0 <abc_to_beta>:

float abc_to_beta(float a, float b, float c)
{
 8005ea0:	b5b0      	push	{r4, r5, r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	ed87 0a03 	vstr	s0, [r7, #12]
 8005eaa:	edc7 0a02 	vstr	s1, [r7, #8]
 8005eae:	ed87 1a01 	vstr	s2, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    float beta;


    // beta = 0.5773503*b - 0.5773503*c;
    beta = 2.0/3.0*((sqrt(3.0)/2.0)*b - (sqrt(3.0)/2.0)*c);
<<<<<<< HEAD
 8005e5a:	68b8      	ldr	r0, [r7, #8]
 8005e5c:	f7fa fb94 	bl	8000588 <__aeabi_f2d>
 8005e60:	a317      	add	r3, pc, #92	; (adr r3, 8005ec0 <abc_to_beta+0x78>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa fbe7 	bl	8000638 <__aeabi_dmul>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4614      	mov	r4, r2
 8005e70:	461d      	mov	r5, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fa fb88 	bl	8000588 <__aeabi_f2d>
 8005e78:	a311      	add	r3, pc, #68	; (adr r3, 8005ec0 <abc_to_beta+0x78>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fbdb 	bl	8000638 <__aeabi_dmul>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4620      	mov	r0, r4
 8005e88:	4629      	mov	r1, r5
 8005e8a:	f7fa fa1d 	bl	80002c8 <__aeabi_dsub>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	a30c      	add	r3, pc, #48	; (adr r3, 8005ec8 <abc_to_beta+0x80>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f7fa fbcc 	bl	8000638 <__aeabi_dmul>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	f7fa fe76 	bl	8000b98 <__aeabi_d2f>
 8005eac:	4603      	mov	r3, r0
 8005eae:	617b      	str	r3, [r7, #20]

    return beta;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	ee07 3a90 	vmov	s15, r3
}
 8005eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec0:	e8584caa 	.word	0xe8584caa
 8005ec4:	3febb67a 	.word	0x3febb67a
 8005ec8:	55555555 	.word	0x55555555
 8005ecc:	3fe55555 	.word	0x3fe55555

08005ed0 <alphabeta_to_d>:

float alphabeta_to_d(float alpha, float beta, float angle)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	ed2d 8b02 	vpush	{d8}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	ed87 0a03 	vstr	s0, [r7, #12]
 8005ede:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ee2:	ed87 1a01 	vstr	s2, [r7, #4]
=======
 8005eb2:	68b8      	ldr	r0, [r7, #8]
 8005eb4:	f7fa fb68 	bl	8000588 <__aeabi_f2d>
 8005eb8:	a317      	add	r3, pc, #92	; (adr r3, 8005f18 <abc_to_beta+0x78>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa fbbb 	bl	8000638 <__aeabi_dmul>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	461d      	mov	r5, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fa fb5c 	bl	8000588 <__aeabi_f2d>
 8005ed0:	a311      	add	r3, pc, #68	; (adr r3, 8005f18 <abc_to_beta+0x78>)
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f7fa fbaf 	bl	8000638 <__aeabi_dmul>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	f7fa f9f1 	bl	80002c8 <__aeabi_dsub>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4610      	mov	r0, r2
 8005eec:	4619      	mov	r1, r3
 8005eee:	a30c      	add	r3, pc, #48	; (adr r3, 8005f20 <abc_to_beta+0x80>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa fba0 	bl	8000638 <__aeabi_dmul>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	f7fa fe4a 	bl	8000b98 <__aeabi_d2f>
 8005f04:	4603      	mov	r3, r0
 8005f06:	617b      	str	r3, [r7, #20]

    return beta;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	ee07 3a90 	vmov	s15, r3
}
 8005f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bdb0      	pop	{r4, r5, r7, pc}
 8005f18:	e8584caa 	.word	0xe8584caa
 8005f1c:	3febb67a 	.word	0x3febb67a
 8005f20:	55555555 	.word	0x55555555
 8005f24:	3fe55555 	.word	0x3fe55555

08005f28 <alphabeta_to_d>:

float alphabeta_to_d(float alpha, float beta, float angle)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	ed2d 8b02 	vpush	{d8}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f36:	edc7 0a02 	vstr	s1, [r7, #8]
 8005f3a:	ed87 1a01 	vstr	s2, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    float d;


    d = cosf(angle)*alpha + sinf(angle)*beta;
<<<<<<< HEAD
 8005ee6:	ed97 0a01 	vldr	s0, [r7, #4]
 8005eea:	f001 f84b 	bl	8006f84 <cosf>
 8005eee:	eeb0 7a40 	vmov.f32	s14, s0
 8005ef2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ef6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005efa:	ed97 0a01 	vldr	s0, [r7, #4]
 8005efe:	f001 f881 	bl	8007004 <sinf>
 8005f02:	eeb0 7a40 	vmov.f32	s14, s0
 8005f06:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005f12:	edc7 7a05 	vstr	s15, [r7, #20]

    return d;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	ee07 3a90 	vmov	s15, r3
}
 8005f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	ecbd 8b02 	vpop	{d8}
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <alphabeta_to_q>:

float alphabeta_to_q(float alpha, float beta, float angle)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	ed2d 8b02 	vpush	{d8}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f38:	edc7 0a02 	vstr	s1, [r7, #8]
 8005f3c:	ed87 1a01 	vstr	s2, [r7, #4]
=======
 8005f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f42:	f001 f84b 	bl	8006fdc <cosf>
 8005f46:	eeb0 7a40 	vmov.f32	s14, s0
 8005f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f4e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005f52:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f56:	f001 f881 	bl	800705c <sinf>
 8005f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8005f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f66:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005f6a:	edc7 7a05 	vstr	s15, [r7, #20]

    return d;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	ee07 3a90 	vmov	s15, r3
}
 8005f74:	eeb0 0a67 	vmov.f32	s0, s15
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	ecbd 8b02 	vpop	{d8}
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <alphabeta_to_q>:

float alphabeta_to_q(float alpha, float beta, float angle)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	ed2d 8b02 	vpush	{d8}
 8005f88:	b086      	sub	sp, #24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f90:	edc7 0a02 	vstr	s1, [r7, #8]
 8005f94:	ed87 1a01 	vstr	s2, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    float q;


    q = -sinf(angle)*alpha + cosf(angle)*beta;
<<<<<<< HEAD
 8005f40:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f44:	f001 f85e 	bl	8007004 <sinf>
 8005f48:	eef0 7a40 	vmov.f32	s15, s0
 8005f4c:	eeb1 7a67 	vneg.f32	s14, s15
 8005f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f54:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005f58:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f5c:	f001 f812 	bl	8006f84 <cosf>
 8005f60:	eeb0 7a40 	vmov.f32	s14, s0
 8005f64:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005f70:	edc7 7a05 	vstr	s15, [r7, #20]

    return q;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	ee07 3a90 	vmov	s15, r3
}
 8005f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	ecbd 8b02 	vpop	{d8}
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <dq_to_alpha>:

float dq_to_alpha(float d, float q, float angle)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	ed2d 8b02 	vpush	{d8}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f96:	edc7 0a02 	vstr	s1, [r7, #8]
 8005f9a:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;

    alpha = cosf(angle)*d - sinf(angle)*q;
 8005f9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005fa2:	f000 ffef 	bl	8006f84 <cosf>
 8005fa6:	eeb0 7a40 	vmov.f32	s14, s0
 8005faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fae:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005fb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005fb6:	f001 f825 	bl	8007004 <sinf>
 8005fba:	eeb0 7a40 	vmov.f32	s14, s0
 8005fbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005fca:	edc7 7a05 	vstr	s15, [r7, #20]

    return alpha;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	ee07 3a90 	vmov	s15, r3
}
 8005fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	ecbd 8b02 	vpop	{d8}
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <dq_to_beta>:

float dq_to_beta(float d, float q, float angle)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	ed2d 8b02 	vpush	{d8}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	ed87 0a03 	vstr	s0, [r7, #12]
 8005ff0:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ff4:	ed87 1a01 	vstr	s2, [r7, #4]
=======
 8005f98:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f9c:	f001 f85e 	bl	800705c <sinf>
 8005fa0:	eef0 7a40 	vmov.f32	s15, s0
 8005fa4:	eeb1 7a67 	vneg.f32	s14, s15
 8005fa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fac:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005fb0:	ed97 0a01 	vldr	s0, [r7, #4]
 8005fb4:	f001 f812 	bl	8006fdc <cosf>
 8005fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8005fbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005fc8:	edc7 7a05 	vstr	s15, [r7, #20]

    return q;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	ee07 3a90 	vmov	s15, r3
}
 8005fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	ecbd 8b02 	vpop	{d8}
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <dq_to_alpha>:

float dq_to_alpha(float d, float q, float angle)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	ed2d 8b02 	vpush	{d8}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	ed87 0a03 	vstr	s0, [r7, #12]
 8005fee:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ff2:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;

    alpha = cosf(angle)*d - sinf(angle)*q;
 8005ff6:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ffa:	f000 ffef 	bl	8006fdc <cosf>
 8005ffe:	eeb0 7a40 	vmov.f32	s14, s0
 8006002:	edd7 7a03 	vldr	s15, [r7, #12]
 8006006:	ee27 8a27 	vmul.f32	s16, s14, s15
 800600a:	ed97 0a01 	vldr	s0, [r7, #4]
 800600e:	f001 f825 	bl	800705c <sinf>
 8006012:	eeb0 7a40 	vmov.f32	s14, s0
 8006016:	edd7 7a02 	vldr	s15, [r7, #8]
 800601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006022:	edc7 7a05 	vstr	s15, [r7, #20]

    return alpha;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	ee07 3a90 	vmov	s15, r3
}
 800602c:	eeb0 0a67 	vmov.f32	s0, s15
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	ecbd 8b02 	vpop	{d8}
 8006038:	bd80      	pop	{r7, pc}

0800603a <dq_to_beta>:

float dq_to_beta(float d, float q, float angle)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	ed2d 8b02 	vpush	{d8}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	ed87 0a03 	vstr	s0, [r7, #12]
 8006048:	edc7 0a02 	vstr	s1, [r7, #8]
 800604c:	ed87 1a01 	vstr	s2, [r7, #4]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    float beta;


    beta = sinf(angle)*d + cosf(angle)*q;
<<<<<<< HEAD
 8005ff8:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ffc:	f001 f802 	bl	8007004 <sinf>
 8006000:	eeb0 7a40 	vmov.f32	s14, s0
 8006004:	edd7 7a03 	vldr	s15, [r7, #12]
 8006008:	ee27 8a27 	vmul.f32	s16, s14, s15
 800600c:	ed97 0a01 	vldr	s0, [r7, #4]
 8006010:	f000 ffb8 	bl	8006f84 <cosf>
 8006014:	eeb0 7a40 	vmov.f32	s14, s0
 8006018:	edd7 7a02 	vldr	s15, [r7, #8]
 800601c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006020:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006024:	edc7 7a05 	vstr	s15, [r7, #20]

    return beta;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	ee07 3a90 	vmov	s15, r3
}
 800602e:	eeb0 0a67 	vmov.f32	s0, s15
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	ecbd 8b02 	vpop	{d8}
 800603a:	bd80      	pop	{r7, pc}

0800603c <cos_grid>:

float cos_grid(float alpha, float beta)
{
 800603c:	b5b0      	push	{r4, r5, r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	ed87 0a01 	vstr	s0, [r7, #4]
 8006046:	edc7 0a00 	vstr	s1, [r7]
    float cosGrid;

    cosGrid = alpha/ (sqrt(alpha*alpha + beta*beta));
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fa fa9c 	bl	8000588 <__aeabi_f2d>
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	edd7 7a01 	vldr	s15, [r7, #4]
 8006058:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800605c:	edd7 7a00 	vldr	s15, [r7]
 8006060:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006068:	ee17 0a90 	vmov	r0, s15
 800606c:	f7fa fa8c 	bl	8000588 <__aeabi_f2d>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	ec43 2b10 	vmov	d0, r2, r3
 8006078:	f001 f806 	bl	8007088 <sqrt>
 800607c:	ec53 2b10 	vmov	r2, r3, d0
 8006080:	4620      	mov	r0, r4
 8006082:	4629      	mov	r1, r5
 8006084:	f7fa fc02 	bl	800088c <__aeabi_ddiv>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4610      	mov	r0, r2
 800608e:	4619      	mov	r1, r3
 8006090:	f7fa fd82 	bl	8000b98 <__aeabi_d2f>
 8006094:	4603      	mov	r3, r0
 8006096:	60fb      	str	r3, [r7, #12]
    

    return cosGrid;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	ee07 3a90 	vmov	s15, r3
}
 800609e:	eeb0 0a67 	vmov.f32	s0, s15
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bdb0      	pop	{r4, r5, r7, pc}

080060a8 <sin_grid>:

float sin_grid(float alpha, float beta)
{
 80060a8:	b5b0      	push	{r4, r5, r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80060b2:	edc7 0a00 	vstr	s1, [r7]
=======
 8006050:	ed97 0a01 	vldr	s0, [r7, #4]
 8006054:	f001 f802 	bl	800705c <sinf>
 8006058:	eeb0 7a40 	vmov.f32	s14, s0
 800605c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006060:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006064:	ed97 0a01 	vldr	s0, [r7, #4]
 8006068:	f000 ffb8 	bl	8006fdc <cosf>
 800606c:	eeb0 7a40 	vmov.f32	s14, s0
 8006070:	edd7 7a02 	vldr	s15, [r7, #8]
 8006074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006078:	ee78 7a27 	vadd.f32	s15, s16, s15
 800607c:	edc7 7a05 	vstr	s15, [r7, #20]

    return beta;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	ee07 3a90 	vmov	s15, r3
}
 8006086:	eeb0 0a67 	vmov.f32	s0, s15
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	ecbd 8b02 	vpop	{d8}
 8006092:	bd80      	pop	{r7, pc}

08006094 <cos_grid>:

float cos_grid(float alpha, float beta)
{
 8006094:	b5b0      	push	{r4, r5, r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	ed87 0a01 	vstr	s0, [r7, #4]
 800609e:	edc7 0a00 	vstr	s1, [r7]
    float cosGrid;

    cosGrid = alpha/ (sqrt(alpha*alpha + beta*beta));
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fa fa70 	bl	8000588 <__aeabi_f2d>
 80060a8:	4604      	mov	r4, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80060b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80060b4:	edd7 7a00 	vldr	s15, [r7]
 80060b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c0:	ee17 0a90 	vmov	r0, s15
 80060c4:	f7fa fa60 	bl	8000588 <__aeabi_f2d>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	ec43 2b10 	vmov	d0, r2, r3
 80060d0:	f001 f806 	bl	80070e0 <sqrt>
 80060d4:	ec53 2b10 	vmov	r2, r3, d0
 80060d8:	4620      	mov	r0, r4
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa fbd6 	bl	800088c <__aeabi_ddiv>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4610      	mov	r0, r2
 80060e6:	4619      	mov	r1, r3
 80060e8:	f7fa fd56 	bl	8000b98 <__aeabi_d2f>
 80060ec:	4603      	mov	r3, r0
 80060ee:	60fb      	str	r3, [r7, #12]
    

    return cosGrid;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	ee07 3a90 	vmov	s15, r3
}
 80060f6:	eeb0 0a67 	vmov.f32	s0, s15
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bdb0      	pop	{r4, r5, r7, pc}

08006100 <sin_grid>:

float sin_grid(float alpha, float beta)
{
 8006100:	b5b0      	push	{r4, r5, r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	ed87 0a01 	vstr	s0, [r7, #4]
 800610a:	edc7 0a00 	vstr	s1, [r7]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    float sinGrid;


    sinGrid = beta/ (sqrt(alpha*alpha + beta*beta));
<<<<<<< HEAD
 80060b6:	6838      	ldr	r0, [r7, #0]
 80060b8:	f7fa fa66 	bl	8000588 <__aeabi_f2d>
 80060bc:	4604      	mov	r4, r0
 80060be:	460d      	mov	r5, r1
 80060c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80060c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80060c8:	edd7 7a00 	vldr	s15, [r7]
 80060cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060d4:	ee17 0a90 	vmov	r0, s15
 80060d8:	f7fa fa56 	bl	8000588 <__aeabi_f2d>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	ec43 2b10 	vmov	d0, r2, r3
 80060e4:	f000 ffd0 	bl	8007088 <sqrt>
 80060e8:	ec53 2b10 	vmov	r2, r3, d0
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	f7fa fbcc 	bl	800088c <__aeabi_ddiv>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4610      	mov	r0, r2
 80060fa:	4619      	mov	r1, r3
 80060fc:	f7fa fd4c 	bl	8000b98 <__aeabi_d2f>
 8006100:	4603      	mov	r3, r0
 8006102:	60fb      	str	r3, [r7, #12]

    return sinGrid;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	ee07 3a90 	vmov	s15, r3
}
 800610a:	eeb0 0a67 	vmov.f32	s0, s15
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bdb0      	pop	{r4, r5, r7, pc}
 8006114:	0000      	movs	r0, r0
	...

08006118 <pi_regulator>:
=======
 800610e:	6838      	ldr	r0, [r7, #0]
 8006110:	f7fa fa3a 	bl	8000588 <__aeabi_f2d>
 8006114:	4604      	mov	r4, r0
 8006116:	460d      	mov	r5, r1
 8006118:	edd7 7a01 	vldr	s15, [r7, #4]
 800611c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006120:	edd7 7a00 	vldr	s15, [r7]
 8006124:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800612c:	ee17 0a90 	vmov	r0, s15
 8006130:	f7fa fa2a 	bl	8000588 <__aeabi_f2d>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	ec43 2b10 	vmov	d0, r2, r3
 800613c:	f000 ffd0 	bl	80070e0 <sqrt>
 8006140:	ec53 2b10 	vmov	r2, r3, d0
 8006144:	4620      	mov	r0, r4
 8006146:	4629      	mov	r1, r5
 8006148:	f7fa fba0 	bl	800088c <__aeabi_ddiv>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4610      	mov	r0, r2
 8006152:	4619      	mov	r1, r3
 8006154:	f7fa fd20 	bl	8000b98 <__aeabi_d2f>
 8006158:	4603      	mov	r3, r0
 800615a:	60fb      	str	r3, [r7, #12]

    return sinGrid;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	ee07 3a90 	vmov	s15, r3
}
 8006162:	eeb0 0a67 	vmov.f32	s0, s15
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bdb0      	pop	{r4, r5, r7, pc}
 800616c:	0000      	movs	r0, r0
	...

08006170 <pi_regulator>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e



float pi_regulator(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
<<<<<<< HEAD
 8006118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800611c:	b08a      	sub	sp, #40	; 0x28
 800611e:	af00      	add	r7, sp, #0
 8006120:	ed87 0a05 	vstr	s0, [r7, #20]
 8006124:	edc7 0a04 	vstr	s1, [r7, #16]
 8006128:	ed87 1a03 	vstr	s2, [r7, #12]
 800612c:	edc7 1a02 	vstr	s3, [r7, #8]
 8006130:	ed87 2a01 	vstr	s4, [r7, #4]
 8006134:	edc7 2a00 	vstr	s5, [r7]
=======
 8006170:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006174:	b08a      	sub	sp, #40	; 0x28
 8006176:	af00      	add	r7, sp, #0
 8006178:	ed87 0a05 	vstr	s0, [r7, #20]
 800617c:	edc7 0a04 	vstr	s1, [r7, #16]
 8006180:	ed87 1a03 	vstr	s2, [r7, #12]
 8006184:	edc7 1a02 	vstr	s3, [r7, #8]
 8006188:	ed87 2a01 	vstr	s4, [r7, #4]
 800618c:	edc7 2a00 	vstr	s5, [r7]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    float anglePll, integral, omega;

    static float phaseError_old, integral_old, angle_old, omega_old;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
<<<<<<< HEAD
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7fa fa25 	bl	8000588 <__aeabi_f2d>
 800613e:	4604      	mov	r4, r0
 8006140:	460d      	mov	r5, r1
 8006142:	6978      	ldr	r0, [r7, #20]
 8006144:	f7fa fa20 	bl	8000588 <__aeabi_f2d>
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	4b62      	ldr	r3, [pc, #392]	; (80062d8 <pi_regulator+0x1c0>)
 800614e:	f7fa fa73 	bl	8000638 <__aeabi_dmul>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4690      	mov	r8, r2
 8006158:	4699      	mov	r9, r3
 800615a:	4b60      	ldr	r3, [pc, #384]	; (80062dc <pi_regulator+0x1c4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fa fa12 	bl	8000588 <__aeabi_f2d>
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	4b5b      	ldr	r3, [pc, #364]	; (80062d8 <pi_regulator+0x1c0>)
 800616a:	f7fa fa65 	bl	8000638 <__aeabi_dmul>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4640      	mov	r0, r8
 8006174:	4649      	mov	r1, r9
 8006176:	f7fa f8a9 	bl	80002cc <__adddf3>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	f7fa fa59 	bl	8000638 <__aeabi_dmul>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4614      	mov	r4, r2
 800618c:	461d      	mov	r5, r3
 800618e:	6838      	ldr	r0, [r7, #0]
 8006190:	f7fa f9fa 	bl	8000588 <__aeabi_f2d>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4620      	mov	r0, r4
 800619a:	4629      	mov	r1, r5
 800619c:	f7fa fa4c 	bl	8000638 <__aeabi_dmul>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4614      	mov	r4, r2
 80061a6:	461d      	mov	r5, r3
 80061a8:	4b4d      	ldr	r3, [pc, #308]	; (80062e0 <pi_regulator+0x1c8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fa f9eb 	bl	8000588 <__aeabi_f2d>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa f887 	bl	80002cc <__adddf3>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	f7fa fce7 	bl	8000b98 <__aeabi_d2f>
 80061ca:	4603      	mov	r3, r0
 80061cc:	623b      	str	r3, [r7, #32]
    omega = phaseError*kp + integral + feedForward; 
 80061ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80061d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80061d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061da:	edd7 7a08 	vldr	s15, [r7, #32]
 80061de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80061e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ea:	edc7 7a07 	vstr	s15, [r7, #28]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 80061ee:	69f8      	ldr	r0, [r7, #28]
 80061f0:	f7fa f9ca 	bl	8000588 <__aeabi_f2d>
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	4b37      	ldr	r3, [pc, #220]	; (80062d8 <pi_regulator+0x1c0>)
 80061fa:	f7fa fa1d 	bl	8000638 <__aeabi_dmul>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4614      	mov	r4, r2
 8006204:	461d      	mov	r5, r3
 8006206:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <pi_regulator+0x1cc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fa f9bc 	bl	8000588 <__aeabi_f2d>
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <pi_regulator+0x1c0>)
 8006216:	f7fa fa0f 	bl	8000638 <__aeabi_dmul>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa f853 	bl	80002cc <__adddf3>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4614      	mov	r4, r2
 800622c:	461d      	mov	r5, r3
 800622e:	6838      	ldr	r0, [r7, #0]
 8006230:	f7fa f9aa 	bl	8000588 <__aeabi_f2d>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4620      	mov	r0, r4
 800623a:	4629      	mov	r1, r5
 800623c:	f7fa f9fc 	bl	8000638 <__aeabi_dmul>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4614      	mov	r4, r2
 8006246:	461d      	mov	r5, r3
 8006248:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <pi_regulator+0x1d0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4618      	mov	r0, r3
 800624e:	f7fa f99b 	bl	8000588 <__aeabi_f2d>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa f837 	bl	80002cc <__adddf3>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	f7fa fc97 	bl	8000b98 <__aeabi_d2f>
 800626a:	4603      	mov	r3, r0
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
    // anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;

    if (anglePll > TWO_PI) {
 800626e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006270:	f7fa f98a 	bl	8000588 <__aeabi_f2d>
 8006274:	a316      	add	r3, pc, #88	; (adr r3, 80062d0 <pi_regulator+0x1b8>)
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f7fa fc6d 	bl	8000b58 <__aeabi_dcmpgt>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00f      	beq.n	80062a4 <pi_regulator+0x18c>
    		anglePll = anglePll - TWO_PI;
 8006284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006286:	f7fa f97f 	bl	8000588 <__aeabi_f2d>
 800628a:	a311      	add	r3, pc, #68	; (adr r3, 80062d0 <pi_regulator+0x1b8>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f7fa f81a 	bl	80002c8 <__aeabi_dsub>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	f7fa fc7c 	bl	8000b98 <__aeabi_d2f>
 80062a0:	4603      	mov	r3, r0
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    phaseError_old = phaseError;
 80062a4:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <pi_regulator+0x1c4>)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <pi_regulator+0x1c8>)
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 80062b0:	4a0d      	ldr	r2, [pc, #52]	; (80062e8 <pi_regulator+0x1d0>)
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 80062b6:	4a0b      	ldr	r2, [pc, #44]	; (80062e4 <pi_regulator+0x1cc>)
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	6013      	str	r3, [r2, #0]


    return anglePll;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	ee07 3a90 	vmov	s15, r3
}
 80062c2:	eeb0 0a67 	vmov.f32	s0, s15
 80062c6:	3728      	adds	r7, #40	; 0x28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80062ce:	bf00      	nop
 80062d0:	54442c46 	.word	0x54442c46
 80062d4:	401921fb 	.word	0x401921fb
 80062d8:	3fe00000 	.word	0x3fe00000
 80062dc:	200001fc 	.word	0x200001fc
 80062e0:	20000200 	.word	0x20000200
 80062e4:	20000204 	.word	0x20000204
 80062e8:	20000208 	.word	0x20000208
 80062ec:	00000000 	.word	0x00000000

080062f0 <pi_regulator_comp>:

float pi_regulator_comp(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
 80062f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80062f4:	b08a      	sub	sp, #40	; 0x28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	ed87 0a05 	vstr	s0, [r7, #20]
 80062fc:	edc7 0a04 	vstr	s1, [r7, #16]
 8006300:	ed87 1a03 	vstr	s2, [r7, #12]
 8006304:	edc7 1a02 	vstr	s3, [r7, #8]
 8006308:	ed87 2a01 	vstr	s4, [r7, #4]
 800630c:	edc7 2a00 	vstr	s5, [r7]
=======
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7fa f9f9 	bl	8000588 <__aeabi_f2d>
 8006196:	4604      	mov	r4, r0
 8006198:	460d      	mov	r5, r1
 800619a:	6978      	ldr	r0, [r7, #20]
 800619c:	f7fa f9f4 	bl	8000588 <__aeabi_f2d>
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	4b62      	ldr	r3, [pc, #392]	; (8006330 <pi_regulator+0x1c0>)
 80061a6:	f7fa fa47 	bl	8000638 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4690      	mov	r8, r2
 80061b0:	4699      	mov	r9, r3
 80061b2:	4b60      	ldr	r3, [pc, #384]	; (8006334 <pi_regulator+0x1c4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f9e6 	bl	8000588 <__aeabi_f2d>
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	4b5b      	ldr	r3, [pc, #364]	; (8006330 <pi_regulator+0x1c0>)
 80061c2:	f7fa fa39 	bl	8000638 <__aeabi_dmul>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4640      	mov	r0, r8
 80061cc:	4649      	mov	r1, r9
 80061ce:	f7fa f87d 	bl	80002cc <__adddf3>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4620      	mov	r0, r4
 80061d8:	4629      	mov	r1, r5
 80061da:	f7fa fa2d 	bl	8000638 <__aeabi_dmul>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4614      	mov	r4, r2
 80061e4:	461d      	mov	r5, r3
 80061e6:	6838      	ldr	r0, [r7, #0]
 80061e8:	f7fa f9ce 	bl	8000588 <__aeabi_f2d>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4620      	mov	r0, r4
 80061f2:	4629      	mov	r1, r5
 80061f4:	f7fa fa20 	bl	8000638 <__aeabi_dmul>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4614      	mov	r4, r2
 80061fe:	461d      	mov	r5, r3
 8006200:	4b4d      	ldr	r3, [pc, #308]	; (8006338 <pi_regulator+0x1c8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f7fa f9bf 	bl	8000588 <__aeabi_f2d>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7fa f85b 	bl	80002cc <__adddf3>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4610      	mov	r0, r2
 800621c:	4619      	mov	r1, r3
 800621e:	f7fa fcbb 	bl	8000b98 <__aeabi_d2f>
 8006222:	4603      	mov	r3, r0
 8006224:	623b      	str	r3, [r7, #32]
    omega = phaseError*kp + integral + feedForward; 
 8006226:	ed97 7a05 	vldr	s14, [r7, #20]
 800622a:	edd7 7a02 	vldr	s15, [r7, #8]
 800622e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006232:	edd7 7a08 	vldr	s15, [r7, #32]
 8006236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800623a:	ed97 7a04 	vldr	s14, [r7, #16]
 800623e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006242:	edc7 7a07 	vstr	s15, [r7, #28]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 8006246:	69f8      	ldr	r0, [r7, #28]
 8006248:	f7fa f99e 	bl	8000588 <__aeabi_f2d>
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	4b37      	ldr	r3, [pc, #220]	; (8006330 <pi_regulator+0x1c0>)
 8006252:	f7fa f9f1 	bl	8000638 <__aeabi_dmul>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4614      	mov	r4, r2
 800625c:	461d      	mov	r5, r3
 800625e:	4b37      	ldr	r3, [pc, #220]	; (800633c <pi_regulator+0x1cc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa f990 	bl	8000588 <__aeabi_f2d>
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	4b30      	ldr	r3, [pc, #192]	; (8006330 <pi_regulator+0x1c0>)
 800626e:	f7fa f9e3 	bl	8000638 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa f827 	bl	80002cc <__adddf3>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4614      	mov	r4, r2
 8006284:	461d      	mov	r5, r3
 8006286:	6838      	ldr	r0, [r7, #0]
 8006288:	f7fa f97e 	bl	8000588 <__aeabi_f2d>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7fa f9d0 	bl	8000638 <__aeabi_dmul>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	4b27      	ldr	r3, [pc, #156]	; (8006340 <pi_regulator+0x1d0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fa f96f 	bl	8000588 <__aeabi_f2d>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7fa f80b 	bl	80002cc <__adddf3>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	f7fa fc6b 	bl	8000b98 <__aeabi_d2f>
 80062c2:	4603      	mov	r3, r0
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
    // anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;

    if (anglePll > TWO_PI) {
 80062c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062c8:	f7fa f95e 	bl	8000588 <__aeabi_f2d>
 80062cc:	a316      	add	r3, pc, #88	; (adr r3, 8006328 <pi_regulator+0x1b8>)
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f7fa fc41 	bl	8000b58 <__aeabi_dcmpgt>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00f      	beq.n	80062fc <pi_regulator+0x18c>
    		anglePll = anglePll - TWO_PI;
 80062dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062de:	f7fa f953 	bl	8000588 <__aeabi_f2d>
 80062e2:	a311      	add	r3, pc, #68	; (adr r3, 8006328 <pi_regulator+0x1b8>)
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f7f9 ffee 	bl	80002c8 <__aeabi_dsub>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4610      	mov	r0, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	f7fa fc50 	bl	8000b98 <__aeabi_d2f>
 80062f8:	4603      	mov	r3, r0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
    }

    phaseError_old = phaseError;
 80062fc:	4a0d      	ldr	r2, [pc, #52]	; (8006334 <pi_regulator+0x1c4>)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 8006302:	4a0d      	ldr	r2, [pc, #52]	; (8006338 <pi_regulator+0x1c8>)
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 8006308:	4a0d      	ldr	r2, [pc, #52]	; (8006340 <pi_regulator+0x1d0>)
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 800630e:	4a0b      	ldr	r2, [pc, #44]	; (800633c <pi_regulator+0x1cc>)
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	6013      	str	r3, [r2, #0]


    return anglePll;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	ee07 3a90 	vmov	s15, r3
}
 800631a:	eeb0 0a67 	vmov.f32	s0, s15
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006326:	bf00      	nop
 8006328:	54442c46 	.word	0x54442c46
 800632c:	401921fb 	.word	0x401921fb
 8006330:	3fe00000 	.word	0x3fe00000
 8006334:	200001fc 	.word	0x200001fc
 8006338:	20000200 	.word	0x20000200
 800633c:	20000204 	.word	0x20000204
 8006340:	20000208 	.word	0x20000208
 8006344:	00000000 	.word	0x00000000

08006348 <pi_regulator_comp>:

float pi_regulator_comp(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
 8006348:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800634c:	b08a      	sub	sp, #40	; 0x28
 800634e:	af00      	add	r7, sp, #0
 8006350:	ed87 0a05 	vstr	s0, [r7, #20]
 8006354:	edc7 0a04 	vstr	s1, [r7, #16]
 8006358:	ed87 1a03 	vstr	s2, [r7, #12]
 800635c:	edc7 1a02 	vstr	s3, [r7, #8]
 8006360:	ed87 2a01 	vstr	s4, [r7, #4]
 8006364:	edc7 2a00 	vstr	s5, [r7]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    float anglePll, integral, omega, anglePllComp;
    static float phaseError_old, integral_old, angle_old, omega_old;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
<<<<<<< HEAD
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7fa f939 	bl	8000588 <__aeabi_f2d>
 8006316:	4604      	mov	r4, r0
 8006318:	460d      	mov	r5, r1
 800631a:	6978      	ldr	r0, [r7, #20]
 800631c:	f7fa f934 	bl	8000588 <__aeabi_f2d>
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	4b6e      	ldr	r3, [pc, #440]	; (80064e0 <pi_regulator_comp+0x1f0>)
 8006326:	f7fa f987 	bl	8000638 <__aeabi_dmul>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4690      	mov	r8, r2
 8006330:	4699      	mov	r9, r3
 8006332:	4b6c      	ldr	r3, [pc, #432]	; (80064e4 <pi_regulator_comp+0x1f4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fa f926 	bl	8000588 <__aeabi_f2d>
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	4b67      	ldr	r3, [pc, #412]	; (80064e0 <pi_regulator_comp+0x1f0>)
 8006342:	f7fa f979 	bl	8000638 <__aeabi_dmul>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4640      	mov	r0, r8
 800634c:	4649      	mov	r1, r9
 800634e:	f7f9 ffbd 	bl	80002cc <__adddf3>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4620      	mov	r0, r4
 8006358:	4629      	mov	r1, r5
 800635a:	f7fa f96d 	bl	8000638 <__aeabi_dmul>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4614      	mov	r4, r2
 8006364:	461d      	mov	r5, r3
 8006366:	6838      	ldr	r0, [r7, #0]
 8006368:	f7fa f90e 	bl	8000588 <__aeabi_f2d>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7fa f960 	bl	8000638 <__aeabi_dmul>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4614      	mov	r4, r2
 800637e:	461d      	mov	r5, r3
 8006380:	4b59      	ldr	r3, [pc, #356]	; (80064e8 <pi_regulator_comp+0x1f8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f7fa f8ff 	bl	8000588 <__aeabi_f2d>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4620      	mov	r0, r4
 8006390:	4629      	mov	r1, r5
 8006392:	f7f9 ff9b 	bl	80002cc <__adddf3>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4610      	mov	r0, r2
 800639c:	4619      	mov	r1, r3
 800639e:	f7fa fbfb 	bl	8000b98 <__aeabi_d2f>
 80063a2:	4603      	mov	r3, r0
 80063a4:	623b      	str	r3, [r7, #32]
    omega = phaseError*kp + integral + feedForward; 
 80063a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80063aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80063ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80063b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80063be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063c2:	edc7 7a07 	vstr	s15, [r7, #28]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 80063c6:	69f8      	ldr	r0, [r7, #28]
 80063c8:	f7fa f8de 	bl	8000588 <__aeabi_f2d>
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <pi_regulator_comp+0x1f0>)
 80063d2:	f7fa f931 	bl	8000638 <__aeabi_dmul>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4614      	mov	r4, r2
 80063dc:	461d      	mov	r5, r3
 80063de:	4b43      	ldr	r3, [pc, #268]	; (80064ec <pi_regulator_comp+0x1fc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fa f8d0 	bl	8000588 <__aeabi_f2d>
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	4b3c      	ldr	r3, [pc, #240]	; (80064e0 <pi_regulator_comp+0x1f0>)
 80063ee:	f7fa f923 	bl	8000638 <__aeabi_dmul>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7f9 ff67 	bl	80002cc <__adddf3>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4614      	mov	r4, r2
 8006404:	461d      	mov	r5, r3
 8006406:	6838      	ldr	r0, [r7, #0]
 8006408:	f7fa f8be 	bl	8000588 <__aeabi_f2d>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4620      	mov	r0, r4
 8006412:	4629      	mov	r1, r5
 8006414:	f7fa f910 	bl	8000638 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4614      	mov	r4, r2
 800641e:	461d      	mov	r5, r3
 8006420:	4b33      	ldr	r3, [pc, #204]	; (80064f0 <pi_regulator_comp+0x200>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f7fa f8af 	bl	8000588 <__aeabi_f2d>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4620      	mov	r0, r4
 8006430:	4629      	mov	r1, r5
 8006432:	f7f9 ff4b 	bl	80002cc <__adddf3>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f7fa fbab 	bl	8000b98 <__aeabi_d2f>
 8006442:	4603      	mov	r3, r0
 8006444:	627b      	str	r3, [r7, #36]	; 0x24

    if (anglePll > TWO_PI) {
 8006446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006448:	f7fa f89e 	bl	8000588 <__aeabi_f2d>
 800644c:	a322      	add	r3, pc, #136	; (adr r3, 80064d8 <pi_regulator_comp+0x1e8>)
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	f7fa fb81 	bl	8000b58 <__aeabi_dcmpgt>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00f      	beq.n	800647c <pi_regulator_comp+0x18c>
        	anglePll = anglePll - TWO_PI;
 800645c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800645e:	f7fa f893 	bl	8000588 <__aeabi_f2d>
 8006462:	a31d      	add	r3, pc, #116	; (adr r3, 80064d8 <pi_regulator_comp+0x1e8>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f7f9 ff2e 	bl	80002c8 <__aeabi_dsub>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	f7fa fb90 	bl	8000b98 <__aeabi_d2f>
 8006478:	4603      	mov	r3, r0
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;
 800647c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006480:	edd7 7a04 	vldr	s15, [r7, #16]
 8006484:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006488:	edd7 6a05 	vldr	s13, [r7, #20]
 800648c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006498:	edd7 7a01 	vldr	s15, [r7, #4]
 800649c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80064a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064a8:	edc7 7a06 	vstr	s15, [r7, #24]

    phaseError_old = phaseError;
 80064ac:	4a0d      	ldr	r2, [pc, #52]	; (80064e4 <pi_regulator_comp+0x1f4>)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 80064b2:	4a0d      	ldr	r2, [pc, #52]	; (80064e8 <pi_regulator_comp+0x1f8>)
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 80064b8:	4a0d      	ldr	r2, [pc, #52]	; (80064f0 <pi_regulator_comp+0x200>)
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 80064be:	4a0b      	ldr	r2, [pc, #44]	; (80064ec <pi_regulator_comp+0x1fc>)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	6013      	str	r3, [r2, #0]

    
    return anglePllComp;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	ee07 3a90 	vmov	s15, r3
}
 80064ca:	eeb0 0a67 	vmov.f32	s0, s15
 80064ce:	3728      	adds	r7, #40	; 0x28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80064d6:	bf00      	nop
 80064d8:	54442c46 	.word	0x54442c46
 80064dc:	401921fb 	.word	0x401921fb
 80064e0:	3fe00000 	.word	0x3fe00000
 80064e4:	2000020c 	.word	0x2000020c
 80064e8:	20000210 	.word	0x20000210
 80064ec:	20000214 	.word	0x20000214
 80064f0:	20000218 	.word	0x20000218

080064f4 <phase_detector>:
=======
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7fa f90d 	bl	8000588 <__aeabi_f2d>
 800636e:	4604      	mov	r4, r0
 8006370:	460d      	mov	r5, r1
 8006372:	6978      	ldr	r0, [r7, #20]
 8006374:	f7fa f908 	bl	8000588 <__aeabi_f2d>
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	4b6e      	ldr	r3, [pc, #440]	; (8006538 <pi_regulator_comp+0x1f0>)
 800637e:	f7fa f95b 	bl	8000638 <__aeabi_dmul>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4690      	mov	r8, r2
 8006388:	4699      	mov	r9, r3
 800638a:	4b6c      	ldr	r3, [pc, #432]	; (800653c <pi_regulator_comp+0x1f4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f7fa f8fa 	bl	8000588 <__aeabi_f2d>
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	4b67      	ldr	r3, [pc, #412]	; (8006538 <pi_regulator_comp+0x1f0>)
 800639a:	f7fa f94d 	bl	8000638 <__aeabi_dmul>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7f9 ff91 	bl	80002cc <__adddf3>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa f941 	bl	8000638 <__aeabi_dmul>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4614      	mov	r4, r2
 80063bc:	461d      	mov	r5, r3
 80063be:	6838      	ldr	r0, [r7, #0]
 80063c0:	f7fa f8e2 	bl	8000588 <__aeabi_f2d>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4620      	mov	r0, r4
 80063ca:	4629      	mov	r1, r5
 80063cc:	f7fa f934 	bl	8000638 <__aeabi_dmul>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	4b59      	ldr	r3, [pc, #356]	; (8006540 <pi_regulator_comp+0x1f8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fa f8d3 	bl	8000588 <__aeabi_f2d>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7f9 ff6f 	bl	80002cc <__adddf3>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fa fbcf 	bl	8000b98 <__aeabi_d2f>
 80063fa:	4603      	mov	r3, r0
 80063fc:	623b      	str	r3, [r7, #32]
    omega = phaseError*kp + integral + feedForward; 
 80063fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8006402:	edd7 7a02 	vldr	s15, [r7, #8]
 8006406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800640a:	edd7 7a08 	vldr	s15, [r7, #32]
 800640e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006412:	ed97 7a04 	vldr	s14, [r7, #16]
 8006416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800641a:	edc7 7a07 	vstr	s15, [r7, #28]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 800641e:	69f8      	ldr	r0, [r7, #28]
 8006420:	f7fa f8b2 	bl	8000588 <__aeabi_f2d>
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	4b43      	ldr	r3, [pc, #268]	; (8006538 <pi_regulator_comp+0x1f0>)
 800642a:	f7fa f905 	bl	8000638 <__aeabi_dmul>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4614      	mov	r4, r2
 8006434:	461d      	mov	r5, r3
 8006436:	4b43      	ldr	r3, [pc, #268]	; (8006544 <pi_regulator_comp+0x1fc>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fa f8a4 	bl	8000588 <__aeabi_f2d>
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	4b3c      	ldr	r3, [pc, #240]	; (8006538 <pi_regulator_comp+0x1f0>)
 8006446:	f7fa f8f7 	bl	8000638 <__aeabi_dmul>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4620      	mov	r0, r4
 8006450:	4629      	mov	r1, r5
 8006452:	f7f9 ff3b 	bl	80002cc <__adddf3>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4614      	mov	r4, r2
 800645c:	461d      	mov	r5, r3
 800645e:	6838      	ldr	r0, [r7, #0]
 8006460:	f7fa f892 	bl	8000588 <__aeabi_f2d>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4620      	mov	r0, r4
 800646a:	4629      	mov	r1, r5
 800646c:	f7fa f8e4 	bl	8000638 <__aeabi_dmul>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4614      	mov	r4, r2
 8006476:	461d      	mov	r5, r3
 8006478:	4b33      	ldr	r3, [pc, #204]	; (8006548 <pi_regulator_comp+0x200>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f7fa f883 	bl	8000588 <__aeabi_f2d>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f7f9 ff1f 	bl	80002cc <__adddf3>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4610      	mov	r0, r2
 8006494:	4619      	mov	r1, r3
 8006496:	f7fa fb7f 	bl	8000b98 <__aeabi_d2f>
 800649a:	4603      	mov	r3, r0
 800649c:	627b      	str	r3, [r7, #36]	; 0x24

    if (anglePll > TWO_PI) {
 800649e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064a0:	f7fa f872 	bl	8000588 <__aeabi_f2d>
 80064a4:	a322      	add	r3, pc, #136	; (adr r3, 8006530 <pi_regulator_comp+0x1e8>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f7fa fb55 	bl	8000b58 <__aeabi_dcmpgt>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00f      	beq.n	80064d4 <pi_regulator_comp+0x18c>
        	anglePll = anglePll - TWO_PI;
 80064b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064b6:	f7fa f867 	bl	8000588 <__aeabi_f2d>
 80064ba:	a31d      	add	r3, pc, #116	; (adr r3, 8006530 <pi_regulator_comp+0x1e8>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7f9 ff02 	bl	80002c8 <__aeabi_dsub>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4610      	mov	r0, r2
 80064ca:	4619      	mov	r1, r3
 80064cc:	f7fa fb64 	bl	8000b98 <__aeabi_d2f>
 80064d0:	4603      	mov	r3, r0
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;
 80064d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80064d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80064dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064e0:	edd7 6a05 	vldr	s13, [r7, #20]
 80064e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80064e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80064f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80064fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006500:	edc7 7a06 	vstr	s15, [r7, #24]

    phaseError_old = phaseError;
 8006504:	4a0d      	ldr	r2, [pc, #52]	; (800653c <pi_regulator_comp+0x1f4>)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 800650a:	4a0d      	ldr	r2, [pc, #52]	; (8006540 <pi_regulator_comp+0x1f8>)
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 8006510:	4a0d      	ldr	r2, [pc, #52]	; (8006548 <pi_regulator_comp+0x200>)
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 8006516:	4a0b      	ldr	r2, [pc, #44]	; (8006544 <pi_regulator_comp+0x1fc>)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	6013      	str	r3, [r2, #0]

    
    return anglePllComp;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	ee07 3a90 	vmov	s15, r3
}
 8006522:	eeb0 0a67 	vmov.f32	s0, s15
 8006526:	3728      	adds	r7, #40	; 0x28
 8006528:	46bd      	mov	sp, r7
 800652a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800652e:	bf00      	nop
 8006530:	54442c46 	.word	0x54442c46
 8006534:	401921fb 	.word	0x401921fb
 8006538:	3fe00000 	.word	0x3fe00000
 800653c:	2000020c 	.word	0x2000020c
 8006540:	20000210 	.word	0x20000210
 8006544:	20000214 	.word	0x20000214
 8006548:	20000218 	.word	0x20000218

0800654c <phase_detector>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e


float phase_detector(float cosGrid, float sinGrid, float anglePllComp)
{
<<<<<<< HEAD
 80064f4:	b580      	push	{r7, lr}
 80064f6:	ed2d 8b02 	vpush	{d8}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8006502:	edc7 0a02 	vstr	s1, [r7, #8]
 8006506:	ed87 1a01 	vstr	s2, [r7, #4]
    float phaseError;

    phaseError = sinGrid*cosf(anglePllComp) - cosGrid*sinf(anglePllComp);
 800650a:	ed97 0a01 	vldr	s0, [r7, #4]
 800650e:	f000 fd39 	bl	8006f84 <cosf>
 8006512:	eeb0 7a40 	vmov.f32	s14, s0
 8006516:	edd7 7a02 	vldr	s15, [r7, #8]
 800651a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800651e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006522:	f000 fd6f 	bl	8007004 <sinf>
 8006526:	eeb0 7a40 	vmov.f32	s14, s0
 800652a:	edd7 7a03 	vldr	s15, [r7, #12]
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006536:	edc7 7a05 	vstr	s15, [r7, #20]
    

    return phaseError;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	ee07 3a90 	vmov	s15, r3
}
 8006540:	eeb0 0a67 	vmov.f32	s0, s15
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	ecbd 8b02 	vpop	{d8}
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <circular_buffer>:
=======
 800654c:	b580      	push	{r7, lr}
 800654e:	ed2d 8b02 	vpush	{d8}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	ed87 0a03 	vstr	s0, [r7, #12]
 800655a:	edc7 0a02 	vstr	s1, [r7, #8]
 800655e:	ed87 1a01 	vstr	s2, [r7, #4]
    float phaseError;

    phaseError = sinGrid*cosf(anglePllComp) - cosGrid*sinf(anglePllComp);
 8006562:	ed97 0a01 	vldr	s0, [r7, #4]
 8006566:	f000 fd39 	bl	8006fdc <cosf>
 800656a:	eeb0 7a40 	vmov.f32	s14, s0
 800656e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006572:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006576:	ed97 0a01 	vldr	s0, [r7, #4]
 800657a:	f000 fd6f 	bl	800705c <sinf>
 800657e:	eeb0 7a40 	vmov.f32	s14, s0
 8006582:	edd7 7a03 	vldr	s15, [r7, #12]
 8006586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800658e:	edc7 7a05 	vstr	s15, [r7, #20]
    

    return phaseError;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	ee07 3a90 	vmov	s15, r3
}
 8006598:	eeb0 0a67 	vmov.f32	s0, s15
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	ecbd 8b02 	vpop	{d8}
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <circular_buffer>:
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
//                  uint16_t *dataInput: Pointer to data to be inserted into circular buffer
//                  uint8_t event: A flag which, when triggered, sets the ring buffer to fill the last 1-bufSplit% of the buffer
//                  float bufSplit: The percentage of the buffer which is kept in the ring buffer after event trigger.
//  Returns     :   *readStart: Where to start reading the ring buffer
uint8_t circular_buffer(uint16_t bufferSize, int16_t circularBuffer[][17], int16_t *dataInput, uint8_t event, float bufSplit, uint16_t *readStart)
{
<<<<<<< HEAD
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	461a      	mov	r2, r3
 800655c:	ed87 0a00 	vstr	s0, [r7]
 8006560:	4603      	mov	r3, r0
 8006562:	81fb      	strh	r3, [r7, #14]
 8006564:	4613      	mov	r3, r2
 8006566:	737b      	strb	r3, [r7, #13]
=======
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	461a      	mov	r2, r3
 80065b4:	ed87 0a00 	vstr	s0, [r7]
 80065b8:	4603      	mov	r3, r0
 80065ba:	81fb      	strh	r3, [r7, #14]
 80065bc:	4613      	mov	r3, r2
 80065be:	737b      	strb	r3, [r7, #13]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        else {
            *readStart = 0;
        }
    } */

    if (bufferLength == bufferSize) {
<<<<<<< HEAD
 8006568:	4b50      	ldr	r3, [pc, #320]	; (80066ac <circular_buffer+0x15c>)
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	89fa      	ldrh	r2, [r7, #14]
 800656e:	429a      	cmp	r2, r3
 8006570:	d103      	bne.n	800657a <circular_buffer+0x2a>
        *readStart = writeIndex;
 8006572:	4b4f      	ldr	r3, [pc, #316]	; (80066b0 <circular_buffer+0x160>)
 8006574:	881a      	ldrh	r2, [r3, #0]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	801a      	strh	r2, [r3, #0]
    }

    if (event) {
 800657a:	7b7b      	ldrb	r3, [r7, #13]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d055      	beq.n	800662c <circular_buffer+0xdc>
        if (!eventEntry) {
 8006580:	4b4c      	ldr	r3, [pc, #304]	; (80066b4 <circular_buffer+0x164>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d112      	bne.n	80065ae <circular_buffer+0x5e>
            // Event has triggered
            bufferSplitLength = bufSplit * bufferSize;
 8006588:	89fb      	ldrh	r3, [r7, #14]
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006592:	edd7 7a00 	vldr	s15, [r7]
 8006596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800659e:	ee17 3a90 	vmov	r3, s15
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	4b44      	ldr	r3, [pc, #272]	; (80066b8 <circular_buffer+0x168>)
 80065a6:	801a      	strh	r2, [r3, #0]
            eventEntry = 1;
 80065a8:	4b42      	ldr	r3, [pc, #264]	; (80066b4 <circular_buffer+0x164>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
        }

        if (bufferSplitLength == bufferSize) {
 80065ae:	4b42      	ldr	r3, [pc, #264]	; (80066b8 <circular_buffer+0x168>)
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	89fa      	ldrh	r2, [r7, #14]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d10a      	bne.n	80065ce <circular_buffer+0x7e>
            if (!bufferFullEntry) {
 80065b8:	4b40      	ldr	r3, [pc, #256]	; (80066bc <circular_buffer+0x16c>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d15d      	bne.n	800667c <circular_buffer+0x12c>
            	bufferDoneFlag = 1;
 80065c0:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <circular_buffer+0x170>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]
                // Do something?
                bufferFullEntry = 1;
 80065c6:	4b3d      	ldr	r3, [pc, #244]	; (80066bc <circular_buffer+0x16c>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e056      	b.n	800667c <circular_buffer+0x12c>
=======
 80065c0:	4b50      	ldr	r3, [pc, #320]	; (8006704 <circular_buffer+0x15c>)
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	89fa      	ldrh	r2, [r7, #14]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d103      	bne.n	80065d2 <circular_buffer+0x2a>
        *readStart = writeIndex;
 80065ca:	4b4f      	ldr	r3, [pc, #316]	; (8006708 <circular_buffer+0x160>)
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	801a      	strh	r2, [r3, #0]
    }

    if (event) {
 80065d2:	7b7b      	ldrb	r3, [r7, #13]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d055      	beq.n	8006684 <circular_buffer+0xdc>
        if (!eventEntry) {
 80065d8:	4b4c      	ldr	r3, [pc, #304]	; (800670c <circular_buffer+0x164>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d112      	bne.n	8006606 <circular_buffer+0x5e>
            // Event has triggered
            bufferSplitLength = bufSplit * bufferSize;
 80065e0:	89fb      	ldrh	r3, [r7, #14]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065ea:	edd7 7a00 	vldr	s15, [r7]
 80065ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f6:	ee17 3a90 	vmov	r3, s15
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	4b44      	ldr	r3, [pc, #272]	; (8006710 <circular_buffer+0x168>)
 80065fe:	801a      	strh	r2, [r3, #0]
            eventEntry = 1;
 8006600:	4b42      	ldr	r3, [pc, #264]	; (800670c <circular_buffer+0x164>)
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
        }

        if (bufferSplitLength == bufferSize) {
 8006606:	4b42      	ldr	r3, [pc, #264]	; (8006710 <circular_buffer+0x168>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	89fa      	ldrh	r2, [r7, #14]
 800660c:	429a      	cmp	r2, r3
 800660e:	d10a      	bne.n	8006626 <circular_buffer+0x7e>
            if (!bufferFullEntry) {
 8006610:	4b40      	ldr	r3, [pc, #256]	; (8006714 <circular_buffer+0x16c>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d15d      	bne.n	80066d4 <circular_buffer+0x12c>
            	bufferDoneFlag = 1;
 8006618:	4b3f      	ldr	r3, [pc, #252]	; (8006718 <circular_buffer+0x170>)
 800661a:	2201      	movs	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
                // Do something?
                bufferFullEntry = 1;
 800661e:	4b3d      	ldr	r3, [pc, #244]	; (8006714 <circular_buffer+0x16c>)
 8006620:	2201      	movs	r2, #1
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e056      	b.n	80066d4 <circular_buffer+0x12c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
            }
            // STOP
        }
        else {
        	for (int i = 0; i < 17; ++i) {
<<<<<<< HEAD
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e015      	b.n	8006600 <circular_buffer+0xb0>
        	    circularBuffer[writeIndex][i] = dataInput[i];
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	441a      	add	r2, r3
 80065dc:	4b34      	ldr	r3, [pc, #208]	; (80066b0 <circular_buffer+0x160>)
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	460b      	mov	r3, r1
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	440b      	add	r3, r1
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	4619      	mov	r1, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	440b      	add	r3, r1
 80065f0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	for (int i = 0; i < 17; ++i) {
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	3301      	adds	r3, #1
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b10      	cmp	r3, #16
 8006604:	dde6      	ble.n	80065d4 <circular_buffer+0x84>
        	}
            bufferSplitLength++;
 8006606:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <circular_buffer+0x168>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <circular_buffer+0x168>)
 8006610:	801a      	strh	r2, [r3, #0]
            writeIndex++;
 8006612:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <circular_buffer+0x160>)
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	4b25      	ldr	r3, [pc, #148]	; (80066b0 <circular_buffer+0x160>)
 800661c:	801a      	strh	r2, [r3, #0]
            bufferLength++;
 800661e:	4b23      	ldr	r3, [pc, #140]	; (80066ac <circular_buffer+0x15c>)
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	3301      	adds	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	4b21      	ldr	r3, [pc, #132]	; (80066ac <circular_buffer+0x15c>)
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e027      	b.n	800667c <circular_buffer+0x12c>
=======
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	e015      	b.n	8006658 <circular_buffer+0xb0>
        	    circularBuffer[writeIndex][i] = dataInput[i];
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	441a      	add	r2, r3
 8006634:	4b34      	ldr	r3, [pc, #208]	; (8006708 <circular_buffer+0x160>)
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	4619      	mov	r1, r3
 800663a:	460b      	mov	r3, r1
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	440b      	add	r3, r1
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4619      	mov	r1, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	440b      	add	r3, r1
 8006648:	f9b2 1000 	ldrsh.w	r1, [r2]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	for (int i = 0; i < 17; ++i) {
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	3301      	adds	r3, #1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b10      	cmp	r3, #16
 800665c:	dde6      	ble.n	800662c <circular_buffer+0x84>
        	}
            bufferSplitLength++;
 800665e:	4b2c      	ldr	r3, [pc, #176]	; (8006710 <circular_buffer+0x168>)
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	4b2a      	ldr	r3, [pc, #168]	; (8006710 <circular_buffer+0x168>)
 8006668:	801a      	strh	r2, [r3, #0]
            writeIndex++;
 800666a:	4b27      	ldr	r3, [pc, #156]	; (8006708 <circular_buffer+0x160>)
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	4b25      	ldr	r3, [pc, #148]	; (8006708 <circular_buffer+0x160>)
 8006674:	801a      	strh	r2, [r3, #0]
            bufferLength++;
 8006676:	4b23      	ldr	r3, [pc, #140]	; (8006704 <circular_buffer+0x15c>)
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	4b21      	ldr	r3, [pc, #132]	; (8006704 <circular_buffer+0x15c>)
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	e027      	b.n	80066d4 <circular_buffer+0x12c>
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
        }
    }
    else {
    	for (int i = 0; i < 17; ++i) {
<<<<<<< HEAD
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	e015      	b.n	800665e <circular_buffer+0x10e>
    		circularBuffer[writeIndex][i] = dataInput[i];
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	441a      	add	r2, r3
 800663a:	4b1d      	ldr	r3, [pc, #116]	; (80066b0 <circular_buffer+0x160>)
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	4619      	mov	r1, r3
 8006640:	460b      	mov	r3, r1
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	440b      	add	r3, r1
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	4619      	mov	r1, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	440b      	add	r3, r1
 800664e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	for (int i = 0; i < 17; ++i) {
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	3301      	adds	r3, #1
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b10      	cmp	r3, #16
 8006662:	dde6      	ble.n	8006632 <circular_buffer+0xe2>
		}

        writeIndex++;
 8006664:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <circular_buffer+0x160>)
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <circular_buffer+0x160>)
 800666e:	801a      	strh	r2, [r3, #0]
        bufferLength++;
 8006670:	4b0e      	ldr	r3, [pc, #56]	; (80066ac <circular_buffer+0x15c>)
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <circular_buffer+0x15c>)
 800667a:	801a      	strh	r2, [r3, #0]
=======
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	e015      	b.n	80066b6 <circular_buffer+0x10e>
    		circularBuffer[writeIndex][i] = dataInput[i];
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	441a      	add	r2, r3
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <circular_buffer+0x160>)
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	4619      	mov	r1, r3
 8006698:	460b      	mov	r3, r1
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	440b      	add	r3, r1
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4619      	mov	r1, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	440b      	add	r3, r1
 80066a6:	f9b2 1000 	ldrsh.w	r1, [r2]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	for (int i = 0; i < 17; ++i) {
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	3301      	adds	r3, #1
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	dde6      	ble.n	800668a <circular_buffer+0xe2>
		}

        writeIndex++;
 80066bc:	4b12      	ldr	r3, [pc, #72]	; (8006708 <circular_buffer+0x160>)
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	3301      	adds	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	4b10      	ldr	r3, [pc, #64]	; (8006708 <circular_buffer+0x160>)
 80066c6:	801a      	strh	r2, [r3, #0]
        bufferLength++;
 80066c8:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <circular_buffer+0x15c>)
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <circular_buffer+0x15c>)
 80066d2:	801a      	strh	r2, [r3, #0]
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
    }



    // Reset bufferlength
    if (bufferLength > bufferSize) {
<<<<<<< HEAD
 800667c:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <circular_buffer+0x15c>)
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	89fa      	ldrh	r2, [r7, #14]
 8006682:	429a      	cmp	r2, r3
 8006684:	d202      	bcs.n	800668c <circular_buffer+0x13c>
        bufferLength = bufferSize;
 8006686:	4a09      	ldr	r2, [pc, #36]	; (80066ac <circular_buffer+0x15c>)
 8006688:	89fb      	ldrh	r3, [r7, #14]
 800668a:	8013      	strh	r3, [r2, #0]
    }
    // Reset writeindex
    if (writeIndex == bufferSize) {
 800668c:	4b08      	ldr	r3, [pc, #32]	; (80066b0 <circular_buffer+0x160>)
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	89fa      	ldrh	r2, [r7, #14]
 8006692:	429a      	cmp	r2, r3
 8006694:	d102      	bne.n	800669c <circular_buffer+0x14c>
        writeIndex = 0;
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <circular_buffer+0x160>)
 8006698:	2200      	movs	r2, #0
 800669a:	801a      	strh	r2, [r3, #0]
    }

    return bufferDoneFlag;
 800669c:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <circular_buffer+0x170>)
 800669e:	781b      	ldrb	r3, [r3, #0]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	2000021c 	.word	0x2000021c
 80066b0:	2000021e 	.word	0x2000021e
 80066b4:	20000220 	.word	0x20000220
 80066b8:	20000222 	.word	0x20000222
 80066bc:	20000224 	.word	0x20000224
 80066c0:	20000225 	.word	0x20000225

080066c4 <__errno>:
 80066c4:	4b01      	ldr	r3, [pc, #4]	; (80066cc <__errno+0x8>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000018 	.word	0x20000018

080066d0 <__libc_init_array>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4d0d      	ldr	r5, [pc, #52]	; (8006708 <__libc_init_array+0x38>)
 80066d4:	4c0d      	ldr	r4, [pc, #52]	; (800670c <__libc_init_array+0x3c>)
 80066d6:	1b64      	subs	r4, r4, r5
 80066d8:	10a4      	asrs	r4, r4, #2
 80066da:	2600      	movs	r6, #0
 80066dc:	42a6      	cmp	r6, r4
 80066de:	d109      	bne.n	80066f4 <__libc_init_array+0x24>
 80066e0:	4d0b      	ldr	r5, [pc, #44]	; (8006710 <__libc_init_array+0x40>)
 80066e2:	4c0c      	ldr	r4, [pc, #48]	; (8006714 <__libc_init_array+0x44>)
 80066e4:	f001 fae2 	bl	8007cac <_init>
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	2600      	movs	r6, #0
 80066ee:	42a6      	cmp	r6, r4
 80066f0:	d105      	bne.n	80066fe <__libc_init_array+0x2e>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f8:	4798      	blx	r3
 80066fa:	3601      	adds	r6, #1
 80066fc:	e7ee      	b.n	80066dc <__libc_init_array+0xc>
 80066fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006702:	4798      	blx	r3
 8006704:	3601      	adds	r6, #1
 8006706:	e7f2      	b.n	80066ee <__libc_init_array+0x1e>
 8006708:	080081c4 	.word	0x080081c4
 800670c:	080081c4 	.word	0x080081c4
 8006710:	080081c4 	.word	0x080081c4
 8006714:	080081c8 	.word	0x080081c8

08006718 <memset>:
 8006718:	4402      	add	r2, r0
 800671a:	4603      	mov	r3, r0
 800671c:	4293      	cmp	r3, r2
 800671e:	d100      	bne.n	8006722 <memset+0xa>
 8006720:	4770      	bx	lr
 8006722:	f803 1b01 	strb.w	r1, [r3], #1
 8006726:	e7f9      	b.n	800671c <memset+0x4>

08006728 <siprintf>:
 8006728:	b40e      	push	{r1, r2, r3}
 800672a:	b500      	push	{lr}
 800672c:	b09c      	sub	sp, #112	; 0x70
 800672e:	ab1d      	add	r3, sp, #116	; 0x74
 8006730:	9002      	str	r0, [sp, #8]
 8006732:	9006      	str	r0, [sp, #24]
 8006734:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006738:	4809      	ldr	r0, [pc, #36]	; (8006760 <siprintf+0x38>)
 800673a:	9107      	str	r1, [sp, #28]
 800673c:	9104      	str	r1, [sp, #16]
 800673e:	4909      	ldr	r1, [pc, #36]	; (8006764 <siprintf+0x3c>)
 8006740:	f853 2b04 	ldr.w	r2, [r3], #4
 8006744:	9105      	str	r1, [sp, #20]
 8006746:	6800      	ldr	r0, [r0, #0]
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	a902      	add	r1, sp, #8
 800674c:	f000 f868 	bl	8006820 <_svfiprintf_r>
 8006750:	9b02      	ldr	r3, [sp, #8]
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	b01c      	add	sp, #112	; 0x70
 8006758:	f85d eb04 	ldr.w	lr, [sp], #4
 800675c:	b003      	add	sp, #12
 800675e:	4770      	bx	lr
 8006760:	20000018 	.word	0x20000018
 8006764:	ffff0208 	.word	0xffff0208

08006768 <__ssputs_r>:
 8006768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	688e      	ldr	r6, [r1, #8]
 800676e:	429e      	cmp	r6, r3
 8006770:	4682      	mov	sl, r0
 8006772:	460c      	mov	r4, r1
 8006774:	4690      	mov	r8, r2
 8006776:	461f      	mov	r7, r3
 8006778:	d838      	bhi.n	80067ec <__ssputs_r+0x84>
 800677a:	898a      	ldrh	r2, [r1, #12]
 800677c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006780:	d032      	beq.n	80067e8 <__ssputs_r+0x80>
 8006782:	6825      	ldr	r5, [r4, #0]
 8006784:	6909      	ldr	r1, [r1, #16]
 8006786:	eba5 0901 	sub.w	r9, r5, r1
 800678a:	6965      	ldr	r5, [r4, #20]
 800678c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006794:	3301      	adds	r3, #1
 8006796:	444b      	add	r3, r9
 8006798:	106d      	asrs	r5, r5, #1
 800679a:	429d      	cmp	r5, r3
 800679c:	bf38      	it	cc
 800679e:	461d      	movcc	r5, r3
 80067a0:	0553      	lsls	r3, r2, #21
 80067a2:	d531      	bpl.n	8006808 <__ssputs_r+0xa0>
 80067a4:	4629      	mov	r1, r5
 80067a6:	f000 fb47 	bl	8006e38 <_malloc_r>
 80067aa:	4606      	mov	r6, r0
 80067ac:	b950      	cbnz	r0, 80067c4 <__ssputs_r+0x5c>
 80067ae:	230c      	movs	r3, #12
 80067b0:	f8ca 3000 	str.w	r3, [sl]
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c4:	6921      	ldr	r1, [r4, #16]
 80067c6:	464a      	mov	r2, r9
 80067c8:	f000 fabe 	bl	8006d48 <memcpy>
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	6126      	str	r6, [r4, #16]
 80067da:	6165      	str	r5, [r4, #20]
 80067dc:	444e      	add	r6, r9
 80067de:	eba5 0509 	sub.w	r5, r5, r9
 80067e2:	6026      	str	r6, [r4, #0]
 80067e4:	60a5      	str	r5, [r4, #8]
 80067e6:	463e      	mov	r6, r7
 80067e8:	42be      	cmp	r6, r7
 80067ea:	d900      	bls.n	80067ee <__ssputs_r+0x86>
 80067ec:	463e      	mov	r6, r7
 80067ee:	4632      	mov	r2, r6
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	4641      	mov	r1, r8
 80067f4:	f000 fab6 	bl	8006d64 <memmove>
 80067f8:	68a3      	ldr	r3, [r4, #8]
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	1b9b      	subs	r3, r3, r6
 80067fe:	4432      	add	r2, r6
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	2000      	movs	r0, #0
 8006806:	e7db      	b.n	80067c0 <__ssputs_r+0x58>
 8006808:	462a      	mov	r2, r5
 800680a:	f000 fb6f 	bl	8006eec <_realloc_r>
 800680e:	4606      	mov	r6, r0
 8006810:	2800      	cmp	r0, #0
 8006812:	d1e1      	bne.n	80067d8 <__ssputs_r+0x70>
 8006814:	6921      	ldr	r1, [r4, #16]
 8006816:	4650      	mov	r0, sl
 8006818:	f000 fabe 	bl	8006d98 <_free_r>
 800681c:	e7c7      	b.n	80067ae <__ssputs_r+0x46>
	...

08006820 <_svfiprintf_r>:
 8006820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	4698      	mov	r8, r3
 8006826:	898b      	ldrh	r3, [r1, #12]
 8006828:	061b      	lsls	r3, r3, #24
 800682a:	b09d      	sub	sp, #116	; 0x74
 800682c:	4607      	mov	r7, r0
 800682e:	460d      	mov	r5, r1
 8006830:	4614      	mov	r4, r2
 8006832:	d50e      	bpl.n	8006852 <_svfiprintf_r+0x32>
 8006834:	690b      	ldr	r3, [r1, #16]
 8006836:	b963      	cbnz	r3, 8006852 <_svfiprintf_r+0x32>
 8006838:	2140      	movs	r1, #64	; 0x40
 800683a:	f000 fafd 	bl	8006e38 <_malloc_r>
 800683e:	6028      	str	r0, [r5, #0]
 8006840:	6128      	str	r0, [r5, #16]
 8006842:	b920      	cbnz	r0, 800684e <_svfiprintf_r+0x2e>
 8006844:	230c      	movs	r3, #12
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e0d1      	b.n	80069f2 <_svfiprintf_r+0x1d2>
 800684e:	2340      	movs	r3, #64	; 0x40
 8006850:	616b      	str	r3, [r5, #20]
 8006852:	2300      	movs	r3, #0
 8006854:	9309      	str	r3, [sp, #36]	; 0x24
 8006856:	2320      	movs	r3, #32
 8006858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800685c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006860:	2330      	movs	r3, #48	; 0x30
 8006862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a0c <_svfiprintf_r+0x1ec>
 8006866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800686a:	f04f 0901 	mov.w	r9, #1
 800686e:	4623      	mov	r3, r4
 8006870:	469a      	mov	sl, r3
 8006872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006876:	b10a      	cbz	r2, 800687c <_svfiprintf_r+0x5c>
 8006878:	2a25      	cmp	r2, #37	; 0x25
 800687a:	d1f9      	bne.n	8006870 <_svfiprintf_r+0x50>
 800687c:	ebba 0b04 	subs.w	fp, sl, r4
 8006880:	d00b      	beq.n	800689a <_svfiprintf_r+0x7a>
 8006882:	465b      	mov	r3, fp
 8006884:	4622      	mov	r2, r4
 8006886:	4629      	mov	r1, r5
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff ff6d 	bl	8006768 <__ssputs_r>
 800688e:	3001      	adds	r0, #1
 8006890:	f000 80aa 	beq.w	80069e8 <_svfiprintf_r+0x1c8>
 8006894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006896:	445a      	add	r2, fp
 8006898:	9209      	str	r2, [sp, #36]	; 0x24
 800689a:	f89a 3000 	ldrb.w	r3, [sl]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80a2 	beq.w	80069e8 <_svfiprintf_r+0x1c8>
 80068a4:	2300      	movs	r3, #0
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295
 80068aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ae:	f10a 0a01 	add.w	sl, sl, #1
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	9307      	str	r3, [sp, #28]
 80068b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ba:	931a      	str	r3, [sp, #104]	; 0x68
 80068bc:	4654      	mov	r4, sl
 80068be:	2205      	movs	r2, #5
 80068c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c4:	4851      	ldr	r0, [pc, #324]	; (8006a0c <_svfiprintf_r+0x1ec>)
 80068c6:	f7f9 fcab 	bl	8000220 <memchr>
 80068ca:	9a04      	ldr	r2, [sp, #16]
 80068cc:	b9d8      	cbnz	r0, 8006906 <_svfiprintf_r+0xe6>
 80068ce:	06d0      	lsls	r0, r2, #27
 80068d0:	bf44      	itt	mi
 80068d2:	2320      	movmi	r3, #32
 80068d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d8:	0711      	lsls	r1, r2, #28
 80068da:	bf44      	itt	mi
 80068dc:	232b      	movmi	r3, #43	; 0x2b
 80068de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068e2:	f89a 3000 	ldrb.w	r3, [sl]
 80068e6:	2b2a      	cmp	r3, #42	; 0x2a
 80068e8:	d015      	beq.n	8006916 <_svfiprintf_r+0xf6>
 80068ea:	9a07      	ldr	r2, [sp, #28]
 80068ec:	4654      	mov	r4, sl
 80068ee:	2000      	movs	r0, #0
 80068f0:	f04f 0c0a 	mov.w	ip, #10
 80068f4:	4621      	mov	r1, r4
 80068f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068fa:	3b30      	subs	r3, #48	; 0x30
 80068fc:	2b09      	cmp	r3, #9
 80068fe:	d94e      	bls.n	800699e <_svfiprintf_r+0x17e>
 8006900:	b1b0      	cbz	r0, 8006930 <_svfiprintf_r+0x110>
 8006902:	9207      	str	r2, [sp, #28]
 8006904:	e014      	b.n	8006930 <_svfiprintf_r+0x110>
 8006906:	eba0 0308 	sub.w	r3, r0, r8
 800690a:	fa09 f303 	lsl.w	r3, r9, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	9304      	str	r3, [sp, #16]
 8006912:	46a2      	mov	sl, r4
 8006914:	e7d2      	b.n	80068bc <_svfiprintf_r+0x9c>
 8006916:	9b03      	ldr	r3, [sp, #12]
 8006918:	1d19      	adds	r1, r3, #4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	9103      	str	r1, [sp, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	bfbb      	ittet	lt
 8006922:	425b      	neglt	r3, r3
 8006924:	f042 0202 	orrlt.w	r2, r2, #2
 8006928:	9307      	strge	r3, [sp, #28]
 800692a:	9307      	strlt	r3, [sp, #28]
 800692c:	bfb8      	it	lt
 800692e:	9204      	strlt	r2, [sp, #16]
 8006930:	7823      	ldrb	r3, [r4, #0]
 8006932:	2b2e      	cmp	r3, #46	; 0x2e
 8006934:	d10c      	bne.n	8006950 <_svfiprintf_r+0x130>
 8006936:	7863      	ldrb	r3, [r4, #1]
 8006938:	2b2a      	cmp	r3, #42	; 0x2a
 800693a:	d135      	bne.n	80069a8 <_svfiprintf_r+0x188>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	1d1a      	adds	r2, r3, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	9203      	str	r2, [sp, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	bfb8      	it	lt
 8006948:	f04f 33ff 	movlt.w	r3, #4294967295
 800694c:	3402      	adds	r4, #2
 800694e:	9305      	str	r3, [sp, #20]
 8006950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a1c <_svfiprintf_r+0x1fc>
 8006954:	7821      	ldrb	r1, [r4, #0]
 8006956:	2203      	movs	r2, #3
 8006958:	4650      	mov	r0, sl
 800695a:	f7f9 fc61 	bl	8000220 <memchr>
 800695e:	b140      	cbz	r0, 8006972 <_svfiprintf_r+0x152>
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	eba0 000a 	sub.w	r0, r0, sl
 8006966:	fa03 f000 	lsl.w	r0, r3, r0
 800696a:	9b04      	ldr	r3, [sp, #16]
 800696c:	4303      	orrs	r3, r0
 800696e:	3401      	adds	r4, #1
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006976:	4826      	ldr	r0, [pc, #152]	; (8006a10 <_svfiprintf_r+0x1f0>)
 8006978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800697c:	2206      	movs	r2, #6
 800697e:	f7f9 fc4f 	bl	8000220 <memchr>
 8006982:	2800      	cmp	r0, #0
 8006984:	d038      	beq.n	80069f8 <_svfiprintf_r+0x1d8>
 8006986:	4b23      	ldr	r3, [pc, #140]	; (8006a14 <_svfiprintf_r+0x1f4>)
 8006988:	bb1b      	cbnz	r3, 80069d2 <_svfiprintf_r+0x1b2>
 800698a:	9b03      	ldr	r3, [sp, #12]
 800698c:	3307      	adds	r3, #7
 800698e:	f023 0307 	bic.w	r3, r3, #7
 8006992:	3308      	adds	r3, #8
 8006994:	9303      	str	r3, [sp, #12]
 8006996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006998:	4433      	add	r3, r6
 800699a:	9309      	str	r3, [sp, #36]	; 0x24
 800699c:	e767      	b.n	800686e <_svfiprintf_r+0x4e>
 800699e:	fb0c 3202 	mla	r2, ip, r2, r3
 80069a2:	460c      	mov	r4, r1
 80069a4:	2001      	movs	r0, #1
 80069a6:	e7a5      	b.n	80068f4 <_svfiprintf_r+0xd4>
 80069a8:	2300      	movs	r3, #0
 80069aa:	3401      	adds	r4, #1
 80069ac:	9305      	str	r3, [sp, #20]
 80069ae:	4619      	mov	r1, r3
 80069b0:	f04f 0c0a 	mov.w	ip, #10
 80069b4:	4620      	mov	r0, r4
 80069b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ba:	3a30      	subs	r2, #48	; 0x30
 80069bc:	2a09      	cmp	r2, #9
 80069be:	d903      	bls.n	80069c8 <_svfiprintf_r+0x1a8>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0c5      	beq.n	8006950 <_svfiprintf_r+0x130>
 80069c4:	9105      	str	r1, [sp, #20]
 80069c6:	e7c3      	b.n	8006950 <_svfiprintf_r+0x130>
 80069c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80069cc:	4604      	mov	r4, r0
 80069ce:	2301      	movs	r3, #1
 80069d0:	e7f0      	b.n	80069b4 <_svfiprintf_r+0x194>
 80069d2:	ab03      	add	r3, sp, #12
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	462a      	mov	r2, r5
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <_svfiprintf_r+0x1f8>)
 80069da:	a904      	add	r1, sp, #16
 80069dc:	4638      	mov	r0, r7
 80069de:	f3af 8000 	nop.w
 80069e2:	1c42      	adds	r2, r0, #1
 80069e4:	4606      	mov	r6, r0
 80069e6:	d1d6      	bne.n	8006996 <_svfiprintf_r+0x176>
 80069e8:	89ab      	ldrh	r3, [r5, #12]
 80069ea:	065b      	lsls	r3, r3, #25
 80069ec:	f53f af2c 	bmi.w	8006848 <_svfiprintf_r+0x28>
 80069f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069f2:	b01d      	add	sp, #116	; 0x74
 80069f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f8:	ab03      	add	r3, sp, #12
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	462a      	mov	r2, r5
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <_svfiprintf_r+0x1f8>)
 8006a00:	a904      	add	r1, sp, #16
 8006a02:	4638      	mov	r0, r7
 8006a04:	f000 f87a 	bl	8006afc <_printf_i>
 8006a08:	e7eb      	b.n	80069e2 <_svfiprintf_r+0x1c2>
 8006a0a:	bf00      	nop
 8006a0c:	08007db8 	.word	0x08007db8
 8006a10:	08007dc2 	.word	0x08007dc2
 8006a14:	00000000 	.word	0x00000000
 8006a18:	08006769 	.word	0x08006769
 8006a1c:	08007dbe 	.word	0x08007dbe

08006a20 <_printf_common>:
 8006a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a24:	4616      	mov	r6, r2
 8006a26:	4699      	mov	r9, r3
 8006a28:	688a      	ldr	r2, [r1, #8]
 8006a2a:	690b      	ldr	r3, [r1, #16]
 8006a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a30:	4293      	cmp	r3, r2
 8006a32:	bfb8      	it	lt
 8006a34:	4613      	movlt	r3, r2
 8006a36:	6033      	str	r3, [r6, #0]
 8006a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	b10a      	cbz	r2, 8006a46 <_printf_common+0x26>
 8006a42:	3301      	adds	r3, #1
 8006a44:	6033      	str	r3, [r6, #0]
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	0699      	lsls	r1, r3, #26
 8006a4a:	bf42      	ittt	mi
 8006a4c:	6833      	ldrmi	r3, [r6, #0]
 8006a4e:	3302      	addmi	r3, #2
 8006a50:	6033      	strmi	r3, [r6, #0]
 8006a52:	6825      	ldr	r5, [r4, #0]
 8006a54:	f015 0506 	ands.w	r5, r5, #6
 8006a58:	d106      	bne.n	8006a68 <_printf_common+0x48>
 8006a5a:	f104 0a19 	add.w	sl, r4, #25
 8006a5e:	68e3      	ldr	r3, [r4, #12]
 8006a60:	6832      	ldr	r2, [r6, #0]
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	42ab      	cmp	r3, r5
 8006a66:	dc26      	bgt.n	8006ab6 <_printf_common+0x96>
 8006a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a6c:	1e13      	subs	r3, r2, #0
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	bf18      	it	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	0692      	lsls	r2, r2, #26
 8006a76:	d42b      	bmi.n	8006ad0 <_printf_common+0xb0>
 8006a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	4638      	mov	r0, r7
 8006a80:	47c0      	blx	r8
 8006a82:	3001      	adds	r0, #1
 8006a84:	d01e      	beq.n	8006ac4 <_printf_common+0xa4>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	68e5      	ldr	r5, [r4, #12]
 8006a8a:	6832      	ldr	r2, [r6, #0]
 8006a8c:	f003 0306 	and.w	r3, r3, #6
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	bf08      	it	eq
 8006a94:	1aad      	subeq	r5, r5, r2
 8006a96:	68a3      	ldr	r3, [r4, #8]
 8006a98:	6922      	ldr	r2, [r4, #16]
 8006a9a:	bf0c      	ite	eq
 8006a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa0:	2500      	movne	r5, #0
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	bfc4      	itt	gt
 8006aa6:	1a9b      	subgt	r3, r3, r2
 8006aa8:	18ed      	addgt	r5, r5, r3
 8006aaa:	2600      	movs	r6, #0
 8006aac:	341a      	adds	r4, #26
 8006aae:	42b5      	cmp	r5, r6
 8006ab0:	d11a      	bne.n	8006ae8 <_printf_common+0xc8>
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	e008      	b.n	8006ac8 <_printf_common+0xa8>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4652      	mov	r2, sl
 8006aba:	4649      	mov	r1, r9
 8006abc:	4638      	mov	r0, r7
 8006abe:	47c0      	blx	r8
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d103      	bne.n	8006acc <_printf_common+0xac>
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006acc:	3501      	adds	r5, #1
 8006ace:	e7c6      	b.n	8006a5e <_printf_common+0x3e>
 8006ad0:	18e1      	adds	r1, r4, r3
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	2030      	movs	r0, #48	; 0x30
 8006ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ada:	4422      	add	r2, r4
 8006adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	e7c7      	b.n	8006a78 <_printf_common+0x58>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4622      	mov	r2, r4
 8006aec:	4649      	mov	r1, r9
 8006aee:	4638      	mov	r0, r7
 8006af0:	47c0      	blx	r8
 8006af2:	3001      	adds	r0, #1
 8006af4:	d0e6      	beq.n	8006ac4 <_printf_common+0xa4>
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7d9      	b.n	8006aae <_printf_common+0x8e>
	...

08006afc <_printf_i>:
 8006afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	460c      	mov	r4, r1
 8006b02:	4691      	mov	r9, r2
 8006b04:	7e27      	ldrb	r7, [r4, #24]
 8006b06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b08:	2f78      	cmp	r7, #120	; 0x78
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	469a      	mov	sl, r3
 8006b0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b12:	d807      	bhi.n	8006b24 <_printf_i+0x28>
 8006b14:	2f62      	cmp	r7, #98	; 0x62
 8006b16:	d80a      	bhi.n	8006b2e <_printf_i+0x32>
 8006b18:	2f00      	cmp	r7, #0
 8006b1a:	f000 80d8 	beq.w	8006cce <_printf_i+0x1d2>
 8006b1e:	2f58      	cmp	r7, #88	; 0x58
 8006b20:	f000 80a3 	beq.w	8006c6a <_printf_i+0x16e>
 8006b24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b2c:	e03a      	b.n	8006ba4 <_printf_i+0xa8>
 8006b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b32:	2b15      	cmp	r3, #21
 8006b34:	d8f6      	bhi.n	8006b24 <_printf_i+0x28>
 8006b36:	a001      	add	r0, pc, #4	; (adr r0, 8006b3c <_printf_i+0x40>)
 8006b38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b3c:	08006b95 	.word	0x08006b95
 8006b40:	08006ba9 	.word	0x08006ba9
 8006b44:	08006b25 	.word	0x08006b25
 8006b48:	08006b25 	.word	0x08006b25
 8006b4c:	08006b25 	.word	0x08006b25
 8006b50:	08006b25 	.word	0x08006b25
 8006b54:	08006ba9 	.word	0x08006ba9
 8006b58:	08006b25 	.word	0x08006b25
 8006b5c:	08006b25 	.word	0x08006b25
 8006b60:	08006b25 	.word	0x08006b25
 8006b64:	08006b25 	.word	0x08006b25
 8006b68:	08006cb5 	.word	0x08006cb5
 8006b6c:	08006bd9 	.word	0x08006bd9
 8006b70:	08006c97 	.word	0x08006c97
 8006b74:	08006b25 	.word	0x08006b25
 8006b78:	08006b25 	.word	0x08006b25
 8006b7c:	08006cd7 	.word	0x08006cd7
 8006b80:	08006b25 	.word	0x08006b25
 8006b84:	08006bd9 	.word	0x08006bd9
 8006b88:	08006b25 	.word	0x08006b25
 8006b8c:	08006b25 	.word	0x08006b25
 8006b90:	08006c9f 	.word	0x08006c9f
 8006b94:	680b      	ldr	r3, [r1, #0]
 8006b96:	1d1a      	adds	r2, r3, #4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	600a      	str	r2, [r1, #0]
 8006b9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0a3      	b.n	8006cf0 <_printf_i+0x1f4>
 8006ba8:	6825      	ldr	r5, [r4, #0]
 8006baa:	6808      	ldr	r0, [r1, #0]
 8006bac:	062e      	lsls	r6, r5, #24
 8006bae:	f100 0304 	add.w	r3, r0, #4
 8006bb2:	d50a      	bpl.n	8006bca <_printf_i+0xce>
 8006bb4:	6805      	ldr	r5, [r0, #0]
 8006bb6:	600b      	str	r3, [r1, #0]
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	da03      	bge.n	8006bc4 <_printf_i+0xc8>
 8006bbc:	232d      	movs	r3, #45	; 0x2d
 8006bbe:	426d      	negs	r5, r5
 8006bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc4:	485e      	ldr	r0, [pc, #376]	; (8006d40 <_printf_i+0x244>)
 8006bc6:	230a      	movs	r3, #10
 8006bc8:	e019      	b.n	8006bfe <_printf_i+0x102>
 8006bca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bce:	6805      	ldr	r5, [r0, #0]
 8006bd0:	600b      	str	r3, [r1, #0]
 8006bd2:	bf18      	it	ne
 8006bd4:	b22d      	sxthne	r5, r5
 8006bd6:	e7ef      	b.n	8006bb8 <_printf_i+0xbc>
 8006bd8:	680b      	ldr	r3, [r1, #0]
 8006bda:	6825      	ldr	r5, [r4, #0]
 8006bdc:	1d18      	adds	r0, r3, #4
 8006bde:	6008      	str	r0, [r1, #0]
 8006be0:	0628      	lsls	r0, r5, #24
 8006be2:	d501      	bpl.n	8006be8 <_printf_i+0xec>
 8006be4:	681d      	ldr	r5, [r3, #0]
 8006be6:	e002      	b.n	8006bee <_printf_i+0xf2>
 8006be8:	0669      	lsls	r1, r5, #25
 8006bea:	d5fb      	bpl.n	8006be4 <_printf_i+0xe8>
 8006bec:	881d      	ldrh	r5, [r3, #0]
 8006bee:	4854      	ldr	r0, [pc, #336]	; (8006d40 <_printf_i+0x244>)
 8006bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2308      	moveq	r3, #8
 8006bf6:	230a      	movne	r3, #10
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bfe:	6866      	ldr	r6, [r4, #4]
 8006c00:	60a6      	str	r6, [r4, #8]
 8006c02:	2e00      	cmp	r6, #0
 8006c04:	bfa2      	ittt	ge
 8006c06:	6821      	ldrge	r1, [r4, #0]
 8006c08:	f021 0104 	bicge.w	r1, r1, #4
 8006c0c:	6021      	strge	r1, [r4, #0]
 8006c0e:	b90d      	cbnz	r5, 8006c14 <_printf_i+0x118>
 8006c10:	2e00      	cmp	r6, #0
 8006c12:	d04d      	beq.n	8006cb0 <_printf_i+0x1b4>
 8006c14:	4616      	mov	r6, r2
 8006c16:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c1a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c1e:	5dc7      	ldrb	r7, [r0, r7]
 8006c20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c24:	462f      	mov	r7, r5
 8006c26:	42bb      	cmp	r3, r7
 8006c28:	460d      	mov	r5, r1
 8006c2a:	d9f4      	bls.n	8006c16 <_printf_i+0x11a>
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d10b      	bne.n	8006c48 <_printf_i+0x14c>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	07df      	lsls	r7, r3, #31
 8006c34:	d508      	bpl.n	8006c48 <_printf_i+0x14c>
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	6861      	ldr	r1, [r4, #4]
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	bfde      	ittt	le
 8006c3e:	2330      	movle	r3, #48	; 0x30
 8006c40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c48:	1b92      	subs	r2, r2, r6
 8006c4a:	6122      	str	r2, [r4, #16]
 8006c4c:	f8cd a000 	str.w	sl, [sp]
 8006c50:	464b      	mov	r3, r9
 8006c52:	aa03      	add	r2, sp, #12
 8006c54:	4621      	mov	r1, r4
 8006c56:	4640      	mov	r0, r8
 8006c58:	f7ff fee2 	bl	8006a20 <_printf_common>
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d14c      	bne.n	8006cfa <_printf_i+0x1fe>
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295
 8006c64:	b004      	add	sp, #16
 8006c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6a:	4835      	ldr	r0, [pc, #212]	; (8006d40 <_printf_i+0x244>)
 8006c6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	680e      	ldr	r6, [r1, #0]
 8006c74:	061f      	lsls	r7, r3, #24
 8006c76:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c7a:	600e      	str	r6, [r1, #0]
 8006c7c:	d514      	bpl.n	8006ca8 <_printf_i+0x1ac>
 8006c7e:	07d9      	lsls	r1, r3, #31
 8006c80:	bf44      	itt	mi
 8006c82:	f043 0320 	orrmi.w	r3, r3, #32
 8006c86:	6023      	strmi	r3, [r4, #0]
 8006c88:	b91d      	cbnz	r5, 8006c92 <_printf_i+0x196>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	f023 0320 	bic.w	r3, r3, #32
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	2310      	movs	r3, #16
 8006c94:	e7b0      	b.n	8006bf8 <_printf_i+0xfc>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	f043 0320 	orr.w	r3, r3, #32
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	2378      	movs	r3, #120	; 0x78
 8006ca0:	4828      	ldr	r0, [pc, #160]	; (8006d44 <_printf_i+0x248>)
 8006ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ca6:	e7e3      	b.n	8006c70 <_printf_i+0x174>
 8006ca8:	065e      	lsls	r6, r3, #25
 8006caa:	bf48      	it	mi
 8006cac:	b2ad      	uxthmi	r5, r5
 8006cae:	e7e6      	b.n	8006c7e <_printf_i+0x182>
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	e7bb      	b.n	8006c2c <_printf_i+0x130>
 8006cb4:	680b      	ldr	r3, [r1, #0]
 8006cb6:	6826      	ldr	r6, [r4, #0]
 8006cb8:	6960      	ldr	r0, [r4, #20]
 8006cba:	1d1d      	adds	r5, r3, #4
 8006cbc:	600d      	str	r5, [r1, #0]
 8006cbe:	0635      	lsls	r5, r6, #24
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	d501      	bpl.n	8006cc8 <_printf_i+0x1cc>
 8006cc4:	6018      	str	r0, [r3, #0]
 8006cc6:	e002      	b.n	8006cce <_printf_i+0x1d2>
 8006cc8:	0671      	lsls	r1, r6, #25
 8006cca:	d5fb      	bpl.n	8006cc4 <_printf_i+0x1c8>
 8006ccc:	8018      	strh	r0, [r3, #0]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	4616      	mov	r6, r2
 8006cd4:	e7ba      	b.n	8006c4c <_printf_i+0x150>
 8006cd6:	680b      	ldr	r3, [r1, #0]
 8006cd8:	1d1a      	adds	r2, r3, #4
 8006cda:	600a      	str	r2, [r1, #0]
 8006cdc:	681e      	ldr	r6, [r3, #0]
 8006cde:	6862      	ldr	r2, [r4, #4]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7f9 fa9c 	bl	8000220 <memchr>
 8006ce8:	b108      	cbz	r0, 8006cee <_printf_i+0x1f2>
 8006cea:	1b80      	subs	r0, r0, r6
 8006cec:	6060      	str	r0, [r4, #4]
 8006cee:	6863      	ldr	r3, [r4, #4]
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf8:	e7a8      	b.n	8006c4c <_printf_i+0x150>
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	4649      	mov	r1, r9
 8006d00:	4640      	mov	r0, r8
 8006d02:	47d0      	blx	sl
 8006d04:	3001      	adds	r0, #1
 8006d06:	d0ab      	beq.n	8006c60 <_printf_i+0x164>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	079b      	lsls	r3, r3, #30
 8006d0c:	d413      	bmi.n	8006d36 <_printf_i+0x23a>
 8006d0e:	68e0      	ldr	r0, [r4, #12]
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	4298      	cmp	r0, r3
 8006d14:	bfb8      	it	lt
 8006d16:	4618      	movlt	r0, r3
 8006d18:	e7a4      	b.n	8006c64 <_printf_i+0x168>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	47d0      	blx	sl
 8006d24:	3001      	adds	r0, #1
 8006d26:	d09b      	beq.n	8006c60 <_printf_i+0x164>
 8006d28:	3501      	adds	r5, #1
 8006d2a:	68e3      	ldr	r3, [r4, #12]
 8006d2c:	9903      	ldr	r1, [sp, #12]
 8006d2e:	1a5b      	subs	r3, r3, r1
 8006d30:	42ab      	cmp	r3, r5
 8006d32:	dcf2      	bgt.n	8006d1a <_printf_i+0x21e>
 8006d34:	e7eb      	b.n	8006d0e <_printf_i+0x212>
 8006d36:	2500      	movs	r5, #0
 8006d38:	f104 0619 	add.w	r6, r4, #25
 8006d3c:	e7f5      	b.n	8006d2a <_printf_i+0x22e>
 8006d3e:	bf00      	nop
 8006d40:	08007dc9 	.word	0x08007dc9
 8006d44:	08007dda 	.word	0x08007dda

08006d48 <memcpy>:
 8006d48:	440a      	add	r2, r1
 8006d4a:	4291      	cmp	r1, r2
 8006d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d50:	d100      	bne.n	8006d54 <memcpy+0xc>
 8006d52:	4770      	bx	lr
 8006d54:	b510      	push	{r4, lr}
 8006d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d5e:	4291      	cmp	r1, r2
 8006d60:	d1f9      	bne.n	8006d56 <memcpy+0xe>
 8006d62:	bd10      	pop	{r4, pc}

08006d64 <memmove>:
 8006d64:	4288      	cmp	r0, r1
 8006d66:	b510      	push	{r4, lr}
 8006d68:	eb01 0402 	add.w	r4, r1, r2
 8006d6c:	d902      	bls.n	8006d74 <memmove+0x10>
 8006d6e:	4284      	cmp	r4, r0
 8006d70:	4623      	mov	r3, r4
 8006d72:	d807      	bhi.n	8006d84 <memmove+0x20>
 8006d74:	1e43      	subs	r3, r0, #1
 8006d76:	42a1      	cmp	r1, r4
 8006d78:	d008      	beq.n	8006d8c <memmove+0x28>
 8006d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d82:	e7f8      	b.n	8006d76 <memmove+0x12>
 8006d84:	4402      	add	r2, r0
 8006d86:	4601      	mov	r1, r0
 8006d88:	428a      	cmp	r2, r1
 8006d8a:	d100      	bne.n	8006d8e <memmove+0x2a>
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d96:	e7f7      	b.n	8006d88 <memmove+0x24>

08006d98 <_free_r>:
 8006d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	d048      	beq.n	8006e30 <_free_r+0x98>
 8006d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da2:	9001      	str	r0, [sp, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f1a1 0404 	sub.w	r4, r1, #4
 8006daa:	bfb8      	it	lt
 8006dac:	18e4      	addlt	r4, r4, r3
 8006dae:	f000 f8d3 	bl	8006f58 <__malloc_lock>
 8006db2:	4a20      	ldr	r2, [pc, #128]	; (8006e34 <_free_r+0x9c>)
 8006db4:	9801      	ldr	r0, [sp, #4]
 8006db6:	6813      	ldr	r3, [r2, #0]
 8006db8:	4615      	mov	r5, r2
 8006dba:	b933      	cbnz	r3, 8006dca <_free_r+0x32>
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	6014      	str	r4, [r2, #0]
 8006dc0:	b003      	add	sp, #12
 8006dc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dc6:	f000 b8cd 	b.w	8006f64 <__malloc_unlock>
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	d90b      	bls.n	8006de6 <_free_r+0x4e>
 8006dce:	6821      	ldr	r1, [r4, #0]
 8006dd0:	1862      	adds	r2, r4, r1
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	bf04      	itt	eq
 8006dd6:	681a      	ldreq	r2, [r3, #0]
 8006dd8:	685b      	ldreq	r3, [r3, #4]
 8006dda:	6063      	str	r3, [r4, #4]
 8006ddc:	bf04      	itt	eq
 8006dde:	1852      	addeq	r2, r2, r1
 8006de0:	6022      	streq	r2, [r4, #0]
 8006de2:	602c      	str	r4, [r5, #0]
 8006de4:	e7ec      	b.n	8006dc0 <_free_r+0x28>
 8006de6:	461a      	mov	r2, r3
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	b10b      	cbz	r3, 8006df0 <_free_r+0x58>
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	d9fa      	bls.n	8006de6 <_free_r+0x4e>
 8006df0:	6811      	ldr	r1, [r2, #0]
 8006df2:	1855      	adds	r5, r2, r1
 8006df4:	42a5      	cmp	r5, r4
 8006df6:	d10b      	bne.n	8006e10 <_free_r+0x78>
 8006df8:	6824      	ldr	r4, [r4, #0]
 8006dfa:	4421      	add	r1, r4
 8006dfc:	1854      	adds	r4, r2, r1
 8006dfe:	42a3      	cmp	r3, r4
 8006e00:	6011      	str	r1, [r2, #0]
 8006e02:	d1dd      	bne.n	8006dc0 <_free_r+0x28>
 8006e04:	681c      	ldr	r4, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	6053      	str	r3, [r2, #4]
 8006e0a:	4421      	add	r1, r4
 8006e0c:	6011      	str	r1, [r2, #0]
 8006e0e:	e7d7      	b.n	8006dc0 <_free_r+0x28>
 8006e10:	d902      	bls.n	8006e18 <_free_r+0x80>
 8006e12:	230c      	movs	r3, #12
 8006e14:	6003      	str	r3, [r0, #0]
 8006e16:	e7d3      	b.n	8006dc0 <_free_r+0x28>
 8006e18:	6825      	ldr	r5, [r4, #0]
 8006e1a:	1961      	adds	r1, r4, r5
 8006e1c:	428b      	cmp	r3, r1
 8006e1e:	bf04      	itt	eq
 8006e20:	6819      	ldreq	r1, [r3, #0]
 8006e22:	685b      	ldreq	r3, [r3, #4]
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	bf04      	itt	eq
 8006e28:	1949      	addeq	r1, r1, r5
 8006e2a:	6021      	streq	r1, [r4, #0]
 8006e2c:	6054      	str	r4, [r2, #4]
 8006e2e:	e7c7      	b.n	8006dc0 <_free_r+0x28>
 8006e30:	b003      	add	sp, #12
 8006e32:	bd30      	pop	{r4, r5, pc}
 8006e34:	20000228 	.word	0x20000228

08006e38 <_malloc_r>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	1ccd      	adds	r5, r1, #3
 8006e3c:	f025 0503 	bic.w	r5, r5, #3
 8006e40:	3508      	adds	r5, #8
 8006e42:	2d0c      	cmp	r5, #12
 8006e44:	bf38      	it	cc
 8006e46:	250c      	movcc	r5, #12
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	db01      	blt.n	8006e52 <_malloc_r+0x1a>
 8006e4e:	42a9      	cmp	r1, r5
 8006e50:	d903      	bls.n	8006e5a <_malloc_r+0x22>
 8006e52:	230c      	movs	r3, #12
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	2000      	movs	r0, #0
 8006e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5a:	f000 f87d 	bl	8006f58 <__malloc_lock>
 8006e5e:	4921      	ldr	r1, [pc, #132]	; (8006ee4 <_malloc_r+0xac>)
 8006e60:	680a      	ldr	r2, [r1, #0]
 8006e62:	4614      	mov	r4, r2
 8006e64:	b99c      	cbnz	r4, 8006e8e <_malloc_r+0x56>
 8006e66:	4f20      	ldr	r7, [pc, #128]	; (8006ee8 <_malloc_r+0xb0>)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	b923      	cbnz	r3, 8006e76 <_malloc_r+0x3e>
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f000 f862 	bl	8006f38 <_sbrk_r>
 8006e74:	6038      	str	r0, [r7, #0]
 8006e76:	4629      	mov	r1, r5
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 f85d 	bl	8006f38 <_sbrk_r>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d123      	bne.n	8006eca <_malloc_r+0x92>
 8006e82:	230c      	movs	r3, #12
 8006e84:	6033      	str	r3, [r6, #0]
 8006e86:	4630      	mov	r0, r6
 8006e88:	f000 f86c 	bl	8006f64 <__malloc_unlock>
 8006e8c:	e7e3      	b.n	8006e56 <_malloc_r+0x1e>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	1b5b      	subs	r3, r3, r5
 8006e92:	d417      	bmi.n	8006ec4 <_malloc_r+0x8c>
 8006e94:	2b0b      	cmp	r3, #11
 8006e96:	d903      	bls.n	8006ea0 <_malloc_r+0x68>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	441c      	add	r4, r3
 8006e9c:	6025      	str	r5, [r4, #0]
 8006e9e:	e004      	b.n	8006eaa <_malloc_r+0x72>
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	42a2      	cmp	r2, r4
 8006ea4:	bf0c      	ite	eq
 8006ea6:	600b      	streq	r3, [r1, #0]
 8006ea8:	6053      	strne	r3, [r2, #4]
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f000 f85a 	bl	8006f64 <__malloc_unlock>
 8006eb0:	f104 000b 	add.w	r0, r4, #11
 8006eb4:	1d23      	adds	r3, r4, #4
 8006eb6:	f020 0007 	bic.w	r0, r0, #7
 8006eba:	1ac2      	subs	r2, r0, r3
 8006ebc:	d0cc      	beq.n	8006e58 <_malloc_r+0x20>
 8006ebe:	1a1b      	subs	r3, r3, r0
 8006ec0:	50a3      	str	r3, [r4, r2]
 8006ec2:	e7c9      	b.n	8006e58 <_malloc_r+0x20>
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	6864      	ldr	r4, [r4, #4]
 8006ec8:	e7cc      	b.n	8006e64 <_malloc_r+0x2c>
 8006eca:	1cc4      	adds	r4, r0, #3
 8006ecc:	f024 0403 	bic.w	r4, r4, #3
 8006ed0:	42a0      	cmp	r0, r4
 8006ed2:	d0e3      	beq.n	8006e9c <_malloc_r+0x64>
 8006ed4:	1a21      	subs	r1, r4, r0
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f000 f82e 	bl	8006f38 <_sbrk_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d1dd      	bne.n	8006e9c <_malloc_r+0x64>
 8006ee0:	e7cf      	b.n	8006e82 <_malloc_r+0x4a>
 8006ee2:	bf00      	nop
 8006ee4:	20000228 	.word	0x20000228
 8006ee8:	2000022c 	.word	0x2000022c

08006eec <_realloc_r>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	4607      	mov	r7, r0
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	460e      	mov	r6, r1
 8006ef4:	b921      	cbnz	r1, 8006f00 <_realloc_r+0x14>
 8006ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006efa:	4611      	mov	r1, r2
 8006efc:	f7ff bf9c 	b.w	8006e38 <_malloc_r>
 8006f00:	b922      	cbnz	r2, 8006f0c <_realloc_r+0x20>
 8006f02:	f7ff ff49 	bl	8006d98 <_free_r>
 8006f06:	4625      	mov	r5, r4
 8006f08:	4628      	mov	r0, r5
 8006f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0c:	f000 f830 	bl	8006f70 <_malloc_usable_size_r>
 8006f10:	42a0      	cmp	r0, r4
 8006f12:	d20f      	bcs.n	8006f34 <_realloc_r+0x48>
 8006f14:	4621      	mov	r1, r4
 8006f16:	4638      	mov	r0, r7
 8006f18:	f7ff ff8e 	bl	8006e38 <_malloc_r>
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d0f2      	beq.n	8006f08 <_realloc_r+0x1c>
 8006f22:	4631      	mov	r1, r6
 8006f24:	4622      	mov	r2, r4
 8006f26:	f7ff ff0f 	bl	8006d48 <memcpy>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff ff33 	bl	8006d98 <_free_r>
 8006f32:	e7e9      	b.n	8006f08 <_realloc_r+0x1c>
 8006f34:	4635      	mov	r5, r6
 8006f36:	e7e7      	b.n	8006f08 <_realloc_r+0x1c>

08006f38 <_sbrk_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d06      	ldr	r5, [pc, #24]	; (8006f54 <_sbrk_r+0x1c>)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	602b      	str	r3, [r5, #0]
 8006f44:	f7fb f9f4 	bl	8002330 <_sbrk>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_sbrk_r+0x1a>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_sbrk_r+0x1a>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	20010e4c 	.word	0x20010e4c

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	; (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f000 b811 	b.w	8006f80 <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20010e54 	.word	0x20010e54

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f000 b80c 	b.w	8006f82 <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20010e54 	.word	0x20010e54

08006f70 <_malloc_usable_size_r>:
 8006f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f74:	1f18      	subs	r0, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbc      	itt	lt
 8006f7a:	580b      	ldrlt	r3, [r1, r0]
 8006f7c:	18c0      	addlt	r0, r0, r3
 8006f7e:	4770      	bx	lr

08006f80 <__retarget_lock_acquire_recursive>:
 8006f80:	4770      	bx	lr

08006f82 <__retarget_lock_release_recursive>:
 8006f82:	4770      	bx	lr

08006f84 <cosf>:
 8006f84:	ee10 3a10 	vmov	r3, s0
 8006f88:	b507      	push	{r0, r1, r2, lr}
 8006f8a:	4a1c      	ldr	r2, [pc, #112]	; (8006ffc <cosf+0x78>)
 8006f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f90:	4293      	cmp	r3, r2
 8006f92:	dc04      	bgt.n	8006f9e <cosf+0x1a>
 8006f94:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8007000 <cosf+0x7c>
 8006f98:	f000 fa9a 	bl	80074d0 <__kernel_cosf>
 8006f9c:	e004      	b.n	8006fa8 <cosf+0x24>
 8006f9e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fa2:	db04      	blt.n	8006fae <cosf+0x2a>
 8006fa4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006fa8:	b003      	add	sp, #12
 8006faa:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fae:	4668      	mov	r0, sp
 8006fb0:	f000 f952 	bl	8007258 <__ieee754_rem_pio2f>
 8006fb4:	f000 0003 	and.w	r0, r0, #3
 8006fb8:	2801      	cmp	r0, #1
 8006fba:	d007      	beq.n	8006fcc <cosf+0x48>
 8006fbc:	2802      	cmp	r0, #2
 8006fbe:	d00e      	beq.n	8006fde <cosf+0x5a>
 8006fc0:	b9a0      	cbnz	r0, 8006fec <cosf+0x68>
 8006fc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fc6:	ed9d 0a00 	vldr	s0, [sp]
 8006fca:	e7e5      	b.n	8006f98 <cosf+0x14>
 8006fcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fd0:	ed9d 0a00 	vldr	s0, [sp]
 8006fd4:	f000 fd66 	bl	8007aa4 <__kernel_sinf>
 8006fd8:	eeb1 0a40 	vneg.f32	s0, s0
 8006fdc:	e7e4      	b.n	8006fa8 <cosf+0x24>
 8006fde:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fe2:	ed9d 0a00 	vldr	s0, [sp]
 8006fe6:	f000 fa73 	bl	80074d0 <__kernel_cosf>
 8006fea:	e7f5      	b.n	8006fd8 <cosf+0x54>
 8006fec:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ff0:	ed9d 0a00 	vldr	s0, [sp]
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f000 fd55 	bl	8007aa4 <__kernel_sinf>
 8006ffa:	e7d5      	b.n	8006fa8 <cosf+0x24>
 8006ffc:	3f490fd8 	.word	0x3f490fd8
 8007000:	00000000 	.word	0x00000000

08007004 <sinf>:
 8007004:	ee10 3a10 	vmov	r3, s0
 8007008:	b507      	push	{r0, r1, r2, lr}
 800700a:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <sinf+0x7c>)
 800700c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007010:	4293      	cmp	r3, r2
 8007012:	dc05      	bgt.n	8007020 <sinf+0x1c>
 8007014:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007084 <sinf+0x80>
 8007018:	2000      	movs	r0, #0
 800701a:	f000 fd43 	bl	8007aa4 <__kernel_sinf>
 800701e:	e004      	b.n	800702a <sinf+0x26>
 8007020:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007024:	db04      	blt.n	8007030 <sinf+0x2c>
 8007026:	ee30 0a40 	vsub.f32	s0, s0, s0
 800702a:	b003      	add	sp, #12
 800702c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007030:	4668      	mov	r0, sp
 8007032:	f000 f911 	bl	8007258 <__ieee754_rem_pio2f>
 8007036:	f000 0003 	and.w	r0, r0, #3
 800703a:	2801      	cmp	r0, #1
 800703c:	d008      	beq.n	8007050 <sinf+0x4c>
 800703e:	2802      	cmp	r0, #2
 8007040:	d00d      	beq.n	800705e <sinf+0x5a>
 8007042:	b9b0      	cbnz	r0, 8007072 <sinf+0x6e>
 8007044:	eddd 0a01 	vldr	s1, [sp, #4]
 8007048:	ed9d 0a00 	vldr	s0, [sp]
 800704c:	2001      	movs	r0, #1
 800704e:	e7e4      	b.n	800701a <sinf+0x16>
 8007050:	eddd 0a01 	vldr	s1, [sp, #4]
 8007054:	ed9d 0a00 	vldr	s0, [sp]
 8007058:	f000 fa3a 	bl	80074d0 <__kernel_cosf>
 800705c:	e7e5      	b.n	800702a <sinf+0x26>
 800705e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007062:	ed9d 0a00 	vldr	s0, [sp]
 8007066:	2001      	movs	r0, #1
 8007068:	f000 fd1c 	bl	8007aa4 <__kernel_sinf>
 800706c:	eeb1 0a40 	vneg.f32	s0, s0
 8007070:	e7db      	b.n	800702a <sinf+0x26>
 8007072:	eddd 0a01 	vldr	s1, [sp, #4]
 8007076:	ed9d 0a00 	vldr	s0, [sp]
 800707a:	f000 fa29 	bl	80074d0 <__kernel_cosf>
 800707e:	e7f5      	b.n	800706c <sinf+0x68>
 8007080:	3f490fd8 	.word	0x3f490fd8
 8007084:	00000000 	.word	0x00000000

08007088 <sqrt>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	ed2d 8b02 	vpush	{d8}
 800708e:	ec55 4b10 	vmov	r4, r5, d0
 8007092:	f000 f82d 	bl	80070f0 <__ieee754_sqrt>
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <sqrt+0x64>)
 8007098:	eeb0 8a40 	vmov.f32	s16, s0
 800709c:	eef0 8a60 	vmov.f32	s17, s1
 80070a0:	f993 3000 	ldrsb.w	r3, [r3]
 80070a4:	3301      	adds	r3, #1
 80070a6:	d019      	beq.n	80070dc <sqrt+0x54>
 80070a8:	4622      	mov	r2, r4
 80070aa:	462b      	mov	r3, r5
 80070ac:	4620      	mov	r0, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	f7f9 fd5c 	bl	8000b6c <__aeabi_dcmpun>
 80070b4:	b990      	cbnz	r0, 80070dc <sqrt+0x54>
 80070b6:	2200      	movs	r2, #0
 80070b8:	2300      	movs	r3, #0
 80070ba:	4620      	mov	r0, r4
 80070bc:	4629      	mov	r1, r5
 80070be:	f7f9 fd2d 	bl	8000b1c <__aeabi_dcmplt>
 80070c2:	b158      	cbz	r0, 80070dc <sqrt+0x54>
 80070c4:	f7ff fafe 	bl	80066c4 <__errno>
 80070c8:	2321      	movs	r3, #33	; 0x21
 80070ca:	6003      	str	r3, [r0, #0]
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	4610      	mov	r0, r2
 80070d2:	4619      	mov	r1, r3
 80070d4:	f7f9 fbda 	bl	800088c <__aeabi_ddiv>
 80070d8:	ec41 0b18 	vmov	d8, r0, r1
 80070dc:	eeb0 0a48 	vmov.f32	s0, s16
 80070e0:	eef0 0a68 	vmov.f32	s1, s17
 80070e4:	ecbd 8b02 	vpop	{d8}
 80070e8:	bd38      	pop	{r3, r4, r5, pc}
 80070ea:	bf00      	nop
 80070ec:	2000007c 	.word	0x2000007c

080070f0 <__ieee754_sqrt>:
 80070f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f4:	ec55 4b10 	vmov	r4, r5, d0
 80070f8:	4e56      	ldr	r6, [pc, #344]	; (8007254 <__ieee754_sqrt+0x164>)
 80070fa:	43ae      	bics	r6, r5
 80070fc:	ee10 0a10 	vmov	r0, s0
 8007100:	ee10 3a10 	vmov	r3, s0
 8007104:	4629      	mov	r1, r5
 8007106:	462a      	mov	r2, r5
 8007108:	d110      	bne.n	800712c <__ieee754_sqrt+0x3c>
 800710a:	ee10 2a10 	vmov	r2, s0
 800710e:	462b      	mov	r3, r5
 8007110:	f7f9 fa92 	bl	8000638 <__aeabi_dmul>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4620      	mov	r0, r4
 800711a:	4629      	mov	r1, r5
 800711c:	f7f9 f8d6 	bl	80002cc <__adddf3>
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	ec45 4b10 	vmov	d0, r4, r5
 8007128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800712c:	2d00      	cmp	r5, #0
 800712e:	dc10      	bgt.n	8007152 <__ieee754_sqrt+0x62>
 8007130:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007134:	4330      	orrs	r0, r6
 8007136:	d0f5      	beq.n	8007124 <__ieee754_sqrt+0x34>
 8007138:	b15d      	cbz	r5, 8007152 <__ieee754_sqrt+0x62>
 800713a:	ee10 2a10 	vmov	r2, s0
 800713e:	462b      	mov	r3, r5
 8007140:	ee10 0a10 	vmov	r0, s0
 8007144:	f7f9 f8c0 	bl	80002c8 <__aeabi_dsub>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	f7f9 fb9e 	bl	800088c <__aeabi_ddiv>
 8007150:	e7e6      	b.n	8007120 <__ieee754_sqrt+0x30>
 8007152:	1509      	asrs	r1, r1, #20
 8007154:	d076      	beq.n	8007244 <__ieee754_sqrt+0x154>
 8007156:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800715a:	07ce      	lsls	r6, r1, #31
 800715c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007160:	bf5e      	ittt	pl
 8007162:	0fda      	lsrpl	r2, r3, #31
 8007164:	005b      	lslpl	r3, r3, #1
 8007166:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800716a:	0fda      	lsrs	r2, r3, #31
 800716c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007170:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007174:	2000      	movs	r0, #0
 8007176:	106d      	asrs	r5, r5, #1
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	f04f 0e16 	mov.w	lr, #22
 800717e:	4684      	mov	ip, r0
 8007180:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007184:	eb0c 0401 	add.w	r4, ip, r1
 8007188:	4294      	cmp	r4, r2
 800718a:	bfde      	ittt	le
 800718c:	1b12      	suble	r2, r2, r4
 800718e:	eb04 0c01 	addle.w	ip, r4, r1
 8007192:	1840      	addle	r0, r0, r1
 8007194:	0052      	lsls	r2, r2, #1
 8007196:	f1be 0e01 	subs.w	lr, lr, #1
 800719a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800719e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80071a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071a6:	d1ed      	bne.n	8007184 <__ieee754_sqrt+0x94>
 80071a8:	4671      	mov	r1, lr
 80071aa:	2720      	movs	r7, #32
 80071ac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80071b0:	4562      	cmp	r2, ip
 80071b2:	eb04 060e 	add.w	r6, r4, lr
 80071b6:	dc02      	bgt.n	80071be <__ieee754_sqrt+0xce>
 80071b8:	d113      	bne.n	80071e2 <__ieee754_sqrt+0xf2>
 80071ba:	429e      	cmp	r6, r3
 80071bc:	d811      	bhi.n	80071e2 <__ieee754_sqrt+0xf2>
 80071be:	2e00      	cmp	r6, #0
 80071c0:	eb06 0e04 	add.w	lr, r6, r4
 80071c4:	da43      	bge.n	800724e <__ieee754_sqrt+0x15e>
 80071c6:	f1be 0f00 	cmp.w	lr, #0
 80071ca:	db40      	blt.n	800724e <__ieee754_sqrt+0x15e>
 80071cc:	f10c 0801 	add.w	r8, ip, #1
 80071d0:	eba2 020c 	sub.w	r2, r2, ip
 80071d4:	429e      	cmp	r6, r3
 80071d6:	bf88      	it	hi
 80071d8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80071dc:	1b9b      	subs	r3, r3, r6
 80071de:	4421      	add	r1, r4
 80071e0:	46c4      	mov	ip, r8
 80071e2:	0052      	lsls	r2, r2, #1
 80071e4:	3f01      	subs	r7, #1
 80071e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80071ea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80071ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071f2:	d1dd      	bne.n	80071b0 <__ieee754_sqrt+0xc0>
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d006      	beq.n	8007206 <__ieee754_sqrt+0x116>
 80071f8:	1c4c      	adds	r4, r1, #1
 80071fa:	bf13      	iteet	ne
 80071fc:	3101      	addne	r1, #1
 80071fe:	3001      	addeq	r0, #1
 8007200:	4639      	moveq	r1, r7
 8007202:	f021 0101 	bicne.w	r1, r1, #1
 8007206:	1043      	asrs	r3, r0, #1
 8007208:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800720c:	0849      	lsrs	r1, r1, #1
 800720e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007212:	07c2      	lsls	r2, r0, #31
 8007214:	bf48      	it	mi
 8007216:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800721a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800721e:	460c      	mov	r4, r1
 8007220:	463d      	mov	r5, r7
 8007222:	e77f      	b.n	8007124 <__ieee754_sqrt+0x34>
 8007224:	0ada      	lsrs	r2, r3, #11
 8007226:	3815      	subs	r0, #21
 8007228:	055b      	lsls	r3, r3, #21
 800722a:	2a00      	cmp	r2, #0
 800722c:	d0fa      	beq.n	8007224 <__ieee754_sqrt+0x134>
 800722e:	02d7      	lsls	r7, r2, #11
 8007230:	d50a      	bpl.n	8007248 <__ieee754_sqrt+0x158>
 8007232:	f1c1 0420 	rsb	r4, r1, #32
 8007236:	fa23 f404 	lsr.w	r4, r3, r4
 800723a:	1e4d      	subs	r5, r1, #1
 800723c:	408b      	lsls	r3, r1
 800723e:	4322      	orrs	r2, r4
 8007240:	1b41      	subs	r1, r0, r5
 8007242:	e788      	b.n	8007156 <__ieee754_sqrt+0x66>
 8007244:	4608      	mov	r0, r1
 8007246:	e7f0      	b.n	800722a <__ieee754_sqrt+0x13a>
 8007248:	0052      	lsls	r2, r2, #1
 800724a:	3101      	adds	r1, #1
 800724c:	e7ef      	b.n	800722e <__ieee754_sqrt+0x13e>
 800724e:	46e0      	mov	r8, ip
 8007250:	e7be      	b.n	80071d0 <__ieee754_sqrt+0xe0>
 8007252:	bf00      	nop
 8007254:	7ff00000 	.word	0x7ff00000

08007258 <__ieee754_rem_pio2f>:
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	ee10 6a10 	vmov	r6, s0
 800725e:	4b8e      	ldr	r3, [pc, #568]	; (8007498 <__ieee754_rem_pio2f+0x240>)
 8007260:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007264:	429d      	cmp	r5, r3
 8007266:	b087      	sub	sp, #28
 8007268:	eef0 7a40 	vmov.f32	s15, s0
 800726c:	4604      	mov	r4, r0
 800726e:	dc05      	bgt.n	800727c <__ieee754_rem_pio2f+0x24>
 8007270:	2300      	movs	r3, #0
 8007272:	ed80 0a00 	vstr	s0, [r0]
 8007276:	6043      	str	r3, [r0, #4]
 8007278:	2000      	movs	r0, #0
 800727a:	e01a      	b.n	80072b2 <__ieee754_rem_pio2f+0x5a>
 800727c:	4b87      	ldr	r3, [pc, #540]	; (800749c <__ieee754_rem_pio2f+0x244>)
 800727e:	429d      	cmp	r5, r3
 8007280:	dc46      	bgt.n	8007310 <__ieee754_rem_pio2f+0xb8>
 8007282:	2e00      	cmp	r6, #0
 8007284:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80074a0 <__ieee754_rem_pio2f+0x248>
 8007288:	4b86      	ldr	r3, [pc, #536]	; (80074a4 <__ieee754_rem_pio2f+0x24c>)
 800728a:	f025 050f 	bic.w	r5, r5, #15
 800728e:	dd1f      	ble.n	80072d0 <__ieee754_rem_pio2f+0x78>
 8007290:	429d      	cmp	r5, r3
 8007292:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007296:	d00e      	beq.n	80072b6 <__ieee754_rem_pio2f+0x5e>
 8007298:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80074a8 <__ieee754_rem_pio2f+0x250>
 800729c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80072a0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072a4:	ed80 0a00 	vstr	s0, [r0]
 80072a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072ac:	2001      	movs	r0, #1
 80072ae:	edc4 7a01 	vstr	s15, [r4, #4]
 80072b2:	b007      	add	sp, #28
 80072b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80074ac <__ieee754_rem_pio2f+0x254>
 80072ba:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80074b0 <__ieee754_rem_pio2f+0x258>
 80072be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072c2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80072c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072ca:	edc0 6a00 	vstr	s13, [r0]
 80072ce:	e7eb      	b.n	80072a8 <__ieee754_rem_pio2f+0x50>
 80072d0:	429d      	cmp	r5, r3
 80072d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80072d6:	d00e      	beq.n	80072f6 <__ieee754_rem_pio2f+0x9e>
 80072d8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80074a8 <__ieee754_rem_pio2f+0x250>
 80072dc:	ee37 0a87 	vadd.f32	s0, s15, s14
 80072e0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072e4:	ed80 0a00 	vstr	s0, [r0]
 80072e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295
 80072f0:	edc4 7a01 	vstr	s15, [r4, #4]
 80072f4:	e7dd      	b.n	80072b2 <__ieee754_rem_pio2f+0x5a>
 80072f6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80074ac <__ieee754_rem_pio2f+0x254>
 80072fa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80074b0 <__ieee754_rem_pio2f+0x258>
 80072fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007302:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800730a:	edc0 6a00 	vstr	s13, [r0]
 800730e:	e7eb      	b.n	80072e8 <__ieee754_rem_pio2f+0x90>
 8007310:	4b68      	ldr	r3, [pc, #416]	; (80074b4 <__ieee754_rem_pio2f+0x25c>)
 8007312:	429d      	cmp	r5, r3
 8007314:	dc72      	bgt.n	80073fc <__ieee754_rem_pio2f+0x1a4>
 8007316:	f000 fc0d 	bl	8007b34 <fabsf>
 800731a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80074b8 <__ieee754_rem_pio2f+0x260>
 800731e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007322:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800732a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800732e:	ee17 0a90 	vmov	r0, s15
 8007332:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80074a0 <__ieee754_rem_pio2f+0x248>
 8007336:	eea7 0a67 	vfms.f32	s0, s14, s15
 800733a:	281f      	cmp	r0, #31
 800733c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80074a8 <__ieee754_rem_pio2f+0x250>
 8007340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007344:	eeb1 6a47 	vneg.f32	s12, s14
 8007348:	ee70 6a67 	vsub.f32	s13, s0, s15
 800734c:	ee16 2a90 	vmov	r2, s13
 8007350:	dc1c      	bgt.n	800738c <__ieee754_rem_pio2f+0x134>
 8007352:	495a      	ldr	r1, [pc, #360]	; (80074bc <__ieee754_rem_pio2f+0x264>)
 8007354:	1e47      	subs	r7, r0, #1
 8007356:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800735a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800735e:	428b      	cmp	r3, r1
 8007360:	d014      	beq.n	800738c <__ieee754_rem_pio2f+0x134>
 8007362:	6022      	str	r2, [r4, #0]
 8007364:	ed94 7a00 	vldr	s14, [r4]
 8007368:	ee30 0a47 	vsub.f32	s0, s0, s14
 800736c:	2e00      	cmp	r6, #0
 800736e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007372:	ed84 0a01 	vstr	s0, [r4, #4]
 8007376:	da9c      	bge.n	80072b2 <__ieee754_rem_pio2f+0x5a>
 8007378:	eeb1 7a47 	vneg.f32	s14, s14
 800737c:	eeb1 0a40 	vneg.f32	s0, s0
 8007380:	ed84 7a00 	vstr	s14, [r4]
 8007384:	ed84 0a01 	vstr	s0, [r4, #4]
 8007388:	4240      	negs	r0, r0
 800738a:	e792      	b.n	80072b2 <__ieee754_rem_pio2f+0x5a>
 800738c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007390:	15eb      	asrs	r3, r5, #23
 8007392:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007396:	2d08      	cmp	r5, #8
 8007398:	dde3      	ble.n	8007362 <__ieee754_rem_pio2f+0x10a>
 800739a:	eddf 7a44 	vldr	s15, [pc, #272]	; 80074ac <__ieee754_rem_pio2f+0x254>
 800739e:	eef0 6a40 	vmov.f32	s13, s0
 80073a2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80073a6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80073aa:	eea6 0a27 	vfma.f32	s0, s12, s15
 80073ae:	eddf 7a40 	vldr	s15, [pc, #256]	; 80074b0 <__ieee754_rem_pio2f+0x258>
 80073b2:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80073b6:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80073ba:	eef0 7a40 	vmov.f32	s15, s0
 80073be:	ee15 2a90 	vmov	r2, s11
 80073c2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80073c6:	1a5b      	subs	r3, r3, r1
 80073c8:	2b19      	cmp	r3, #25
 80073ca:	dc04      	bgt.n	80073d6 <__ieee754_rem_pio2f+0x17e>
 80073cc:	edc4 5a00 	vstr	s11, [r4]
 80073d0:	eeb0 0a66 	vmov.f32	s0, s13
 80073d4:	e7c6      	b.n	8007364 <__ieee754_rem_pio2f+0x10c>
 80073d6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80074c0 <__ieee754_rem_pio2f+0x268>
 80073da:	eeb0 0a66 	vmov.f32	s0, s13
 80073de:	eea6 0a25 	vfma.f32	s0, s12, s11
 80073e2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80073e6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80074c4 <__ieee754_rem_pio2f+0x26c>
 80073ea:	eee6 7a25 	vfma.f32	s15, s12, s11
 80073ee:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80073f2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80073f6:	ed84 7a00 	vstr	s14, [r4]
 80073fa:	e7b3      	b.n	8007364 <__ieee754_rem_pio2f+0x10c>
 80073fc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007400:	db06      	blt.n	8007410 <__ieee754_rem_pio2f+0x1b8>
 8007402:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007406:	edc0 7a01 	vstr	s15, [r0, #4]
 800740a:	edc0 7a00 	vstr	s15, [r0]
 800740e:	e733      	b.n	8007278 <__ieee754_rem_pio2f+0x20>
 8007410:	15ea      	asrs	r2, r5, #23
 8007412:	3a86      	subs	r2, #134	; 0x86
 8007414:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007420:	eddf 6a29 	vldr	s13, [pc, #164]	; 80074c8 <__ieee754_rem_pio2f+0x270>
 8007424:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800742c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007430:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007434:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007438:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800743c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007440:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007444:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007448:	eef5 7a40 	vcmp.f32	s15, #0.0
 800744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007450:	edcd 7a05 	vstr	s15, [sp, #20]
 8007454:	d11e      	bne.n	8007494 <__ieee754_rem_pio2f+0x23c>
 8007456:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800745a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745e:	bf14      	ite	ne
 8007460:	2302      	movne	r3, #2
 8007462:	2301      	moveq	r3, #1
 8007464:	4919      	ldr	r1, [pc, #100]	; (80074cc <__ieee754_rem_pio2f+0x274>)
 8007466:	9101      	str	r1, [sp, #4]
 8007468:	2102      	movs	r1, #2
 800746a:	9100      	str	r1, [sp, #0]
 800746c:	a803      	add	r0, sp, #12
 800746e:	4621      	mov	r1, r4
 8007470:	f000 f88e 	bl	8007590 <__kernel_rem_pio2f>
 8007474:	2e00      	cmp	r6, #0
 8007476:	f6bf af1c 	bge.w	80072b2 <__ieee754_rem_pio2f+0x5a>
 800747a:	edd4 7a00 	vldr	s15, [r4]
 800747e:	eef1 7a67 	vneg.f32	s15, s15
 8007482:	edc4 7a00 	vstr	s15, [r4]
 8007486:	edd4 7a01 	vldr	s15, [r4, #4]
 800748a:	eef1 7a67 	vneg.f32	s15, s15
 800748e:	edc4 7a01 	vstr	s15, [r4, #4]
 8007492:	e779      	b.n	8007388 <__ieee754_rem_pio2f+0x130>
 8007494:	2303      	movs	r3, #3
 8007496:	e7e5      	b.n	8007464 <__ieee754_rem_pio2f+0x20c>
 8007498:	3f490fd8 	.word	0x3f490fd8
 800749c:	4016cbe3 	.word	0x4016cbe3
 80074a0:	3fc90f80 	.word	0x3fc90f80
 80074a4:	3fc90fd0 	.word	0x3fc90fd0
 80074a8:	37354443 	.word	0x37354443
 80074ac:	37354400 	.word	0x37354400
 80074b0:	2e85a308 	.word	0x2e85a308
 80074b4:	43490f80 	.word	0x43490f80
 80074b8:	3f22f984 	.word	0x3f22f984
 80074bc:	08007dec 	.word	0x08007dec
 80074c0:	2e85a300 	.word	0x2e85a300
 80074c4:	248d3132 	.word	0x248d3132
 80074c8:	43800000 	.word	0x43800000
 80074cc:	08007e6c 	.word	0x08007e6c

080074d0 <__kernel_cosf>:
 80074d0:	ee10 3a10 	vmov	r3, s0
 80074d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80074dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80074e0:	da05      	bge.n	80074ee <__kernel_cosf+0x1e>
 80074e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80074e6:	ee17 2a90 	vmov	r2, s15
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d03d      	beq.n	800756a <__kernel_cosf+0x9a>
 80074ee:	ee60 5a00 	vmul.f32	s11, s0, s0
 80074f2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007570 <__kernel_cosf+0xa0>
 80074f6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007574 <__kernel_cosf+0xa4>
 80074fa:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007578 <__kernel_cosf+0xa8>
 80074fe:	4a1f      	ldr	r2, [pc, #124]	; (800757c <__kernel_cosf+0xac>)
 8007500:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007504:	4293      	cmp	r3, r2
 8007506:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007580 <__kernel_cosf+0xb0>
 800750a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800750e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007584 <__kernel_cosf+0xb4>
 8007512:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007516:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007588 <__kernel_cosf+0xb8>
 800751a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800751e:	eeb0 7a66 	vmov.f32	s14, s13
 8007522:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007526:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800752a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800752e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007532:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007536:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800753a:	dc04      	bgt.n	8007546 <__kernel_cosf+0x76>
 800753c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007540:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007544:	4770      	bx	lr
 8007546:	4a11      	ldr	r2, [pc, #68]	; (800758c <__kernel_cosf+0xbc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	bfda      	itte	le
 800754c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007550:	ee06 3a90 	vmovle	s13, r3
 8007554:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007558:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800755c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007560:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007564:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007568:	4770      	bx	lr
 800756a:	eeb0 0a46 	vmov.f32	s0, s12
 800756e:	4770      	bx	lr
 8007570:	ad47d74e 	.word	0xad47d74e
 8007574:	310f74f6 	.word	0x310f74f6
 8007578:	3d2aaaab 	.word	0x3d2aaaab
 800757c:	3e999999 	.word	0x3e999999
 8007580:	b493f27c 	.word	0xb493f27c
 8007584:	37d00d01 	.word	0x37d00d01
 8007588:	bab60b61 	.word	0xbab60b61
 800758c:	3f480000 	.word	0x3f480000

08007590 <__kernel_rem_pio2f>:
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	ed2d 8b04 	vpush	{d8-d9}
 8007598:	b0d7      	sub	sp, #348	; 0x15c
 800759a:	4616      	mov	r6, r2
 800759c:	4698      	mov	r8, r3
 800759e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80075a0:	4bbb      	ldr	r3, [pc, #748]	; (8007890 <__kernel_rem_pio2f+0x300>)
 80075a2:	9001      	str	r0, [sp, #4]
 80075a4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80075a8:	1d33      	adds	r3, r6, #4
 80075aa:	460d      	mov	r5, r1
 80075ac:	f108 39ff 	add.w	r9, r8, #4294967295
 80075b0:	db29      	blt.n	8007606 <__kernel_rem_pio2f+0x76>
 80075b2:	1ef1      	subs	r1, r6, #3
 80075b4:	bf48      	it	mi
 80075b6:	1d31      	addmi	r1, r6, #4
 80075b8:	10c9      	asrs	r1, r1, #3
 80075ba:	1c4c      	adds	r4, r1, #1
 80075bc:	00e3      	lsls	r3, r4, #3
 80075be:	9302      	str	r3, [sp, #8]
 80075c0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80075c2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80078a0 <__kernel_rem_pio2f+0x310>
 80075c6:	eba1 0009 	sub.w	r0, r1, r9
 80075ca:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80075ce:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80075d2:	eb07 0c09 	add.w	ip, r7, r9
 80075d6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80075da:	2300      	movs	r3, #0
 80075dc:	4563      	cmp	r3, ip
 80075de:	dd14      	ble.n	800760a <__kernel_rem_pio2f+0x7a>
 80075e0:	ab1a      	add	r3, sp, #104	; 0x68
 80075e2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80075e6:	46cc      	mov	ip, r9
 80075e8:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80075ec:	f1c8 0b01 	rsb	fp, r8, #1
 80075f0:	eb0b 020c 	add.w	r2, fp, ip
 80075f4:	4297      	cmp	r7, r2
 80075f6:	db27      	blt.n	8007648 <__kernel_rem_pio2f+0xb8>
 80075f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80075fc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80078a0 <__kernel_rem_pio2f+0x310>
 8007600:	4618      	mov	r0, r3
 8007602:	2200      	movs	r2, #0
 8007604:	e016      	b.n	8007634 <__kernel_rem_pio2f+0xa4>
 8007606:	2100      	movs	r1, #0
 8007608:	e7d7      	b.n	80075ba <__kernel_rem_pio2f+0x2a>
 800760a:	42d8      	cmn	r0, r3
 800760c:	bf5d      	ittte	pl
 800760e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007612:	ee07 2a90 	vmovpl	s15, r2
 8007616:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800761a:	eef0 7a47 	vmovmi.f32	s15, s14
 800761e:	ecea 7a01 	vstmia	sl!, {s15}
 8007622:	3301      	adds	r3, #1
 8007624:	e7da      	b.n	80075dc <__kernel_rem_pio2f+0x4c>
 8007626:	ecfe 6a01 	vldmia	lr!, {s13}
 800762a:	ed90 7a00 	vldr	s14, [r0]
 800762e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007632:	3201      	adds	r2, #1
 8007634:	454a      	cmp	r2, r9
 8007636:	f1a0 0004 	sub.w	r0, r0, #4
 800763a:	ddf4      	ble.n	8007626 <__kernel_rem_pio2f+0x96>
 800763c:	ecea 7a01 	vstmia	sl!, {s15}
 8007640:	3304      	adds	r3, #4
 8007642:	f10c 0c01 	add.w	ip, ip, #1
 8007646:	e7d3      	b.n	80075f0 <__kernel_rem_pio2f+0x60>
 8007648:	ab06      	add	r3, sp, #24
 800764a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800764e:	9304      	str	r3, [sp, #16]
 8007650:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007652:	eddf 8a92 	vldr	s17, [pc, #584]	; 800789c <__kernel_rem_pio2f+0x30c>
 8007656:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007898 <__kernel_rem_pio2f+0x308>
 800765a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800765e:	9303      	str	r3, [sp, #12]
 8007660:	46ba      	mov	sl, r7
 8007662:	ab56      	add	r3, sp, #344	; 0x158
 8007664:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007668:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800766c:	ab06      	add	r3, sp, #24
 800766e:	4618      	mov	r0, r3
 8007670:	4652      	mov	r2, sl
 8007672:	2a00      	cmp	r2, #0
 8007674:	dc51      	bgt.n	800771a <__kernel_rem_pio2f+0x18a>
 8007676:	4620      	mov	r0, r4
 8007678:	9305      	str	r3, [sp, #20]
 800767a:	f000 faa5 	bl	8007bc8 <scalbnf>
 800767e:	eeb0 8a40 	vmov.f32	s16, s0
 8007682:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007686:	ee28 0a00 	vmul.f32	s0, s16, s0
 800768a:	f000 fa5b 	bl	8007b44 <floorf>
 800768e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007692:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007696:	2c00      	cmp	r4, #0
 8007698:	9b05      	ldr	r3, [sp, #20]
 800769a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800769e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80076a2:	edcd 7a00 	vstr	s15, [sp]
 80076a6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80076aa:	dd4b      	ble.n	8007744 <__kernel_rem_pio2f+0x1b4>
 80076ac:	f10a 3cff 	add.w	ip, sl, #4294967295
 80076b0:	aa06      	add	r2, sp, #24
 80076b2:	f1c4 0e08 	rsb	lr, r4, #8
 80076b6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80076ba:	ee17 1a90 	vmov	r1, s15
 80076be:	fa42 f00e 	asr.w	r0, r2, lr
 80076c2:	4401      	add	r1, r0
 80076c4:	9100      	str	r1, [sp, #0]
 80076c6:	fa00 f00e 	lsl.w	r0, r0, lr
 80076ca:	a906      	add	r1, sp, #24
 80076cc:	1a12      	subs	r2, r2, r0
 80076ce:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80076d2:	f1c4 0007 	rsb	r0, r4, #7
 80076d6:	fa42 fb00 	asr.w	fp, r2, r0
 80076da:	f1bb 0f00 	cmp.w	fp, #0
 80076de:	dd43      	ble.n	8007768 <__kernel_rem_pio2f+0x1d8>
 80076e0:	9a00      	ldr	r2, [sp, #0]
 80076e2:	f04f 0e00 	mov.w	lr, #0
 80076e6:	3201      	adds	r2, #1
 80076e8:	9200      	str	r2, [sp, #0]
 80076ea:	4670      	mov	r0, lr
 80076ec:	45f2      	cmp	sl, lr
 80076ee:	dc6c      	bgt.n	80077ca <__kernel_rem_pio2f+0x23a>
 80076f0:	2c00      	cmp	r4, #0
 80076f2:	dd04      	ble.n	80076fe <__kernel_rem_pio2f+0x16e>
 80076f4:	2c01      	cmp	r4, #1
 80076f6:	d079      	beq.n	80077ec <__kernel_rem_pio2f+0x25c>
 80076f8:	2c02      	cmp	r4, #2
 80076fa:	f000 8082 	beq.w	8007802 <__kernel_rem_pio2f+0x272>
 80076fe:	f1bb 0f02 	cmp.w	fp, #2
 8007702:	d131      	bne.n	8007768 <__kernel_rem_pio2f+0x1d8>
 8007704:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007708:	ee30 8a48 	vsub.f32	s16, s0, s16
 800770c:	b360      	cbz	r0, 8007768 <__kernel_rem_pio2f+0x1d8>
 800770e:	4620      	mov	r0, r4
 8007710:	f000 fa5a 	bl	8007bc8 <scalbnf>
 8007714:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007718:	e026      	b.n	8007768 <__kernel_rem_pio2f+0x1d8>
 800771a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800771e:	3a01      	subs	r2, #1
 8007720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007724:	a942      	add	r1, sp, #264	; 0x108
 8007726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800772a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800772e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007732:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007736:	eca0 0a01 	vstmia	r0!, {s0}
 800773a:	ed9c 0a00 	vldr	s0, [ip]
 800773e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007742:	e796      	b.n	8007672 <__kernel_rem_pio2f+0xe2>
 8007744:	d107      	bne.n	8007756 <__kernel_rem_pio2f+0x1c6>
 8007746:	f10a 32ff 	add.w	r2, sl, #4294967295
 800774a:	a906      	add	r1, sp, #24
 800774c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007750:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007754:	e7c1      	b.n	80076da <__kernel_rem_pio2f+0x14a>
 8007756:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800775a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	da2f      	bge.n	80077c4 <__kernel_rem_pio2f+0x234>
 8007764:	f04f 0b00 	mov.w	fp, #0
 8007768:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	f040 8098 	bne.w	80078a4 <__kernel_rem_pio2f+0x314>
 8007774:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007778:	469c      	mov	ip, r3
 800777a:	2200      	movs	r2, #0
 800777c:	45bc      	cmp	ip, r7
 800777e:	da48      	bge.n	8007812 <__kernel_rem_pio2f+0x282>
 8007780:	2a00      	cmp	r2, #0
 8007782:	d05f      	beq.n	8007844 <__kernel_rem_pio2f+0x2b4>
 8007784:	aa06      	add	r2, sp, #24
 8007786:	3c08      	subs	r4, #8
 8007788:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800778c:	2900      	cmp	r1, #0
 800778e:	d07d      	beq.n	800788c <__kernel_rem_pio2f+0x2fc>
 8007790:	4620      	mov	r0, r4
 8007792:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	f000 fa16 	bl	8007bc8 <scalbnf>
 800779c:	9b01      	ldr	r3, [sp, #4]
 800779e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800789c <__kernel_rem_pio2f+0x30c>
 80077a2:	4619      	mov	r1, r3
 80077a4:	2900      	cmp	r1, #0
 80077a6:	f280 80af 	bge.w	8007908 <__kernel_rem_pio2f+0x378>
 80077aa:	4618      	mov	r0, r3
 80077ac:	2400      	movs	r4, #0
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f2c0 80d0 	blt.w	8007954 <__kernel_rem_pio2f+0x3c4>
 80077b4:	a942      	add	r1, sp, #264	; 0x108
 80077b6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80077ba:	4a36      	ldr	r2, [pc, #216]	; (8007894 <__kernel_rem_pio2f+0x304>)
 80077bc:	eddf 7a38 	vldr	s15, [pc, #224]	; 80078a0 <__kernel_rem_pio2f+0x310>
 80077c0:	2100      	movs	r1, #0
 80077c2:	e0bb      	b.n	800793c <__kernel_rem_pio2f+0x3ac>
 80077c4:	f04f 0b02 	mov.w	fp, #2
 80077c8:	e78a      	b.n	80076e0 <__kernel_rem_pio2f+0x150>
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	b948      	cbnz	r0, 80077e2 <__kernel_rem_pio2f+0x252>
 80077ce:	b11a      	cbz	r2, 80077d8 <__kernel_rem_pio2f+0x248>
 80077d0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f10e 0e01 	add.w	lr, lr, #1
 80077dc:	3304      	adds	r3, #4
 80077de:	4610      	mov	r0, r2
 80077e0:	e784      	b.n	80076ec <__kernel_rem_pio2f+0x15c>
 80077e2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	4602      	mov	r2, r0
 80077ea:	e7f5      	b.n	80077d8 <__kernel_rem_pio2f+0x248>
 80077ec:	f10a 3cff 	add.w	ip, sl, #4294967295
 80077f0:	ab06      	add	r3, sp, #24
 80077f2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	aa06      	add	r2, sp, #24
 80077fc:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007800:	e77d      	b.n	80076fe <__kernel_rem_pio2f+0x16e>
 8007802:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007806:	ab06      	add	r3, sp, #24
 8007808:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800780c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007810:	e7f3      	b.n	80077fa <__kernel_rem_pio2f+0x26a>
 8007812:	a906      	add	r1, sp, #24
 8007814:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007818:	f10c 3cff 	add.w	ip, ip, #4294967295
 800781c:	4302      	orrs	r2, r0
 800781e:	e7ad      	b.n	800777c <__kernel_rem_pio2f+0x1ec>
 8007820:	3001      	adds	r0, #1
 8007822:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007826:	2a00      	cmp	r2, #0
 8007828:	d0fa      	beq.n	8007820 <__kernel_rem_pio2f+0x290>
 800782a:	a91a      	add	r1, sp, #104	; 0x68
 800782c:	eb0a 0208 	add.w	r2, sl, r8
 8007830:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007834:	f10a 0301 	add.w	r3, sl, #1
 8007838:	eb0a 0100 	add.w	r1, sl, r0
 800783c:	4299      	cmp	r1, r3
 800783e:	da04      	bge.n	800784a <__kernel_rem_pio2f+0x2ba>
 8007840:	468a      	mov	sl, r1
 8007842:	e70e      	b.n	8007662 <__kernel_rem_pio2f+0xd2>
 8007844:	9b04      	ldr	r3, [sp, #16]
 8007846:	2001      	movs	r0, #1
 8007848:	e7eb      	b.n	8007822 <__kernel_rem_pio2f+0x292>
 800784a:	9803      	ldr	r0, [sp, #12]
 800784c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007850:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007854:	9000      	str	r0, [sp, #0]
 8007856:	ee07 0a90 	vmov	s15, r0
 800785a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800785e:	2000      	movs	r0, #0
 8007860:	ece2 7a01 	vstmia	r2!, {s15}
 8007864:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80078a0 <__kernel_rem_pio2f+0x310>
 8007868:	4696      	mov	lr, r2
 800786a:	4548      	cmp	r0, r9
 800786c:	dd06      	ble.n	800787c <__kernel_rem_pio2f+0x2ec>
 800786e:	a842      	add	r0, sp, #264	; 0x108
 8007870:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007874:	edc0 7a00 	vstr	s15, [r0]
 8007878:	3301      	adds	r3, #1
 800787a:	e7df      	b.n	800783c <__kernel_rem_pio2f+0x2ac>
 800787c:	ecfc 6a01 	vldmia	ip!, {s13}
 8007880:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007884:	3001      	adds	r0, #1
 8007886:	eee6 7a87 	vfma.f32	s15, s13, s14
 800788a:	e7ee      	b.n	800786a <__kernel_rem_pio2f+0x2da>
 800788c:	3b01      	subs	r3, #1
 800788e:	e779      	b.n	8007784 <__kernel_rem_pio2f+0x1f4>
 8007890:	080081b0 	.word	0x080081b0
 8007894:	08008184 	.word	0x08008184
 8007898:	43800000 	.word	0x43800000
 800789c:	3b800000 	.word	0x3b800000
 80078a0:	00000000 	.word	0x00000000
 80078a4:	9b02      	ldr	r3, [sp, #8]
 80078a6:	eeb0 0a48 	vmov.f32	s0, s16
 80078aa:	1b98      	subs	r0, r3, r6
 80078ac:	f000 f98c 	bl	8007bc8 <scalbnf>
 80078b0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007898 <__kernel_rem_pio2f+0x308>
 80078b4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80078b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078bc:	db1b      	blt.n	80078f6 <__kernel_rem_pio2f+0x366>
 80078be:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800789c <__kernel_rem_pio2f+0x30c>
 80078c2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80078c6:	aa06      	add	r2, sp, #24
 80078c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078cc:	a906      	add	r1, sp, #24
 80078ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078d2:	3408      	adds	r4, #8
 80078d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80078d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80078e0:	ee10 3a10 	vmov	r3, s0
 80078e4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80078e8:	ee17 2a90 	vmov	r2, s15
 80078ec:	f10a 0301 	add.w	r3, sl, #1
 80078f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80078f4:	e74c      	b.n	8007790 <__kernel_rem_pio2f+0x200>
 80078f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80078fa:	aa06      	add	r2, sp, #24
 80078fc:	ee10 3a10 	vmov	r3, s0
 8007900:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007904:	4653      	mov	r3, sl
 8007906:	e743      	b.n	8007790 <__kernel_rem_pio2f+0x200>
 8007908:	aa42      	add	r2, sp, #264	; 0x108
 800790a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800790e:	aa06      	add	r2, sp, #24
 8007910:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007914:	9201      	str	r2, [sp, #4]
 8007916:	ee07 2a90 	vmov	s15, r2
 800791a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800791e:	3901      	subs	r1, #1
 8007920:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007924:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007928:	edc0 7a00 	vstr	s15, [r0]
 800792c:	e73a      	b.n	80077a4 <__kernel_rem_pio2f+0x214>
 800792e:	ecf2 6a01 	vldmia	r2!, {s13}
 8007932:	ecb6 7a01 	vldmia	r6!, {s14}
 8007936:	eee6 7a87 	vfma.f32	s15, s13, s14
 800793a:	3101      	adds	r1, #1
 800793c:	42b9      	cmp	r1, r7
 800793e:	dc01      	bgt.n	8007944 <__kernel_rem_pio2f+0x3b4>
 8007940:	428c      	cmp	r4, r1
 8007942:	daf4      	bge.n	800792e <__kernel_rem_pio2f+0x39e>
 8007944:	aa56      	add	r2, sp, #344	; 0x158
 8007946:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800794a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800794e:	3801      	subs	r0, #1
 8007950:	3401      	adds	r4, #1
 8007952:	e72c      	b.n	80077ae <__kernel_rem_pio2f+0x21e>
 8007954:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007956:	2a02      	cmp	r2, #2
 8007958:	dc0a      	bgt.n	8007970 <__kernel_rem_pio2f+0x3e0>
 800795a:	2a00      	cmp	r2, #0
 800795c:	dc61      	bgt.n	8007a22 <__kernel_rem_pio2f+0x492>
 800795e:	d03c      	beq.n	80079da <__kernel_rem_pio2f+0x44a>
 8007960:	9b00      	ldr	r3, [sp, #0]
 8007962:	f003 0007 	and.w	r0, r3, #7
 8007966:	b057      	add	sp, #348	; 0x15c
 8007968:	ecbd 8b04 	vpop	{d8-d9}
 800796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007970:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007972:	2a03      	cmp	r2, #3
 8007974:	d1f4      	bne.n	8007960 <__kernel_rem_pio2f+0x3d0>
 8007976:	aa2e      	add	r2, sp, #184	; 0xb8
 8007978:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800797c:	4608      	mov	r0, r1
 800797e:	461c      	mov	r4, r3
 8007980:	2c00      	cmp	r4, #0
 8007982:	f1a0 0004 	sub.w	r0, r0, #4
 8007986:	dc59      	bgt.n	8007a3c <__kernel_rem_pio2f+0x4ac>
 8007988:	4618      	mov	r0, r3
 800798a:	2801      	cmp	r0, #1
 800798c:	f1a1 0104 	sub.w	r1, r1, #4
 8007990:	dc64      	bgt.n	8007a5c <__kernel_rem_pio2f+0x4cc>
 8007992:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80078a0 <__kernel_rem_pio2f+0x310>
 8007996:	2b01      	cmp	r3, #1
 8007998:	dc70      	bgt.n	8007a7c <__kernel_rem_pio2f+0x4ec>
 800799a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800799e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80079a2:	f1bb 0f00 	cmp.w	fp, #0
 80079a6:	d172      	bne.n	8007a8e <__kernel_rem_pio2f+0x4fe>
 80079a8:	edc5 6a00 	vstr	s13, [r5]
 80079ac:	ed85 7a01 	vstr	s14, [r5, #4]
 80079b0:	edc5 7a02 	vstr	s15, [r5, #8]
 80079b4:	e7d4      	b.n	8007960 <__kernel_rem_pio2f+0x3d0>
 80079b6:	aa2e      	add	r2, sp, #184	; 0xb8
 80079b8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80079bc:	ed91 7a00 	vldr	s14, [r1]
 80079c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079c4:	3b01      	subs	r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	daf5      	bge.n	80079b6 <__kernel_rem_pio2f+0x426>
 80079ca:	f1bb 0f00 	cmp.w	fp, #0
 80079ce:	d001      	beq.n	80079d4 <__kernel_rem_pio2f+0x444>
 80079d0:	eef1 7a67 	vneg.f32	s15, s15
 80079d4:	edc5 7a00 	vstr	s15, [r5]
 80079d8:	e7c2      	b.n	8007960 <__kernel_rem_pio2f+0x3d0>
 80079da:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80078a0 <__kernel_rem_pio2f+0x310>
 80079de:	e7f2      	b.n	80079c6 <__kernel_rem_pio2f+0x436>
 80079e0:	aa2e      	add	r2, sp, #184	; 0xb8
 80079e2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80079e6:	edd0 7a00 	vldr	s15, [r0]
 80079ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079ee:	3901      	subs	r1, #1
 80079f0:	2900      	cmp	r1, #0
 80079f2:	daf5      	bge.n	80079e0 <__kernel_rem_pio2f+0x450>
 80079f4:	f1bb 0f00 	cmp.w	fp, #0
 80079f8:	d017      	beq.n	8007a2a <__kernel_rem_pio2f+0x49a>
 80079fa:	eef1 7a47 	vneg.f32	s15, s14
 80079fe:	edc5 7a00 	vstr	s15, [r5]
 8007a02:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a0a:	a82f      	add	r0, sp, #188	; 0xbc
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	428b      	cmp	r3, r1
 8007a10:	da0e      	bge.n	8007a30 <__kernel_rem_pio2f+0x4a0>
 8007a12:	f1bb 0f00 	cmp.w	fp, #0
 8007a16:	d001      	beq.n	8007a1c <__kernel_rem_pio2f+0x48c>
 8007a18:	eef1 7a67 	vneg.f32	s15, s15
 8007a1c:	edc5 7a01 	vstr	s15, [r5, #4]
 8007a20:	e79e      	b.n	8007960 <__kernel_rem_pio2f+0x3d0>
 8007a22:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80078a0 <__kernel_rem_pio2f+0x310>
 8007a26:	4619      	mov	r1, r3
 8007a28:	e7e2      	b.n	80079f0 <__kernel_rem_pio2f+0x460>
 8007a2a:	eef0 7a47 	vmov.f32	s15, s14
 8007a2e:	e7e6      	b.n	80079fe <__kernel_rem_pio2f+0x46e>
 8007a30:	ecb0 7a01 	vldmia	r0!, {s14}
 8007a34:	3101      	adds	r1, #1
 8007a36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a3a:	e7e8      	b.n	8007a0e <__kernel_rem_pio2f+0x47e>
 8007a3c:	edd0 7a00 	vldr	s15, [r0]
 8007a40:	edd0 6a01 	vldr	s13, [r0, #4]
 8007a44:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a48:	3c01      	subs	r4, #1
 8007a4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a4e:	ed80 7a00 	vstr	s14, [r0]
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	edc0 7a01 	vstr	s15, [r0, #4]
 8007a5a:	e791      	b.n	8007980 <__kernel_rem_pio2f+0x3f0>
 8007a5c:	edd1 7a00 	vldr	s15, [r1]
 8007a60:	edd1 6a01 	vldr	s13, [r1, #4]
 8007a64:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a68:	3801      	subs	r0, #1
 8007a6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a6e:	ed81 7a00 	vstr	s14, [r1]
 8007a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a76:	edc1 7a01 	vstr	s15, [r1, #4]
 8007a7a:	e786      	b.n	800798a <__kernel_rem_pio2f+0x3fa>
 8007a7c:	aa2e      	add	r2, sp, #184	; 0xb8
 8007a7e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007a82:	ed91 7a00 	vldr	s14, [r1]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a8c:	e783      	b.n	8007996 <__kernel_rem_pio2f+0x406>
 8007a8e:	eef1 6a66 	vneg.f32	s13, s13
 8007a92:	eeb1 7a47 	vneg.f32	s14, s14
 8007a96:	edc5 6a00 	vstr	s13, [r5]
 8007a9a:	ed85 7a01 	vstr	s14, [r5, #4]
 8007a9e:	eef1 7a67 	vneg.f32	s15, s15
 8007aa2:	e785      	b.n	80079b0 <__kernel_rem_pio2f+0x420>

08007aa4 <__kernel_sinf>:
 8007aa4:	ee10 3a10 	vmov	r3, s0
 8007aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007ab0:	da04      	bge.n	8007abc <__kernel_sinf+0x18>
 8007ab2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ab6:	ee17 3a90 	vmov	r3, s15
 8007aba:	b35b      	cbz	r3, 8007b14 <__kernel_sinf+0x70>
 8007abc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ac0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007b18 <__kernel_sinf+0x74>
 8007ac4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007b1c <__kernel_sinf+0x78>
 8007ac8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007acc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007b20 <__kernel_sinf+0x7c>
 8007ad0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007ad4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007b24 <__kernel_sinf+0x80>
 8007ad8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007adc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007b28 <__kernel_sinf+0x84>
 8007ae0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007ae4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007ae8:	b930      	cbnz	r0, 8007af8 <__kernel_sinf+0x54>
 8007aea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007b2c <__kernel_sinf+0x88>
 8007aee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007af2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007af6:	4770      	bx	lr
 8007af8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007afc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007b00:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007b04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007b08:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007b30 <__kernel_sinf+0x8c>
 8007b0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007b10:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	2f2ec9d3 	.word	0x2f2ec9d3
 8007b1c:	b2d72f34 	.word	0xb2d72f34
 8007b20:	3638ef1b 	.word	0x3638ef1b
 8007b24:	b9500d01 	.word	0xb9500d01
 8007b28:	3c088889 	.word	0x3c088889
 8007b2c:	be2aaaab 	.word	0xbe2aaaab
 8007b30:	3e2aaaab 	.word	0x3e2aaaab

08007b34 <fabsf>:
 8007b34:	ee10 3a10 	vmov	r3, s0
 8007b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	ee00 3a10 	vmov	s0, r3
 8007b40:	4770      	bx	lr
	...

08007b44 <floorf>:
 8007b44:	ee10 3a10 	vmov	r3, s0
 8007b48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007b4c:	3a7f      	subs	r2, #127	; 0x7f
 8007b4e:	2a16      	cmp	r2, #22
 8007b50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b54:	dc2a      	bgt.n	8007bac <floorf+0x68>
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	da11      	bge.n	8007b7e <floorf+0x3a>
 8007b5a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007bbc <floorf+0x78>
 8007b5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6a:	dd05      	ble.n	8007b78 <floorf+0x34>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	da23      	bge.n	8007bb8 <floorf+0x74>
 8007b70:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <floorf+0x7c>)
 8007b72:	2900      	cmp	r1, #0
 8007b74:	bf18      	it	ne
 8007b76:	4613      	movne	r3, r2
 8007b78:	ee00 3a10 	vmov	s0, r3
 8007b7c:	4770      	bx	lr
 8007b7e:	4911      	ldr	r1, [pc, #68]	; (8007bc4 <floorf+0x80>)
 8007b80:	4111      	asrs	r1, r2
 8007b82:	420b      	tst	r3, r1
 8007b84:	d0fa      	beq.n	8007b7c <floorf+0x38>
 8007b86:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007bbc <floorf+0x78>
 8007b8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b96:	ddef      	ble.n	8007b78 <floorf+0x34>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bfbe      	ittt	lt
 8007b9c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007ba0:	fa40 f202 	asrlt.w	r2, r0, r2
 8007ba4:	189b      	addlt	r3, r3, r2
 8007ba6:	ea23 0301 	bic.w	r3, r3, r1
 8007baa:	e7e5      	b.n	8007b78 <floorf+0x34>
 8007bac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007bb0:	d3e4      	bcc.n	8007b7c <floorf+0x38>
 8007bb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bb6:	4770      	bx	lr
 8007bb8:	2300      	movs	r3, #0
 8007bba:	e7dd      	b.n	8007b78 <floorf+0x34>
 8007bbc:	7149f2ca 	.word	0x7149f2ca
 8007bc0:	bf800000 	.word	0xbf800000
 8007bc4:	007fffff 	.word	0x007fffff

08007bc8 <scalbnf>:
 8007bc8:	ee10 3a10 	vmov	r3, s0
 8007bcc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007bd0:	d025      	beq.n	8007c1e <scalbnf+0x56>
 8007bd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007bd6:	d302      	bcc.n	8007bde <scalbnf+0x16>
 8007bd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bdc:	4770      	bx	lr
 8007bde:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007be2:	d122      	bne.n	8007c2a <scalbnf+0x62>
 8007be4:	4b2a      	ldr	r3, [pc, #168]	; (8007c90 <scalbnf+0xc8>)
 8007be6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007c94 <scalbnf+0xcc>
 8007bea:	4298      	cmp	r0, r3
 8007bec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007bf0:	db16      	blt.n	8007c20 <scalbnf+0x58>
 8007bf2:	ee10 3a10 	vmov	r3, s0
 8007bf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007bfa:	3a19      	subs	r2, #25
 8007bfc:	4402      	add	r2, r0
 8007bfe:	2afe      	cmp	r2, #254	; 0xfe
 8007c00:	dd15      	ble.n	8007c2e <scalbnf+0x66>
 8007c02:	ee10 3a10 	vmov	r3, s0
 8007c06:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007c98 <scalbnf+0xd0>
 8007c0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007c9c <scalbnf+0xd4>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	eeb0 7a67 	vmov.f32	s14, s15
 8007c14:	bfb8      	it	lt
 8007c16:	eef0 7a66 	vmovlt.f32	s15, s13
 8007c1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007c1e:	4770      	bx	lr
 8007c20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007ca0 <scalbnf+0xd8>
 8007c24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c28:	4770      	bx	lr
 8007c2a:	0dd2      	lsrs	r2, r2, #23
 8007c2c:	e7e6      	b.n	8007bfc <scalbnf+0x34>
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	dd06      	ble.n	8007c40 <scalbnf+0x78>
 8007c32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c3a:	ee00 3a10 	vmov	s0, r3
 8007c3e:	4770      	bx	lr
 8007c40:	f112 0f16 	cmn.w	r2, #22
 8007c44:	da1a      	bge.n	8007c7c <scalbnf+0xb4>
 8007c46:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c4a:	4298      	cmp	r0, r3
 8007c4c:	ee10 3a10 	vmov	r3, s0
 8007c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c54:	dd0a      	ble.n	8007c6c <scalbnf+0xa4>
 8007c56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007c98 <scalbnf+0xd0>
 8007c5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007c9c <scalbnf+0xd4>
 8007c5e:	eef0 7a40 	vmov.f32	s15, s0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bf18      	it	ne
 8007c66:	eeb0 0a47 	vmovne.f32	s0, s14
 8007c6a:	e7db      	b.n	8007c24 <scalbnf+0x5c>
 8007c6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007ca0 <scalbnf+0xd8>
 8007c70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007ca4 <scalbnf+0xdc>
 8007c74:	eef0 7a40 	vmov.f32	s15, s0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	e7f3      	b.n	8007c64 <scalbnf+0x9c>
 8007c7c:	3219      	adds	r2, #25
 8007c7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c86:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007ca8 <scalbnf+0xe0>
 8007c8a:	ee07 3a10 	vmov	s14, r3
 8007c8e:	e7c4      	b.n	8007c1a <scalbnf+0x52>
 8007c90:	ffff3cb0 	.word	0xffff3cb0
 8007c94:	4c000000 	.word	0x4c000000
 8007c98:	7149f2ca 	.word	0x7149f2ca
 8007c9c:	f149f2ca 	.word	0xf149f2ca
 8007ca0:	0da24260 	.word	0x0da24260
 8007ca4:	8da24260 	.word	0x8da24260
 8007ca8:	33000000 	.word	0x33000000

08007cac <_init>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	bf00      	nop
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr

08007cb8 <_fini>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	bf00      	nop
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr
=======
 80066d4:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <circular_buffer+0x15c>)
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	89fa      	ldrh	r2, [r7, #14]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d202      	bcs.n	80066e4 <circular_buffer+0x13c>
        bufferLength = bufferSize;
 80066de:	4a09      	ldr	r2, [pc, #36]	; (8006704 <circular_buffer+0x15c>)
 80066e0:	89fb      	ldrh	r3, [r7, #14]
 80066e2:	8013      	strh	r3, [r2, #0]
    }
    // Reset writeindex
    if (writeIndex == bufferSize) {
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <circular_buffer+0x160>)
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	89fa      	ldrh	r2, [r7, #14]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d102      	bne.n	80066f4 <circular_buffer+0x14c>
        writeIndex = 0;
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <circular_buffer+0x160>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	801a      	strh	r2, [r3, #0]
    }

    return bufferDoneFlag;
 80066f4:	4b08      	ldr	r3, [pc, #32]	; (8006718 <circular_buffer+0x170>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	2000021c 	.word	0x2000021c
 8006708:	2000021e 	.word	0x2000021e
 800670c:	20000220 	.word	0x20000220
 8006710:	20000222 	.word	0x20000222
 8006714:	20000224 	.word	0x20000224
 8006718:	20000225 	.word	0x20000225

0800671c <__errno>:
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <__errno+0x8>)
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000018 	.word	0x20000018

08006728 <__libc_init_array>:
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4d0d      	ldr	r5, [pc, #52]	; (8006760 <__libc_init_array+0x38>)
 800672c:	4c0d      	ldr	r4, [pc, #52]	; (8006764 <__libc_init_array+0x3c>)
 800672e:	1b64      	subs	r4, r4, r5
 8006730:	10a4      	asrs	r4, r4, #2
 8006732:	2600      	movs	r6, #0
 8006734:	42a6      	cmp	r6, r4
 8006736:	d109      	bne.n	800674c <__libc_init_array+0x24>
 8006738:	4d0b      	ldr	r5, [pc, #44]	; (8006768 <__libc_init_array+0x40>)
 800673a:	4c0c      	ldr	r4, [pc, #48]	; (800676c <__libc_init_array+0x44>)
 800673c:	f001 fae2 	bl	8007d04 <_init>
 8006740:	1b64      	subs	r4, r4, r5
 8006742:	10a4      	asrs	r4, r4, #2
 8006744:	2600      	movs	r6, #0
 8006746:	42a6      	cmp	r6, r4
 8006748:	d105      	bne.n	8006756 <__libc_init_array+0x2e>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006750:	4798      	blx	r3
 8006752:	3601      	adds	r6, #1
 8006754:	e7ee      	b.n	8006734 <__libc_init_array+0xc>
 8006756:	f855 3b04 	ldr.w	r3, [r5], #4
 800675a:	4798      	blx	r3
 800675c:	3601      	adds	r6, #1
 800675e:	e7f2      	b.n	8006746 <__libc_init_array+0x1e>
 8006760:	0800821c 	.word	0x0800821c
 8006764:	0800821c 	.word	0x0800821c
 8006768:	0800821c 	.word	0x0800821c
 800676c:	08008220 	.word	0x08008220

08006770 <memset>:
 8006770:	4402      	add	r2, r0
 8006772:	4603      	mov	r3, r0
 8006774:	4293      	cmp	r3, r2
 8006776:	d100      	bne.n	800677a <memset+0xa>
 8006778:	4770      	bx	lr
 800677a:	f803 1b01 	strb.w	r1, [r3], #1
 800677e:	e7f9      	b.n	8006774 <memset+0x4>

08006780 <siprintf>:
 8006780:	b40e      	push	{r1, r2, r3}
 8006782:	b500      	push	{lr}
 8006784:	b09c      	sub	sp, #112	; 0x70
 8006786:	ab1d      	add	r3, sp, #116	; 0x74
 8006788:	9002      	str	r0, [sp, #8]
 800678a:	9006      	str	r0, [sp, #24]
 800678c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006790:	4809      	ldr	r0, [pc, #36]	; (80067b8 <siprintf+0x38>)
 8006792:	9107      	str	r1, [sp, #28]
 8006794:	9104      	str	r1, [sp, #16]
 8006796:	4909      	ldr	r1, [pc, #36]	; (80067bc <siprintf+0x3c>)
 8006798:	f853 2b04 	ldr.w	r2, [r3], #4
 800679c:	9105      	str	r1, [sp, #20]
 800679e:	6800      	ldr	r0, [r0, #0]
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	a902      	add	r1, sp, #8
 80067a4:	f000 f868 	bl	8006878 <_svfiprintf_r>
 80067a8:	9b02      	ldr	r3, [sp, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	b01c      	add	sp, #112	; 0x70
 80067b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b4:	b003      	add	sp, #12
 80067b6:	4770      	bx	lr
 80067b8:	20000018 	.word	0x20000018
 80067bc:	ffff0208 	.word	0xffff0208

080067c0 <__ssputs_r>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	688e      	ldr	r6, [r1, #8]
 80067c6:	429e      	cmp	r6, r3
 80067c8:	4682      	mov	sl, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	4690      	mov	r8, r2
 80067ce:	461f      	mov	r7, r3
 80067d0:	d838      	bhi.n	8006844 <__ssputs_r+0x84>
 80067d2:	898a      	ldrh	r2, [r1, #12]
 80067d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067d8:	d032      	beq.n	8006840 <__ssputs_r+0x80>
 80067da:	6825      	ldr	r5, [r4, #0]
 80067dc:	6909      	ldr	r1, [r1, #16]
 80067de:	eba5 0901 	sub.w	r9, r5, r1
 80067e2:	6965      	ldr	r5, [r4, #20]
 80067e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067ec:	3301      	adds	r3, #1
 80067ee:	444b      	add	r3, r9
 80067f0:	106d      	asrs	r5, r5, #1
 80067f2:	429d      	cmp	r5, r3
 80067f4:	bf38      	it	cc
 80067f6:	461d      	movcc	r5, r3
 80067f8:	0553      	lsls	r3, r2, #21
 80067fa:	d531      	bpl.n	8006860 <__ssputs_r+0xa0>
 80067fc:	4629      	mov	r1, r5
 80067fe:	f000 fb47 	bl	8006e90 <_malloc_r>
 8006802:	4606      	mov	r6, r0
 8006804:	b950      	cbnz	r0, 800681c <__ssputs_r+0x5c>
 8006806:	230c      	movs	r3, #12
 8006808:	f8ca 3000 	str.w	r3, [sl]
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006812:	81a3      	strh	r3, [r4, #12]
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	6921      	ldr	r1, [r4, #16]
 800681e:	464a      	mov	r2, r9
 8006820:	f000 fabe 	bl	8006da0 <memcpy>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800682a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	6126      	str	r6, [r4, #16]
 8006832:	6165      	str	r5, [r4, #20]
 8006834:	444e      	add	r6, r9
 8006836:	eba5 0509 	sub.w	r5, r5, r9
 800683a:	6026      	str	r6, [r4, #0]
 800683c:	60a5      	str	r5, [r4, #8]
 800683e:	463e      	mov	r6, r7
 8006840:	42be      	cmp	r6, r7
 8006842:	d900      	bls.n	8006846 <__ssputs_r+0x86>
 8006844:	463e      	mov	r6, r7
 8006846:	4632      	mov	r2, r6
 8006848:	6820      	ldr	r0, [r4, #0]
 800684a:	4641      	mov	r1, r8
 800684c:	f000 fab6 	bl	8006dbc <memmove>
 8006850:	68a3      	ldr	r3, [r4, #8]
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	1b9b      	subs	r3, r3, r6
 8006856:	4432      	add	r2, r6
 8006858:	60a3      	str	r3, [r4, #8]
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	2000      	movs	r0, #0
 800685e:	e7db      	b.n	8006818 <__ssputs_r+0x58>
 8006860:	462a      	mov	r2, r5
 8006862:	f000 fb6f 	bl	8006f44 <_realloc_r>
 8006866:	4606      	mov	r6, r0
 8006868:	2800      	cmp	r0, #0
 800686a:	d1e1      	bne.n	8006830 <__ssputs_r+0x70>
 800686c:	6921      	ldr	r1, [r4, #16]
 800686e:	4650      	mov	r0, sl
 8006870:	f000 fabe 	bl	8006df0 <_free_r>
 8006874:	e7c7      	b.n	8006806 <__ssputs_r+0x46>
	...

08006878 <_svfiprintf_r>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	4698      	mov	r8, r3
 800687e:	898b      	ldrh	r3, [r1, #12]
 8006880:	061b      	lsls	r3, r3, #24
 8006882:	b09d      	sub	sp, #116	; 0x74
 8006884:	4607      	mov	r7, r0
 8006886:	460d      	mov	r5, r1
 8006888:	4614      	mov	r4, r2
 800688a:	d50e      	bpl.n	80068aa <_svfiprintf_r+0x32>
 800688c:	690b      	ldr	r3, [r1, #16]
 800688e:	b963      	cbnz	r3, 80068aa <_svfiprintf_r+0x32>
 8006890:	2140      	movs	r1, #64	; 0x40
 8006892:	f000 fafd 	bl	8006e90 <_malloc_r>
 8006896:	6028      	str	r0, [r5, #0]
 8006898:	6128      	str	r0, [r5, #16]
 800689a:	b920      	cbnz	r0, 80068a6 <_svfiprintf_r+0x2e>
 800689c:	230c      	movs	r3, #12
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	e0d1      	b.n	8006a4a <_svfiprintf_r+0x1d2>
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	616b      	str	r3, [r5, #20]
 80068aa:	2300      	movs	r3, #0
 80068ac:	9309      	str	r3, [sp, #36]	; 0x24
 80068ae:	2320      	movs	r3, #32
 80068b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80068b8:	2330      	movs	r3, #48	; 0x30
 80068ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a64 <_svfiprintf_r+0x1ec>
 80068be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c2:	f04f 0901 	mov.w	r9, #1
 80068c6:	4623      	mov	r3, r4
 80068c8:	469a      	mov	sl, r3
 80068ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ce:	b10a      	cbz	r2, 80068d4 <_svfiprintf_r+0x5c>
 80068d0:	2a25      	cmp	r2, #37	; 0x25
 80068d2:	d1f9      	bne.n	80068c8 <_svfiprintf_r+0x50>
 80068d4:	ebba 0b04 	subs.w	fp, sl, r4
 80068d8:	d00b      	beq.n	80068f2 <_svfiprintf_r+0x7a>
 80068da:	465b      	mov	r3, fp
 80068dc:	4622      	mov	r2, r4
 80068de:	4629      	mov	r1, r5
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff ff6d 	bl	80067c0 <__ssputs_r>
 80068e6:	3001      	adds	r0, #1
 80068e8:	f000 80aa 	beq.w	8006a40 <_svfiprintf_r+0x1c8>
 80068ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ee:	445a      	add	r2, fp
 80068f0:	9209      	str	r2, [sp, #36]	; 0x24
 80068f2:	f89a 3000 	ldrb.w	r3, [sl]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80a2 	beq.w	8006a40 <_svfiprintf_r+0x1c8>
 80068fc:	2300      	movs	r3, #0
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006906:	f10a 0a01 	add.w	sl, sl, #1
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	9307      	str	r3, [sp, #28]
 800690e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006912:	931a      	str	r3, [sp, #104]	; 0x68
 8006914:	4654      	mov	r4, sl
 8006916:	2205      	movs	r2, #5
 8006918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800691c:	4851      	ldr	r0, [pc, #324]	; (8006a64 <_svfiprintf_r+0x1ec>)
 800691e:	f7f9 fc7f 	bl	8000220 <memchr>
 8006922:	9a04      	ldr	r2, [sp, #16]
 8006924:	b9d8      	cbnz	r0, 800695e <_svfiprintf_r+0xe6>
 8006926:	06d0      	lsls	r0, r2, #27
 8006928:	bf44      	itt	mi
 800692a:	2320      	movmi	r3, #32
 800692c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006930:	0711      	lsls	r1, r2, #28
 8006932:	bf44      	itt	mi
 8006934:	232b      	movmi	r3, #43	; 0x2b
 8006936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800693a:	f89a 3000 	ldrb.w	r3, [sl]
 800693e:	2b2a      	cmp	r3, #42	; 0x2a
 8006940:	d015      	beq.n	800696e <_svfiprintf_r+0xf6>
 8006942:	9a07      	ldr	r2, [sp, #28]
 8006944:	4654      	mov	r4, sl
 8006946:	2000      	movs	r0, #0
 8006948:	f04f 0c0a 	mov.w	ip, #10
 800694c:	4621      	mov	r1, r4
 800694e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006952:	3b30      	subs	r3, #48	; 0x30
 8006954:	2b09      	cmp	r3, #9
 8006956:	d94e      	bls.n	80069f6 <_svfiprintf_r+0x17e>
 8006958:	b1b0      	cbz	r0, 8006988 <_svfiprintf_r+0x110>
 800695a:	9207      	str	r2, [sp, #28]
 800695c:	e014      	b.n	8006988 <_svfiprintf_r+0x110>
 800695e:	eba0 0308 	sub.w	r3, r0, r8
 8006962:	fa09 f303 	lsl.w	r3, r9, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	9304      	str	r3, [sp, #16]
 800696a:	46a2      	mov	sl, r4
 800696c:	e7d2      	b.n	8006914 <_svfiprintf_r+0x9c>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	1d19      	adds	r1, r3, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	9103      	str	r1, [sp, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	bfbb      	ittet	lt
 800697a:	425b      	neglt	r3, r3
 800697c:	f042 0202 	orrlt.w	r2, r2, #2
 8006980:	9307      	strge	r3, [sp, #28]
 8006982:	9307      	strlt	r3, [sp, #28]
 8006984:	bfb8      	it	lt
 8006986:	9204      	strlt	r2, [sp, #16]
 8006988:	7823      	ldrb	r3, [r4, #0]
 800698a:	2b2e      	cmp	r3, #46	; 0x2e
 800698c:	d10c      	bne.n	80069a8 <_svfiprintf_r+0x130>
 800698e:	7863      	ldrb	r3, [r4, #1]
 8006990:	2b2a      	cmp	r3, #42	; 0x2a
 8006992:	d135      	bne.n	8006a00 <_svfiprintf_r+0x188>
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	1d1a      	adds	r2, r3, #4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	9203      	str	r2, [sp, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	bfb8      	it	lt
 80069a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80069a4:	3402      	adds	r4, #2
 80069a6:	9305      	str	r3, [sp, #20]
 80069a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a74 <_svfiprintf_r+0x1fc>
 80069ac:	7821      	ldrb	r1, [r4, #0]
 80069ae:	2203      	movs	r2, #3
 80069b0:	4650      	mov	r0, sl
 80069b2:	f7f9 fc35 	bl	8000220 <memchr>
 80069b6:	b140      	cbz	r0, 80069ca <_svfiprintf_r+0x152>
 80069b8:	2340      	movs	r3, #64	; 0x40
 80069ba:	eba0 000a 	sub.w	r0, r0, sl
 80069be:	fa03 f000 	lsl.w	r0, r3, r0
 80069c2:	9b04      	ldr	r3, [sp, #16]
 80069c4:	4303      	orrs	r3, r0
 80069c6:	3401      	adds	r4, #1
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ce:	4826      	ldr	r0, [pc, #152]	; (8006a68 <_svfiprintf_r+0x1f0>)
 80069d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069d4:	2206      	movs	r2, #6
 80069d6:	f7f9 fc23 	bl	8000220 <memchr>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d038      	beq.n	8006a50 <_svfiprintf_r+0x1d8>
 80069de:	4b23      	ldr	r3, [pc, #140]	; (8006a6c <_svfiprintf_r+0x1f4>)
 80069e0:	bb1b      	cbnz	r3, 8006a2a <_svfiprintf_r+0x1b2>
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	3307      	adds	r3, #7
 80069e6:	f023 0307 	bic.w	r3, r3, #7
 80069ea:	3308      	adds	r3, #8
 80069ec:	9303      	str	r3, [sp, #12]
 80069ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f0:	4433      	add	r3, r6
 80069f2:	9309      	str	r3, [sp, #36]	; 0x24
 80069f4:	e767      	b.n	80068c6 <_svfiprintf_r+0x4e>
 80069f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069fa:	460c      	mov	r4, r1
 80069fc:	2001      	movs	r0, #1
 80069fe:	e7a5      	b.n	800694c <_svfiprintf_r+0xd4>
 8006a00:	2300      	movs	r3, #0
 8006a02:	3401      	adds	r4, #1
 8006a04:	9305      	str	r3, [sp, #20]
 8006a06:	4619      	mov	r1, r3
 8006a08:	f04f 0c0a 	mov.w	ip, #10
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a12:	3a30      	subs	r2, #48	; 0x30
 8006a14:	2a09      	cmp	r2, #9
 8006a16:	d903      	bls.n	8006a20 <_svfiprintf_r+0x1a8>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0c5      	beq.n	80069a8 <_svfiprintf_r+0x130>
 8006a1c:	9105      	str	r1, [sp, #20]
 8006a1e:	e7c3      	b.n	80069a8 <_svfiprintf_r+0x130>
 8006a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a24:	4604      	mov	r4, r0
 8006a26:	2301      	movs	r3, #1
 8006a28:	e7f0      	b.n	8006a0c <_svfiprintf_r+0x194>
 8006a2a:	ab03      	add	r3, sp, #12
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	462a      	mov	r2, r5
 8006a30:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <_svfiprintf_r+0x1f8>)
 8006a32:	a904      	add	r1, sp, #16
 8006a34:	4638      	mov	r0, r7
 8006a36:	f3af 8000 	nop.w
 8006a3a:	1c42      	adds	r2, r0, #1
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	d1d6      	bne.n	80069ee <_svfiprintf_r+0x176>
 8006a40:	89ab      	ldrh	r3, [r5, #12]
 8006a42:	065b      	lsls	r3, r3, #25
 8006a44:	f53f af2c 	bmi.w	80068a0 <_svfiprintf_r+0x28>
 8006a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a4a:	b01d      	add	sp, #116	; 0x74
 8006a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a50:	ab03      	add	r3, sp, #12
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	462a      	mov	r2, r5
 8006a56:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <_svfiprintf_r+0x1f8>)
 8006a58:	a904      	add	r1, sp, #16
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f000 f87a 	bl	8006b54 <_printf_i>
 8006a60:	e7eb      	b.n	8006a3a <_svfiprintf_r+0x1c2>
 8006a62:	bf00      	nop
 8006a64:	08007e10 	.word	0x08007e10
 8006a68:	08007e1a 	.word	0x08007e1a
 8006a6c:	00000000 	.word	0x00000000
 8006a70:	080067c1 	.word	0x080067c1
 8006a74:	08007e16 	.word	0x08007e16

08006a78 <_printf_common>:
 8006a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7c:	4616      	mov	r6, r2
 8006a7e:	4699      	mov	r9, r3
 8006a80:	688a      	ldr	r2, [r1, #8]
 8006a82:	690b      	ldr	r3, [r1, #16]
 8006a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	bfb8      	it	lt
 8006a8c:	4613      	movlt	r3, r2
 8006a8e:	6033      	str	r3, [r6, #0]
 8006a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a94:	4607      	mov	r7, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	b10a      	cbz	r2, 8006a9e <_printf_common+0x26>
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	6033      	str	r3, [r6, #0]
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	0699      	lsls	r1, r3, #26
 8006aa2:	bf42      	ittt	mi
 8006aa4:	6833      	ldrmi	r3, [r6, #0]
 8006aa6:	3302      	addmi	r3, #2
 8006aa8:	6033      	strmi	r3, [r6, #0]
 8006aaa:	6825      	ldr	r5, [r4, #0]
 8006aac:	f015 0506 	ands.w	r5, r5, #6
 8006ab0:	d106      	bne.n	8006ac0 <_printf_common+0x48>
 8006ab2:	f104 0a19 	add.w	sl, r4, #25
 8006ab6:	68e3      	ldr	r3, [r4, #12]
 8006ab8:	6832      	ldr	r2, [r6, #0]
 8006aba:	1a9b      	subs	r3, r3, r2
 8006abc:	42ab      	cmp	r3, r5
 8006abe:	dc26      	bgt.n	8006b0e <_printf_common+0x96>
 8006ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ac4:	1e13      	subs	r3, r2, #0
 8006ac6:	6822      	ldr	r2, [r4, #0]
 8006ac8:	bf18      	it	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	0692      	lsls	r2, r2, #26
 8006ace:	d42b      	bmi.n	8006b28 <_printf_common+0xb0>
 8006ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	47c0      	blx	r8
 8006ada:	3001      	adds	r0, #1
 8006adc:	d01e      	beq.n	8006b1c <_printf_common+0xa4>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	68e5      	ldr	r5, [r4, #12]
 8006ae2:	6832      	ldr	r2, [r6, #0]
 8006ae4:	f003 0306 	and.w	r3, r3, #6
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	bf08      	it	eq
 8006aec:	1aad      	subeq	r5, r5, r2
 8006aee:	68a3      	ldr	r3, [r4, #8]
 8006af0:	6922      	ldr	r2, [r4, #16]
 8006af2:	bf0c      	ite	eq
 8006af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006af8:	2500      	movne	r5, #0
 8006afa:	4293      	cmp	r3, r2
 8006afc:	bfc4      	itt	gt
 8006afe:	1a9b      	subgt	r3, r3, r2
 8006b00:	18ed      	addgt	r5, r5, r3
 8006b02:	2600      	movs	r6, #0
 8006b04:	341a      	adds	r4, #26
 8006b06:	42b5      	cmp	r5, r6
 8006b08:	d11a      	bne.n	8006b40 <_printf_common+0xc8>
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e008      	b.n	8006b20 <_printf_common+0xa8>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4652      	mov	r2, sl
 8006b12:	4649      	mov	r1, r9
 8006b14:	4638      	mov	r0, r7
 8006b16:	47c0      	blx	r8
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d103      	bne.n	8006b24 <_printf_common+0xac>
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b24:	3501      	adds	r5, #1
 8006b26:	e7c6      	b.n	8006ab6 <_printf_common+0x3e>
 8006b28:	18e1      	adds	r1, r4, r3
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	2030      	movs	r0, #48	; 0x30
 8006b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b32:	4422      	add	r2, r4
 8006b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b3c:	3302      	adds	r3, #2
 8006b3e:	e7c7      	b.n	8006ad0 <_printf_common+0x58>
 8006b40:	2301      	movs	r3, #1
 8006b42:	4622      	mov	r2, r4
 8006b44:	4649      	mov	r1, r9
 8006b46:	4638      	mov	r0, r7
 8006b48:	47c0      	blx	r8
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d0e6      	beq.n	8006b1c <_printf_common+0xa4>
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7d9      	b.n	8006b06 <_printf_common+0x8e>
	...

08006b54 <_printf_i>:
 8006b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	460c      	mov	r4, r1
 8006b5a:	4691      	mov	r9, r2
 8006b5c:	7e27      	ldrb	r7, [r4, #24]
 8006b5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b60:	2f78      	cmp	r7, #120	; 0x78
 8006b62:	4680      	mov	r8, r0
 8006b64:	469a      	mov	sl, r3
 8006b66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b6a:	d807      	bhi.n	8006b7c <_printf_i+0x28>
 8006b6c:	2f62      	cmp	r7, #98	; 0x62
 8006b6e:	d80a      	bhi.n	8006b86 <_printf_i+0x32>
 8006b70:	2f00      	cmp	r7, #0
 8006b72:	f000 80d8 	beq.w	8006d26 <_printf_i+0x1d2>
 8006b76:	2f58      	cmp	r7, #88	; 0x58
 8006b78:	f000 80a3 	beq.w	8006cc2 <_printf_i+0x16e>
 8006b7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b84:	e03a      	b.n	8006bfc <_printf_i+0xa8>
 8006b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b8a:	2b15      	cmp	r3, #21
 8006b8c:	d8f6      	bhi.n	8006b7c <_printf_i+0x28>
 8006b8e:	a001      	add	r0, pc, #4	; (adr r0, 8006b94 <_printf_i+0x40>)
 8006b90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b94:	08006bed 	.word	0x08006bed
 8006b98:	08006c01 	.word	0x08006c01
 8006b9c:	08006b7d 	.word	0x08006b7d
 8006ba0:	08006b7d 	.word	0x08006b7d
 8006ba4:	08006b7d 	.word	0x08006b7d
 8006ba8:	08006b7d 	.word	0x08006b7d
 8006bac:	08006c01 	.word	0x08006c01
 8006bb0:	08006b7d 	.word	0x08006b7d
 8006bb4:	08006b7d 	.word	0x08006b7d
 8006bb8:	08006b7d 	.word	0x08006b7d
 8006bbc:	08006b7d 	.word	0x08006b7d
 8006bc0:	08006d0d 	.word	0x08006d0d
 8006bc4:	08006c31 	.word	0x08006c31
 8006bc8:	08006cef 	.word	0x08006cef
 8006bcc:	08006b7d 	.word	0x08006b7d
 8006bd0:	08006b7d 	.word	0x08006b7d
 8006bd4:	08006d2f 	.word	0x08006d2f
 8006bd8:	08006b7d 	.word	0x08006b7d
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006b7d 	.word	0x08006b7d
 8006be4:	08006b7d 	.word	0x08006b7d
 8006be8:	08006cf7 	.word	0x08006cf7
 8006bec:	680b      	ldr	r3, [r1, #0]
 8006bee:	1d1a      	adds	r2, r3, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	600a      	str	r2, [r1, #0]
 8006bf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0a3      	b.n	8006d48 <_printf_i+0x1f4>
 8006c00:	6825      	ldr	r5, [r4, #0]
 8006c02:	6808      	ldr	r0, [r1, #0]
 8006c04:	062e      	lsls	r6, r5, #24
 8006c06:	f100 0304 	add.w	r3, r0, #4
 8006c0a:	d50a      	bpl.n	8006c22 <_printf_i+0xce>
 8006c0c:	6805      	ldr	r5, [r0, #0]
 8006c0e:	600b      	str	r3, [r1, #0]
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	da03      	bge.n	8006c1c <_printf_i+0xc8>
 8006c14:	232d      	movs	r3, #45	; 0x2d
 8006c16:	426d      	negs	r5, r5
 8006c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1c:	485e      	ldr	r0, [pc, #376]	; (8006d98 <_printf_i+0x244>)
 8006c1e:	230a      	movs	r3, #10
 8006c20:	e019      	b.n	8006c56 <_printf_i+0x102>
 8006c22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c26:	6805      	ldr	r5, [r0, #0]
 8006c28:	600b      	str	r3, [r1, #0]
 8006c2a:	bf18      	it	ne
 8006c2c:	b22d      	sxthne	r5, r5
 8006c2e:	e7ef      	b.n	8006c10 <_printf_i+0xbc>
 8006c30:	680b      	ldr	r3, [r1, #0]
 8006c32:	6825      	ldr	r5, [r4, #0]
 8006c34:	1d18      	adds	r0, r3, #4
 8006c36:	6008      	str	r0, [r1, #0]
 8006c38:	0628      	lsls	r0, r5, #24
 8006c3a:	d501      	bpl.n	8006c40 <_printf_i+0xec>
 8006c3c:	681d      	ldr	r5, [r3, #0]
 8006c3e:	e002      	b.n	8006c46 <_printf_i+0xf2>
 8006c40:	0669      	lsls	r1, r5, #25
 8006c42:	d5fb      	bpl.n	8006c3c <_printf_i+0xe8>
 8006c44:	881d      	ldrh	r5, [r3, #0]
 8006c46:	4854      	ldr	r0, [pc, #336]	; (8006d98 <_printf_i+0x244>)
 8006c48:	2f6f      	cmp	r7, #111	; 0x6f
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2308      	moveq	r3, #8
 8006c4e:	230a      	movne	r3, #10
 8006c50:	2100      	movs	r1, #0
 8006c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c56:	6866      	ldr	r6, [r4, #4]
 8006c58:	60a6      	str	r6, [r4, #8]
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	bfa2      	ittt	ge
 8006c5e:	6821      	ldrge	r1, [r4, #0]
 8006c60:	f021 0104 	bicge.w	r1, r1, #4
 8006c64:	6021      	strge	r1, [r4, #0]
 8006c66:	b90d      	cbnz	r5, 8006c6c <_printf_i+0x118>
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	d04d      	beq.n	8006d08 <_printf_i+0x1b4>
 8006c6c:	4616      	mov	r6, r2
 8006c6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c72:	fb03 5711 	mls	r7, r3, r1, r5
 8006c76:	5dc7      	ldrb	r7, [r0, r7]
 8006c78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c7c:	462f      	mov	r7, r5
 8006c7e:	42bb      	cmp	r3, r7
 8006c80:	460d      	mov	r5, r1
 8006c82:	d9f4      	bls.n	8006c6e <_printf_i+0x11a>
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d10b      	bne.n	8006ca0 <_printf_i+0x14c>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	07df      	lsls	r7, r3, #31
 8006c8c:	d508      	bpl.n	8006ca0 <_printf_i+0x14c>
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	6861      	ldr	r1, [r4, #4]
 8006c92:	4299      	cmp	r1, r3
 8006c94:	bfde      	ittt	le
 8006c96:	2330      	movle	r3, #48	; 0x30
 8006c98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ca0:	1b92      	subs	r2, r2, r6
 8006ca2:	6122      	str	r2, [r4, #16]
 8006ca4:	f8cd a000 	str.w	sl, [sp]
 8006ca8:	464b      	mov	r3, r9
 8006caa:	aa03      	add	r2, sp, #12
 8006cac:	4621      	mov	r1, r4
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff fee2 	bl	8006a78 <_printf_common>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d14c      	bne.n	8006d52 <_printf_i+0x1fe>
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	b004      	add	sp, #16
 8006cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc2:	4835      	ldr	r0, [pc, #212]	; (8006d98 <_printf_i+0x244>)
 8006cc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	680e      	ldr	r6, [r1, #0]
 8006ccc:	061f      	lsls	r7, r3, #24
 8006cce:	f856 5b04 	ldr.w	r5, [r6], #4
 8006cd2:	600e      	str	r6, [r1, #0]
 8006cd4:	d514      	bpl.n	8006d00 <_printf_i+0x1ac>
 8006cd6:	07d9      	lsls	r1, r3, #31
 8006cd8:	bf44      	itt	mi
 8006cda:	f043 0320 	orrmi.w	r3, r3, #32
 8006cde:	6023      	strmi	r3, [r4, #0]
 8006ce0:	b91d      	cbnz	r5, 8006cea <_printf_i+0x196>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	f023 0320 	bic.w	r3, r3, #32
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	2310      	movs	r3, #16
 8006cec:	e7b0      	b.n	8006c50 <_printf_i+0xfc>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	f043 0320 	orr.w	r3, r3, #32
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	2378      	movs	r3, #120	; 0x78
 8006cf8:	4828      	ldr	r0, [pc, #160]	; (8006d9c <_printf_i+0x248>)
 8006cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cfe:	e7e3      	b.n	8006cc8 <_printf_i+0x174>
 8006d00:	065e      	lsls	r6, r3, #25
 8006d02:	bf48      	it	mi
 8006d04:	b2ad      	uxthmi	r5, r5
 8006d06:	e7e6      	b.n	8006cd6 <_printf_i+0x182>
 8006d08:	4616      	mov	r6, r2
 8006d0a:	e7bb      	b.n	8006c84 <_printf_i+0x130>
 8006d0c:	680b      	ldr	r3, [r1, #0]
 8006d0e:	6826      	ldr	r6, [r4, #0]
 8006d10:	6960      	ldr	r0, [r4, #20]
 8006d12:	1d1d      	adds	r5, r3, #4
 8006d14:	600d      	str	r5, [r1, #0]
 8006d16:	0635      	lsls	r5, r6, #24
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	d501      	bpl.n	8006d20 <_printf_i+0x1cc>
 8006d1c:	6018      	str	r0, [r3, #0]
 8006d1e:	e002      	b.n	8006d26 <_printf_i+0x1d2>
 8006d20:	0671      	lsls	r1, r6, #25
 8006d22:	d5fb      	bpl.n	8006d1c <_printf_i+0x1c8>
 8006d24:	8018      	strh	r0, [r3, #0]
 8006d26:	2300      	movs	r3, #0
 8006d28:	6123      	str	r3, [r4, #16]
 8006d2a:	4616      	mov	r6, r2
 8006d2c:	e7ba      	b.n	8006ca4 <_printf_i+0x150>
 8006d2e:	680b      	ldr	r3, [r1, #0]
 8006d30:	1d1a      	adds	r2, r3, #4
 8006d32:	600a      	str	r2, [r1, #0]
 8006d34:	681e      	ldr	r6, [r3, #0]
 8006d36:	6862      	ldr	r2, [r4, #4]
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7f9 fa70 	bl	8000220 <memchr>
 8006d40:	b108      	cbz	r0, 8006d46 <_printf_i+0x1f2>
 8006d42:	1b80      	subs	r0, r0, r6
 8006d44:	6060      	str	r0, [r4, #4]
 8006d46:	6863      	ldr	r3, [r4, #4]
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d50:	e7a8      	b.n	8006ca4 <_printf_i+0x150>
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	4632      	mov	r2, r6
 8006d56:	4649      	mov	r1, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	47d0      	blx	sl
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d0ab      	beq.n	8006cb8 <_printf_i+0x164>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	079b      	lsls	r3, r3, #30
 8006d64:	d413      	bmi.n	8006d8e <_printf_i+0x23a>
 8006d66:	68e0      	ldr	r0, [r4, #12]
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	4298      	cmp	r0, r3
 8006d6c:	bfb8      	it	lt
 8006d6e:	4618      	movlt	r0, r3
 8006d70:	e7a4      	b.n	8006cbc <_printf_i+0x168>
 8006d72:	2301      	movs	r3, #1
 8006d74:	4632      	mov	r2, r6
 8006d76:	4649      	mov	r1, r9
 8006d78:	4640      	mov	r0, r8
 8006d7a:	47d0      	blx	sl
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d09b      	beq.n	8006cb8 <_printf_i+0x164>
 8006d80:	3501      	adds	r5, #1
 8006d82:	68e3      	ldr	r3, [r4, #12]
 8006d84:	9903      	ldr	r1, [sp, #12]
 8006d86:	1a5b      	subs	r3, r3, r1
 8006d88:	42ab      	cmp	r3, r5
 8006d8a:	dcf2      	bgt.n	8006d72 <_printf_i+0x21e>
 8006d8c:	e7eb      	b.n	8006d66 <_printf_i+0x212>
 8006d8e:	2500      	movs	r5, #0
 8006d90:	f104 0619 	add.w	r6, r4, #25
 8006d94:	e7f5      	b.n	8006d82 <_printf_i+0x22e>
 8006d96:	bf00      	nop
 8006d98:	08007e21 	.word	0x08007e21
 8006d9c:	08007e32 	.word	0x08007e32

08006da0 <memcpy>:
 8006da0:	440a      	add	r2, r1
 8006da2:	4291      	cmp	r1, r2
 8006da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da8:	d100      	bne.n	8006dac <memcpy+0xc>
 8006daa:	4770      	bx	lr
 8006dac:	b510      	push	{r4, lr}
 8006dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db6:	4291      	cmp	r1, r2
 8006db8:	d1f9      	bne.n	8006dae <memcpy+0xe>
 8006dba:	bd10      	pop	{r4, pc}

08006dbc <memmove>:
 8006dbc:	4288      	cmp	r0, r1
 8006dbe:	b510      	push	{r4, lr}
 8006dc0:	eb01 0402 	add.w	r4, r1, r2
 8006dc4:	d902      	bls.n	8006dcc <memmove+0x10>
 8006dc6:	4284      	cmp	r4, r0
 8006dc8:	4623      	mov	r3, r4
 8006dca:	d807      	bhi.n	8006ddc <memmove+0x20>
 8006dcc:	1e43      	subs	r3, r0, #1
 8006dce:	42a1      	cmp	r1, r4
 8006dd0:	d008      	beq.n	8006de4 <memmove+0x28>
 8006dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dda:	e7f8      	b.n	8006dce <memmove+0x12>
 8006ddc:	4402      	add	r2, r0
 8006dde:	4601      	mov	r1, r0
 8006de0:	428a      	cmp	r2, r1
 8006de2:	d100      	bne.n	8006de6 <memmove+0x2a>
 8006de4:	bd10      	pop	{r4, pc}
 8006de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dee:	e7f7      	b.n	8006de0 <memmove+0x24>

08006df0 <_free_r>:
 8006df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006df2:	2900      	cmp	r1, #0
 8006df4:	d048      	beq.n	8006e88 <_free_r+0x98>
 8006df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dfa:	9001      	str	r0, [sp, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f1a1 0404 	sub.w	r4, r1, #4
 8006e02:	bfb8      	it	lt
 8006e04:	18e4      	addlt	r4, r4, r3
 8006e06:	f000 f8d3 	bl	8006fb0 <__malloc_lock>
 8006e0a:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <_free_r+0x9c>)
 8006e0c:	9801      	ldr	r0, [sp, #4]
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	4615      	mov	r5, r2
 8006e12:	b933      	cbnz	r3, 8006e22 <_free_r+0x32>
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	6014      	str	r4, [r2, #0]
 8006e18:	b003      	add	sp, #12
 8006e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e1e:	f000 b8cd 	b.w	8006fbc <__malloc_unlock>
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	d90b      	bls.n	8006e3e <_free_r+0x4e>
 8006e26:	6821      	ldr	r1, [r4, #0]
 8006e28:	1862      	adds	r2, r4, r1
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	bf04      	itt	eq
 8006e2e:	681a      	ldreq	r2, [r3, #0]
 8006e30:	685b      	ldreq	r3, [r3, #4]
 8006e32:	6063      	str	r3, [r4, #4]
 8006e34:	bf04      	itt	eq
 8006e36:	1852      	addeq	r2, r2, r1
 8006e38:	6022      	streq	r2, [r4, #0]
 8006e3a:	602c      	str	r4, [r5, #0]
 8006e3c:	e7ec      	b.n	8006e18 <_free_r+0x28>
 8006e3e:	461a      	mov	r2, r3
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	b10b      	cbz	r3, 8006e48 <_free_r+0x58>
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	d9fa      	bls.n	8006e3e <_free_r+0x4e>
 8006e48:	6811      	ldr	r1, [r2, #0]
 8006e4a:	1855      	adds	r5, r2, r1
 8006e4c:	42a5      	cmp	r5, r4
 8006e4e:	d10b      	bne.n	8006e68 <_free_r+0x78>
 8006e50:	6824      	ldr	r4, [r4, #0]
 8006e52:	4421      	add	r1, r4
 8006e54:	1854      	adds	r4, r2, r1
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	6011      	str	r1, [r2, #0]
 8006e5a:	d1dd      	bne.n	8006e18 <_free_r+0x28>
 8006e5c:	681c      	ldr	r4, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	6053      	str	r3, [r2, #4]
 8006e62:	4421      	add	r1, r4
 8006e64:	6011      	str	r1, [r2, #0]
 8006e66:	e7d7      	b.n	8006e18 <_free_r+0x28>
 8006e68:	d902      	bls.n	8006e70 <_free_r+0x80>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	6003      	str	r3, [r0, #0]
 8006e6e:	e7d3      	b.n	8006e18 <_free_r+0x28>
 8006e70:	6825      	ldr	r5, [r4, #0]
 8006e72:	1961      	adds	r1, r4, r5
 8006e74:	428b      	cmp	r3, r1
 8006e76:	bf04      	itt	eq
 8006e78:	6819      	ldreq	r1, [r3, #0]
 8006e7a:	685b      	ldreq	r3, [r3, #4]
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	bf04      	itt	eq
 8006e80:	1949      	addeq	r1, r1, r5
 8006e82:	6021      	streq	r1, [r4, #0]
 8006e84:	6054      	str	r4, [r2, #4]
 8006e86:	e7c7      	b.n	8006e18 <_free_r+0x28>
 8006e88:	b003      	add	sp, #12
 8006e8a:	bd30      	pop	{r4, r5, pc}
 8006e8c:	20000228 	.word	0x20000228

08006e90 <_malloc_r>:
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	1ccd      	adds	r5, r1, #3
 8006e94:	f025 0503 	bic.w	r5, r5, #3
 8006e98:	3508      	adds	r5, #8
 8006e9a:	2d0c      	cmp	r5, #12
 8006e9c:	bf38      	it	cc
 8006e9e:	250c      	movcc	r5, #12
 8006ea0:	2d00      	cmp	r5, #0
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	db01      	blt.n	8006eaa <_malloc_r+0x1a>
 8006ea6:	42a9      	cmp	r1, r5
 8006ea8:	d903      	bls.n	8006eb2 <_malloc_r+0x22>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	6033      	str	r3, [r6, #0]
 8006eae:	2000      	movs	r0, #0
 8006eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb2:	f000 f87d 	bl	8006fb0 <__malloc_lock>
 8006eb6:	4921      	ldr	r1, [pc, #132]	; (8006f3c <_malloc_r+0xac>)
 8006eb8:	680a      	ldr	r2, [r1, #0]
 8006eba:	4614      	mov	r4, r2
 8006ebc:	b99c      	cbnz	r4, 8006ee6 <_malloc_r+0x56>
 8006ebe:	4f20      	ldr	r7, [pc, #128]	; (8006f40 <_malloc_r+0xb0>)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	b923      	cbnz	r3, 8006ece <_malloc_r+0x3e>
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f000 f862 	bl	8006f90 <_sbrk_r>
 8006ecc:	6038      	str	r0, [r7, #0]
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 f85d 	bl	8006f90 <_sbrk_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d123      	bne.n	8006f22 <_malloc_r+0x92>
 8006eda:	230c      	movs	r3, #12
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 f86c 	bl	8006fbc <__malloc_unlock>
 8006ee4:	e7e3      	b.n	8006eae <_malloc_r+0x1e>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	1b5b      	subs	r3, r3, r5
 8006eea:	d417      	bmi.n	8006f1c <_malloc_r+0x8c>
 8006eec:	2b0b      	cmp	r3, #11
 8006eee:	d903      	bls.n	8006ef8 <_malloc_r+0x68>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	441c      	add	r4, r3
 8006ef4:	6025      	str	r5, [r4, #0]
 8006ef6:	e004      	b.n	8006f02 <_malloc_r+0x72>
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	42a2      	cmp	r2, r4
 8006efc:	bf0c      	ite	eq
 8006efe:	600b      	streq	r3, [r1, #0]
 8006f00:	6053      	strne	r3, [r2, #4]
 8006f02:	4630      	mov	r0, r6
 8006f04:	f000 f85a 	bl	8006fbc <__malloc_unlock>
 8006f08:	f104 000b 	add.w	r0, r4, #11
 8006f0c:	1d23      	adds	r3, r4, #4
 8006f0e:	f020 0007 	bic.w	r0, r0, #7
 8006f12:	1ac2      	subs	r2, r0, r3
 8006f14:	d0cc      	beq.n	8006eb0 <_malloc_r+0x20>
 8006f16:	1a1b      	subs	r3, r3, r0
 8006f18:	50a3      	str	r3, [r4, r2]
 8006f1a:	e7c9      	b.n	8006eb0 <_malloc_r+0x20>
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	6864      	ldr	r4, [r4, #4]
 8006f20:	e7cc      	b.n	8006ebc <_malloc_r+0x2c>
 8006f22:	1cc4      	adds	r4, r0, #3
 8006f24:	f024 0403 	bic.w	r4, r4, #3
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	d0e3      	beq.n	8006ef4 <_malloc_r+0x64>
 8006f2c:	1a21      	subs	r1, r4, r0
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f82e 	bl	8006f90 <_sbrk_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d1dd      	bne.n	8006ef4 <_malloc_r+0x64>
 8006f38:	e7cf      	b.n	8006eda <_malloc_r+0x4a>
 8006f3a:	bf00      	nop
 8006f3c:	20000228 	.word	0x20000228
 8006f40:	2000022c 	.word	0x2000022c

08006f44 <_realloc_r>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	4607      	mov	r7, r0
 8006f48:	4614      	mov	r4, r2
 8006f4a:	460e      	mov	r6, r1
 8006f4c:	b921      	cbnz	r1, 8006f58 <_realloc_r+0x14>
 8006f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f52:	4611      	mov	r1, r2
 8006f54:	f7ff bf9c 	b.w	8006e90 <_malloc_r>
 8006f58:	b922      	cbnz	r2, 8006f64 <_realloc_r+0x20>
 8006f5a:	f7ff ff49 	bl	8006df0 <_free_r>
 8006f5e:	4625      	mov	r5, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f64:	f000 f830 	bl	8006fc8 <_malloc_usable_size_r>
 8006f68:	42a0      	cmp	r0, r4
 8006f6a:	d20f      	bcs.n	8006f8c <_realloc_r+0x48>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f7ff ff8e 	bl	8006e90 <_malloc_r>
 8006f74:	4605      	mov	r5, r0
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d0f2      	beq.n	8006f60 <_realloc_r+0x1c>
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	f7ff ff0f 	bl	8006da0 <memcpy>
 8006f82:	4631      	mov	r1, r6
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff ff33 	bl	8006df0 <_free_r>
 8006f8a:	e7e9      	b.n	8006f60 <_realloc_r+0x1c>
 8006f8c:	4635      	mov	r5, r6
 8006f8e:	e7e7      	b.n	8006f60 <_realloc_r+0x1c>

08006f90 <_sbrk_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d06      	ldr	r5, [pc, #24]	; (8006fac <_sbrk_r+0x1c>)
 8006f94:	2300      	movs	r3, #0
 8006f96:	4604      	mov	r4, r0
 8006f98:	4608      	mov	r0, r1
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	f7fb f9f2 	bl	8002384 <_sbrk>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_sbrk_r+0x1a>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_sbrk_r+0x1a>
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	20010e98 	.word	0x20010e98

08006fb0 <__malloc_lock>:
 8006fb0:	4801      	ldr	r0, [pc, #4]	; (8006fb8 <__malloc_lock+0x8>)
 8006fb2:	f000 b811 	b.w	8006fd8 <__retarget_lock_acquire_recursive>
 8006fb6:	bf00      	nop
 8006fb8:	20010ea0 	.word	0x20010ea0

08006fbc <__malloc_unlock>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__malloc_unlock+0x8>)
 8006fbe:	f000 b80c 	b.w	8006fda <__retarget_lock_release_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	20010ea0 	.word	0x20010ea0

08006fc8 <_malloc_usable_size_r>:
 8006fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fcc:	1f18      	subs	r0, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bfbc      	itt	lt
 8006fd2:	580b      	ldrlt	r3, [r1, r0]
 8006fd4:	18c0      	addlt	r0, r0, r3
 8006fd6:	4770      	bx	lr

08006fd8 <__retarget_lock_acquire_recursive>:
 8006fd8:	4770      	bx	lr

08006fda <__retarget_lock_release_recursive>:
 8006fda:	4770      	bx	lr

08006fdc <cosf>:
 8006fdc:	ee10 3a10 	vmov	r3, s0
 8006fe0:	b507      	push	{r0, r1, r2, lr}
 8006fe2:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <cosf+0x78>)
 8006fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	dc04      	bgt.n	8006ff6 <cosf+0x1a>
 8006fec:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8007058 <cosf+0x7c>
 8006ff0:	f000 fa9a 	bl	8007528 <__kernel_cosf>
 8006ff4:	e004      	b.n	8007000 <cosf+0x24>
 8006ff6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006ffa:	db04      	blt.n	8007006 <cosf+0x2a>
 8006ffc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007000:	b003      	add	sp, #12
 8007002:	f85d fb04 	ldr.w	pc, [sp], #4
 8007006:	4668      	mov	r0, sp
 8007008:	f000 f952 	bl	80072b0 <__ieee754_rem_pio2f>
 800700c:	f000 0003 	and.w	r0, r0, #3
 8007010:	2801      	cmp	r0, #1
 8007012:	d007      	beq.n	8007024 <cosf+0x48>
 8007014:	2802      	cmp	r0, #2
 8007016:	d00e      	beq.n	8007036 <cosf+0x5a>
 8007018:	b9a0      	cbnz	r0, 8007044 <cosf+0x68>
 800701a:	eddd 0a01 	vldr	s1, [sp, #4]
 800701e:	ed9d 0a00 	vldr	s0, [sp]
 8007022:	e7e5      	b.n	8006ff0 <cosf+0x14>
 8007024:	eddd 0a01 	vldr	s1, [sp, #4]
 8007028:	ed9d 0a00 	vldr	s0, [sp]
 800702c:	f000 fd66 	bl	8007afc <__kernel_sinf>
 8007030:	eeb1 0a40 	vneg.f32	s0, s0
 8007034:	e7e4      	b.n	8007000 <cosf+0x24>
 8007036:	eddd 0a01 	vldr	s1, [sp, #4]
 800703a:	ed9d 0a00 	vldr	s0, [sp]
 800703e:	f000 fa73 	bl	8007528 <__kernel_cosf>
 8007042:	e7f5      	b.n	8007030 <cosf+0x54>
 8007044:	eddd 0a01 	vldr	s1, [sp, #4]
 8007048:	ed9d 0a00 	vldr	s0, [sp]
 800704c:	2001      	movs	r0, #1
 800704e:	f000 fd55 	bl	8007afc <__kernel_sinf>
 8007052:	e7d5      	b.n	8007000 <cosf+0x24>
 8007054:	3f490fd8 	.word	0x3f490fd8
 8007058:	00000000 	.word	0x00000000

0800705c <sinf>:
 800705c:	ee10 3a10 	vmov	r3, s0
 8007060:	b507      	push	{r0, r1, r2, lr}
 8007062:	4a1d      	ldr	r2, [pc, #116]	; (80070d8 <sinf+0x7c>)
 8007064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007068:	4293      	cmp	r3, r2
 800706a:	dc05      	bgt.n	8007078 <sinf+0x1c>
 800706c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80070dc <sinf+0x80>
 8007070:	2000      	movs	r0, #0
 8007072:	f000 fd43 	bl	8007afc <__kernel_sinf>
 8007076:	e004      	b.n	8007082 <sinf+0x26>
 8007078:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800707c:	db04      	blt.n	8007088 <sinf+0x2c>
 800707e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007082:	b003      	add	sp, #12
 8007084:	f85d fb04 	ldr.w	pc, [sp], #4
 8007088:	4668      	mov	r0, sp
 800708a:	f000 f911 	bl	80072b0 <__ieee754_rem_pio2f>
 800708e:	f000 0003 	and.w	r0, r0, #3
 8007092:	2801      	cmp	r0, #1
 8007094:	d008      	beq.n	80070a8 <sinf+0x4c>
 8007096:	2802      	cmp	r0, #2
 8007098:	d00d      	beq.n	80070b6 <sinf+0x5a>
 800709a:	b9b0      	cbnz	r0, 80070ca <sinf+0x6e>
 800709c:	eddd 0a01 	vldr	s1, [sp, #4]
 80070a0:	ed9d 0a00 	vldr	s0, [sp]
 80070a4:	2001      	movs	r0, #1
 80070a6:	e7e4      	b.n	8007072 <sinf+0x16>
 80070a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80070ac:	ed9d 0a00 	vldr	s0, [sp]
 80070b0:	f000 fa3a 	bl	8007528 <__kernel_cosf>
 80070b4:	e7e5      	b.n	8007082 <sinf+0x26>
 80070b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80070ba:	ed9d 0a00 	vldr	s0, [sp]
 80070be:	2001      	movs	r0, #1
 80070c0:	f000 fd1c 	bl	8007afc <__kernel_sinf>
 80070c4:	eeb1 0a40 	vneg.f32	s0, s0
 80070c8:	e7db      	b.n	8007082 <sinf+0x26>
 80070ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80070ce:	ed9d 0a00 	vldr	s0, [sp]
 80070d2:	f000 fa29 	bl	8007528 <__kernel_cosf>
 80070d6:	e7f5      	b.n	80070c4 <sinf+0x68>
 80070d8:	3f490fd8 	.word	0x3f490fd8
 80070dc:	00000000 	.word	0x00000000

080070e0 <sqrt>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	ed2d 8b02 	vpush	{d8}
 80070e6:	ec55 4b10 	vmov	r4, r5, d0
 80070ea:	f000 f82d 	bl	8007148 <__ieee754_sqrt>
 80070ee:	4b15      	ldr	r3, [pc, #84]	; (8007144 <sqrt+0x64>)
 80070f0:	eeb0 8a40 	vmov.f32	s16, s0
 80070f4:	eef0 8a60 	vmov.f32	s17, s1
 80070f8:	f993 3000 	ldrsb.w	r3, [r3]
 80070fc:	3301      	adds	r3, #1
 80070fe:	d019      	beq.n	8007134 <sqrt+0x54>
 8007100:	4622      	mov	r2, r4
 8007102:	462b      	mov	r3, r5
 8007104:	4620      	mov	r0, r4
 8007106:	4629      	mov	r1, r5
 8007108:	f7f9 fd30 	bl	8000b6c <__aeabi_dcmpun>
 800710c:	b990      	cbnz	r0, 8007134 <sqrt+0x54>
 800710e:	2200      	movs	r2, #0
 8007110:	2300      	movs	r3, #0
 8007112:	4620      	mov	r0, r4
 8007114:	4629      	mov	r1, r5
 8007116:	f7f9 fd01 	bl	8000b1c <__aeabi_dcmplt>
 800711a:	b158      	cbz	r0, 8007134 <sqrt+0x54>
 800711c:	f7ff fafe 	bl	800671c <__errno>
 8007120:	2321      	movs	r3, #33	; 0x21
 8007122:	6003      	str	r3, [r0, #0]
 8007124:	2200      	movs	r2, #0
 8007126:	2300      	movs	r3, #0
 8007128:	4610      	mov	r0, r2
 800712a:	4619      	mov	r1, r3
 800712c:	f7f9 fbae 	bl	800088c <__aeabi_ddiv>
 8007130:	ec41 0b18 	vmov	d8, r0, r1
 8007134:	eeb0 0a48 	vmov.f32	s0, s16
 8007138:	eef0 0a68 	vmov.f32	s1, s17
 800713c:	ecbd 8b02 	vpop	{d8}
 8007140:	bd38      	pop	{r3, r4, r5, pc}
 8007142:	bf00      	nop
 8007144:	2000007c 	.word	0x2000007c

08007148 <__ieee754_sqrt>:
 8007148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714c:	ec55 4b10 	vmov	r4, r5, d0
 8007150:	4e56      	ldr	r6, [pc, #344]	; (80072ac <__ieee754_sqrt+0x164>)
 8007152:	43ae      	bics	r6, r5
 8007154:	ee10 0a10 	vmov	r0, s0
 8007158:	ee10 3a10 	vmov	r3, s0
 800715c:	4629      	mov	r1, r5
 800715e:	462a      	mov	r2, r5
 8007160:	d110      	bne.n	8007184 <__ieee754_sqrt+0x3c>
 8007162:	ee10 2a10 	vmov	r2, s0
 8007166:	462b      	mov	r3, r5
 8007168:	f7f9 fa66 	bl	8000638 <__aeabi_dmul>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 f8aa 	bl	80002cc <__adddf3>
 8007178:	4604      	mov	r4, r0
 800717a:	460d      	mov	r5, r1
 800717c:	ec45 4b10 	vmov	d0, r4, r5
 8007180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007184:	2d00      	cmp	r5, #0
 8007186:	dc10      	bgt.n	80071aa <__ieee754_sqrt+0x62>
 8007188:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800718c:	4330      	orrs	r0, r6
 800718e:	d0f5      	beq.n	800717c <__ieee754_sqrt+0x34>
 8007190:	b15d      	cbz	r5, 80071aa <__ieee754_sqrt+0x62>
 8007192:	ee10 2a10 	vmov	r2, s0
 8007196:	462b      	mov	r3, r5
 8007198:	ee10 0a10 	vmov	r0, s0
 800719c:	f7f9 f894 	bl	80002c8 <__aeabi_dsub>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	f7f9 fb72 	bl	800088c <__aeabi_ddiv>
 80071a8:	e7e6      	b.n	8007178 <__ieee754_sqrt+0x30>
 80071aa:	1509      	asrs	r1, r1, #20
 80071ac:	d076      	beq.n	800729c <__ieee754_sqrt+0x154>
 80071ae:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80071b2:	07ce      	lsls	r6, r1, #31
 80071b4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80071b8:	bf5e      	ittt	pl
 80071ba:	0fda      	lsrpl	r2, r3, #31
 80071bc:	005b      	lslpl	r3, r3, #1
 80071be:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80071c2:	0fda      	lsrs	r2, r3, #31
 80071c4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80071c8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80071cc:	2000      	movs	r0, #0
 80071ce:	106d      	asrs	r5, r5, #1
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	f04f 0e16 	mov.w	lr, #22
 80071d6:	4684      	mov	ip, r0
 80071d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071dc:	eb0c 0401 	add.w	r4, ip, r1
 80071e0:	4294      	cmp	r4, r2
 80071e2:	bfde      	ittt	le
 80071e4:	1b12      	suble	r2, r2, r4
 80071e6:	eb04 0c01 	addle.w	ip, r4, r1
 80071ea:	1840      	addle	r0, r0, r1
 80071ec:	0052      	lsls	r2, r2, #1
 80071ee:	f1be 0e01 	subs.w	lr, lr, #1
 80071f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80071f6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80071fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071fe:	d1ed      	bne.n	80071dc <__ieee754_sqrt+0x94>
 8007200:	4671      	mov	r1, lr
 8007202:	2720      	movs	r7, #32
 8007204:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007208:	4562      	cmp	r2, ip
 800720a:	eb04 060e 	add.w	r6, r4, lr
 800720e:	dc02      	bgt.n	8007216 <__ieee754_sqrt+0xce>
 8007210:	d113      	bne.n	800723a <__ieee754_sqrt+0xf2>
 8007212:	429e      	cmp	r6, r3
 8007214:	d811      	bhi.n	800723a <__ieee754_sqrt+0xf2>
 8007216:	2e00      	cmp	r6, #0
 8007218:	eb06 0e04 	add.w	lr, r6, r4
 800721c:	da43      	bge.n	80072a6 <__ieee754_sqrt+0x15e>
 800721e:	f1be 0f00 	cmp.w	lr, #0
 8007222:	db40      	blt.n	80072a6 <__ieee754_sqrt+0x15e>
 8007224:	f10c 0801 	add.w	r8, ip, #1
 8007228:	eba2 020c 	sub.w	r2, r2, ip
 800722c:	429e      	cmp	r6, r3
 800722e:	bf88      	it	hi
 8007230:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007234:	1b9b      	subs	r3, r3, r6
 8007236:	4421      	add	r1, r4
 8007238:	46c4      	mov	ip, r8
 800723a:	0052      	lsls	r2, r2, #1
 800723c:	3f01      	subs	r7, #1
 800723e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007242:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007246:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800724a:	d1dd      	bne.n	8007208 <__ieee754_sqrt+0xc0>
 800724c:	4313      	orrs	r3, r2
 800724e:	d006      	beq.n	800725e <__ieee754_sqrt+0x116>
 8007250:	1c4c      	adds	r4, r1, #1
 8007252:	bf13      	iteet	ne
 8007254:	3101      	addne	r1, #1
 8007256:	3001      	addeq	r0, #1
 8007258:	4639      	moveq	r1, r7
 800725a:	f021 0101 	bicne.w	r1, r1, #1
 800725e:	1043      	asrs	r3, r0, #1
 8007260:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007264:	0849      	lsrs	r1, r1, #1
 8007266:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800726a:	07c2      	lsls	r2, r0, #31
 800726c:	bf48      	it	mi
 800726e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007272:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007276:	460c      	mov	r4, r1
 8007278:	463d      	mov	r5, r7
 800727a:	e77f      	b.n	800717c <__ieee754_sqrt+0x34>
 800727c:	0ada      	lsrs	r2, r3, #11
 800727e:	3815      	subs	r0, #21
 8007280:	055b      	lsls	r3, r3, #21
 8007282:	2a00      	cmp	r2, #0
 8007284:	d0fa      	beq.n	800727c <__ieee754_sqrt+0x134>
 8007286:	02d7      	lsls	r7, r2, #11
 8007288:	d50a      	bpl.n	80072a0 <__ieee754_sqrt+0x158>
 800728a:	f1c1 0420 	rsb	r4, r1, #32
 800728e:	fa23 f404 	lsr.w	r4, r3, r4
 8007292:	1e4d      	subs	r5, r1, #1
 8007294:	408b      	lsls	r3, r1
 8007296:	4322      	orrs	r2, r4
 8007298:	1b41      	subs	r1, r0, r5
 800729a:	e788      	b.n	80071ae <__ieee754_sqrt+0x66>
 800729c:	4608      	mov	r0, r1
 800729e:	e7f0      	b.n	8007282 <__ieee754_sqrt+0x13a>
 80072a0:	0052      	lsls	r2, r2, #1
 80072a2:	3101      	adds	r1, #1
 80072a4:	e7ef      	b.n	8007286 <__ieee754_sqrt+0x13e>
 80072a6:	46e0      	mov	r8, ip
 80072a8:	e7be      	b.n	8007228 <__ieee754_sqrt+0xe0>
 80072aa:	bf00      	nop
 80072ac:	7ff00000 	.word	0x7ff00000

080072b0 <__ieee754_rem_pio2f>:
 80072b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b2:	ee10 6a10 	vmov	r6, s0
 80072b6:	4b8e      	ldr	r3, [pc, #568]	; (80074f0 <__ieee754_rem_pio2f+0x240>)
 80072b8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80072bc:	429d      	cmp	r5, r3
 80072be:	b087      	sub	sp, #28
 80072c0:	eef0 7a40 	vmov.f32	s15, s0
 80072c4:	4604      	mov	r4, r0
 80072c6:	dc05      	bgt.n	80072d4 <__ieee754_rem_pio2f+0x24>
 80072c8:	2300      	movs	r3, #0
 80072ca:	ed80 0a00 	vstr	s0, [r0]
 80072ce:	6043      	str	r3, [r0, #4]
 80072d0:	2000      	movs	r0, #0
 80072d2:	e01a      	b.n	800730a <__ieee754_rem_pio2f+0x5a>
 80072d4:	4b87      	ldr	r3, [pc, #540]	; (80074f4 <__ieee754_rem_pio2f+0x244>)
 80072d6:	429d      	cmp	r5, r3
 80072d8:	dc46      	bgt.n	8007368 <__ieee754_rem_pio2f+0xb8>
 80072da:	2e00      	cmp	r6, #0
 80072dc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80074f8 <__ieee754_rem_pio2f+0x248>
 80072e0:	4b86      	ldr	r3, [pc, #536]	; (80074fc <__ieee754_rem_pio2f+0x24c>)
 80072e2:	f025 050f 	bic.w	r5, r5, #15
 80072e6:	dd1f      	ble.n	8007328 <__ieee754_rem_pio2f+0x78>
 80072e8:	429d      	cmp	r5, r3
 80072ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072ee:	d00e      	beq.n	800730e <__ieee754_rem_pio2f+0x5e>
 80072f0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007500 <__ieee754_rem_pio2f+0x250>
 80072f4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80072f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072fc:	ed80 0a00 	vstr	s0, [r0]
 8007300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007304:	2001      	movs	r0, #1
 8007306:	edc4 7a01 	vstr	s15, [r4, #4]
 800730a:	b007      	add	sp, #28
 800730c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007504 <__ieee754_rem_pio2f+0x254>
 8007312:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007508 <__ieee754_rem_pio2f+0x258>
 8007316:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800731a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800731e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007322:	edc0 6a00 	vstr	s13, [r0]
 8007326:	e7eb      	b.n	8007300 <__ieee754_rem_pio2f+0x50>
 8007328:	429d      	cmp	r5, r3
 800732a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800732e:	d00e      	beq.n	800734e <__ieee754_rem_pio2f+0x9e>
 8007330:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007500 <__ieee754_rem_pio2f+0x250>
 8007334:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007338:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800733c:	ed80 0a00 	vstr	s0, [r0]
 8007340:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	edc4 7a01 	vstr	s15, [r4, #4]
 800734c:	e7dd      	b.n	800730a <__ieee754_rem_pio2f+0x5a>
 800734e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007504 <__ieee754_rem_pio2f+0x254>
 8007352:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007508 <__ieee754_rem_pio2f+0x258>
 8007356:	ee77 7a80 	vadd.f32	s15, s15, s0
 800735a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800735e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007362:	edc0 6a00 	vstr	s13, [r0]
 8007366:	e7eb      	b.n	8007340 <__ieee754_rem_pio2f+0x90>
 8007368:	4b68      	ldr	r3, [pc, #416]	; (800750c <__ieee754_rem_pio2f+0x25c>)
 800736a:	429d      	cmp	r5, r3
 800736c:	dc72      	bgt.n	8007454 <__ieee754_rem_pio2f+0x1a4>
 800736e:	f000 fc0d 	bl	8007b8c <fabsf>
 8007372:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007510 <__ieee754_rem_pio2f+0x260>
 8007376:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800737a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800737e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007386:	ee17 0a90 	vmov	r0, s15
 800738a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80074f8 <__ieee754_rem_pio2f+0x248>
 800738e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007392:	281f      	cmp	r0, #31
 8007394:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007500 <__ieee754_rem_pio2f+0x250>
 8007398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739c:	eeb1 6a47 	vneg.f32	s12, s14
 80073a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80073a4:	ee16 2a90 	vmov	r2, s13
 80073a8:	dc1c      	bgt.n	80073e4 <__ieee754_rem_pio2f+0x134>
 80073aa:	495a      	ldr	r1, [pc, #360]	; (8007514 <__ieee754_rem_pio2f+0x264>)
 80073ac:	1e47      	subs	r7, r0, #1
 80073ae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80073b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80073b6:	428b      	cmp	r3, r1
 80073b8:	d014      	beq.n	80073e4 <__ieee754_rem_pio2f+0x134>
 80073ba:	6022      	str	r2, [r4, #0]
 80073bc:	ed94 7a00 	vldr	s14, [r4]
 80073c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80073c4:	2e00      	cmp	r6, #0
 80073c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80073ca:	ed84 0a01 	vstr	s0, [r4, #4]
 80073ce:	da9c      	bge.n	800730a <__ieee754_rem_pio2f+0x5a>
 80073d0:	eeb1 7a47 	vneg.f32	s14, s14
 80073d4:	eeb1 0a40 	vneg.f32	s0, s0
 80073d8:	ed84 7a00 	vstr	s14, [r4]
 80073dc:	ed84 0a01 	vstr	s0, [r4, #4]
 80073e0:	4240      	negs	r0, r0
 80073e2:	e792      	b.n	800730a <__ieee754_rem_pio2f+0x5a>
 80073e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80073e8:	15eb      	asrs	r3, r5, #23
 80073ea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80073ee:	2d08      	cmp	r5, #8
 80073f0:	dde3      	ble.n	80073ba <__ieee754_rem_pio2f+0x10a>
 80073f2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007504 <__ieee754_rem_pio2f+0x254>
 80073f6:	eef0 6a40 	vmov.f32	s13, s0
 80073fa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80073fe:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007402:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007406:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007508 <__ieee754_rem_pio2f+0x258>
 800740a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800740e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007412:	eef0 7a40 	vmov.f32	s15, s0
 8007416:	ee15 2a90 	vmov	r2, s11
 800741a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800741e:	1a5b      	subs	r3, r3, r1
 8007420:	2b19      	cmp	r3, #25
 8007422:	dc04      	bgt.n	800742e <__ieee754_rem_pio2f+0x17e>
 8007424:	edc4 5a00 	vstr	s11, [r4]
 8007428:	eeb0 0a66 	vmov.f32	s0, s13
 800742c:	e7c6      	b.n	80073bc <__ieee754_rem_pio2f+0x10c>
 800742e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007518 <__ieee754_rem_pio2f+0x268>
 8007432:	eeb0 0a66 	vmov.f32	s0, s13
 8007436:	eea6 0a25 	vfma.f32	s0, s12, s11
 800743a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800743e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800751c <__ieee754_rem_pio2f+0x26c>
 8007442:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007446:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800744a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800744e:	ed84 7a00 	vstr	s14, [r4]
 8007452:	e7b3      	b.n	80073bc <__ieee754_rem_pio2f+0x10c>
 8007454:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007458:	db06      	blt.n	8007468 <__ieee754_rem_pio2f+0x1b8>
 800745a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800745e:	edc0 7a01 	vstr	s15, [r0, #4]
 8007462:	edc0 7a00 	vstr	s15, [r0]
 8007466:	e733      	b.n	80072d0 <__ieee754_rem_pio2f+0x20>
 8007468:	15ea      	asrs	r2, r5, #23
 800746a:	3a86      	subs	r2, #134	; 0x86
 800746c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007478:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007520 <__ieee754_rem_pio2f+0x270>
 800747c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007484:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007488:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800748c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007490:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007494:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007498:	ed8d 7a04 	vstr	s14, [sp, #16]
 800749c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80074a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a8:	edcd 7a05 	vstr	s15, [sp, #20]
 80074ac:	d11e      	bne.n	80074ec <__ieee754_rem_pio2f+0x23c>
 80074ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80074b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b6:	bf14      	ite	ne
 80074b8:	2302      	movne	r3, #2
 80074ba:	2301      	moveq	r3, #1
 80074bc:	4919      	ldr	r1, [pc, #100]	; (8007524 <__ieee754_rem_pio2f+0x274>)
 80074be:	9101      	str	r1, [sp, #4]
 80074c0:	2102      	movs	r1, #2
 80074c2:	9100      	str	r1, [sp, #0]
 80074c4:	a803      	add	r0, sp, #12
 80074c6:	4621      	mov	r1, r4
 80074c8:	f000 f88e 	bl	80075e8 <__kernel_rem_pio2f>
 80074cc:	2e00      	cmp	r6, #0
 80074ce:	f6bf af1c 	bge.w	800730a <__ieee754_rem_pio2f+0x5a>
 80074d2:	edd4 7a00 	vldr	s15, [r4]
 80074d6:	eef1 7a67 	vneg.f32	s15, s15
 80074da:	edc4 7a00 	vstr	s15, [r4]
 80074de:	edd4 7a01 	vldr	s15, [r4, #4]
 80074e2:	eef1 7a67 	vneg.f32	s15, s15
 80074e6:	edc4 7a01 	vstr	s15, [r4, #4]
 80074ea:	e779      	b.n	80073e0 <__ieee754_rem_pio2f+0x130>
 80074ec:	2303      	movs	r3, #3
 80074ee:	e7e5      	b.n	80074bc <__ieee754_rem_pio2f+0x20c>
 80074f0:	3f490fd8 	.word	0x3f490fd8
 80074f4:	4016cbe3 	.word	0x4016cbe3
 80074f8:	3fc90f80 	.word	0x3fc90f80
 80074fc:	3fc90fd0 	.word	0x3fc90fd0
 8007500:	37354443 	.word	0x37354443
 8007504:	37354400 	.word	0x37354400
 8007508:	2e85a308 	.word	0x2e85a308
 800750c:	43490f80 	.word	0x43490f80
 8007510:	3f22f984 	.word	0x3f22f984
 8007514:	08007e44 	.word	0x08007e44
 8007518:	2e85a300 	.word	0x2e85a300
 800751c:	248d3132 	.word	0x248d3132
 8007520:	43800000 	.word	0x43800000
 8007524:	08007ec4 	.word	0x08007ec4

08007528 <__kernel_cosf>:
 8007528:	ee10 3a10 	vmov	r3, s0
 800752c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007530:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007534:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007538:	da05      	bge.n	8007546 <__kernel_cosf+0x1e>
 800753a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800753e:	ee17 2a90 	vmov	r2, s15
 8007542:	2a00      	cmp	r2, #0
 8007544:	d03d      	beq.n	80075c2 <__kernel_cosf+0x9a>
 8007546:	ee60 5a00 	vmul.f32	s11, s0, s0
 800754a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80075c8 <__kernel_cosf+0xa0>
 800754e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80075cc <__kernel_cosf+0xa4>
 8007552:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80075d0 <__kernel_cosf+0xa8>
 8007556:	4a1f      	ldr	r2, [pc, #124]	; (80075d4 <__kernel_cosf+0xac>)
 8007558:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800755c:	4293      	cmp	r3, r2
 800755e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80075d8 <__kernel_cosf+0xb0>
 8007562:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007566:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80075dc <__kernel_cosf+0xb4>
 800756a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800756e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80075e0 <__kernel_cosf+0xb8>
 8007572:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007576:	eeb0 7a66 	vmov.f32	s14, s13
 800757a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800757e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007582:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007586:	ee67 6a25 	vmul.f32	s13, s14, s11
 800758a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800758e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007592:	dc04      	bgt.n	800759e <__kernel_cosf+0x76>
 8007594:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007598:	ee36 0a47 	vsub.f32	s0, s12, s14
 800759c:	4770      	bx	lr
 800759e:	4a11      	ldr	r2, [pc, #68]	; (80075e4 <__kernel_cosf+0xbc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	bfda      	itte	le
 80075a4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80075a8:	ee06 3a90 	vmovle	s13, r3
 80075ac:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80075b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075b4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80075b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80075c0:	4770      	bx	lr
 80075c2:	eeb0 0a46 	vmov.f32	s0, s12
 80075c6:	4770      	bx	lr
 80075c8:	ad47d74e 	.word	0xad47d74e
 80075cc:	310f74f6 	.word	0x310f74f6
 80075d0:	3d2aaaab 	.word	0x3d2aaaab
 80075d4:	3e999999 	.word	0x3e999999
 80075d8:	b493f27c 	.word	0xb493f27c
 80075dc:	37d00d01 	.word	0x37d00d01
 80075e0:	bab60b61 	.word	0xbab60b61
 80075e4:	3f480000 	.word	0x3f480000

080075e8 <__kernel_rem_pio2f>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	ed2d 8b04 	vpush	{d8-d9}
 80075f0:	b0d7      	sub	sp, #348	; 0x15c
 80075f2:	4616      	mov	r6, r2
 80075f4:	4698      	mov	r8, r3
 80075f6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80075f8:	4bbb      	ldr	r3, [pc, #748]	; (80078e8 <__kernel_rem_pio2f+0x300>)
 80075fa:	9001      	str	r0, [sp, #4]
 80075fc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007600:	1d33      	adds	r3, r6, #4
 8007602:	460d      	mov	r5, r1
 8007604:	f108 39ff 	add.w	r9, r8, #4294967295
 8007608:	db29      	blt.n	800765e <__kernel_rem_pio2f+0x76>
 800760a:	1ef1      	subs	r1, r6, #3
 800760c:	bf48      	it	mi
 800760e:	1d31      	addmi	r1, r6, #4
 8007610:	10c9      	asrs	r1, r1, #3
 8007612:	1c4c      	adds	r4, r1, #1
 8007614:	00e3      	lsls	r3, r4, #3
 8007616:	9302      	str	r3, [sp, #8]
 8007618:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800761a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80078f8 <__kernel_rem_pio2f+0x310>
 800761e:	eba1 0009 	sub.w	r0, r1, r9
 8007622:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007626:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800762a:	eb07 0c09 	add.w	ip, r7, r9
 800762e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8007632:	2300      	movs	r3, #0
 8007634:	4563      	cmp	r3, ip
 8007636:	dd14      	ble.n	8007662 <__kernel_rem_pio2f+0x7a>
 8007638:	ab1a      	add	r3, sp, #104	; 0x68
 800763a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800763e:	46cc      	mov	ip, r9
 8007640:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007644:	f1c8 0b01 	rsb	fp, r8, #1
 8007648:	eb0b 020c 	add.w	r2, fp, ip
 800764c:	4297      	cmp	r7, r2
 800764e:	db27      	blt.n	80076a0 <__kernel_rem_pio2f+0xb8>
 8007650:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007654:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80078f8 <__kernel_rem_pio2f+0x310>
 8007658:	4618      	mov	r0, r3
 800765a:	2200      	movs	r2, #0
 800765c:	e016      	b.n	800768c <__kernel_rem_pio2f+0xa4>
 800765e:	2100      	movs	r1, #0
 8007660:	e7d7      	b.n	8007612 <__kernel_rem_pio2f+0x2a>
 8007662:	42d8      	cmn	r0, r3
 8007664:	bf5d      	ittte	pl
 8007666:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800766a:	ee07 2a90 	vmovpl	s15, r2
 800766e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007672:	eef0 7a47 	vmovmi.f32	s15, s14
 8007676:	ecea 7a01 	vstmia	sl!, {s15}
 800767a:	3301      	adds	r3, #1
 800767c:	e7da      	b.n	8007634 <__kernel_rem_pio2f+0x4c>
 800767e:	ecfe 6a01 	vldmia	lr!, {s13}
 8007682:	ed90 7a00 	vldr	s14, [r0]
 8007686:	eee6 7a87 	vfma.f32	s15, s13, s14
 800768a:	3201      	adds	r2, #1
 800768c:	454a      	cmp	r2, r9
 800768e:	f1a0 0004 	sub.w	r0, r0, #4
 8007692:	ddf4      	ble.n	800767e <__kernel_rem_pio2f+0x96>
 8007694:	ecea 7a01 	vstmia	sl!, {s15}
 8007698:	3304      	adds	r3, #4
 800769a:	f10c 0c01 	add.w	ip, ip, #1
 800769e:	e7d3      	b.n	8007648 <__kernel_rem_pio2f+0x60>
 80076a0:	ab06      	add	r3, sp, #24
 80076a2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80076a6:	9304      	str	r3, [sp, #16]
 80076a8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80076aa:	eddf 8a92 	vldr	s17, [pc, #584]	; 80078f4 <__kernel_rem_pio2f+0x30c>
 80076ae:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80078f0 <__kernel_rem_pio2f+0x308>
 80076b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80076b6:	9303      	str	r3, [sp, #12]
 80076b8:	46ba      	mov	sl, r7
 80076ba:	ab56      	add	r3, sp, #344	; 0x158
 80076bc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80076c0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80076c4:	ab06      	add	r3, sp, #24
 80076c6:	4618      	mov	r0, r3
 80076c8:	4652      	mov	r2, sl
 80076ca:	2a00      	cmp	r2, #0
 80076cc:	dc51      	bgt.n	8007772 <__kernel_rem_pio2f+0x18a>
 80076ce:	4620      	mov	r0, r4
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	f000 faa5 	bl	8007c20 <scalbnf>
 80076d6:	eeb0 8a40 	vmov.f32	s16, s0
 80076da:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80076de:	ee28 0a00 	vmul.f32	s0, s16, s0
 80076e2:	f000 fa5b 	bl	8007b9c <floorf>
 80076e6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80076ea:	eea0 8a67 	vfms.f32	s16, s0, s15
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	9b05      	ldr	r3, [sp, #20]
 80076f2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80076f6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80076fa:	edcd 7a00 	vstr	s15, [sp]
 80076fe:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007702:	dd4b      	ble.n	800779c <__kernel_rem_pio2f+0x1b4>
 8007704:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007708:	aa06      	add	r2, sp, #24
 800770a:	f1c4 0e08 	rsb	lr, r4, #8
 800770e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007712:	ee17 1a90 	vmov	r1, s15
 8007716:	fa42 f00e 	asr.w	r0, r2, lr
 800771a:	4401      	add	r1, r0
 800771c:	9100      	str	r1, [sp, #0]
 800771e:	fa00 f00e 	lsl.w	r0, r0, lr
 8007722:	a906      	add	r1, sp, #24
 8007724:	1a12      	subs	r2, r2, r0
 8007726:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800772a:	f1c4 0007 	rsb	r0, r4, #7
 800772e:	fa42 fb00 	asr.w	fp, r2, r0
 8007732:	f1bb 0f00 	cmp.w	fp, #0
 8007736:	dd43      	ble.n	80077c0 <__kernel_rem_pio2f+0x1d8>
 8007738:	9a00      	ldr	r2, [sp, #0]
 800773a:	f04f 0e00 	mov.w	lr, #0
 800773e:	3201      	adds	r2, #1
 8007740:	9200      	str	r2, [sp, #0]
 8007742:	4670      	mov	r0, lr
 8007744:	45f2      	cmp	sl, lr
 8007746:	dc6c      	bgt.n	8007822 <__kernel_rem_pio2f+0x23a>
 8007748:	2c00      	cmp	r4, #0
 800774a:	dd04      	ble.n	8007756 <__kernel_rem_pio2f+0x16e>
 800774c:	2c01      	cmp	r4, #1
 800774e:	d079      	beq.n	8007844 <__kernel_rem_pio2f+0x25c>
 8007750:	2c02      	cmp	r4, #2
 8007752:	f000 8082 	beq.w	800785a <__kernel_rem_pio2f+0x272>
 8007756:	f1bb 0f02 	cmp.w	fp, #2
 800775a:	d131      	bne.n	80077c0 <__kernel_rem_pio2f+0x1d8>
 800775c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007760:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007764:	b360      	cbz	r0, 80077c0 <__kernel_rem_pio2f+0x1d8>
 8007766:	4620      	mov	r0, r4
 8007768:	f000 fa5a 	bl	8007c20 <scalbnf>
 800776c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007770:	e026      	b.n	80077c0 <__kernel_rem_pio2f+0x1d8>
 8007772:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007776:	3a01      	subs	r2, #1
 8007778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800777c:	a942      	add	r1, sp, #264	; 0x108
 800777e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007782:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007786:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800778a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800778e:	eca0 0a01 	vstmia	r0!, {s0}
 8007792:	ed9c 0a00 	vldr	s0, [ip]
 8007796:	ee37 0a80 	vadd.f32	s0, s15, s0
 800779a:	e796      	b.n	80076ca <__kernel_rem_pio2f+0xe2>
 800779c:	d107      	bne.n	80077ae <__kernel_rem_pio2f+0x1c6>
 800779e:	f10a 32ff 	add.w	r2, sl, #4294967295
 80077a2:	a906      	add	r1, sp, #24
 80077a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80077a8:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80077ac:	e7c1      	b.n	8007732 <__kernel_rem_pio2f+0x14a>
 80077ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80077b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80077b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ba:	da2f      	bge.n	800781c <__kernel_rem_pio2f+0x234>
 80077bc:	f04f 0b00 	mov.w	fp, #0
 80077c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80077c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c8:	f040 8098 	bne.w	80078fc <__kernel_rem_pio2f+0x314>
 80077cc:	f10a 33ff 	add.w	r3, sl, #4294967295
 80077d0:	469c      	mov	ip, r3
 80077d2:	2200      	movs	r2, #0
 80077d4:	45bc      	cmp	ip, r7
 80077d6:	da48      	bge.n	800786a <__kernel_rem_pio2f+0x282>
 80077d8:	2a00      	cmp	r2, #0
 80077da:	d05f      	beq.n	800789c <__kernel_rem_pio2f+0x2b4>
 80077dc:	aa06      	add	r2, sp, #24
 80077de:	3c08      	subs	r4, #8
 80077e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80077e4:	2900      	cmp	r1, #0
 80077e6:	d07d      	beq.n	80078e4 <__kernel_rem_pio2f+0x2fc>
 80077e8:	4620      	mov	r0, r4
 80077ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	f000 fa16 	bl	8007c20 <scalbnf>
 80077f4:	9b01      	ldr	r3, [sp, #4]
 80077f6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80078f4 <__kernel_rem_pio2f+0x30c>
 80077fa:	4619      	mov	r1, r3
 80077fc:	2900      	cmp	r1, #0
 80077fe:	f280 80af 	bge.w	8007960 <__kernel_rem_pio2f+0x378>
 8007802:	4618      	mov	r0, r3
 8007804:	2400      	movs	r4, #0
 8007806:	2800      	cmp	r0, #0
 8007808:	f2c0 80d0 	blt.w	80079ac <__kernel_rem_pio2f+0x3c4>
 800780c:	a942      	add	r1, sp, #264	; 0x108
 800780e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007812:	4a36      	ldr	r2, [pc, #216]	; (80078ec <__kernel_rem_pio2f+0x304>)
 8007814:	eddf 7a38 	vldr	s15, [pc, #224]	; 80078f8 <__kernel_rem_pio2f+0x310>
 8007818:	2100      	movs	r1, #0
 800781a:	e0bb      	b.n	8007994 <__kernel_rem_pio2f+0x3ac>
 800781c:	f04f 0b02 	mov.w	fp, #2
 8007820:	e78a      	b.n	8007738 <__kernel_rem_pio2f+0x150>
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	b948      	cbnz	r0, 800783a <__kernel_rem_pio2f+0x252>
 8007826:	b11a      	cbz	r2, 8007830 <__kernel_rem_pio2f+0x248>
 8007828:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	2201      	movs	r2, #1
 8007830:	f10e 0e01 	add.w	lr, lr, #1
 8007834:	3304      	adds	r3, #4
 8007836:	4610      	mov	r0, r2
 8007838:	e784      	b.n	8007744 <__kernel_rem_pio2f+0x15c>
 800783a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	4602      	mov	r2, r0
 8007842:	e7f5      	b.n	8007830 <__kernel_rem_pio2f+0x248>
 8007844:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007848:	ab06      	add	r3, sp, #24
 800784a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800784e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007852:	aa06      	add	r2, sp, #24
 8007854:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007858:	e77d      	b.n	8007756 <__kernel_rem_pio2f+0x16e>
 800785a:	f10a 3cff 	add.w	ip, sl, #4294967295
 800785e:	ab06      	add	r3, sp, #24
 8007860:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007868:	e7f3      	b.n	8007852 <__kernel_rem_pio2f+0x26a>
 800786a:	a906      	add	r1, sp, #24
 800786c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007870:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007874:	4302      	orrs	r2, r0
 8007876:	e7ad      	b.n	80077d4 <__kernel_rem_pio2f+0x1ec>
 8007878:	3001      	adds	r0, #1
 800787a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800787e:	2a00      	cmp	r2, #0
 8007880:	d0fa      	beq.n	8007878 <__kernel_rem_pio2f+0x290>
 8007882:	a91a      	add	r1, sp, #104	; 0x68
 8007884:	eb0a 0208 	add.w	r2, sl, r8
 8007888:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800788c:	f10a 0301 	add.w	r3, sl, #1
 8007890:	eb0a 0100 	add.w	r1, sl, r0
 8007894:	4299      	cmp	r1, r3
 8007896:	da04      	bge.n	80078a2 <__kernel_rem_pio2f+0x2ba>
 8007898:	468a      	mov	sl, r1
 800789a:	e70e      	b.n	80076ba <__kernel_rem_pio2f+0xd2>
 800789c:	9b04      	ldr	r3, [sp, #16]
 800789e:	2001      	movs	r0, #1
 80078a0:	e7eb      	b.n	800787a <__kernel_rem_pio2f+0x292>
 80078a2:	9803      	ldr	r0, [sp, #12]
 80078a4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80078a8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80078ac:	9000      	str	r0, [sp, #0]
 80078ae:	ee07 0a90 	vmov	s15, r0
 80078b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078b6:	2000      	movs	r0, #0
 80078b8:	ece2 7a01 	vstmia	r2!, {s15}
 80078bc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80078f8 <__kernel_rem_pio2f+0x310>
 80078c0:	4696      	mov	lr, r2
 80078c2:	4548      	cmp	r0, r9
 80078c4:	dd06      	ble.n	80078d4 <__kernel_rem_pio2f+0x2ec>
 80078c6:	a842      	add	r0, sp, #264	; 0x108
 80078c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80078cc:	edc0 7a00 	vstr	s15, [r0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	e7df      	b.n	8007894 <__kernel_rem_pio2f+0x2ac>
 80078d4:	ecfc 6a01 	vldmia	ip!, {s13}
 80078d8:	ed3e 7a01 	vldmdb	lr!, {s14}
 80078dc:	3001      	adds	r0, #1
 80078de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80078e2:	e7ee      	b.n	80078c2 <__kernel_rem_pio2f+0x2da>
 80078e4:	3b01      	subs	r3, #1
 80078e6:	e779      	b.n	80077dc <__kernel_rem_pio2f+0x1f4>
 80078e8:	08008208 	.word	0x08008208
 80078ec:	080081dc 	.word	0x080081dc
 80078f0:	43800000 	.word	0x43800000
 80078f4:	3b800000 	.word	0x3b800000
 80078f8:	00000000 	.word	0x00000000
 80078fc:	9b02      	ldr	r3, [sp, #8]
 80078fe:	eeb0 0a48 	vmov.f32	s0, s16
 8007902:	1b98      	subs	r0, r3, r6
 8007904:	f000 f98c 	bl	8007c20 <scalbnf>
 8007908:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80078f0 <__kernel_rem_pio2f+0x308>
 800790c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007914:	db1b      	blt.n	800794e <__kernel_rem_pio2f+0x366>
 8007916:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80078f4 <__kernel_rem_pio2f+0x30c>
 800791a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800791e:	aa06      	add	r2, sp, #24
 8007920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007924:	a906      	add	r1, sp, #24
 8007926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800792a:	3408      	adds	r4, #8
 800792c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007934:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007938:	ee10 3a10 	vmov	r3, s0
 800793c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007940:	ee17 2a90 	vmov	r2, s15
 8007944:	f10a 0301 	add.w	r3, sl, #1
 8007948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800794c:	e74c      	b.n	80077e8 <__kernel_rem_pio2f+0x200>
 800794e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007952:	aa06      	add	r2, sp, #24
 8007954:	ee10 3a10 	vmov	r3, s0
 8007958:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800795c:	4653      	mov	r3, sl
 800795e:	e743      	b.n	80077e8 <__kernel_rem_pio2f+0x200>
 8007960:	aa42      	add	r2, sp, #264	; 0x108
 8007962:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007966:	aa06      	add	r2, sp, #24
 8007968:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	ee07 2a90 	vmov	s15, r2
 8007972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007976:	3901      	subs	r1, #1
 8007978:	ee67 7a80 	vmul.f32	s15, s15, s0
 800797c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007980:	edc0 7a00 	vstr	s15, [r0]
 8007984:	e73a      	b.n	80077fc <__kernel_rem_pio2f+0x214>
 8007986:	ecf2 6a01 	vldmia	r2!, {s13}
 800798a:	ecb6 7a01 	vldmia	r6!, {s14}
 800798e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007992:	3101      	adds	r1, #1
 8007994:	42b9      	cmp	r1, r7
 8007996:	dc01      	bgt.n	800799c <__kernel_rem_pio2f+0x3b4>
 8007998:	428c      	cmp	r4, r1
 800799a:	daf4      	bge.n	8007986 <__kernel_rem_pio2f+0x39e>
 800799c:	aa56      	add	r2, sp, #344	; 0x158
 800799e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80079a2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80079a6:	3801      	subs	r0, #1
 80079a8:	3401      	adds	r4, #1
 80079aa:	e72c      	b.n	8007806 <__kernel_rem_pio2f+0x21e>
 80079ac:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80079ae:	2a02      	cmp	r2, #2
 80079b0:	dc0a      	bgt.n	80079c8 <__kernel_rem_pio2f+0x3e0>
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	dc61      	bgt.n	8007a7a <__kernel_rem_pio2f+0x492>
 80079b6:	d03c      	beq.n	8007a32 <__kernel_rem_pio2f+0x44a>
 80079b8:	9b00      	ldr	r3, [sp, #0]
 80079ba:	f003 0007 	and.w	r0, r3, #7
 80079be:	b057      	add	sp, #348	; 0x15c
 80079c0:	ecbd 8b04 	vpop	{d8-d9}
 80079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80079ca:	2a03      	cmp	r2, #3
 80079cc:	d1f4      	bne.n	80079b8 <__kernel_rem_pio2f+0x3d0>
 80079ce:	aa2e      	add	r2, sp, #184	; 0xb8
 80079d0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80079d4:	4608      	mov	r0, r1
 80079d6:	461c      	mov	r4, r3
 80079d8:	2c00      	cmp	r4, #0
 80079da:	f1a0 0004 	sub.w	r0, r0, #4
 80079de:	dc59      	bgt.n	8007a94 <__kernel_rem_pio2f+0x4ac>
 80079e0:	4618      	mov	r0, r3
 80079e2:	2801      	cmp	r0, #1
 80079e4:	f1a1 0104 	sub.w	r1, r1, #4
 80079e8:	dc64      	bgt.n	8007ab4 <__kernel_rem_pio2f+0x4cc>
 80079ea:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80078f8 <__kernel_rem_pio2f+0x310>
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	dc70      	bgt.n	8007ad4 <__kernel_rem_pio2f+0x4ec>
 80079f2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80079f6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80079fa:	f1bb 0f00 	cmp.w	fp, #0
 80079fe:	d172      	bne.n	8007ae6 <__kernel_rem_pio2f+0x4fe>
 8007a00:	edc5 6a00 	vstr	s13, [r5]
 8007a04:	ed85 7a01 	vstr	s14, [r5, #4]
 8007a08:	edc5 7a02 	vstr	s15, [r5, #8]
 8007a0c:	e7d4      	b.n	80079b8 <__kernel_rem_pio2f+0x3d0>
 8007a0e:	aa2e      	add	r2, sp, #184	; 0xb8
 8007a10:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007a14:	ed91 7a00 	vldr	s14, [r1]
 8007a18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	daf5      	bge.n	8007a0e <__kernel_rem_pio2f+0x426>
 8007a22:	f1bb 0f00 	cmp.w	fp, #0
 8007a26:	d001      	beq.n	8007a2c <__kernel_rem_pio2f+0x444>
 8007a28:	eef1 7a67 	vneg.f32	s15, s15
 8007a2c:	edc5 7a00 	vstr	s15, [r5]
 8007a30:	e7c2      	b.n	80079b8 <__kernel_rem_pio2f+0x3d0>
 8007a32:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80078f8 <__kernel_rem_pio2f+0x310>
 8007a36:	e7f2      	b.n	8007a1e <__kernel_rem_pio2f+0x436>
 8007a38:	aa2e      	add	r2, sp, #184	; 0xb8
 8007a3a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007a3e:	edd0 7a00 	vldr	s15, [r0]
 8007a42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a46:	3901      	subs	r1, #1
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	daf5      	bge.n	8007a38 <__kernel_rem_pio2f+0x450>
 8007a4c:	f1bb 0f00 	cmp.w	fp, #0
 8007a50:	d017      	beq.n	8007a82 <__kernel_rem_pio2f+0x49a>
 8007a52:	eef1 7a47 	vneg.f32	s15, s14
 8007a56:	edc5 7a00 	vstr	s15, [r5]
 8007a5a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a62:	a82f      	add	r0, sp, #188	; 0xbc
 8007a64:	2101      	movs	r1, #1
 8007a66:	428b      	cmp	r3, r1
 8007a68:	da0e      	bge.n	8007a88 <__kernel_rem_pio2f+0x4a0>
 8007a6a:	f1bb 0f00 	cmp.w	fp, #0
 8007a6e:	d001      	beq.n	8007a74 <__kernel_rem_pio2f+0x48c>
 8007a70:	eef1 7a67 	vneg.f32	s15, s15
 8007a74:	edc5 7a01 	vstr	s15, [r5, #4]
 8007a78:	e79e      	b.n	80079b8 <__kernel_rem_pio2f+0x3d0>
 8007a7a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80078f8 <__kernel_rem_pio2f+0x310>
 8007a7e:	4619      	mov	r1, r3
 8007a80:	e7e2      	b.n	8007a48 <__kernel_rem_pio2f+0x460>
 8007a82:	eef0 7a47 	vmov.f32	s15, s14
 8007a86:	e7e6      	b.n	8007a56 <__kernel_rem_pio2f+0x46e>
 8007a88:	ecb0 7a01 	vldmia	r0!, {s14}
 8007a8c:	3101      	adds	r1, #1
 8007a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a92:	e7e8      	b.n	8007a66 <__kernel_rem_pio2f+0x47e>
 8007a94:	edd0 7a00 	vldr	s15, [r0]
 8007a98:	edd0 6a01 	vldr	s13, [r0, #4]
 8007a9c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007aa0:	3c01      	subs	r4, #1
 8007aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007aa6:	ed80 7a00 	vstr	s14, [r0]
 8007aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aae:	edc0 7a01 	vstr	s15, [r0, #4]
 8007ab2:	e791      	b.n	80079d8 <__kernel_rem_pio2f+0x3f0>
 8007ab4:	edd1 7a00 	vldr	s15, [r1]
 8007ab8:	edd1 6a01 	vldr	s13, [r1, #4]
 8007abc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007ac0:	3801      	subs	r0, #1
 8007ac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ac6:	ed81 7a00 	vstr	s14, [r1]
 8007aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ace:	edc1 7a01 	vstr	s15, [r1, #4]
 8007ad2:	e786      	b.n	80079e2 <__kernel_rem_pio2f+0x3fa>
 8007ad4:	aa2e      	add	r2, sp, #184	; 0xb8
 8007ad6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007ada:	ed91 7a00 	vldr	s14, [r1]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ae4:	e783      	b.n	80079ee <__kernel_rem_pio2f+0x406>
 8007ae6:	eef1 6a66 	vneg.f32	s13, s13
 8007aea:	eeb1 7a47 	vneg.f32	s14, s14
 8007aee:	edc5 6a00 	vstr	s13, [r5]
 8007af2:	ed85 7a01 	vstr	s14, [r5, #4]
 8007af6:	eef1 7a67 	vneg.f32	s15, s15
 8007afa:	e785      	b.n	8007a08 <__kernel_rem_pio2f+0x420>

08007afc <__kernel_sinf>:
 8007afc:	ee10 3a10 	vmov	r3, s0
 8007b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b04:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007b08:	da04      	bge.n	8007b14 <__kernel_sinf+0x18>
 8007b0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007b0e:	ee17 3a90 	vmov	r3, s15
 8007b12:	b35b      	cbz	r3, 8007b6c <__kernel_sinf+0x70>
 8007b14:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007b18:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007b70 <__kernel_sinf+0x74>
 8007b1c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007b74 <__kernel_sinf+0x78>
 8007b20:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b24:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007b78 <__kernel_sinf+0x7c>
 8007b28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b2c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007b7c <__kernel_sinf+0x80>
 8007b30:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007b34:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007b80 <__kernel_sinf+0x84>
 8007b38:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007b3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007b40:	b930      	cbnz	r0, 8007b50 <__kernel_sinf+0x54>
 8007b42:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007b84 <__kernel_sinf+0x88>
 8007b46:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007b4a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007b4e:	4770      	bx	lr
 8007b50:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007b54:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007b58:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007b5c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007b60:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007b88 <__kernel_sinf+0x8c>
 8007b64:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007b68:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	2f2ec9d3 	.word	0x2f2ec9d3
 8007b74:	b2d72f34 	.word	0xb2d72f34
 8007b78:	3638ef1b 	.word	0x3638ef1b
 8007b7c:	b9500d01 	.word	0xb9500d01
 8007b80:	3c088889 	.word	0x3c088889
 8007b84:	be2aaaab 	.word	0xbe2aaaab
 8007b88:	3e2aaaab 	.word	0x3e2aaaab

08007b8c <fabsf>:
 8007b8c:	ee10 3a10 	vmov	r3, s0
 8007b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b94:	ee00 3a10 	vmov	s0, r3
 8007b98:	4770      	bx	lr
	...

08007b9c <floorf>:
 8007b9c:	ee10 3a10 	vmov	r3, s0
 8007ba0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007ba4:	3a7f      	subs	r2, #127	; 0x7f
 8007ba6:	2a16      	cmp	r2, #22
 8007ba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bac:	dc2a      	bgt.n	8007c04 <floorf+0x68>
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	da11      	bge.n	8007bd6 <floorf+0x3a>
 8007bb2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007c14 <floorf+0x78>
 8007bb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007bba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc2:	dd05      	ble.n	8007bd0 <floorf+0x34>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da23      	bge.n	8007c10 <floorf+0x74>
 8007bc8:	4a13      	ldr	r2, [pc, #76]	; (8007c18 <floorf+0x7c>)
 8007bca:	2900      	cmp	r1, #0
 8007bcc:	bf18      	it	ne
 8007bce:	4613      	movne	r3, r2
 8007bd0:	ee00 3a10 	vmov	s0, r3
 8007bd4:	4770      	bx	lr
 8007bd6:	4911      	ldr	r1, [pc, #68]	; (8007c1c <floorf+0x80>)
 8007bd8:	4111      	asrs	r1, r2
 8007bda:	420b      	tst	r3, r1
 8007bdc:	d0fa      	beq.n	8007bd4 <floorf+0x38>
 8007bde:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007c14 <floorf+0x78>
 8007be2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007be6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bee:	ddef      	ble.n	8007bd0 <floorf+0x34>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bfbe      	ittt	lt
 8007bf4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007bf8:	fa40 f202 	asrlt.w	r2, r0, r2
 8007bfc:	189b      	addlt	r3, r3, r2
 8007bfe:	ea23 0301 	bic.w	r3, r3, r1
 8007c02:	e7e5      	b.n	8007bd0 <floorf+0x34>
 8007c04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007c08:	d3e4      	bcc.n	8007bd4 <floorf+0x38>
 8007c0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c0e:	4770      	bx	lr
 8007c10:	2300      	movs	r3, #0
 8007c12:	e7dd      	b.n	8007bd0 <floorf+0x34>
 8007c14:	7149f2ca 	.word	0x7149f2ca
 8007c18:	bf800000 	.word	0xbf800000
 8007c1c:	007fffff 	.word	0x007fffff

08007c20 <scalbnf>:
 8007c20:	ee10 3a10 	vmov	r3, s0
 8007c24:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007c28:	d025      	beq.n	8007c76 <scalbnf+0x56>
 8007c2a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c2e:	d302      	bcc.n	8007c36 <scalbnf+0x16>
 8007c30:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c34:	4770      	bx	lr
 8007c36:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007c3a:	d122      	bne.n	8007c82 <scalbnf+0x62>
 8007c3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ce8 <scalbnf+0xc8>)
 8007c3e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007cec <scalbnf+0xcc>
 8007c42:	4298      	cmp	r0, r3
 8007c44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c48:	db16      	blt.n	8007c78 <scalbnf+0x58>
 8007c4a:	ee10 3a10 	vmov	r3, s0
 8007c4e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007c52:	3a19      	subs	r2, #25
 8007c54:	4402      	add	r2, r0
 8007c56:	2afe      	cmp	r2, #254	; 0xfe
 8007c58:	dd15      	ble.n	8007c86 <scalbnf+0x66>
 8007c5a:	ee10 3a10 	vmov	r3, s0
 8007c5e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007cf0 <scalbnf+0xd0>
 8007c62:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007cf4 <scalbnf+0xd4>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	eeb0 7a67 	vmov.f32	s14, s15
 8007c6c:	bfb8      	it	lt
 8007c6e:	eef0 7a66 	vmovlt.f32	s15, s13
 8007c72:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007c76:	4770      	bx	lr
 8007c78:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007cf8 <scalbnf+0xd8>
 8007c7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c80:	4770      	bx	lr
 8007c82:	0dd2      	lsrs	r2, r2, #23
 8007c84:	e7e6      	b.n	8007c54 <scalbnf+0x34>
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	dd06      	ble.n	8007c98 <scalbnf+0x78>
 8007c8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c8e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007c92:	ee00 3a10 	vmov	s0, r3
 8007c96:	4770      	bx	lr
 8007c98:	f112 0f16 	cmn.w	r2, #22
 8007c9c:	da1a      	bge.n	8007cd4 <scalbnf+0xb4>
 8007c9e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007ca2:	4298      	cmp	r0, r3
 8007ca4:	ee10 3a10 	vmov	r3, s0
 8007ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cac:	dd0a      	ble.n	8007cc4 <scalbnf+0xa4>
 8007cae:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007cf0 <scalbnf+0xd0>
 8007cb2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007cf4 <scalbnf+0xd4>
 8007cb6:	eef0 7a40 	vmov.f32	s15, s0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf18      	it	ne
 8007cbe:	eeb0 0a47 	vmovne.f32	s0, s14
 8007cc2:	e7db      	b.n	8007c7c <scalbnf+0x5c>
 8007cc4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007cf8 <scalbnf+0xd8>
 8007cc8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007cfc <scalbnf+0xdc>
 8007ccc:	eef0 7a40 	vmov.f32	s15, s0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	e7f3      	b.n	8007cbc <scalbnf+0x9c>
 8007cd4:	3219      	adds	r2, #25
 8007cd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cda:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007cde:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007d00 <scalbnf+0xe0>
 8007ce2:	ee07 3a10 	vmov	s14, r3
 8007ce6:	e7c4      	b.n	8007c72 <scalbnf+0x52>
 8007ce8:	ffff3cb0 	.word	0xffff3cb0
 8007cec:	4c000000 	.word	0x4c000000
 8007cf0:	7149f2ca 	.word	0x7149f2ca
 8007cf4:	f149f2ca 	.word	0xf149f2ca
 8007cf8:	0da24260 	.word	0x0da24260
 8007cfc:	8da24260 	.word	0x8da24260
 8007d00:	33000000 	.word	0x33000000

08007d04 <_init>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr

08007d10 <_fini>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	bf00      	nop
 8007d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d16:	bc08      	pop	{r3}
 8007d18:	469e      	mov	lr, r3
 8007d1a:	4770      	bx	lr
>>>>>>> 7a95c282f74b7552c35a3e0e4ba1ecf21505153e
