
PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000933c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  08009510  08009510  00019510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce4  08009ce4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009ce4  08009ce4  00019ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cec  08009cec  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cf0  08009cf0  00019cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f0  200001ec  08009ee0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023dc  08009ee0  000223dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012856  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ee  00000000  00000000  00032a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00035460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00036498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c37  00000000  00000000  000373b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121e9  00000000  00000000  0005bfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0945  00000000  00000000  0006e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014eb1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005618  00000000  00000000  0014eb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094f4 	.word	0x080094f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	080094f4 	.word	0x080094f4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Sine creator test:
  sine_creator2();
 8000f84:	f000 fc98 	bl	80018b8 <sine_creator2>
  sine_creator3();
 8000f88:	f000 fcf2 	bl	8001970 <sine_creator3>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f001 f86c 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f814 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f000 f9fc 	bl	8001390 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f98:	f000 f9c4 	bl	8001324 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f9c:	f000 f998 	bl	80012d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fa0:	f000 f87e 	bl	80010a0 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000fa4:	f000 f94a 	bl	800123c <MX_TIM10_Init>
  MX_DAC_Init();
 8000fa8:	f000 f91e 	bl	80011e8 <MX_DAC_Init>
  MX_ADC2_Init();
 8000fac:	f000 f8ca 	bl	8001144 <MX_ADC2_Init>

  // DAC DMA
//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)&adcBuf[0], sizeof(adcReading0), DAC_ALIGN_12B_R);//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)testArray, sizeof(testArray)/sizeof(uint16_t), DAC_ALIGN_12B_R);

  // Timer interrupt start
  HAL_TIM_Base_Start_IT(&htim10);
 8000fb0:	4801      	ldr	r0, [pc, #4]	; (8000fb8 <main+0x38>)
 8000fb2:	f003 f97f 	bl	80042b4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <main+0x36>
 8000fb8:	2000028c 	.word	0x2000028c

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2234      	movs	r2, #52	; 0x34
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 ff24 	bl	8005e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <SystemClock_Config+0xdc>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a2b      	ldr	r2, [pc, #172]	; (8001098 <SystemClock_Config+0xdc>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <SystemClock_Config+0xdc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <SystemClock_Config+0xe0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a25      	ldr	r2, [pc, #148]	; (800109c <SystemClock_Config+0xe0>)
 8001006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <SystemClock_Config+0xe0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800102c:	2308      	movs	r3, #8
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001030:	23b4      	movs	r3, #180	; 0xb4
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800103c:	2302      	movs	r3, #2
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fe47 	bl	8003cd8 <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001050:	f000 fcf4 	bl	8001a3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001054:	f002 fb7a 	bl	800374c <HAL_PWREx_EnableOverDrive>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800105e:	f000 fced 	bl	8001a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800106e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2105      	movs	r1, #5
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fbb3 	bl	80037ec <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800108c:	f000 fcd6 	bl	8001a3c <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	; 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_ADC1_Init+0x98>)
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <MX_ADC1_Init+0x9c>)
 80010b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_ADC1_Init+0x98>)
 80010ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_ADC1_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_ADC1_Init+0x98>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <MX_ADC1_Init+0xa0>)
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_ADC1_Init+0x98>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_ADC1_Init+0x98>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_ADC1_Init+0x98>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_ADC1_Init+0x98>)
 8001102:	f001 f823 	bl	800214c <HAL_ADC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800110c:	f000 fc96 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_ADC1_Init+0x98>)
 8001122:	f001 f9c1 	bl	80024a8 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800112c:	f000 fc86 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200012a0 	.word	0x200012a0
 800113c:	40012000 	.word	0x40012000
 8001140:	0f000001 	.word	0x0f000001

08001144 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC2_Init+0x98>)
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <MX_ADC2_Init+0x9c>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC2_Init+0x98>)
 800115e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001162:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC2_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_ADC2_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_ADC2_Init+0x98>)
 8001172:	2201      	movs	r2, #1
 8001174:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_ADC2_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_ADC2_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_ADC2_Init+0x98>)
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <MX_ADC2_Init+0xa0>)
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_ADC2_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_ADC2_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_ADC2_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_ADC2_Init+0x98>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_ADC2_Init+0x98>)
 80011a6:	f000 ffd1 	bl	800214c <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 fc44 	bl	8001a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC2_Init+0x98>)
 80011c6:	f001 f96f 	bl	80024a8 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011d0:	f000 fc34 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000244 	.word	0x20000244
 80011e0:	40012100 	.word	0x40012100
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_DAC_Init+0x4c>)
 80011f8:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <MX_DAC_Init+0x50>)
 80011fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_DAC_Init+0x4c>)
 80011fe:	f001 fc92 	bl	8002b26 <HAL_DAC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001208:	f000 fc18 	bl	8001a3c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_DAC_Init+0x4c>)
 800121c:	f001 fd1c 	bl	8002c58 <HAL_DAC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001226:	f000 fc09 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000134c 	.word	0x2000134c
 8001238:	40007400 	.word	0x40007400

0800123c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_TIM10_Init+0x8c>)
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <MX_TIM10_Init+0x90>)
 8001258:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 180-1;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_TIM10_Init+0x8c>)
 800125c:	22b3      	movs	r2, #179	; 0xb3
 800125e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_TIM10_Init+0x8c>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1 ;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM10_Init+0x8c>)
 8001268:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_TIM10_Init+0x8c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_TIM10_Init+0x8c>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800127a:	4813      	ldr	r0, [pc, #76]	; (80012c8 <MX_TIM10_Init+0x8c>)
 800127c:	f002 ffca 	bl	8004214 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001286:	f000 fbd9 	bl	8001a3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <MX_TIM10_Init+0x8c>)
 800128c:	f003 f882 	bl	8004394 <HAL_TIM_OC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001296:	f000 fbd1 	bl	8001a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_TIM10_Init+0x8c>)
 80012b2:	f003 f9d1 	bl	8004658 <HAL_TIM_OC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80012bc:	f000 fbbe 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000028c 	.word	0x2000028c
 80012cc:	40014400 	.word	0x40014400

080012d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_USART2_UART_Init+0x50>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_USART2_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_USART2_UART_Init+0x4c>)
 8001308:	f003 fc8a 	bl	8004c20 <HAL_UART_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001312:	f000 fb93 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20002380 	.word	0x20002380
 8001320:	40004400 	.word	0x40004400

08001324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_DMA_Init+0x68>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <MX_DMA_Init+0x68>)
 8001334:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_DMA_Init+0x68>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_DMA_Init+0x68>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <MX_DMA_Init+0x68>)
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <MX_DMA_Init+0x68>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2011      	movs	r0, #17
 8001368:	f001 fba7 	bl	8002aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800136c:	2011      	movs	r0, #17
 800136e:	f001 fbc0 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2038      	movs	r0, #56	; 0x38
 8001378:	f001 fb9f 	bl	8002aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800137c:	2038      	movs	r0, #56	; 0x38
 800137e:	f001 fbb8 	bl	8002af2 <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a2b      	ldr	r2, [pc, #172]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <MX_GPIO_Init+0xe8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2120      	movs	r1, #32
 80013fe:	481f      	ldr	r0, [pc, #124]	; (800147c <MX_GPIO_Init+0xec>)
 8001400:	f002 f98a 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2101      	movs	r1, #1
 8001408:	481d      	ldr	r0, [pc, #116]	; (8001480 <MX_GPIO_Init+0xf0>)
 800140a:	f002 f985 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001414:	481b      	ldr	r0, [pc, #108]	; (8001484 <MX_GPIO_Init+0xf4>)
 8001416:	f002 f97f 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800141a:	2320      	movs	r3, #32
 800141c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	4619      	mov	r1, r3
 8001430:	4812      	ldr	r0, [pc, #72]	; (800147c <MX_GPIO_Init+0xec>)
 8001432:	f001 ffdd 	bl	80033f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001436:	2301      	movs	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_GPIO_Init+0xf0>)
 800144e:	f001 ffcf 	bl	80033f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001452:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_GPIO_Init+0xf4>)
 800146c:	f001 ffc0 	bl	80033f0 <HAL_GPIO_Init>

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800

08001488 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//}

// Timer 10 (TIM10) interrupt:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if (htim == &htim10)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4acd      	ldr	r2, [pc, #820]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f040 8200 	bne.w	800189a <HAL_TIM_PeriodElapsedCallback+0x412>
    // Variables declared globally for easier debugging.
    //    static float angleDq, alpha1, beta1, Vq, Vd, alpha2, beta2, cosGrid, sinGrid;
    // PLL variables end

	// Set pin: Start timer
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	48cb      	ldr	r0, [pc, #812]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 80014a0:	f002 f93a 	bl	8003718 <HAL_GPIO_WritePin>
//    	fprintf(fpt,"Vd, Vq, alpha1, beta1\n");
//    	temp = 1;
//    }

    // ADC 1
    HAL_ADC_Start(&hadc1);
 80014a4:	48ca      	ldr	r0, [pc, #808]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80014a6:	f000 fe95 	bl	80021d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014aa:	f04f 31ff 	mov.w	r1, #4294967295
 80014ae:	48c8      	ldr	r0, [pc, #800]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80014b0:	f000 ff62 	bl	8002378 <HAL_ADC_PollForConversion>
    adcValue1 = HAL_ADC_GetValue(&hadc1);
 80014b4:	48c6      	ldr	r0, [pc, #792]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80014b6:	f000 ffea 	bl	800248e <HAL_ADC_GetValue>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4bc5      	ldr	r3, [pc, #788]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80014c0:	801a      	strh	r2, [r3, #0]

    // ADC 2
    HAL_ADC_Start(&hadc2);
 80014c2:	48c5      	ldr	r0, [pc, #788]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80014c4:	f000 fe86 	bl	80021d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	48c2      	ldr	r0, [pc, #776]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80014ce:	f000 ff53 	bl	8002378 <HAL_ADC_PollForConversion>
    adcValue2 = HAL_ADC_GetValue(&hadc2);
 80014d2:	48c1      	ldr	r0, [pc, #772]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80014d4:	f000 ffdb 	bl	800248e <HAL_ADC_GetValue>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4bbf      	ldr	r3, [pc, #764]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80014de:	801a      	strh	r2, [r3, #0]

//    phaseA = (float)adcValue1/(0xFFF+1);
//    phaseB = (float)adcValue2/(0xFFF+1);
//    phaseC = two_to_three_phase(&phaseA, &phaseB);

    phaseA = sine1[count];
 80014e0:	4bbf      	ldr	r3, [pc, #764]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	4abf      	ldr	r2, [pc, #764]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4abe      	ldr	r2, [pc, #760]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80014ee:	6013      	str	r3, [r2, #0]
    phaseB = sine2[count];
 80014f0:	4bbb      	ldr	r3, [pc, #748]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	4abd      	ldr	r2, [pc, #756]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x364>)
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4abc      	ldr	r2, [pc, #752]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80014fe:	6013      	str	r3, [r2, #0]
    phaseC = two_to_three_phase(&phaseA, &phaseB);
 8001500:	49bb      	ldr	r1, [pc, #748]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001502:	48b9      	ldr	r0, [pc, #740]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001504:	f004 fc47 	bl	8005d96 <two_to_three_phase>
 8001508:	eef0 7a40 	vmov.f32	s15, s0
 800150c:	4bb9      	ldr	r3, [pc, #740]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800150e:	edc3 7a00 	vstr	s15, [r3]
//	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg_2,
//						(uint32_t)&huart2.Instance->DR, strlen(msg_2));

    // PLL StartT_SAMPLE
    //--------------------------------------------------------------------------------------------
    angleDq = angleDq + T_SAMPLE*F_RAD;
 8001512:	4bb9      	ldr	r3, [pc, #740]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f836 	bl	8000588 <__aeabi_f2d>
 800151c:	a3a6      	add	r3, pc, #664	; (adr r3, 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe fed3 	bl	80002cc <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb5b 	bl	8000be8 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	4ab0      	ldr	r2, [pc, #704]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001536:	6013      	str	r3, [r2, #0]
    if (angleDq > TWO_PI)
 8001538:	4baf      	ldr	r3, [pc, #700]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f823 	bl	8000588 <__aeabi_f2d>
 8001542:	a39f      	add	r3, pc, #636	; (adr r3, 80017c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff fb06 	bl	8000b58 <__aeabi_dcmpgt>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d012      	beq.n	8001578 <HAL_TIM_PeriodElapsedCallback+0xf0>
    {
    	angleDq = angleDq - TWO_PI;
 8001552:	4ba9      	ldr	r3, [pc, #676]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f816 	bl	8000588 <__aeabi_f2d>
 800155c:	a398      	add	r3, pc, #608	; (adr r3, 80017c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7fe feb1 	bl	80002c8 <__aeabi_dsub>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb3b 	bl	8000be8 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	4aa0      	ldr	r2, [pc, #640]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001576:	6013      	str	r3, [r2, #0]
    }


    alpha1 = abc_to_alpha(phaseA, phaseB, phaseC);
 8001578:	4b9b      	ldr	r3, [pc, #620]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	4b9c      	ldr	r3, [pc, #624]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001580:	ed93 7a00 	vldr	s14, [r3]
 8001584:	4b9b      	ldr	r3, [pc, #620]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001586:	edd3 6a00 	vldr	s13, [r3]
 800158a:	eeb0 1a66 	vmov.f32	s2, s13
 800158e:	eef0 0a47 	vmov.f32	s1, s14
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	f004 f86f 	bl	8005678 <abc_to_alpha>
 800159a:	eef0 7a40 	vmov.f32	s15, s0
 800159e:	4b97      	ldr	r3, [pc, #604]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x374>)
 80015a0:	edc3 7a00 	vstr	s15, [r3]
    beta1 = abc_to_beta(phaseA, phaseB, phaseC);
 80015a4:	4b90      	ldr	r3, [pc, #576]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	4b91      	ldr	r3, [pc, #580]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80015ac:	ed93 7a00 	vldr	s14, [r3]
 80015b0:	4b90      	ldr	r3, [pc, #576]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015b2:	edd3 6a00 	vldr	s13, [r3]
 80015b6:	eeb0 1a66 	vmov.f32	s2, s13
 80015ba:	eef0 0a47 	vmov.f32	s1, s14
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	f004 f8a9 	bl	8005718 <abc_to_beta>
 80015c6:	eef0 7a40 	vmov.f32	s15, s0
 80015ca:	4b8d      	ldr	r3, [pc, #564]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015cc:	edc3 7a00 	vstr	s15, [r3]

    Vd = alphabeta_to_d(alpha1, beta1, angleDq);
 80015d0:	4b8a      	ldr	r3, [pc, #552]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x374>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	4b86      	ldr	r3, [pc, #536]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80015de:	edd3 6a00 	vldr	s13, [r3]
 80015e2:	eeb0 1a66 	vmov.f32	s2, s13
 80015e6:	eef0 0a47 	vmov.f32	s1, s14
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	f004 f8d7 	bl	80057a0 <alphabeta_to_d>
 80015f2:	eef0 7a40 	vmov.f32	s15, s0
 80015f6:	4b83      	ldr	r3, [pc, #524]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80015f8:	edc3 7a00 	vstr	s15, [r3]
    Vq = alphabeta_to_q(alpha1, beta1, angleDq);
 80015fc:	4b7f      	ldr	r3, [pc, #508]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x374>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001604:	ed93 7a00 	vldr	s14, [r3]
 8001608:	4b7b      	ldr	r3, [pc, #492]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800160a:	edd3 6a00 	vldr	s13, [r3]
 800160e:	eeb0 1a66 	vmov.f32	s2, s13
 8001612:	eef0 0a47 	vmov.f32	s1, s14
 8001616:	eeb0 0a67 	vmov.f32	s0, s15
 800161a:	f004 f8ee 	bl	80057fa <alphabeta_to_q>
 800161e:	eef0 7a40 	vmov.f32	s15, s0
 8001622:	4b79      	ldr	r3, [pc, #484]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001624:	edc3 7a00 	vstr	s15, [r3]

    alpha2 = dq_to_alpha(Vd, Vq, angleDq);
 8001628:	4b76      	ldr	r3, [pc, #472]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	4b70      	ldr	r3, [pc, #448]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001636:	edd3 6a00 	vldr	s13, [r3]
 800163a:	eeb0 1a66 	vmov.f32	s2, s13
 800163e:	eef0 0a47 	vmov.f32	s1, s14
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	f004 f907 	bl	8005858 <dq_to_alpha>
 800164a:	eef0 7a40 	vmov.f32	s15, s0
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001650:	edc3 7a00 	vstr	s15, [r3]
    beta2 = dq_to_beta(Vd, Vq, angleDq);
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001662:	edd3 6a00 	vldr	s13, [r3]
 8001666:	eeb0 1a66 	vmov.f32	s2, s13
 800166a:	eef0 0a47 	vmov.f32	s1, s14
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	f004 f91e 	bl	80058b2 <dq_to_beta>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800167c:	edc3 7a00 	vstr	s15, [r3]

    cosGrid = cos_grid(alpha2, beta2);
 8001680:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	4b62      	ldr	r3, [pc, #392]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001688:	ed93 7a00 	vldr	s14, [r3]
 800168c:	eef0 0a47 	vmov.f32	s1, s14
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	f004 f93a 	bl	800590c <cos_grid>
 8001698:	eef0 7a40 	vmov.f32	s15, s0
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800169e:	edc3 7a00 	vstr	s15, [r3]
    sinGrid = sin_grid(alpha2, beta2);
 80016a2:	4b5a      	ldr	r3, [pc, #360]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	eef0 0a47 	vmov.f32	s1, s14
 80016b2:	eeb0 0a67 	vmov.f32	s0, s15
 80016b6:	f004 f95f 	bl	8005978 <sin_grid>
 80016ba:	eef0 7a40 	vmov.f32	s15, s0
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80016c0:	edc3 7a00 	vstr	s15, [r3]

    phaseError = phase_detector(cosGrid, sinGrid, anglePllComp);
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4b52      	ldr	r3, [pc, #328]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80016d2:	edd3 6a00 	vldr	s13, [r3]
 80016d6:	eeb0 1a66 	vmov.f32	s2, s13
 80016da:	eef0 0a47 	vmov.f32	s1, s14
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	f004 fb2b 	bl	8005d3c <phase_detector>
 80016e6:	eef0 7a40 	vmov.f32	s15, s0
 80016ea:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]

    anglePll = pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80016f8:	ed93 7a00 	vldr	s14, [r3]
 80016fc:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80016fe:	edd3 6a00 	vldr	s13, [r3]
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001704:	ed93 6a00 	vldr	s12, [r3]
 8001708:	eddf 2a49 	vldr	s5, [pc, #292]	; 8001830 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 800170c:	eeb0 2a46 	vmov.f32	s4, s12
 8001710:	eef0 1a66 	vmov.f32	s3, s13
 8001714:	eeb0 1a47 	vmov.f32	s2, s14
 8001718:	eddf 0a46 	vldr	s1, [pc, #280]	; 8001834 <HAL_TIM_PeriodElapsedCallback+0x3ac>
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	f004 f960 	bl	80059e4 <pi_regulator>
 8001724:	eef0 7a40 	vmov.f32	s15, s0
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800172a:	edc3 7a00 	vstr	s15, [r3]
    anglePllComp = pi_regulator_comp(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800173c:	edd3 6a00 	vldr	s13, [r3]
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001742:	ed93 6a00 	vldr	s12, [r3]
 8001746:	eddf 2a3a 	vldr	s5, [pc, #232]	; 8001830 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 800174a:	eeb0 2a46 	vmov.f32	s4, s12
 800174e:	eef0 1a66 	vmov.f32	s3, s13
 8001752:	eeb0 1a47 	vmov.f32	s2, s14
 8001756:	eddf 0a37 	vldr	s1, [pc, #220]	; 8001834 <HAL_TIM_PeriodElapsedCallback+0x3ac>
 800175a:	eeb0 0a67 	vmov.f32	s0, s15
 800175e:	f004 fa0b 	bl	8005b78 <pi_regulator_comp>
 8001762:	eef0 7a40 	vmov.f32	s15, s0
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001768:	edc3 7a00 	vstr	s15, [r3]
    // anglePll = pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
    //--------------------------------------------------------------------------------------------
    // PLL End

    // DAC
    dac_temp = (alpha1 + 1) * 4096.0/4.0; // +1 for offset, /4 for scaling
 800176c:	4b23      	ldr	r3, [pc, #140]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x374>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800177a:	ee17 0a90 	vmov	r0, s15
 800177e:	f7fe ff03 	bl	8000588 <__aeabi_f2d>
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001788:	f7fe ff56 	bl	8000638 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800179a:	f7ff f877 	bl	800088c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff fa1f 	bl	8000be8 <__aeabi_d2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a25      	ldr	r2, [pc, #148]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e04a      	b.n	8001848 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 80017b2:	bf00      	nop
 80017b4:	f3af 8000 	nop.w
 80017b8:	769cf0e0 	.word	0x769cf0e0
 80017bc:	3fd41b2f 	.word	0x3fd41b2f
 80017c0:	54442d18 	.word	0x54442d18
 80017c4:	401921fb 	.word	0x401921fb
 80017c8:	2000028c 	.word	0x2000028c
 80017cc:	40020800 	.word	0x40020800
 80017d0:	200012a0 	.word	0x200012a0
 80017d4:	200013c8 	.word	0x200013c8
 80017d8:	20000244 	.word	0x20000244
 80017dc:	2000129c 	.word	0x2000129c
 80017e0:	20000208 	.word	0x20000208
 80017e4:	200002d8 	.word	0x200002d8
 80017e8:	200002d4 	.word	0x200002d4
 80017ec:	200013d8 	.word	0x200013d8
 80017f0:	20002378 	.word	0x20002378
 80017f4:	20001360 	.word	0x20001360
 80017f8:	200023c4 	.word	0x200023c4
 80017fc:	20001280 	.word	0x20001280
 8001800:	200013d4 	.word	0x200013d4
 8001804:	20001278 	.word	0x20001278
 8001808:	20001284 	.word	0x20001284
 800180c:	200012e8 	.word	0x200012e8
 8001810:	20000240 	.word	0x20000240
 8001814:	200013cc 	.word	0x200013cc
 8001818:	200013c4 	.word	0x200013c4
 800181c:	200013d0 	.word	0x200013d0
 8001820:	2000127c 	.word	0x2000127c
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004
 800182c:	20000008 	.word	0x20000008
 8001830:	3a83126f 	.word	0x3a83126f
 8001834:	439d1463 	.word	0x439d1463
 8001838:	2000237c 	.word	0x2000237c
 800183c:	40b00000 	.word	0x40b00000
 8001840:	40100000 	.word	0x40100000
 8001844:	2000020c 	.word	0x2000020c
    var_dac = (uint16_t)dac_temp; //
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001852:	ee17 3a90 	vmov	r3, s15
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800185a:	801a      	strh	r2, [r3, #0]
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 800185c:	2100      	movs	r1, #0
 800185e:	4813      	ldr	r0, [pc, #76]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001860:	f001 f983 	bl	8002b6a <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var_dac); // Set dac to digital value
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	480f      	ldr	r0, [pc, #60]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x424>)
 800186e:	f001 f9ce 	bl	8002c0e <HAL_DAC_SetValue>


	if (count < F_SAMPLE)
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800187a:	d206      	bcs.n	800188a <HAL_TIM_PeriodElapsedCallback+0x402>
	{
	  count++;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001886:	801a      	strh	r2, [r3, #0]
 8001888:	e002      	b.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x408>
	}
	else
	{
	  count = 0;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800188c:	2200      	movs	r2, #0
 800188e:	801a      	strh	r2, [r3, #0]
//		fprintf(fpt, "%0.3f, %0.3f, %0.3f, %0.3f\n", Vd, Vq, alpha1, beta1);
//	}


	// Reset pin: Stop timer
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2140      	movs	r1, #64	; 0x40
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001896:	f001 ff3f 	bl	8003718 <HAL_GPIO_WritePin>
  }
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000020c 	.word	0x2000020c
 80018a8:	20000210 	.word	0x20000210
 80018ac:	2000134c 	.word	0x2000134c
 80018b0:	20000208 	.word	0x20000208
 80018b4:	40020800 	.word	0x40020800

080018b8 <sine_creator2>:

void sine_creator2()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	// Create 50 Hz sine with 0 phase shift
	uint32_t var;
	for (var = 0; var < F_SAMPLE; ++var)
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	e03d      	b.n	8001940 <sine_creator2+0x88>
	{
		sine1[var] = sinf(50.0 * (float)var * 1/F_SAMPLE * TWO_PI);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ce:	ee17 0a90 	vmov	r0, s15
 80018d2:	f7fe fe59 	bl	8000588 <__aeabi_f2d>
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <sine_creator2+0xa8>)
 80018dc:	f7fe feac 	bl	8000638 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <sine_creator2+0xac>)
 80018ee:	f7fe ffcd 	bl	800088c <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	f7fe fce5 	bl	80002cc <__adddf3>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	a313      	add	r3, pc, #76	; (adr r3, 8001958 <sine_creator2+0xa0>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe92 	bl	8000638 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f964 	bl	8000be8 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	ee00 3a10 	vmov	s0, r3
 8001926:	f006 ff91 	bl	800884c <sinf>
 800192a:	eef0 7a40 	vmov.f32	s15, s0
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <sine_creator2+0xb0>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	edc3 7a00 	vstr	s15, [r3]
	for (var = 0; var < F_SAMPLE; ++var)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3301      	adds	r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001946:	d3bd      	bcc.n	80018c4 <sine_creator2+0xc>
	}
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	54442d18 	.word	0x54442d18
 800195c:	400921fb 	.word	0x400921fb
 8001960:	40490000 	.word	0x40490000
 8001964:	408f4000 	.word	0x408f4000
 8001968:	200002d8 	.word	0x200002d8
 800196c:	00000000 	.word	0x00000000

08001970 <sine_creator3>:

void sine_creator3()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
	// Create 50 Hz sine with 120 deg phase shift
	uint32_t var;
	for (var = 0; var < F_SAMPLE; ++var)
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	e046      	b.n	8001a0a <sine_creator3+0x9a>
	{
		sine2[var] = sinf(50.0 * (float)var * 1/F_SAMPLE * TWO_PI - 120 * PI/180);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001986:	ee17 0a90 	vmov	r0, s15
 800198a:	f7fe fdfd 	bl	8000588 <__aeabi_f2d>
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <sine_creator3+0xc0>)
 8001994:	f7fe fe50 	bl	8000638 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <sine_creator3+0xc4>)
 80019a6:	f7fe ff71 	bl	800088c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	f7fe fc89 	bl	80002cc <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	a317      	add	r3, pc, #92	; (adr r3, 8001a20 <sine_creator3+0xb0>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe36 	bl	8000638 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	a314      	add	r3, pc, #80	; (adr r3, 8001a28 <sine_creator3+0xb8>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fc75 	bl	80002c8 <__aeabi_dsub>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8ff 	bl	8000be8 <__aeabi_d2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	ee00 3a10 	vmov	s0, r3
 80019f0:	f006 ff2c 	bl	800884c <sinf>
 80019f4:	eef0 7a40 	vmov.f32	s15, s0
 80019f8:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <sine_creator3+0xc8>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	edc3 7a00 	vstr	s15, [r3]
	for (var = 0; var < F_SAMPLE; ++var)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a10:	d3b4      	bcc.n	800197c <sine_creator3+0xc>
	}
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	f3af 8000 	nop.w
 8001a20:	54442d18 	.word	0x54442d18
 8001a24:	400921fb 	.word	0x400921fb
 8001a28:	382d7365 	.word	0x382d7365
 8001a2c:	4000c152 	.word	0x4000c152
 8001a30:	40490000 	.word	0x40490000
 8001a34:	408f4000 	.word	0x408f4000
 8001a38:	200013d8 	.word	0x200013d8

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <Error_Handler+0x8>
	...

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	; 0x30
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a45      	ldr	r2, [pc, #276]	; (8001bcc <HAL_ADC_MspInit+0x134>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d157      	bne.n	8001b6a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a43      	ldr	r2, [pc, #268]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a3c      	ldr	r2, [pc, #240]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	4833      	ldr	r0, [pc, #204]	; (8001bd4 <HAL_ADC_MspInit+0x13c>)
 8001b06:	f001 fc73 	bl	80033f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b0c:	4a33      	ldr	r2, [pc, #204]	; (8001bdc <HAL_ADC_MspInit+0x144>)
 8001b0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b4c:	4822      	ldr	r0, [pc, #136]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b4e:	f001 f8d3 	bl	8002cf8 <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b58:	f7ff ff70 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b60:	639a      	str	r2, [r3, #56]	; 0x38
 8001b62:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <HAL_ADC_MspInit+0x140>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b68:	e02c      	b.n	8001bc4 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_ADC_MspInit+0x148>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d127      	bne.n	8001bc4 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b82:	6453      	str	r3, [r2, #68]	; 0x44
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_ADC_MspInit+0x138>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_ADC_MspInit+0x13c>)
 8001bc0:	f001 fc16 	bl	80033f0 <HAL_GPIO_Init>
}
 8001bc4:	bf00      	nop
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	20001364 	.word	0x20001364
 8001bdc:	40026410 	.word	0x40026410
 8001be0:	40012100 	.word	0x40012100

08001be4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_DAC_MspInit+0x7c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d127      	bne.n	8001c56 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_DAC_MspInit+0x80>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <HAL_DAC_MspInit+0x80>)
 8001c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_DAC_MspInit+0x80>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_DAC_MspInit+0x80>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_DAC_MspInit+0x80>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_DAC_MspInit+0x80>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c3e:	2310      	movs	r3, #16
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	2303      	movs	r3, #3
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_DAC_MspInit+0x84>)
 8001c52:	f001 fbcd 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40007400 	.word	0x40007400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_TIM_Base_MspInit+0x48>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d115      	bne.n	8001caa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2019      	movs	r0, #25
 8001ca0:	f000 ff0b 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ca4:	2019      	movs	r0, #25
 8001ca6:	f000 ff24 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40014400 	.word	0x40014400
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_UART_MspInit+0xf0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d161      	bne.n	8001da2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <HAL_UART_MspInit+0xf4>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <HAL_UART_MspInit+0xf4>)
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_UART_MspInit+0xf4>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <HAL_UART_MspInit+0xf4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <HAL_UART_MspInit+0xf4>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <HAL_UART_MspInit+0xf4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d16:	230c      	movs	r3, #12
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d26:	2307      	movs	r3, #7
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4820      	ldr	r0, [pc, #128]	; (8001db4 <HAL_UART_MspInit+0xf8>)
 8001d32:	f001 fb5d 	bl	80033f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d38:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <HAL_UART_MspInit+0x100>)
 8001d3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d42:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d46:	2240      	movs	r2, #64	; 0x40
 8001d48:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d56:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d76:	4810      	ldr	r0, [pc, #64]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d78:	f000 ffbe 	bl	8002cf8 <HAL_DMA_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001d82:	f7ff fe5b 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_UART_MspInit+0xfc>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	2026      	movs	r0, #38	; 0x26
 8001d98:	f000 fe8f 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d9c:	2026      	movs	r0, #38	; 0x26
 8001d9e:	f000 fea8 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	200012ec 	.word	0x200012ec
 8001dbc:	400260a0 	.word	0x400260a0

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0c:	f000 f97e 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <DMA1_Stream6_IRQHandler+0x10>)
 8001e1a:	f001 f8ad 	bl	8002f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200012ec 	.word	0x200012ec

08001e28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e2e:	f002 fb0a 	bl	8004446 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000028c 	.word	0x2000028c

08001e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <USART2_IRQHandler+0x10>)
 8001e42:	f002 ff3b 	bl	8004cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20002380 	.word	0x20002380

08001e50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA2_Stream0_IRQHandler+0x10>)
 8001e56:	f001 f88f 	bl	8002f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20001364 	.word	0x20001364

08001e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	return 1;
 8001e68:	2301      	movs	r3, #1
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_kill>:

int _kill(int pid, int sig)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7e:	f003 ffa1 	bl	8005dc4 <__errno>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2216      	movs	r2, #22
 8001e86:	601a      	str	r2, [r3, #0]
	return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_exit>:

void _exit (int status)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffe7 	bl	8001e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea6:	e7fe      	b.n	8001ea6 <_exit+0x12>

08001ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e00a      	b.n	8001ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eba:	f3af 8000 	nop.w
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf0      	blt.n	8001eba <_read+0x12>
	}

return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e009      	b.n	8001f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf1      	blt.n	8001ef4 <_write+0x12>
	}
	return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_close>:

int _close(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f003 ff06 	bl	8005dc4 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	20000214 	.word	0x20000214
 8001fec:	200023e0 	.word	0x200023e0

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201a:	490e      	ldr	r1, [pc, #56]	; (8002054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002030:	4c0b      	ldr	r4, [pc, #44]	; (8002060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800203e:	f7ff ffd7 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002042:	f003 fec5 	bl	8005dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7fe ff9b 	bl	8000f80 <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800204c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002058:	08009cf4 	.word	0x08009cf4
  ldr r2, =_sbss
 800205c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002060:	200023dc 	.word	0x200023dc

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 fd07 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	2000      	movs	r0, #0
 8002098:	f000 f808 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fcd4 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x54>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_InitTick+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fd1f 	bl	8002b0e <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00e      	b.n	80020f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d80a      	bhi.n	80020f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 fce7 	bl	8002aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_InitTick+0x5c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000000c 	.word	0x2000000c
 8002104:	20000014 	.word	0x20000014
 8002108:	20000010 	.word	0x20000010

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000014 	.word	0x20000014
 8002130:	200023c8 	.word	0x200023c8

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	200023c8 	.word	0x200023c8

0800214c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e033      	b.n	80021ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fc94 	bl	8001a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d118      	bne.n	80021bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002192:	f023 0302 	bic.w	r3, r3, #2
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fab4 	bl	800270c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ba:	e001      	b.n	80021c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Start+0x1a>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0b2      	b.n	8002354 <HAL_ADC_Start+0x180>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d018      	beq.n	8002236 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002214:	4b52      	ldr	r3, [pc, #328]	; (8002360 <HAL_ADC_Start+0x18c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_ADC_Start+0x190>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9a      	lsrs	r2, r3, #18
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002228:	e002      	b.n	8002230 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d17a      	bne.n	800233a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800226e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002282:	d106      	bne.n	8002292 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	f023 0206 	bic.w	r2, r3, #6
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
 8002290:	e002      	b.n	8002298 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_ADC_Start+0x194>)
 80022a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d12a      	bne.n	8002310 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2b      	ldr	r2, [pc, #172]	; (800236c <HAL_ADC_Start+0x198>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d015      	beq.n	80022f0 <HAL_ADC_Start+0x11c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_ADC_Start+0x19c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d105      	bne.n	80022da <HAL_ADC_Start+0x106>
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_ADC_Start+0x194>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a25      	ldr	r2, [pc, #148]	; (8002374 <HAL_ADC_Start+0x1a0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d136      	bne.n	8002352 <HAL_ADC_Start+0x17e>
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_ADC_Start+0x194>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d130      	bne.n	8002352 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d129      	bne.n	8002352 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	e020      	b.n	8002352 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_ADC_Start+0x198>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11b      	bne.n	8002352 <HAL_ADC_Start+0x17e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d114      	bne.n	8002352 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e00b      	b.n	8002352 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f043 0210 	orr.w	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	2000000c 	.word	0x2000000c
 8002364:	431bde83 	.word	0x431bde83
 8002368:	40012300 	.word	0x40012300
 800236c:	40012000 	.word	0x40012000
 8002370:	40012100 	.word	0x40012100
 8002374:	40012200 	.word	0x40012200

08002378 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002394:	d113      	bne.n	80023be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a4:	d10b      	bne.n	80023be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e063      	b.n	8002486 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80023be:	f7ff feb9 	bl	8002134 <HAL_GetTick>
 80023c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023c4:	e021      	b.n	800240a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d01d      	beq.n	800240a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_ADC_PollForConversion+0x6c>
 80023d4:	f7ff feae 	bl	8002134 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d212      	bcs.n	800240a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d00b      	beq.n	800240a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e03d      	b.n	8002486 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d1d6      	bne.n	80023c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0212 	mvn.w	r2, #18
 8002420:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d123      	bne.n	8002484 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11f      	bne.n	8002484 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1c>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e113      	b.n	80026ec <HAL_ADC_ConfigChannel+0x244>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b09      	cmp	r3, #9
 80024d2:	d925      	bls.n	8002520 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68d9      	ldr	r1, [r3, #12]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	3b1e      	subs	r3, #30
 80024ea:	2207      	movs	r2, #7
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43da      	mvns	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	400a      	ands	r2, r1
 80024f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68d9      	ldr	r1, [r3, #12]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b29b      	uxth	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	4603      	mov	r3, r0
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4403      	add	r3, r0
 8002512:	3b1e      	subs	r3, #30
 8002514:	409a      	lsls	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	e022      	b.n	8002566 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6919      	ldr	r1, [r3, #16]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	2207      	movs	r2, #7
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	400a      	ands	r2, r1
 8002542:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6919      	ldr	r1, [r3, #16]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	4603      	mov	r3, r0
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4403      	add	r3, r0
 800255c:	409a      	lsls	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b06      	cmp	r3, #6
 800256c:	d824      	bhi.n	80025b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b05      	subs	r3, #5
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b05      	subs	r3, #5
 80025aa:	fa00 f203 	lsl.w	r2, r0, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34
 80025b6:	e04c      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d824      	bhi.n	800260a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b23      	subs	r3, #35	; 0x23
 80025d2:	221f      	movs	r2, #31
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43da      	mvns	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	400a      	ands	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	3b23      	subs	r3, #35	; 0x23
 80025fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
 8002608:	e023      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b41      	subs	r3, #65	; 0x41
 800261c:	221f      	movs	r2, #31
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	400a      	ands	r2, r1
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b41      	subs	r3, #65	; 0x41
 8002646:	fa00 f203 	lsl.w	r2, r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_ADC_ConfigChannel+0x250>)
 8002654:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a28      	ldr	r2, [pc, #160]	; (80026fc <HAL_ADC_ConfigChannel+0x254>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d10f      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d8>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b12      	cmp	r3, #18
 8002666:	d10b      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_ADC_ConfigChannel+0x254>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12b      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x23a>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_ADC_ConfigChannel+0x258>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <HAL_ADC_ConfigChannel+0x1f4>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b11      	cmp	r3, #17
 800269a:	d122      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_ADC_ConfigChannel+0x258>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d111      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_ADC_ConfigChannel+0x25c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_ADC_ConfigChannel+0x260>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9a      	lsrs	r2, r3, #18
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026d4:	e002      	b.n	80026dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f9      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40012300 	.word	0x40012300
 80026fc:	40012000 	.word	0x40012000
 8002700:	10000012 	.word	0x10000012
 8002704:	2000000c 	.word	0x2000000c
 8002708:	431bde83 	.word	0x431bde83

0800270c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002714:	4b79      	ldr	r3, [pc, #484]	; (80028fc <ADC_Init+0x1f0>)
 8002716:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	021a      	lsls	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	4a58      	ldr	r2, [pc, #352]	; (8002900 <ADC_Init+0x1f4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d022      	beq.n	80027ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	e00f      	b.n	800280a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002808:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0202 	bic.w	r2, r2, #2
 8002818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7e1b      	ldrb	r3, [r3, #24]
 8002824:	005a      	lsls	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01b      	beq.n	8002870 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002846:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	3b01      	subs	r3, #1
 8002864:	035a      	lsls	r2, r3, #13
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	e007      	b.n	8002880 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	3b01      	subs	r3, #1
 800289c:	051a      	lsls	r2, r3, #20
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028c2:	025a      	lsls	r2, r3, #9
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	029a      	lsls	r2, r3, #10
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40012300 	.word	0x40012300
 8002900:	0f000001 	.word	0x0f000001

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	; (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f7ff ff8e 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff29 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff3e 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff8e 	bl	80029f8 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5d 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff31 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ffa2 	bl	8002a60 <SysTick_Config>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e014      	b.n	8002b62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff f84b 	bl	8001be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	795b      	ldrb	r3, [r3, #5]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_DAC_Start+0x16>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e040      	b.n	8002c02 <HAL_DAC_Start+0x98>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6819      	ldr	r1, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002bb4:	2b3c      	cmp	r3, #60	; 0x3c
 8002bb6:	d11d      	bne.n	8002bf4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	e014      	b.n	8002bf4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	213c      	movs	r1, #60	; 0x3c
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0202 	orr.w	r2, r2, #2
 8002bf2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b087      	sub	sp, #28
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	3308      	adds	r3, #8
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e004      	b.n	8002c42 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3314      	adds	r3, #20
 8002c40:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	461a      	mov	r2, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	795b      	ldrb	r3, [r3, #5]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_DAC_ConfigChannel+0x18>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e03c      	b.n	8002cea <HAL_DAC_ConfigChannel+0x92>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4013      	ands	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	22c0      	movs	r2, #192	; 0xc0
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	400a      	ands	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff fa16 	bl	8002134 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e099      	b.n	8002e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d34:	e00f      	b.n	8002d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d36:	f7ff f9fd 	bl	8002134 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d908      	bls.n	8002d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e078      	b.n	8002e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e8      	bne.n	8002d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_DMA_Init+0x158>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4313      	orrs	r3, r2
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 0307 	bic.w	r3, r3, #7
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d117      	bne.n	8002e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fa7b 	bl	80032f8 <DMA_CheckFifoParam>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e16:	2301      	movs	r3, #1
 8002e18:	e016      	b.n	8002e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa32 	bl	800328c <DMA_CalcBaseAndBitshift>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	f010803f 	.word	0xf010803f

08002e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e62:	f7ff f967 	bl	8002134 <HAL_GetTick>
 8002e66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d008      	beq.n	8002e86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e052      	b.n	8002f2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0216 	bic.w	r2, r2, #22
 8002e94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <HAL_DMA_Abort+0x62>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0208 	bic.w	r2, r2, #8
 8002ec4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed6:	e013      	b.n	8002f00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed8:	f7ff f92c 	bl	8002134 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d90c      	bls.n	8002f00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e015      	b.n	8002f2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e4      	bne.n	8002ed8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	223f      	movs	r2, #63	; 0x3f
 8002f14:	409a      	lsls	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d004      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00c      	b.n	8002f6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2205      	movs	r2, #5
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f84:	4b92      	ldr	r3, [pc, #584]	; (80031d0 <HAL_DMA_IRQHandler+0x258>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a92      	ldr	r2, [pc, #584]	; (80031d4 <HAL_DMA_IRQHandler+0x25c>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0a9b      	lsrs	r3, r3, #10
 8002f90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01a      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0204 	bic.w	r2, r2, #4
 8002fca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	2201      	movs	r2, #1
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	2201      	movs	r2, #1
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	f043 0202 	orr.w	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	2204      	movs	r2, #4
 8003020:	409a      	lsls	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d012      	beq.n	8003050 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	2204      	movs	r2, #4
 800303e:	409a      	lsls	r2, r3
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	f043 0204 	orr.w	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	2210      	movs	r2, #16
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d043      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03c      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003072:	2210      	movs	r2, #16
 8003074:	409a      	lsls	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d018      	beq.n	80030ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d108      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d024      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
 80030a6:	e01f      	b.n	80030e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
 80030b8:	e016      	b.n	80030e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0208 	bic.w	r2, r2, #8
 80030d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	2220      	movs	r2, #32
 80030ee:	409a      	lsls	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 808e 	beq.w	8003216 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 8086 	beq.w	8003216 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	2220      	movs	r2, #32
 8003110:	409a      	lsls	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b05      	cmp	r3, #5
 8003120:	d136      	bne.n	8003190 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0216 	bic.w	r2, r2, #22
 8003130:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003140:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <HAL_DMA_IRQHandler+0x1da>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0208 	bic.w	r2, r2, #8
 8003160:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	223f      	movs	r2, #63	; 0x3f
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003182:	2b00      	cmp	r3, #0
 8003184:	d07d      	beq.n	8003282 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
        }
        return;
 800318e:	e078      	b.n	8003282 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01c      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d108      	bne.n	80031be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d030      	beq.n	8003216 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
 80031bc:	e02b      	b.n	8003216 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
 80031ce:	e022      	b.n	8003216 <HAL_DMA_IRQHandler+0x29e>
 80031d0:	2000000c 	.word	0x2000000c
 80031d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0210 	bic.w	r2, r2, #16
 80031f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	2b00      	cmp	r3, #0
 800321c:	d032      	beq.n	8003284 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d022      	beq.n	8003270 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2205      	movs	r2, #5
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3301      	adds	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	429a      	cmp	r2, r3
 800324c:	d307      	bcc.n	800325e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f2      	bne.n	8003242 <HAL_DMA_IRQHandler+0x2ca>
 800325c:	e000      	b.n	8003260 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800325e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
 8003280:	e000      	b.n	8003284 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003282:	bf00      	nop
    }
  }
}
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop

0800328c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	3b10      	subs	r3, #16
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <DMA_CalcBaseAndBitshift+0x64>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032a6:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <DMA_CalcBaseAndBitshift+0x68>)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d909      	bls.n	80032ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	1d1a      	adds	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	659a      	str	r2, [r3, #88]	; 0x58
 80032cc:	e007      	b.n	80032de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	aaaaaaab 	.word	0xaaaaaaab
 80032f4:	08009528 	.word	0x08009528

080032f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d11f      	bne.n	8003352 <DMA_CheckFifoParam+0x5a>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d856      	bhi.n	80033c6 <DMA_CheckFifoParam+0xce>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <DMA_CheckFifoParam+0x28>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003331 	.word	0x08003331
 8003324:	08003343 	.word	0x08003343
 8003328:	08003331 	.word	0x08003331
 800332c:	080033c7 	.word	0x080033c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d046      	beq.n	80033ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003340:	e043      	b.n	80033ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334a:	d140      	bne.n	80033ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003350:	e03d      	b.n	80033ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335a:	d121      	bne.n	80033a0 <DMA_CheckFifoParam+0xa8>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d837      	bhi.n	80033d2 <DMA_CheckFifoParam+0xda>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <DMA_CheckFifoParam+0x70>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	08003379 	.word	0x08003379
 800336c:	0800337f 	.word	0x0800337f
 8003370:	08003379 	.word	0x08003379
 8003374:	08003391 	.word	0x08003391
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      break;
 800337c:	e030      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d025      	beq.n	80033d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338e:	e022      	b.n	80033d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003398:	d11f      	bne.n	80033da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800339e:	e01c      	b.n	80033da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d903      	bls.n	80033ae <DMA_CheckFifoParam+0xb6>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d003      	beq.n	80033b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033ac:	e018      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
      break;
 80033b2:	e015      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      break;
 80033c4:	e00b      	b.n	80033de <DMA_CheckFifoParam+0xe6>
      break;
 80033c6:	bf00      	nop
 80033c8:	e00a      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
 80033cc:	e008      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e006      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e004      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e002      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80033da:	bf00      	nop
 80033dc:	e000      	b.n	80033e0 <DMA_CheckFifoParam+0xe8>
      break;
 80033de:	bf00      	nop
    }
  } 
  
  return status; 
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop

080033f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	e165      	b.n	80036d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800340c:	2201      	movs	r2, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	f040 8154 	bne.w	80036d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d005      	beq.n	8003442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343e:	2b02      	cmp	r3, #2
 8003440:	d130      	bne.n	80034a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2203      	movs	r2, #3
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 0201 	and.w	r2, r3, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d017      	beq.n	80034e0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d123      	bne.n	8003534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	08da      	lsrs	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3208      	adds	r2, #8
 80034f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	08da      	lsrs	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3208      	adds	r2, #8
 800352e:	69b9      	ldr	r1, [r7, #24]
 8003530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0203 	and.w	r2, r3, #3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80ae 	beq.w	80036d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <HAL_GPIO_Init+0x300>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	4a5c      	ldr	r2, [pc, #368]	; (80036f0 <HAL_GPIO_Init+0x300>)
 8003580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003584:	6453      	str	r3, [r2, #68]	; 0x44
 8003586:	4b5a      	ldr	r3, [pc, #360]	; (80036f0 <HAL_GPIO_Init+0x300>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003592:	4a58      	ldr	r2, [pc, #352]	; (80036f4 <HAL_GPIO_Init+0x304>)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	3302      	adds	r3, #2
 800359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	220f      	movs	r2, #15
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4f      	ldr	r2, [pc, #316]	; (80036f8 <HAL_GPIO_Init+0x308>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d025      	beq.n	800360a <HAL_GPIO_Init+0x21a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4e      	ldr	r2, [pc, #312]	; (80036fc <HAL_GPIO_Init+0x30c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01f      	beq.n	8003606 <HAL_GPIO_Init+0x216>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <HAL_GPIO_Init+0x310>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d019      	beq.n	8003602 <HAL_GPIO_Init+0x212>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4c      	ldr	r2, [pc, #304]	; (8003704 <HAL_GPIO_Init+0x314>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_GPIO_Init+0x20e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4b      	ldr	r2, [pc, #300]	; (8003708 <HAL_GPIO_Init+0x318>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00d      	beq.n	80035fa <HAL_GPIO_Init+0x20a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_GPIO_Init+0x31c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <HAL_GPIO_Init+0x206>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a49      	ldr	r2, [pc, #292]	; (8003710 <HAL_GPIO_Init+0x320>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_GPIO_Init+0x202>
 80035ee:	2306      	movs	r3, #6
 80035f0:	e00c      	b.n	800360c <HAL_GPIO_Init+0x21c>
 80035f2:	2307      	movs	r3, #7
 80035f4:	e00a      	b.n	800360c <HAL_GPIO_Init+0x21c>
 80035f6:	2305      	movs	r3, #5
 80035f8:	e008      	b.n	800360c <HAL_GPIO_Init+0x21c>
 80035fa:	2304      	movs	r3, #4
 80035fc:	e006      	b.n	800360c <HAL_GPIO_Init+0x21c>
 80035fe:	2303      	movs	r3, #3
 8003600:	e004      	b.n	800360c <HAL_GPIO_Init+0x21c>
 8003602:	2302      	movs	r3, #2
 8003604:	e002      	b.n	800360c <HAL_GPIO_Init+0x21c>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_GPIO_Init+0x21c>
 800360a:	2300      	movs	r3, #0
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f002 0203 	and.w	r2, r2, #3
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	4093      	lsls	r3, r2
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800361c:	4935      	ldr	r1, [pc, #212]	; (80036f4 <HAL_GPIO_Init+0x304>)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800362a:	4b3a      	ldr	r3, [pc, #232]	; (8003714 <HAL_GPIO_Init+0x324>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800364e:	4a31      	ldr	r2, [pc, #196]	; (8003714 <HAL_GPIO_Init+0x324>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003654:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <HAL_GPIO_Init+0x324>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003678:	4a26      	ldr	r2, [pc, #152]	; (8003714 <HAL_GPIO_Init+0x324>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800367e:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_GPIO_Init+0x324>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_GPIO_Init+0x324>)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_GPIO_Init+0x324>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036cc:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_GPIO_Init+0x324>)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3301      	adds	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	f67f ae96 	bls.w	800340c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3724      	adds	r7, #36	; 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40020000 	.word	0x40020000
 80036fc:	40020400 	.word	0x40020400
 8003700:	40020800 	.word	0x40020800
 8003704:	40020c00 	.word	0x40020c00
 8003708:	40021000 	.word	0x40021000
 800370c:	40021400 	.word	0x40021400
 8003710:	40021800 	.word	0x40021800
 8003714:	40013c00 	.word	0x40013c00

08003718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
 8003724:	4613      	mov	r3, r2
 8003726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003728:	787b      	ldrb	r3, [r7, #1]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003734:	e003      	b.n	800373e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	619a      	str	r2, [r3, #24]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_PWREx_EnableOverDrive+0x90>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003778:	f7fe fcdc 	bl	8002134 <HAL_GetTick>
 800377c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800377e:	e009      	b.n	8003794 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003780:	f7fe fcd8 	bl	8002134 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800378e:	d901      	bls.n	8003794 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e01f      	b.n	80037d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d1ee      	bne.n	8003780 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a8:	f7fe fcc4 	bl	8002134 <HAL_GetTick>
 80037ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037ae:	e009      	b.n	80037c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037b0:	f7fe fcc0 	bl	8002134 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037be:	d901      	bls.n	80037c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e007      	b.n	80037d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d0:	d1ee      	bne.n	80037b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	420e0040 	.word	0x420e0040
 80037e4:	40007000 	.word	0x40007000
 80037e8:	420e0044 	.word	0x420e0044

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0cc      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b68      	ldr	r3, [pc, #416]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d90c      	bls.n	8003828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b65      	ldr	r3, [pc, #404]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b8      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a58      	ldr	r2, [pc, #352]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494d      	ldr	r1, [pc, #308]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d119      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b3f      	ldr	r3, [pc, #252]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e067      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4934      	ldr	r1, [pc, #208]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fe fc2a 	bl	8002134 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fe fc26 	bl	8002134 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e04f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d20c      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4916      	ldr	r1, [pc, #88]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f855 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 8003976:	4602      	mov	r2, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	490a      	ldr	r1, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	5ccb      	ldrb	r3, [r1, r3]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fb8a 	bl	80020ac <HAL_InitTick>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	08009510 	.word	0x08009510
 80039b0:	2000000c 	.word	0x2000000c
 80039b4:	20000010 	.word	0x20000010

080039b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_GetHCLKFreq+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	2000000c 	.word	0x2000000c

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08009520 	.word	0x08009520

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039fc:	f7ff ffdc 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0b5b      	lsrs	r3, r3, #13
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	08009520 	.word	0x08009520

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a24:	b087      	sub	sp, #28
 8003a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a28:	2600      	movs	r6, #0
 8003a2a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003a2c:	2600      	movs	r6, #0
 8003a2e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8003a30:	2600      	movs	r6, #0
 8003a32:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003a34:	2600      	movs	r6, #0
 8003a36:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a38:	2600      	movs	r6, #0
 8003a3a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3c:	4ea3      	ldr	r6, [pc, #652]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003a3e:	68b6      	ldr	r6, [r6, #8]
 8003a40:	f006 060c 	and.w	r6, r6, #12
 8003a44:	2e0c      	cmp	r6, #12
 8003a46:	f200 8137 	bhi.w	8003cb8 <HAL_RCC_GetSysClockFreq+0x298>
 8003a4a:	f20f 0c08 	addw	ip, pc, #8
 8003a4e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a89 	.word	0x08003a89
 8003a58:	08003cb9 	.word	0x08003cb9
 8003a5c:	08003cb9 	.word	0x08003cb9
 8003a60:	08003cb9 	.word	0x08003cb9
 8003a64:	08003a8f 	.word	0x08003a8f
 8003a68:	08003cb9 	.word	0x08003cb9
 8003a6c:	08003cb9 	.word	0x08003cb9
 8003a70:	08003cb9 	.word	0x08003cb9
 8003a74:	08003a95 	.word	0x08003a95
 8003a78:	08003cb9 	.word	0x08003cb9
 8003a7c:	08003cb9 	.word	0x08003cb9
 8003a80:	08003cb9 	.word	0x08003cb9
 8003a84:	08003bab 	.word	0x08003bab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b91      	ldr	r3, [pc, #580]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003a8a:	613b      	str	r3, [r7, #16]
       break;
 8003a8c:	e117      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a8e:	4b91      	ldr	r3, [pc, #580]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003a90:	613b      	str	r3, [r7, #16]
      break;
 8003a92:	e114      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a94:	4b8d      	ldr	r3, [pc, #564]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d024      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003aba:	f04f 0500 	mov.w	r5, #0
 8003abe:	ea02 0004 	and.w	r0, r2, r4
 8003ac2:	ea03 0105 	and.w	r1, r3, r5
 8003ac6:	4b83      	ldr	r3, [pc, #524]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003ac8:	fb03 f201 	mul.w	r2, r3, r1
 8003acc:	2300      	movs	r3, #0
 8003ace:	fb03 f300 	mul.w	r3, r3, r0
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a7f      	ldr	r2, [pc, #508]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003ad6:	fba0 0102 	umull	r0, r1, r0, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	4619      	mov	r1, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	f7fd f8cf 	bl	8000c88 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4613      	mov	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e04c      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af4:	4b75      	ldr	r3, [pc, #468]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	461a      	mov	r2, r3
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	ea02 0800 	and.w	r8, r2, r0
 8003b0c:	ea03 0901 	and.w	r9, r3, r1
 8003b10:	4640      	mov	r0, r8
 8003b12:	4649      	mov	r1, r9
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	014b      	lsls	r3, r1, #5
 8003b1e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b22:	0142      	lsls	r2, r0, #5
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	ebb0 0008 	subs.w	r0, r0, r8
 8003b2c:	eb61 0109 	sbc.w	r1, r1, r9
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	018b      	lsls	r3, r1, #6
 8003b3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b3e:	0182      	lsls	r2, r0, #6
 8003b40:	1a12      	subs	r2, r2, r0
 8003b42:	eb63 0301 	sbc.w	r3, r3, r1
 8003b46:	f04f 0000 	mov.w	r0, #0
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	00d9      	lsls	r1, r3, #3
 8003b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b54:	00d0      	lsls	r0, r2, #3
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	eb12 0208 	adds.w	r2, r2, r8
 8003b5e:	eb43 0309 	adc.w	r3, r3, r9
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	0299      	lsls	r1, r3, #10
 8003b6c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b70:	0290      	lsls	r0, r2, #10
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	f7fd f881 	bl	8000c88 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b8e:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	613b      	str	r3, [r7, #16]
      break;
 8003ba8:	e089      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003baa:	4948      	ldr	r1, [pc, #288]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003bac:	6849      	ldr	r1, [r1, #4]
 8003bae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003bb2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb4:	4945      	ldr	r1, [pc, #276]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003bb6:	6849      	ldr	r1, [r1, #4]
 8003bb8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	d024      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc0:	4942      	ldr	r1, [pc, #264]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003bc2:	6849      	ldr	r1, [r1, #4]
 8003bc4:	0989      	lsrs	r1, r1, #6
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	f04f 0100 	mov.w	r1, #0
 8003bcc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003bd0:	f04f 0500 	mov.w	r5, #0
 8003bd4:	ea00 0204 	and.w	r2, r0, r4
 8003bd8:	ea01 0305 	and.w	r3, r1, r5
 8003bdc:	493d      	ldr	r1, [pc, #244]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003bde:	fb01 f003 	mul.w	r0, r1, r3
 8003be2:	2100      	movs	r1, #0
 8003be4:	fb01 f102 	mul.w	r1, r1, r2
 8003be8:	1844      	adds	r4, r0, r1
 8003bea:	493a      	ldr	r1, [pc, #232]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003bec:	fba2 0101 	umull	r0, r1, r2, r1
 8003bf0:	1863      	adds	r3, r4, r1
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	f7fd f844 	bl	8000c88 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e04a      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	461a      	mov	r2, r3
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	ea02 0400 	and.w	r4, r2, r0
 8003c22:	ea03 0501 	and.w	r5, r3, r1
 8003c26:	4620      	mov	r0, r4
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	014b      	lsls	r3, r1, #5
 8003c34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c38:	0142      	lsls	r2, r0, #5
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	1b00      	subs	r0, r0, r4
 8003c40:	eb61 0105 	sbc.w	r1, r1, r5
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	018b      	lsls	r3, r1, #6
 8003c4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c52:	0182      	lsls	r2, r0, #6
 8003c54:	1a12      	subs	r2, r2, r0
 8003c56:	eb63 0301 	sbc.w	r3, r3, r1
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	00d9      	lsls	r1, r3, #3
 8003c64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c68:	00d0      	lsls	r0, r2, #3
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	1912      	adds	r2, r2, r4
 8003c70:	eb45 0303 	adc.w	r3, r5, r3
 8003c74:	f04f 0000 	mov.w	r0, #0
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	0299      	lsls	r1, r3, #10
 8003c7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c82:	0290      	lsls	r0, r2, #10
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	f7fc fff8 	bl	8000c88 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	0f1b      	lsrs	r3, r3, #28
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	613b      	str	r3, [r7, #16]
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003cba:	613b      	str	r3, [r7, #16]
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	693b      	ldr	r3, [r7, #16]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	017d7840 	.word	0x017d7840

08003cd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e28d      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8083 	beq.w	8003dfe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cf8:	4b94      	ldr	r3, [pc, #592]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d019      	beq.n	8003d38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d04:	4b91      	ldr	r3, [pc, #580]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d10:	4b8e      	ldr	r3, [pc, #568]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1c:	d00c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b8b      	ldr	r3, [pc, #556]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2a:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d36:	d10b      	bne.n	8003d50 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	4b84      	ldr	r3, [pc, #528]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05b      	beq.n	8003dfc <HAL_RCC_OscConfig+0x124>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d157      	bne.n	8003dfc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e25a      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x90>
 8003d5a:	4b7c      	ldr	r3, [pc, #496]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7b      	ldr	r2, [pc, #492]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e01d      	b.n	8003da4 <HAL_RCC_OscConfig+0xcc>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0xb4>
 8003d72:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a75      	ldr	r2, [pc, #468]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0xcc>
 8003d8c:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6e      	ldr	r2, [pc, #440]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6b      	ldr	r2, [pc, #428]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe f9c2 	bl	8002134 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fe f9be 	bl	8002134 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	; 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e21f      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0xdc>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe f9ae 	bl	8002134 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe f9aa 	bl	8002134 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e20b      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x104>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d06f      	beq.n	8003eea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e0a:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d017      	beq.n	8003e46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e16:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e22:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b44      	ldr	r3, [pc, #272]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x186>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1d3      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4937      	ldr	r1, [pc, #220]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <HAL_RCC_OscConfig+0x278>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe f957 	bl	8002134 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fe f953 	bl	8002134 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1b4      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b28      	ldr	r3, [pc, #160]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4925      	ldr	r1, [pc, #148]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_OscConfig+0x278>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f936 	bl	8002134 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe f932 	bl	8002134 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e193      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d036      	beq.n	8003f64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_RCC_OscConfig+0x27c>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fe f916 	bl	8002134 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe f912 	bl	8002134 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e173      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x234>
 8003f2a:	e01b      	b.n	8003f64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7fe f8ff 	bl	8002134 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	e00e      	b.n	8003f58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fe f8fb 	bl	8002134 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d907      	bls.n	8003f58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e15c      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	42470000 	.word	0x42470000
 8003f54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b8a      	ldr	r3, [pc, #552]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ea      	bne.n	8003f3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8097 	beq.w	80040a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4b83      	ldr	r3, [pc, #524]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	4b7f      	ldr	r3, [pc, #508]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a7e      	ldr	r2, [pc, #504]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b7c      	ldr	r3, [pc, #496]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b79      	ldr	r3, [pc, #484]	; (8004188 <HAL_RCC_OscConfig+0x4b0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fae:	4b76      	ldr	r3, [pc, #472]	; (8004188 <HAL_RCC_OscConfig+0x4b0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x4b0>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fe f8bb 	bl	8002134 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fe f8b7 	bl	8002134 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e118      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	4b6c      	ldr	r3, [pc, #432]	; (8004188 <HAL_RCC_OscConfig+0x4b0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x31e>
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a65      	ldr	r2, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	e01c      	b.n	8004030 <HAL_RCC_OscConfig+0x358>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x340>
 8003ffe:	4b61      	ldr	r3, [pc, #388]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a60      	ldr	r2, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004004:	f043 0304 	orr.w	r3, r3, #4
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
 800400a:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0x358>
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	4a59      	ldr	r2, [pc, #356]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	; 0x70
 8004024:	4b57      	ldr	r3, [pc, #348]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a56      	ldr	r2, [pc, #344]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800402a:	f023 0304 	bic.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d015      	beq.n	8004064 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fe f87c 	bl	8002134 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fe f878 	bl	8002134 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0d7      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004056:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ee      	beq.n	8004040 <HAL_RCC_OscConfig+0x368>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fe f866 	bl	8002134 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fe f862 	bl	8002134 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0c1      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004082:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ee      	bne.n	800406c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80ad 	beq.w	8004204 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040aa:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d060      	beq.n	8004178 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d145      	bne.n	800414a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b33      	ldr	r3, [pc, #204]	; (800418c <HAL_RCC_OscConfig+0x4b4>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe f836 	bl	8002134 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe f832 	bl	8002134 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e093      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	3b01      	subs	r3, #1
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	071b      	lsls	r3, r3, #28
 8004116:	491b      	ldr	r1, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x4b4>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fe f807 	bl	8002134 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412a:	f7fe f803 	bl	8002134 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e064      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x452>
 8004148:	e05c      	b.n	8004204 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414a:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_RCC_OscConfig+0x4b4>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd fff0 	bl	8002134 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004158:	f7fd ffec 	bl	8002134 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e04d      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x480>
 8004176:	e045      	b.n	8004204 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e040      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000
 800418c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004190:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <HAL_RCC_OscConfig+0x538>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d030      	beq.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d129      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d122      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d119      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	3b01      	subs	r3, #1
 80041da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d10f      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800

08004214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e041      	b.n	80042aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd fd16 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f000 fa80 	bl	8004758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d001      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e04e      	b.n	800436a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a23      	ldr	r2, [pc, #140]	; (8004378 <HAL_TIM_Base_Start_IT+0xc4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x80>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f6:	d01d      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x80>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1f      	ldr	r2, [pc, #124]	; (800437c <HAL_TIM_Base_Start_IT+0xc8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x80>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <HAL_TIM_Base_Start_IT+0xcc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x80>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_TIM_Base_Start_IT+0xd0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x80>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_TIM_Base_Start_IT+0xd4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x80>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a19      	ldr	r2, [pc, #100]	; (800438c <HAL_TIM_Base_Start_IT+0xd8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x80>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIM_Base_Start_IT+0xdc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d111      	bne.n	8004358 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b06      	cmp	r3, #6
 8004344:	d010      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004356:	e007      	b.n	8004368 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40010400 	.word	0x40010400
 800438c:	40014000 	.word	0x40014000
 8004390:	40001800 	.word	0x40001800

08004394 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e041      	b.n	800442a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f839 	bl	8004432 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f000 f9c0 	bl	8004758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d122      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d11b      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f06f 0202 	mvn.w	r2, #2
 8004472:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f947 	bl	800471c <HAL_TIM_IC_CaptureCallback>
 800448e:	e005      	b.n	800449c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f939 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f94a 	bl	8004730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d122      	bne.n	80044f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d11b      	bne.n	80044f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0204 	mvn.w	r2, #4
 80044c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f91d 	bl	800471c <HAL_TIM_IC_CaptureCallback>
 80044e2:	e005      	b.n	80044f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f90f 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f920 	bl	8004730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b08      	cmp	r3, #8
 8004502:	d122      	bne.n	800454a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	d11b      	bne.n	800454a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f06f 0208 	mvn.w	r2, #8
 800451a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2204      	movs	r2, #4
 8004520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8f3 	bl	800471c <HAL_TIM_IC_CaptureCallback>
 8004536:	e005      	b.n	8004544 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f8e5 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8f6 	bl	8004730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d122      	bne.n	800459e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b10      	cmp	r3, #16
 8004564:	d11b      	bne.n	800459e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f06f 0210 	mvn.w	r2, #16
 800456e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2208      	movs	r2, #8
 8004574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8c9 	bl	800471c <HAL_TIM_IC_CaptureCallback>
 800458a:	e005      	b.n	8004598 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f8bb 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8cc 	bl	8004730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d10e      	bne.n	80045ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d107      	bne.n	80045ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f06f 0201 	mvn.w	r2, #1
 80045c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fc ff5f 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d10e      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d107      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fb0b 	bl	8004c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d10e      	bne.n	8004622 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d107      	bne.n	8004622 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800461a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f891 	bl	8004744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b20      	cmp	r3, #32
 800462e:	d10e      	bne.n	800464e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b20      	cmp	r3, #32
 800463c:	d107      	bne.n	800464e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f06f 0220 	mvn.w	r2, #32
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fad5 	bl	8004bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_OC_ConfigChannel+0x1a>
 800466e:	2302      	movs	r3, #2
 8004670:	e046      	b.n	8004700 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	d839      	bhi.n	80046f4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046f5 	.word	0x080046f5
 8004690:	080046f5 	.word	0x080046f5
 8004694:	080046f5 	.word	0x080046f5
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046f5 	.word	0x080046f5
 80046a0:	080046f5 	.word	0x080046f5
 80046a4:	080046f5 	.word	0x080046f5
 80046a8:	080046d9 	.word	0x080046d9
 80046ac:	080046f5 	.word	0x080046f5
 80046b0:	080046f5 	.word	0x080046f5
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046e7 	.word	0x080046e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f8e8 	bl	8004898 <TIM_OC1_SetConfig>
      break;
 80046c8:	e015      	b.n	80046f6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f951 	bl	8004978 <TIM_OC2_SetConfig>
      break;
 80046d6:	e00e      	b.n	80046f6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f9c0 	bl	8004a64 <TIM_OC3_SetConfig>
      break;
 80046e4:	e007      	b.n	80046f6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fa2d 	bl	8004b4c <TIM_OC4_SetConfig>
      break;
 80046f2:	e000      	b.n	80046f6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80046f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a40      	ldr	r2, [pc, #256]	; (800486c <TIM_Base_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d00f      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3d      	ldr	r2, [pc, #244]	; (8004870 <TIM_Base_SetConfig+0x118>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00b      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <TIM_Base_SetConfig+0x11c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3b      	ldr	r2, [pc, #236]	; (8004878 <TIM_Base_SetConfig+0x120>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3a      	ldr	r2, [pc, #232]	; (800487c <TIM_Base_SetConfig+0x124>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2f      	ldr	r2, [pc, #188]	; (800486c <TIM_Base_SetConfig+0x114>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d02b      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d027      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <TIM_Base_SetConfig+0x118>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d023      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2b      	ldr	r2, [pc, #172]	; (8004874 <TIM_Base_SetConfig+0x11c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01f      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2a      	ldr	r2, [pc, #168]	; (8004878 <TIM_Base_SetConfig+0x120>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01b      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a29      	ldr	r2, [pc, #164]	; (800487c <TIM_Base_SetConfig+0x124>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d017      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a28      	ldr	r2, [pc, #160]	; (8004880 <TIM_Base_SetConfig+0x128>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a27      	ldr	r2, [pc, #156]	; (8004884 <TIM_Base_SetConfig+0x12c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00f      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a26      	ldr	r2, [pc, #152]	; (8004888 <TIM_Base_SetConfig+0x130>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00b      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a25      	ldr	r2, [pc, #148]	; (800488c <TIM_Base_SetConfig+0x134>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d007      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a24      	ldr	r2, [pc, #144]	; (8004890 <TIM_Base_SetConfig+0x138>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d003      	beq.n	800480a <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a23      	ldr	r2, [pc, #140]	; (8004894 <TIM_Base_SetConfig+0x13c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d108      	bne.n	800481c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a0a      	ldr	r2, [pc, #40]	; (800486c <TIM_Base_SetConfig+0x114>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0xf8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a0c      	ldr	r2, [pc, #48]	; (800487c <TIM_Base_SetConfig+0x124>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d103      	bne.n	8004858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	615a      	str	r2, [r3, #20]
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800
 800488c:	40001800 	.word	0x40001800
 8004890:	40001c00 	.word	0x40001c00
 8004894:	40002000 	.word	0x40002000

08004898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0201 	bic.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 0302 	bic.w	r3, r3, #2
 80048e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a20      	ldr	r2, [pc, #128]	; (8004970 <TIM_OC1_SetConfig+0xd8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC1_SetConfig+0x64>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <TIM_OC1_SetConfig+0xdc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10c      	bne.n	8004916 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0308 	bic.w	r3, r3, #8
 8004902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a15      	ldr	r2, [pc, #84]	; (8004970 <TIM_OC1_SetConfig+0xd8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_OC1_SetConfig+0x8e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a14      	ldr	r2, [pc, #80]	; (8004974 <TIM_OC1_SetConfig+0xdc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d111      	bne.n	800494a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800492c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	621a      	str	r2, [r3, #32]
}
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40010000 	.word	0x40010000
 8004974:	40010400 	.word	0x40010400

08004978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0210 	bic.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0320 	bic.w	r3, r3, #32
 80049c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a22      	ldr	r2, [pc, #136]	; (8004a5c <TIM_OC2_SetConfig+0xe4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_OC2_SetConfig+0x68>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <TIM_OC2_SetConfig+0xe8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10d      	bne.n	80049fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <TIM_OC2_SetConfig+0xe4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_OC2_SetConfig+0x94>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <TIM_OC2_SetConfig+0xe8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d113      	bne.n	8004a34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40010400 	.word	0x40010400

08004a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0303 	bic.w	r3, r3, #3
 8004a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a21      	ldr	r2, [pc, #132]	; (8004b44 <TIM_OC3_SetConfig+0xe0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_OC3_SetConfig+0x66>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a20      	ldr	r2, [pc, #128]	; (8004b48 <TIM_OC3_SetConfig+0xe4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d10d      	bne.n	8004ae6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <TIM_OC3_SetConfig+0xe0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_OC3_SetConfig+0x92>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <TIM_OC3_SetConfig+0xe4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d113      	bne.n	8004b1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	621a      	str	r2, [r3, #32]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40010400 	.word	0x40010400

08004b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <TIM_OC4_SetConfig+0xa4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_OC4_SetConfig+0x68>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a11      	ldr	r2, [pc, #68]	; (8004bf4 <TIM_OC4_SetConfig+0xa8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d109      	bne.n	8004bc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40010400 	.word	0x40010400

08004bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e03f      	b.n	8004cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd f838 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb3f 	bl	80052e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_UART_IRQHandler+0x52>
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa57 	bl	80051ba <UART_Receive_IT>
      return;
 8004d0c:	e17c      	b.n	8005008 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80b1 	beq.w	8004e78 <HAL_UART_IRQHandler+0x1bc>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_UART_IRQHandler+0x70>
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80a6 	beq.w	8004e78 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_UART_IRQHandler+0x90>
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	f043 0201 	orr.w	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_UART_IRQHandler+0xb0>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	f043 0202 	orr.w	r2, r3, #2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_UART_IRQHandler+0xd0>
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	f043 0204 	orr.w	r2, r3, #4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00f      	beq.n	8004db6 <HAL_UART_IRQHandler+0xfa>
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <HAL_UART_IRQHandler+0xee>
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0208 	orr.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 811f 	beq.w	8004ffe <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_UART_IRQHandler+0x11e>
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f9f0 	bl	80051ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <HAL_UART_IRQHandler+0x146>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d031      	beq.n	8004e66 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f930 	bl	8005068 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d123      	bne.n	8004e5e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d013      	beq.n	8004e56 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	4a77      	ldr	r2, [pc, #476]	; (8005010 <HAL_UART_IRQHandler+0x354>)
 8004e34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe f87a 	bl	8002f34 <HAL_DMA_Abort_IT>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e50:	4610      	mov	r0, r2
 8004e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	e00e      	b.n	8004e74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8f0 	bl	800503c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5c:	e00a      	b.n	8004e74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8ec 	bl	800503c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e64:	e006      	b.n	8004e74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8e8 	bl	800503c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e72:	e0c4      	b.n	8004ffe <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e74:	bf00      	nop
    return;
 8004e76:	e0c2      	b.n	8004ffe <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	f040 80a2 	bne.w	8004fc6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 809c 	beq.w	8004fc6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8096 	beq.w	8004fc6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b40      	cmp	r3, #64	; 0x40
 8004ebc:	d14f      	bne.n	8004f5e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004ec8:	8a3b      	ldrh	r3, [r7, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8099 	beq.w	8005002 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ed4:	8a3a      	ldrh	r2, [r7, #16]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	f080 8093 	bcs.w	8005002 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8a3a      	ldrh	r2, [r7, #16]
 8004ee0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eec:	d02b      	beq.n	8004f46 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004efc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0210 	bic.w	r2, r2, #16
 8004f3a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fd ff87 	bl	8002e54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f87a 	bl	8005050 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f5c:	e051      	b.n	8005002 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d047      	beq.n	8005006 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004f76:	8a7b      	ldrh	r3, [r7, #18]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d044      	beq.n	8005006 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f8a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0210 	bic.w	r2, r2, #16
 8004fb8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fba:	8a7b      	ldrh	r3, [r7, #18]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f846 	bl	8005050 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004fc4:	e01f      	b.n	8005006 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x326>
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f885 	bl	80050ea <UART_Transmit_IT>
    return;
 8004fe0:	e012      	b.n	8005008 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <HAL_UART_IRQHandler+0x34c>
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8c7 	bl	800518a <UART_EndTransmit_IT>
    return;
 8004ffc:	e004      	b.n	8005008 <HAL_UART_IRQHandler+0x34c>
    return;
 8004ffe:	bf00      	nop
 8005000:	e002      	b.n	8005008 <HAL_UART_IRQHandler+0x34c>
      return;
 8005002:	bf00      	nop
 8005004:	e000      	b.n	8005008 <HAL_UART_IRQHandler+0x34c>
      return;
 8005006:	bf00      	nop
  }
}
 8005008:	3728      	adds	r7, #40	; 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	080050c3 	.word	0x080050c3

08005014 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800507e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2b01      	cmp	r3, #1
 8005096:	d107      	bne.n	80050a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0210 	bic.w	r2, r2, #16
 80050a6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff ffad 	bl	800503c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b21      	cmp	r3, #33	; 0x21
 80050fc:	d13e      	bne.n	800517c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d114      	bne.n	8005132 <UART_Transmit_IT+0x48>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005124:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	1c9a      	adds	r2, r3, #2
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]
 8005130:	e008      	b.n	8005144 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6211      	str	r1, [r2, #32]
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29b      	uxth	r3, r3
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4619      	mov	r1, r3
 8005152:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10f      	bne.n	8005178 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005166:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005176:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e000      	b.n	800517e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff ff32 	bl	8005014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b22      	cmp	r3, #34	; 0x22
 80051cc:	f040 8087 	bne.w	80052de <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d117      	bne.n	800520a <UART_Receive_IT+0x50>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d113      	bne.n	800520a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	1c9a      	adds	r2, r3, #2
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	629a      	str	r2, [r3, #40]	; 0x28
 8005208:	e026      	b.n	8005258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521c:	d007      	beq.n	800522e <UART_Receive_IT+0x74>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <UART_Receive_IT+0x82>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e008      	b.n	800524e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29b      	uxth	r3, r3
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4619      	mov	r1, r3
 8005266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005268:	2b00      	cmp	r3, #0
 800526a:	d136      	bne.n	80052da <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0220 	bic.w	r2, r2, #32
 800527a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800528a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0201 	bic.w	r2, r2, #1
 800529a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10e      	bne.n	80052ca <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0210 	bic.w	r2, r2, #16
 80052ba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fec4 	bl	8005050 <HAL_UARTEx_RxEventCallback>
 80052c8:	e002      	b.n	80052d0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff feac 	bl	8005028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e002      	b.n	80052e0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	b09f      	sub	sp, #124	; 0x7c
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fe:	68d9      	ldr	r1, [r3, #12]
 8005300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	ea40 0301 	orr.w	r3, r0, r1
 8005308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800530a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	431a      	orrs	r2, r3
 8005314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	431a      	orrs	r2, r3
 800531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4313      	orrs	r3, r2
 8005320:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800532c:	f021 010c 	bic.w	r1, r1, #12
 8005330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005336:	430b      	orrs	r3, r1
 8005338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800533a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	6999      	ldr	r1, [r3, #24]
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	ea40 0301 	orr.w	r3, r0, r1
 8005350:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4bc5      	ldr	r3, [pc, #788]	; (800566c <UART_SetConfig+0x384>)
 8005358:	429a      	cmp	r2, r3
 800535a:	d004      	beq.n	8005366 <UART_SetConfig+0x7e>
 800535c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4bc3      	ldr	r3, [pc, #780]	; (8005670 <UART_SetConfig+0x388>)
 8005362:	429a      	cmp	r2, r3
 8005364:	d103      	bne.n	800536e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005366:	f7fe fb47 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 800536a:	6778      	str	r0, [r7, #116]	; 0x74
 800536c:	e002      	b.n	8005374 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800536e:	f7fe fb2f 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8005372:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537c:	f040 80b6 	bne.w	80054ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005382:	461c      	mov	r4, r3
 8005384:	f04f 0500 	mov.w	r5, #0
 8005388:	4622      	mov	r2, r4
 800538a:	462b      	mov	r3, r5
 800538c:	1891      	adds	r1, r2, r2
 800538e:	6439      	str	r1, [r7, #64]	; 0x40
 8005390:	415b      	adcs	r3, r3
 8005392:	647b      	str	r3, [r7, #68]	; 0x44
 8005394:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005398:	1912      	adds	r2, r2, r4
 800539a:	eb45 0303 	adc.w	r3, r5, r3
 800539e:	f04f 0000 	mov.w	r0, #0
 80053a2:	f04f 0100 	mov.w	r1, #0
 80053a6:	00d9      	lsls	r1, r3, #3
 80053a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053ac:	00d0      	lsls	r0, r2, #3
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	1911      	adds	r1, r2, r4
 80053b4:	6639      	str	r1, [r7, #96]	; 0x60
 80053b6:	416b      	adcs	r3, r5
 80053b8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	461a      	mov	r2, r3
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	1891      	adds	r1, r2, r2
 80053c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053c8:	415b      	adcs	r3, r3
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053d4:	f7fb fc58 	bl	8000c88 <__aeabi_uldivmod>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4ba5      	ldr	r3, [pc, #660]	; (8005674 <UART_SetConfig+0x38c>)
 80053de:	fba3 2302 	umull	r2, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	011e      	lsls	r6, r3, #4
 80053e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e8:	461c      	mov	r4, r3
 80053ea:	f04f 0500 	mov.w	r5, #0
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	1891      	adds	r1, r2, r2
 80053f4:	6339      	str	r1, [r7, #48]	; 0x30
 80053f6:	415b      	adcs	r3, r3
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
 80053fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053fe:	1912      	adds	r2, r2, r4
 8005400:	eb45 0303 	adc.w	r3, r5, r3
 8005404:	f04f 0000 	mov.w	r0, #0
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	00d9      	lsls	r1, r3, #3
 800540e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005412:	00d0      	lsls	r0, r2, #3
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	1911      	adds	r1, r2, r4
 800541a:	65b9      	str	r1, [r7, #88]	; 0x58
 800541c:	416b      	adcs	r3, r5
 800541e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	461a      	mov	r2, r3
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	1891      	adds	r1, r2, r2
 800542c:	62b9      	str	r1, [r7, #40]	; 0x28
 800542e:	415b      	adcs	r3, r3
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005436:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800543a:	f7fb fc25 	bl	8000c88 <__aeabi_uldivmod>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4b8c      	ldr	r3, [pc, #560]	; (8005674 <UART_SetConfig+0x38c>)
 8005444:	fba3 1302 	umull	r1, r3, r3, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	2164      	movs	r1, #100	; 0x64
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	3332      	adds	r3, #50	; 0x32
 8005456:	4a87      	ldr	r2, [pc, #540]	; (8005674 <UART_SetConfig+0x38c>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005464:	441e      	add	r6, r3
 8005466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005468:	4618      	mov	r0, r3
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	1894      	adds	r4, r2, r2
 8005474:	623c      	str	r4, [r7, #32]
 8005476:	415b      	adcs	r3, r3
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800547e:	1812      	adds	r2, r2, r0
 8005480:	eb41 0303 	adc.w	r3, r1, r3
 8005484:	f04f 0400 	mov.w	r4, #0
 8005488:	f04f 0500 	mov.w	r5, #0
 800548c:	00dd      	lsls	r5, r3, #3
 800548e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005492:	00d4      	lsls	r4, r2, #3
 8005494:	4622      	mov	r2, r4
 8005496:	462b      	mov	r3, r5
 8005498:	1814      	adds	r4, r2, r0
 800549a:	653c      	str	r4, [r7, #80]	; 0x50
 800549c:	414b      	adcs	r3, r1
 800549e:	657b      	str	r3, [r7, #84]	; 0x54
 80054a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	461a      	mov	r2, r3
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	1891      	adds	r1, r2, r2
 80054ac:	61b9      	str	r1, [r7, #24]
 80054ae:	415b      	adcs	r3, r3
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054ba:	f7fb fbe5 	bl	8000c88 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4b6c      	ldr	r3, [pc, #432]	; (8005674 <UART_SetConfig+0x38c>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	; 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a67      	ldr	r2, [pc, #412]	; (8005674 <UART_SetConfig+0x38c>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 0207 	and.w	r2, r3, #7
 80054e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4432      	add	r2, r6
 80054e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054ea:	e0b9      	b.n	8005660 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ee:	461c      	mov	r4, r3
 80054f0:	f04f 0500 	mov.w	r5, #0
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	6139      	str	r1, [r7, #16]
 80054fc:	415b      	adcs	r3, r3
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005504:	1912      	adds	r2, r2, r4
 8005506:	eb45 0303 	adc.w	r3, r5, r3
 800550a:	f04f 0000 	mov.w	r0, #0
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	00d9      	lsls	r1, r3, #3
 8005514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005518:	00d0      	lsls	r0, r2, #3
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	eb12 0804 	adds.w	r8, r2, r4
 8005522:	eb43 0905 	adc.w	r9, r3, r5
 8005526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4618      	mov	r0, r3
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	008b      	lsls	r3, r1, #2
 800553a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800553e:	0082      	lsls	r2, r0, #2
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	f7fb fba0 	bl	8000c88 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4b49      	ldr	r3, [pc, #292]	; (8005674 <UART_SetConfig+0x38c>)
 800554e:	fba3 2302 	umull	r2, r3, r3, r2
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	011e      	lsls	r6, r3, #4
 8005556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005558:	4618      	mov	r0, r3
 800555a:	f04f 0100 	mov.w	r1, #0
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	1894      	adds	r4, r2, r2
 8005564:	60bc      	str	r4, [r7, #8]
 8005566:	415b      	adcs	r3, r3
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800556e:	1812      	adds	r2, r2, r0
 8005570:	eb41 0303 	adc.w	r3, r1, r3
 8005574:	f04f 0400 	mov.w	r4, #0
 8005578:	f04f 0500 	mov.w	r5, #0
 800557c:	00dd      	lsls	r5, r3, #3
 800557e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005582:	00d4      	lsls	r4, r2, #3
 8005584:	4622      	mov	r2, r4
 8005586:	462b      	mov	r3, r5
 8005588:	1814      	adds	r4, r2, r0
 800558a:	64bc      	str	r4, [r7, #72]	; 0x48
 800558c:	414b      	adcs	r3, r1
 800558e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4618      	mov	r0, r3
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	008b      	lsls	r3, r1, #2
 80055a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055a8:	0082      	lsls	r2, r0, #2
 80055aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80055ae:	f7fb fb6b 	bl	8000c88 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4b2f      	ldr	r3, [pc, #188]	; (8005674 <UART_SetConfig+0x38c>)
 80055b8:	fba3 1302 	umull	r1, r3, r3, r2
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	2164      	movs	r1, #100	; 0x64
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	3332      	adds	r3, #50	; 0x32
 80055ca:	4a2a      	ldr	r2, [pc, #168]	; (8005674 <UART_SetConfig+0x38c>)
 80055cc:	fba2 2303 	umull	r2, r3, r2, r3
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055d6:	441e      	add	r6, r3
 80055d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055da:	4618      	mov	r0, r3
 80055dc:	f04f 0100 	mov.w	r1, #0
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	1894      	adds	r4, r2, r2
 80055e6:	603c      	str	r4, [r7, #0]
 80055e8:	415b      	adcs	r3, r3
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f0:	1812      	adds	r2, r2, r0
 80055f2:	eb41 0303 	adc.w	r3, r1, r3
 80055f6:	f04f 0400 	mov.w	r4, #0
 80055fa:	f04f 0500 	mov.w	r5, #0
 80055fe:	00dd      	lsls	r5, r3, #3
 8005600:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005604:	00d4      	lsls	r4, r2, #3
 8005606:	4622      	mov	r2, r4
 8005608:	462b      	mov	r3, r5
 800560a:	eb12 0a00 	adds.w	sl, r2, r0
 800560e:	eb43 0b01 	adc.w	fp, r3, r1
 8005612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	f04f 0100 	mov.w	r1, #0
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	008b      	lsls	r3, r1, #2
 8005626:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800562a:	0082      	lsls	r2, r0, #2
 800562c:	4650      	mov	r0, sl
 800562e:	4659      	mov	r1, fp
 8005630:	f7fb fb2a 	bl	8000c88 <__aeabi_uldivmod>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <UART_SetConfig+0x38c>)
 800563a:	fba3 1302 	umull	r1, r3, r3, r2
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	2164      	movs	r1, #100	; 0x64
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	3332      	adds	r3, #50	; 0x32
 800564c:	4a09      	ldr	r2, [pc, #36]	; (8005674 <UART_SetConfig+0x38c>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4432      	add	r2, r6
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	377c      	adds	r7, #124	; 0x7c
 8005664:	46bd      	mov	sp, r7
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	bf00      	nop
 800566c:	40011000 	.word	0x40011000
 8005670:	40011400 	.word	0x40011400
 8005674:	51eb851f 	.word	0x51eb851f

08005678 <abc_to_alpha>:
// this file contains all the functions of PLL.
#include <math.h>

float abc_to_alpha(float a, float b, float c)
{
 8005678:	b5b0      	push	{r4, r5, r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005682:	edc7 0a02 	vstr	s1, [r7, #8]
 8005686:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;
    // alpha = (float)2 * (float)a / ((float) 3); // - 0.3333333 * b - 0.3333333 * c;
    alpha =  0.66666667 * a - 0.3333333 * b - 0.3333333 * c;
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7fa ff7c 	bl	8000588 <__aeabi_f2d>
 8005690:	a31d      	add	r3, pc, #116	; (adr r3, 8005708 <abc_to_alpha+0x90>)
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f7fa ffcf 	bl	8000638 <__aeabi_dmul>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4614      	mov	r4, r2
 80056a0:	461d      	mov	r5, r3
 80056a2:	68b8      	ldr	r0, [r7, #8]
 80056a4:	f7fa ff70 	bl	8000588 <__aeabi_f2d>
 80056a8:	a319      	add	r3, pc, #100	; (adr r3, 8005710 <abc_to_alpha+0x98>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fa ffc3 	bl	8000638 <__aeabi_dmul>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4620      	mov	r0, r4
 80056b8:	4629      	mov	r1, r5
 80056ba:	f7fa fe05 	bl	80002c8 <__aeabi_dsub>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4614      	mov	r4, r2
 80056c4:	461d      	mov	r5, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fa ff5e 	bl	8000588 <__aeabi_f2d>
 80056cc:	a310      	add	r3, pc, #64	; (adr r3, 8005710 <abc_to_alpha+0x98>)
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f7fa ffb1 	bl	8000638 <__aeabi_dmul>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4620      	mov	r0, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	f7fa fdf3 	bl	80002c8 <__aeabi_dsub>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4610      	mov	r0, r2
 80056e8:	4619      	mov	r1, r3
 80056ea:	f7fb fa7d 	bl	8000be8 <__aeabi_d2f>
 80056ee:	4603      	mov	r3, r0
 80056f0:	617b      	str	r3, [r7, #20]
    // alpha = 2.0/3.0 * a - 1.0/3.0 * b - 1.0/3.0 * c;

    return alpha;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	ee07 3a90 	vmov	s15, r3
    // return a;
}
 80056f8:	eeb0 0a67 	vmov.f32	s0, s15
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdb0      	pop	{r4, r5, r7, pc}
 8005702:	bf00      	nop
 8005704:	f3af 8000 	nop.w
 8005708:	571f7693 	.word	0x571f7693
 800570c:	3fe55555 	.word	0x3fe55555
 8005710:	318abc87 	.word	0x318abc87
 8005714:	3fd55555 	.word	0x3fd55555

08005718 <abc_to_beta>:

float abc_to_beta(float a, float b, float c)
{
 8005718:	b5b0      	push	{r4, r5, r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005722:	edc7 0a02 	vstr	s1, [r7, #8]
 8005726:	ed87 1a01 	vstr	s2, [r7, #4]
    float beta;


    // beta = 0.5773503*b - 0.5773503*c;
    beta = 2.0/3.0*((sqrt(3.0)/2.0)*b - (sqrt(3.0)/2.0)*c);
 800572a:	68b8      	ldr	r0, [r7, #8]
 800572c:	f7fa ff2c 	bl	8000588 <__aeabi_f2d>
 8005730:	a317      	add	r3, pc, #92	; (adr r3, 8005790 <abc_to_beta+0x78>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fa ff7f 	bl	8000638 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4614      	mov	r4, r2
 8005740:	461d      	mov	r5, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fa ff20 	bl	8000588 <__aeabi_f2d>
 8005748:	a311      	add	r3, pc, #68	; (adr r3, 8005790 <abc_to_beta+0x78>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f7fa ff73 	bl	8000638 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fa fdb5 	bl	80002c8 <__aeabi_dsub>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4610      	mov	r0, r2
 8005764:	4619      	mov	r1, r3
 8005766:	a30c      	add	r3, pc, #48	; (adr r3, 8005798 <abc_to_beta+0x80>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f7fa ff64 	bl	8000638 <__aeabi_dmul>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	f7fb fa36 	bl	8000be8 <__aeabi_d2f>
 800577c:	4603      	mov	r3, r0
 800577e:	617b      	str	r3, [r7, #20]

    return beta;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	ee07 3a90 	vmov	s15, r3
}
 8005786:	eeb0 0a67 	vmov.f32	s0, s15
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bdb0      	pop	{r4, r5, r7, pc}
 8005790:	e8584caa 	.word	0xe8584caa
 8005794:	3febb67a 	.word	0x3febb67a
 8005798:	55555555 	.word	0x55555555
 800579c:	3fe55555 	.word	0x3fe55555

080057a0 <alphabeta_to_d>:

float alphabeta_to_d(float alpha, float beta, float angle)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	ed2d 8b02 	vpush	{d8}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80057ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80057b2:	ed87 1a01 	vstr	s2, [r7, #4]
    float d;


    d = cosf(angle)*alpha + sinf(angle)*beta;
 80057b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80057ba:	f003 f807 	bl	80087cc <cosf>
 80057be:	eeb0 7a40 	vmov.f32	s14, s0
 80057c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80057c6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80057ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80057ce:	f003 f83d 	bl	800884c <sinf>
 80057d2:	eeb0 7a40 	vmov.f32	s14, s0
 80057d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80057da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057de:	ee78 7a27 	vadd.f32	s15, s16, s15
 80057e2:	edc7 7a05 	vstr	s15, [r7, #20]

    return d;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	ee07 3a90 	vmov	s15, r3
}
 80057ec:	eeb0 0a67 	vmov.f32	s0, s15
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	ecbd 8b02 	vpop	{d8}
 80057f8:	bd80      	pop	{r7, pc}

080057fa <alphabeta_to_q>:

float alphabeta_to_q(float alpha, float beta, float angle)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	ed2d 8b02 	vpush	{d8}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	ed87 0a03 	vstr	s0, [r7, #12]
 8005808:	edc7 0a02 	vstr	s1, [r7, #8]
 800580c:	ed87 1a01 	vstr	s2, [r7, #4]
    float q;


    q = -sinf(angle)*alpha + cosf(angle)*beta;
 8005810:	ed97 0a01 	vldr	s0, [r7, #4]
 8005814:	f003 f81a 	bl	800884c <sinf>
 8005818:	eef0 7a40 	vmov.f32	s15, s0
 800581c:	eeb1 7a67 	vneg.f32	s14, s15
 8005820:	edd7 7a03 	vldr	s15, [r7, #12]
 8005824:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005828:	ed97 0a01 	vldr	s0, [r7, #4]
 800582c:	f002 ffce 	bl	80087cc <cosf>
 8005830:	eeb0 7a40 	vmov.f32	s14, s0
 8005834:	edd7 7a02 	vldr	s15, [r7, #8]
 8005838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005840:	edc7 7a05 	vstr	s15, [r7, #20]

    return q;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	ee07 3a90 	vmov	s15, r3
}
 800584a:	eeb0 0a67 	vmov.f32	s0, s15
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	ecbd 8b02 	vpop	{d8}
 8005856:	bd80      	pop	{r7, pc}

08005858 <dq_to_alpha>:

float dq_to_alpha(float d, float q, float angle)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	ed2d 8b02 	vpush	{d8}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	ed87 0a03 	vstr	s0, [r7, #12]
 8005866:	edc7 0a02 	vstr	s1, [r7, #8]
 800586a:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;

    alpha = cosf(angle)*d - sinf(angle)*q;
 800586e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005872:	f002 ffab 	bl	80087cc <cosf>
 8005876:	eeb0 7a40 	vmov.f32	s14, s0
 800587a:	edd7 7a03 	vldr	s15, [r7, #12]
 800587e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005882:	ed97 0a01 	vldr	s0, [r7, #4]
 8005886:	f002 ffe1 	bl	800884c <sinf>
 800588a:	eeb0 7a40 	vmov.f32	s14, s0
 800588e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	ee78 7a67 	vsub.f32	s15, s16, s15
 800589a:	edc7 7a05 	vstr	s15, [r7, #20]

    return alpha;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	ee07 3a90 	vmov	s15, r3
}
 80058a4:	eeb0 0a67 	vmov.f32	s0, s15
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	ecbd 8b02 	vpop	{d8}
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <dq_to_beta>:

float dq_to_beta(float d, float q, float angle)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	ed2d 8b02 	vpush	{d8}
 80058b8:	b086      	sub	sp, #24
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	ed87 0a03 	vstr	s0, [r7, #12]
 80058c0:	edc7 0a02 	vstr	s1, [r7, #8]
 80058c4:	ed87 1a01 	vstr	s2, [r7, #4]
    float beta;


    beta = sinf(angle)*d + cosf(angle)*q;
 80058c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80058cc:	f002 ffbe 	bl	800884c <sinf>
 80058d0:	eeb0 7a40 	vmov.f32	s14, s0
 80058d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80058d8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80058dc:	ed97 0a01 	vldr	s0, [r7, #4]
 80058e0:	f002 ff74 	bl	80087cc <cosf>
 80058e4:	eeb0 7a40 	vmov.f32	s14, s0
 80058e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80058ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80058f4:	edc7 7a05 	vstr	s15, [r7, #20]

    return beta;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	ee07 3a90 	vmov	s15, r3
}
 80058fe:	eeb0 0a67 	vmov.f32	s0, s15
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	ecbd 8b02 	vpop	{d8}
 800590a:	bd80      	pop	{r7, pc}

0800590c <cos_grid>:

float cos_grid(float alpha, float beta)
{
 800590c:	b5b0      	push	{r4, r5, r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	ed87 0a01 	vstr	s0, [r7, #4]
 8005916:	edc7 0a00 	vstr	s1, [r7]
    float cosGrid;

    cosGrid = alpha/ (sqrt(alpha*alpha + beta*beta));
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fa fe34 	bl	8000588 <__aeabi_f2d>
 8005920:	4604      	mov	r4, r0
 8005922:	460d      	mov	r5, r1
 8005924:	edd7 7a01 	vldr	s15, [r7, #4]
 8005928:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800592c:	edd7 7a00 	vldr	s15, [r7]
 8005930:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005938:	ee17 0a90 	vmov	r0, s15
 800593c:	f7fa fe24 	bl	8000588 <__aeabi_f2d>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	ec43 2b10 	vmov	d0, r2, r3
 8005948:	f002 ffc2 	bl	80088d0 <sqrt>
 800594c:	ec53 2b10 	vmov	r2, r3, d0
 8005950:	4620      	mov	r0, r4
 8005952:	4629      	mov	r1, r5
 8005954:	f7fa ff9a 	bl	800088c <__aeabi_ddiv>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4610      	mov	r0, r2
 800595e:	4619      	mov	r1, r3
 8005960:	f7fb f942 	bl	8000be8 <__aeabi_d2f>
 8005964:	4603      	mov	r3, r0
 8005966:	60fb      	str	r3, [r7, #12]
    

    return cosGrid;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	ee07 3a90 	vmov	s15, r3
}
 800596e:	eeb0 0a67 	vmov.f32	s0, s15
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bdb0      	pop	{r4, r5, r7, pc}

08005978 <sin_grid>:

float sin_grid(float alpha, float beta)
{
 8005978:	b5b0      	push	{r4, r5, r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005982:	edc7 0a00 	vstr	s1, [r7]
    float sinGrid;


    sinGrid = beta/ (sqrt(alpha*alpha + beta*beta));
 8005986:	6838      	ldr	r0, [r7, #0]
 8005988:	f7fa fdfe 	bl	8000588 <__aeabi_f2d>
 800598c:	4604      	mov	r4, r0
 800598e:	460d      	mov	r5, r1
 8005990:	edd7 7a01 	vldr	s15, [r7, #4]
 8005994:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005998:	edd7 7a00 	vldr	s15, [r7]
 800599c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80059a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059a4:	ee17 0a90 	vmov	r0, s15
 80059a8:	f7fa fdee 	bl	8000588 <__aeabi_f2d>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	ec43 2b10 	vmov	d0, r2, r3
 80059b4:	f002 ff8c 	bl	80088d0 <sqrt>
 80059b8:	ec53 2b10 	vmov	r2, r3, d0
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	f7fa ff64 	bl	800088c <__aeabi_ddiv>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4610      	mov	r0, r2
 80059ca:	4619      	mov	r1, r3
 80059cc:	f7fb f90c 	bl	8000be8 <__aeabi_d2f>
 80059d0:	4603      	mov	r3, r0
 80059d2:	60fb      	str	r3, [r7, #12]

    return sinGrid;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	ee07 3a90 	vmov	s15, r3
}
 80059da:	eeb0 0a67 	vmov.f32	s0, s15
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bdb0      	pop	{r4, r5, r7, pc}

080059e4 <pi_regulator>:



float pi_regulator(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
 80059e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80059e8:	b08a      	sub	sp, #40	; 0x28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	ed87 0a05 	vstr	s0, [r7, #20]
 80059f0:	edc7 0a04 	vstr	s1, [r7, #16]
 80059f4:	ed87 1a03 	vstr	s2, [r7, #12]
 80059f8:	edc7 1a02 	vstr	s3, [r7, #8]
 80059fc:	ed87 2a01 	vstr	s4, [r7, #4]
 8005a00:	edc7 2a00 	vstr	s5, [r7]
    float anglePll, integral, omega;

    static float phaseError_old, integral_old, angle_old, omega_old;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7fa fdbf 	bl	8000588 <__aeabi_f2d>
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	460d      	mov	r5, r1
 8005a0e:	6978      	ldr	r0, [r7, #20]
 8005a10:	f7fa fdba 	bl	8000588 <__aeabi_f2d>
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	4b52      	ldr	r3, [pc, #328]	; (8005b64 <pi_regulator+0x180>)
 8005a1a:	f7fa fe0d 	bl	8000638 <__aeabi_dmul>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4690      	mov	r8, r2
 8005a24:	4699      	mov	r9, r3
 8005a26:	4b50      	ldr	r3, [pc, #320]	; (8005b68 <pi_regulator+0x184>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fa fdac 	bl	8000588 <__aeabi_f2d>
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	4b4b      	ldr	r3, [pc, #300]	; (8005b64 <pi_regulator+0x180>)
 8005a36:	f7fa fdff 	bl	8000638 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4640      	mov	r0, r8
 8005a40:	4649      	mov	r1, r9
 8005a42:	f7fa fc43 	bl	80002cc <__adddf3>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7fa fdf3 	bl	8000638 <__aeabi_dmul>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4614      	mov	r4, r2
 8005a58:	461d      	mov	r5, r3
 8005a5a:	6838      	ldr	r0, [r7, #0]
 8005a5c:	f7fa fd94 	bl	8000588 <__aeabi_f2d>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4620      	mov	r0, r4
 8005a66:	4629      	mov	r1, r5
 8005a68:	f7fa fde6 	bl	8000638 <__aeabi_dmul>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4614      	mov	r4, r2
 8005a72:	461d      	mov	r5, r3
 8005a74:	4b3d      	ldr	r3, [pc, #244]	; (8005b6c <pi_regulator+0x188>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fa fd85 	bl	8000588 <__aeabi_f2d>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4620      	mov	r0, r4
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7fa fc21 	bl	80002cc <__adddf3>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	f7fb f8a9 	bl	8000be8 <__aeabi_d2f>
 8005a96:	4603      	mov	r3, r0
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
    omega = phaseError*kp + integral + feedForward; 
 8005a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aa6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aae:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab6:	edc7 7a08 	vstr	s15, [r7, #32]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 8005aba:	6a38      	ldr	r0, [r7, #32]
 8005abc:	f7fa fd64 	bl	8000588 <__aeabi_f2d>
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <pi_regulator+0x180>)
 8005ac6:	f7fa fdb7 	bl	8000638 <__aeabi_dmul>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4614      	mov	r4, r2
 8005ad0:	461d      	mov	r5, r3
 8005ad2:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <pi_regulator+0x18c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fa fd56 	bl	8000588 <__aeabi_f2d>
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <pi_regulator+0x180>)
 8005ae2:	f7fa fda9 	bl	8000638 <__aeabi_dmul>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa fbed 	bl	80002cc <__adddf3>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4614      	mov	r4, r2
 8005af8:	461d      	mov	r5, r3
 8005afa:	6838      	ldr	r0, [r7, #0]
 8005afc:	f7fa fd44 	bl	8000588 <__aeabi_f2d>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa fd96 	bl	8000638 <__aeabi_dmul>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4614      	mov	r4, r2
 8005b12:	461d      	mov	r5, r3
 8005b14:	4b17      	ldr	r3, [pc, #92]	; (8005b74 <pi_regulator+0x190>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fa fd35 	bl	8000588 <__aeabi_f2d>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	f7fa fbd1 	bl	80002cc <__adddf3>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4619      	mov	r1, r3
 8005b32:	f7fb f859 	bl	8000be8 <__aeabi_d2f>
 8005b36:	4603      	mov	r3, r0
 8005b38:	61fb      	str	r3, [r7, #28]
    // anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;

    phaseError_old = phaseError;
 8005b3a:	4a0b      	ldr	r2, [pc, #44]	; (8005b68 <pi_regulator+0x184>)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <pi_regulator+0x188>)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 8005b46:	4a0b      	ldr	r2, [pc, #44]	; (8005b74 <pi_regulator+0x190>)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 8005b4c:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <pi_regulator+0x18c>)
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	6013      	str	r3, [r2, #0]
    

    return anglePll;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	ee07 3a90 	vmov	s15, r3
}
 8005b58:	eeb0 0a67 	vmov.f32	s0, s15
 8005b5c:	3728      	adds	r7, #40	; 0x28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b64:	3fe00000 	.word	0x3fe00000
 8005b68:	20000218 	.word	0x20000218
 8005b6c:	2000021c 	.word	0x2000021c
 8005b70:	20000220 	.word	0x20000220
 8005b74:	20000224 	.word	0x20000224

08005b78 <pi_regulator_comp>:

float pi_regulator_comp(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
 8005b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b7c:	b08a      	sub	sp, #40	; 0x28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	ed87 0a05 	vstr	s0, [r7, #20]
 8005b84:	edc7 0a04 	vstr	s1, [r7, #16]
 8005b88:	ed87 1a03 	vstr	s2, [r7, #12]
 8005b8c:	edc7 1a02 	vstr	s3, [r7, #8]
 8005b90:	ed87 2a01 	vstr	s4, [r7, #4]
 8005b94:	edc7 2a00 	vstr	s5, [r7]
    float anglePll, integral, omega, anglePllComp;
    static float phaseError_old, integral_old, angle_old, omega_old;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7fa fcf5 	bl	8000588 <__aeabi_f2d>
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	460d      	mov	r5, r1
 8005ba2:	6978      	ldr	r0, [r7, #20]
 8005ba4:	f7fa fcf0 	bl	8000588 <__aeabi_f2d>
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	4b5e      	ldr	r3, [pc, #376]	; (8005d28 <pi_regulator_comp+0x1b0>)
 8005bae:	f7fa fd43 	bl	8000638 <__aeabi_dmul>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4690      	mov	r8, r2
 8005bb8:	4699      	mov	r9, r3
 8005bba:	4b5c      	ldr	r3, [pc, #368]	; (8005d2c <pi_regulator_comp+0x1b4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fa fce2 	bl	8000588 <__aeabi_f2d>
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	4b57      	ldr	r3, [pc, #348]	; (8005d28 <pi_regulator_comp+0x1b0>)
 8005bca:	f7fa fd35 	bl	8000638 <__aeabi_dmul>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fb79 	bl	80002cc <__adddf3>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4620      	mov	r0, r4
 8005be0:	4629      	mov	r1, r5
 8005be2:	f7fa fd29 	bl	8000638 <__aeabi_dmul>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4614      	mov	r4, r2
 8005bec:	461d      	mov	r5, r3
 8005bee:	6838      	ldr	r0, [r7, #0]
 8005bf0:	f7fa fcca 	bl	8000588 <__aeabi_f2d>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fa fd1c 	bl	8000638 <__aeabi_dmul>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4614      	mov	r4, r2
 8005c06:	461d      	mov	r5, r3
 8005c08:	4b49      	ldr	r3, [pc, #292]	; (8005d30 <pi_regulator_comp+0x1b8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fa fcbb 	bl	8000588 <__aeabi_f2d>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fb57 	bl	80002cc <__adddf3>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	f7fa ffdf 	bl	8000be8 <__aeabi_d2f>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
    omega = phaseError*kp + integral + feedForward; 
 8005c2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c32:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c42:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c4a:	edc7 7a08 	vstr	s15, [r7, #32]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 8005c4e:	6a38      	ldr	r0, [r7, #32]
 8005c50:	f7fa fc9a 	bl	8000588 <__aeabi_f2d>
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	4b33      	ldr	r3, [pc, #204]	; (8005d28 <pi_regulator_comp+0x1b0>)
 8005c5a:	f7fa fced 	bl	8000638 <__aeabi_dmul>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4614      	mov	r4, r2
 8005c64:	461d      	mov	r5, r3
 8005c66:	4b33      	ldr	r3, [pc, #204]	; (8005d34 <pi_regulator_comp+0x1bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fa fc8c 	bl	8000588 <__aeabi_f2d>
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <pi_regulator_comp+0x1b0>)
 8005c76:	f7fa fcdf 	bl	8000638 <__aeabi_dmul>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f7fa fb23 	bl	80002cc <__adddf3>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	461d      	mov	r5, r3
 8005c8e:	6838      	ldr	r0, [r7, #0]
 8005c90:	f7fa fc7a 	bl	8000588 <__aeabi_f2d>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4620      	mov	r0, r4
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	f7fa fccc 	bl	8000638 <__aeabi_dmul>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	461d      	mov	r5, r3
 8005ca8:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <pi_regulator_comp+0x1c0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fa fc6b 	bl	8000588 <__aeabi_f2d>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fa fb07 	bl	80002cc <__adddf3>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f7fa ff8f 	bl	8000be8 <__aeabi_d2f>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	61fb      	str	r3, [r7, #28]
    anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;
 8005cce:	ed97 7a08 	vldr	s14, [r7, #32]
 8005cd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cda:	edd7 6a05 	vldr	s13, [r7, #20]
 8005cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ce6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cea:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cfa:	edc7 7a06 	vstr	s15, [r7, #24]

    phaseError_old = phaseError;
 8005cfe:	4a0b      	ldr	r2, [pc, #44]	; (8005d2c <pi_regulator_comp+0x1b4>)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 8005d04:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <pi_regulator_comp+0x1b8>)
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 8005d0a:	4a0b      	ldr	r2, [pc, #44]	; (8005d38 <pi_regulator_comp+0x1c0>)
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 8005d10:	4a08      	ldr	r2, [pc, #32]	; (8005d34 <pi_regulator_comp+0x1bc>)
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	6013      	str	r3, [r2, #0]

    
    return anglePllComp;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	ee07 3a90 	vmov	s15, r3
}
 8005d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d20:	3728      	adds	r7, #40	; 0x28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d28:	3fe00000 	.word	0x3fe00000
 8005d2c:	20000228 	.word	0x20000228
 8005d30:	2000022c 	.word	0x2000022c
 8005d34:	20000230 	.word	0x20000230
 8005d38:	20000234 	.word	0x20000234

08005d3c <phase_detector>:


float phase_detector(float cosGrid, float sinGrid, float anglePllComp)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	ed2d 8b02 	vpush	{d8}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005d4e:	ed87 1a01 	vstr	s2, [r7, #4]
    float phaseError;

    phaseError = sinGrid*cosf(anglePllComp) - cosGrid*sinf(anglePllComp);
 8005d52:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d56:	f002 fd39 	bl	80087cc <cosf>
 8005d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8005d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d62:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005d66:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d6a:	f002 fd6f 	bl	800884c <sinf>
 8005d6e:	eeb0 7a40 	vmov.f32	s14, s0
 8005d72:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005d7e:	edc7 7a05 	vstr	s15, [r7, #20]
    

    return phaseError;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	ee07 3a90 	vmov	s15, r3
}
 8005d88:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	ecbd 8b02 	vpop	{d8}
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <two_to_three_phase>:
float two_to_three_phase(float *phaseA, float *phaseB)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
	return -*phaseA - *phaseB;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	edd3 7a00 	vldr	s15, [r3]
 8005da6:	eeb1 7a67 	vneg.f32	s14, s15
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	edd3 7a00 	vldr	s15, [r3]
 8005db0:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005db4:	eeb0 0a67 	vmov.f32	s0, s15
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <__errno>:
 8005dc4:	4b01      	ldr	r3, [pc, #4]	; (8005dcc <__errno+0x8>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20000018 	.word	0x20000018

08005dd0 <__libc_init_array>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	4d0d      	ldr	r5, [pc, #52]	; (8005e08 <__libc_init_array+0x38>)
 8005dd4:	4c0d      	ldr	r4, [pc, #52]	; (8005e0c <__libc_init_array+0x3c>)
 8005dd6:	1b64      	subs	r4, r4, r5
 8005dd8:	10a4      	asrs	r4, r4, #2
 8005dda:	2600      	movs	r6, #0
 8005ddc:	42a6      	cmp	r6, r4
 8005dde:	d109      	bne.n	8005df4 <__libc_init_array+0x24>
 8005de0:	4d0b      	ldr	r5, [pc, #44]	; (8005e10 <__libc_init_array+0x40>)
 8005de2:	4c0c      	ldr	r4, [pc, #48]	; (8005e14 <__libc_init_array+0x44>)
 8005de4:	f003 fb86 	bl	80094f4 <_init>
 8005de8:	1b64      	subs	r4, r4, r5
 8005dea:	10a4      	asrs	r4, r4, #2
 8005dec:	2600      	movs	r6, #0
 8005dee:	42a6      	cmp	r6, r4
 8005df0:	d105      	bne.n	8005dfe <__libc_init_array+0x2e>
 8005df2:	bd70      	pop	{r4, r5, r6, pc}
 8005df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df8:	4798      	blx	r3
 8005dfa:	3601      	adds	r6, #1
 8005dfc:	e7ee      	b.n	8005ddc <__libc_init_array+0xc>
 8005dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e02:	4798      	blx	r3
 8005e04:	3601      	adds	r6, #1
 8005e06:	e7f2      	b.n	8005dee <__libc_init_array+0x1e>
 8005e08:	08009cec 	.word	0x08009cec
 8005e0c:	08009cec 	.word	0x08009cec
 8005e10:	08009cec 	.word	0x08009cec
 8005e14:	08009cf0 	.word	0x08009cf0

08005e18 <memset>:
 8005e18:	4402      	add	r2, r0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d100      	bne.n	8005e22 <memset+0xa>
 8005e20:	4770      	bx	lr
 8005e22:	f803 1b01 	strb.w	r1, [r3], #1
 8005e26:	e7f9      	b.n	8005e1c <memset+0x4>

08005e28 <__cvt>:
 8005e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	ec55 4b10 	vmov	r4, r5, d0
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	460e      	mov	r6, r1
 8005e34:	4619      	mov	r1, r3
 8005e36:	462b      	mov	r3, r5
 8005e38:	bfbb      	ittet	lt
 8005e3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e3e:	461d      	movlt	r5, r3
 8005e40:	2300      	movge	r3, #0
 8005e42:	232d      	movlt	r3, #45	; 0x2d
 8005e44:	700b      	strb	r3, [r1, #0]
 8005e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e4c:	4691      	mov	r9, r2
 8005e4e:	f023 0820 	bic.w	r8, r3, #32
 8005e52:	bfbc      	itt	lt
 8005e54:	4622      	movlt	r2, r4
 8005e56:	4614      	movlt	r4, r2
 8005e58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e5c:	d005      	beq.n	8005e6a <__cvt+0x42>
 8005e5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e62:	d100      	bne.n	8005e66 <__cvt+0x3e>
 8005e64:	3601      	adds	r6, #1
 8005e66:	2102      	movs	r1, #2
 8005e68:	e000      	b.n	8005e6c <__cvt+0x44>
 8005e6a:	2103      	movs	r1, #3
 8005e6c:	ab03      	add	r3, sp, #12
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	ab02      	add	r3, sp, #8
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	ec45 4b10 	vmov	d0, r4, r5
 8005e78:	4653      	mov	r3, sl
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	f000 fccc 	bl	8006818 <_dtoa_r>
 8005e80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e84:	4607      	mov	r7, r0
 8005e86:	d102      	bne.n	8005e8e <__cvt+0x66>
 8005e88:	f019 0f01 	tst.w	r9, #1
 8005e8c:	d022      	beq.n	8005ed4 <__cvt+0xac>
 8005e8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e92:	eb07 0906 	add.w	r9, r7, r6
 8005e96:	d110      	bne.n	8005eba <__cvt+0x92>
 8005e98:	783b      	ldrb	r3, [r7, #0]
 8005e9a:	2b30      	cmp	r3, #48	; 0x30
 8005e9c:	d10a      	bne.n	8005eb4 <__cvt+0x8c>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	f7fa fe2f 	bl	8000b08 <__aeabi_dcmpeq>
 8005eaa:	b918      	cbnz	r0, 8005eb4 <__cvt+0x8c>
 8005eac:	f1c6 0601 	rsb	r6, r6, #1
 8005eb0:	f8ca 6000 	str.w	r6, [sl]
 8005eb4:	f8da 3000 	ldr.w	r3, [sl]
 8005eb8:	4499      	add	r9, r3
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7fa fe21 	bl	8000b08 <__aeabi_dcmpeq>
 8005ec6:	b108      	cbz	r0, 8005ecc <__cvt+0xa4>
 8005ec8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ecc:	2230      	movs	r2, #48	; 0x30
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	454b      	cmp	r3, r9
 8005ed2:	d307      	bcc.n	8005ee4 <__cvt+0xbc>
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ed8:	1bdb      	subs	r3, r3, r7
 8005eda:	4638      	mov	r0, r7
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	b004      	add	sp, #16
 8005ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee4:	1c59      	adds	r1, r3, #1
 8005ee6:	9103      	str	r1, [sp, #12]
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e7f0      	b.n	8005ece <__cvt+0xa6>

08005eec <__exponent>:
 8005eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	bfb8      	it	lt
 8005ef4:	4249      	neglt	r1, r1
 8005ef6:	f803 2b02 	strb.w	r2, [r3], #2
 8005efa:	bfb4      	ite	lt
 8005efc:	222d      	movlt	r2, #45	; 0x2d
 8005efe:	222b      	movge	r2, #43	; 0x2b
 8005f00:	2909      	cmp	r1, #9
 8005f02:	7042      	strb	r2, [r0, #1]
 8005f04:	dd2a      	ble.n	8005f5c <__exponent+0x70>
 8005f06:	f10d 0407 	add.w	r4, sp, #7
 8005f0a:	46a4      	mov	ip, r4
 8005f0c:	270a      	movs	r7, #10
 8005f0e:	46a6      	mov	lr, r4
 8005f10:	460a      	mov	r2, r1
 8005f12:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f16:	fb07 1516 	mls	r5, r7, r6, r1
 8005f1a:	3530      	adds	r5, #48	; 0x30
 8005f1c:	2a63      	cmp	r2, #99	; 0x63
 8005f1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f26:	4631      	mov	r1, r6
 8005f28:	dcf1      	bgt.n	8005f0e <__exponent+0x22>
 8005f2a:	3130      	adds	r1, #48	; 0x30
 8005f2c:	f1ae 0502 	sub.w	r5, lr, #2
 8005f30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f34:	1c44      	adds	r4, r0, #1
 8005f36:	4629      	mov	r1, r5
 8005f38:	4561      	cmp	r1, ip
 8005f3a:	d30a      	bcc.n	8005f52 <__exponent+0x66>
 8005f3c:	f10d 0209 	add.w	r2, sp, #9
 8005f40:	eba2 020e 	sub.w	r2, r2, lr
 8005f44:	4565      	cmp	r5, ip
 8005f46:	bf88      	it	hi
 8005f48:	2200      	movhi	r2, #0
 8005f4a:	4413      	add	r3, r2
 8005f4c:	1a18      	subs	r0, r3, r0
 8005f4e:	b003      	add	sp, #12
 8005f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f5a:	e7ed      	b.n	8005f38 <__exponent+0x4c>
 8005f5c:	2330      	movs	r3, #48	; 0x30
 8005f5e:	3130      	adds	r1, #48	; 0x30
 8005f60:	7083      	strb	r3, [r0, #2]
 8005f62:	70c1      	strb	r1, [r0, #3]
 8005f64:	1d03      	adds	r3, r0, #4
 8005f66:	e7f1      	b.n	8005f4c <__exponent+0x60>

08005f68 <_printf_float>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	ed2d 8b02 	vpush	{d8}
 8005f70:	b08d      	sub	sp, #52	; 0x34
 8005f72:	460c      	mov	r4, r1
 8005f74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f78:	4616      	mov	r6, r2
 8005f7a:	461f      	mov	r7, r3
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	f001 fa37 	bl	80073f0 <_localeconv_r>
 8005f82:	f8d0 a000 	ldr.w	sl, [r0]
 8005f86:	4650      	mov	r0, sl
 8005f88:	f7fa f942 	bl	8000210 <strlen>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	f8d8 3000 	ldr.w	r3, [r8]
 8005f98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f9c:	3307      	adds	r3, #7
 8005f9e:	f023 0307 	bic.w	r3, r3, #7
 8005fa2:	f103 0208 	add.w	r2, r3, #8
 8005fa6:	f8c8 2000 	str.w	r2, [r8]
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fba:	9307      	str	r3, [sp, #28]
 8005fbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fc0:	ee08 0a10 	vmov	s16, r0
 8005fc4:	4b9f      	ldr	r3, [pc, #636]	; (8006244 <_printf_float+0x2dc>)
 8005fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	f7fa fdcd 	bl	8000b6c <__aeabi_dcmpun>
 8005fd2:	bb88      	cbnz	r0, 8006038 <_printf_float+0xd0>
 8005fd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fd8:	4b9a      	ldr	r3, [pc, #616]	; (8006244 <_printf_float+0x2dc>)
 8005fda:	f04f 32ff 	mov.w	r2, #4294967295
 8005fde:	f7fa fda7 	bl	8000b30 <__aeabi_dcmple>
 8005fe2:	bb48      	cbnz	r0, 8006038 <_printf_float+0xd0>
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa fd96 	bl	8000b1c <__aeabi_dcmplt>
 8005ff0:	b110      	cbz	r0, 8005ff8 <_printf_float+0x90>
 8005ff2:	232d      	movs	r3, #45	; 0x2d
 8005ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff8:	4b93      	ldr	r3, [pc, #588]	; (8006248 <_printf_float+0x2e0>)
 8005ffa:	4894      	ldr	r0, [pc, #592]	; (800624c <_printf_float+0x2e4>)
 8005ffc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006000:	bf94      	ite	ls
 8006002:	4698      	movls	r8, r3
 8006004:	4680      	movhi	r8, r0
 8006006:	2303      	movs	r3, #3
 8006008:	6123      	str	r3, [r4, #16]
 800600a:	9b05      	ldr	r3, [sp, #20]
 800600c:	f023 0204 	bic.w	r2, r3, #4
 8006010:	6022      	str	r2, [r4, #0]
 8006012:	f04f 0900 	mov.w	r9, #0
 8006016:	9700      	str	r7, [sp, #0]
 8006018:	4633      	mov	r3, r6
 800601a:	aa0b      	add	r2, sp, #44	; 0x2c
 800601c:	4621      	mov	r1, r4
 800601e:	4628      	mov	r0, r5
 8006020:	f000 f9d8 	bl	80063d4 <_printf_common>
 8006024:	3001      	adds	r0, #1
 8006026:	f040 8090 	bne.w	800614a <_printf_float+0x1e2>
 800602a:	f04f 30ff 	mov.w	r0, #4294967295
 800602e:	b00d      	add	sp, #52	; 0x34
 8006030:	ecbd 8b02 	vpop	{d8}
 8006034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	4640      	mov	r0, r8
 800603e:	4649      	mov	r1, r9
 8006040:	f7fa fd94 	bl	8000b6c <__aeabi_dcmpun>
 8006044:	b140      	cbz	r0, 8006058 <_printf_float+0xf0>
 8006046:	464b      	mov	r3, r9
 8006048:	2b00      	cmp	r3, #0
 800604a:	bfbc      	itt	lt
 800604c:	232d      	movlt	r3, #45	; 0x2d
 800604e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006052:	487f      	ldr	r0, [pc, #508]	; (8006250 <_printf_float+0x2e8>)
 8006054:	4b7f      	ldr	r3, [pc, #508]	; (8006254 <_printf_float+0x2ec>)
 8006056:	e7d1      	b.n	8005ffc <_printf_float+0x94>
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800605e:	9206      	str	r2, [sp, #24]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	d13f      	bne.n	80060e4 <_printf_float+0x17c>
 8006064:	2306      	movs	r3, #6
 8006066:	6063      	str	r3, [r4, #4]
 8006068:	9b05      	ldr	r3, [sp, #20]
 800606a:	6861      	ldr	r1, [r4, #4]
 800606c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006070:	2300      	movs	r3, #0
 8006072:	9303      	str	r3, [sp, #12]
 8006074:	ab0a      	add	r3, sp, #40	; 0x28
 8006076:	e9cd b301 	strd	fp, r3, [sp, #4]
 800607a:	ab09      	add	r3, sp, #36	; 0x24
 800607c:	ec49 8b10 	vmov	d0, r8, r9
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	6022      	str	r2, [r4, #0]
 8006084:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006088:	4628      	mov	r0, r5
 800608a:	f7ff fecd 	bl	8005e28 <__cvt>
 800608e:	9b06      	ldr	r3, [sp, #24]
 8006090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006092:	2b47      	cmp	r3, #71	; 0x47
 8006094:	4680      	mov	r8, r0
 8006096:	d108      	bne.n	80060aa <_printf_float+0x142>
 8006098:	1cc8      	adds	r0, r1, #3
 800609a:	db02      	blt.n	80060a2 <_printf_float+0x13a>
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	4299      	cmp	r1, r3
 80060a0:	dd41      	ble.n	8006126 <_printf_float+0x1be>
 80060a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80060a6:	fa5f fb8b 	uxtb.w	fp, fp
 80060aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060ae:	d820      	bhi.n	80060f2 <_printf_float+0x18a>
 80060b0:	3901      	subs	r1, #1
 80060b2:	465a      	mov	r2, fp
 80060b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060b8:	9109      	str	r1, [sp, #36]	; 0x24
 80060ba:	f7ff ff17 	bl	8005eec <__exponent>
 80060be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c0:	1813      	adds	r3, r2, r0
 80060c2:	2a01      	cmp	r2, #1
 80060c4:	4681      	mov	r9, r0
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	dc02      	bgt.n	80060d0 <_printf_float+0x168>
 80060ca:	6822      	ldr	r2, [r4, #0]
 80060cc:	07d2      	lsls	r2, r2, #31
 80060ce:	d501      	bpl.n	80060d4 <_printf_float+0x16c>
 80060d0:	3301      	adds	r3, #1
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d09c      	beq.n	8006016 <_printf_float+0xae>
 80060dc:	232d      	movs	r3, #45	; 0x2d
 80060de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e2:	e798      	b.n	8006016 <_printf_float+0xae>
 80060e4:	9a06      	ldr	r2, [sp, #24]
 80060e6:	2a47      	cmp	r2, #71	; 0x47
 80060e8:	d1be      	bne.n	8006068 <_printf_float+0x100>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1bc      	bne.n	8006068 <_printf_float+0x100>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e7b9      	b.n	8006066 <_printf_float+0xfe>
 80060f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060f6:	d118      	bne.n	800612a <_printf_float+0x1c2>
 80060f8:	2900      	cmp	r1, #0
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	dd0b      	ble.n	8006116 <_printf_float+0x1ae>
 80060fe:	6121      	str	r1, [r4, #16]
 8006100:	b913      	cbnz	r3, 8006108 <_printf_float+0x1a0>
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	07d0      	lsls	r0, r2, #31
 8006106:	d502      	bpl.n	800610e <_printf_float+0x1a6>
 8006108:	3301      	adds	r3, #1
 800610a:	440b      	add	r3, r1
 800610c:	6123      	str	r3, [r4, #16]
 800610e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006110:	f04f 0900 	mov.w	r9, #0
 8006114:	e7de      	b.n	80060d4 <_printf_float+0x16c>
 8006116:	b913      	cbnz	r3, 800611e <_printf_float+0x1b6>
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	07d2      	lsls	r2, r2, #31
 800611c:	d501      	bpl.n	8006122 <_printf_float+0x1ba>
 800611e:	3302      	adds	r3, #2
 8006120:	e7f4      	b.n	800610c <_printf_float+0x1a4>
 8006122:	2301      	movs	r3, #1
 8006124:	e7f2      	b.n	800610c <_printf_float+0x1a4>
 8006126:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800612a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800612c:	4299      	cmp	r1, r3
 800612e:	db05      	blt.n	800613c <_printf_float+0x1d4>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	6121      	str	r1, [r4, #16]
 8006134:	07d8      	lsls	r0, r3, #31
 8006136:	d5ea      	bpl.n	800610e <_printf_float+0x1a6>
 8006138:	1c4b      	adds	r3, r1, #1
 800613a:	e7e7      	b.n	800610c <_printf_float+0x1a4>
 800613c:	2900      	cmp	r1, #0
 800613e:	bfd4      	ite	le
 8006140:	f1c1 0202 	rsble	r2, r1, #2
 8006144:	2201      	movgt	r2, #1
 8006146:	4413      	add	r3, r2
 8006148:	e7e0      	b.n	800610c <_printf_float+0x1a4>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	055a      	lsls	r2, r3, #21
 800614e:	d407      	bmi.n	8006160 <_printf_float+0x1f8>
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	4642      	mov	r2, r8
 8006154:	4631      	mov	r1, r6
 8006156:	4628      	mov	r0, r5
 8006158:	47b8      	blx	r7
 800615a:	3001      	adds	r0, #1
 800615c:	d12c      	bne.n	80061b8 <_printf_float+0x250>
 800615e:	e764      	b.n	800602a <_printf_float+0xc2>
 8006160:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006164:	f240 80e0 	bls.w	8006328 <_printf_float+0x3c0>
 8006168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800616c:	2200      	movs	r2, #0
 800616e:	2300      	movs	r3, #0
 8006170:	f7fa fcca 	bl	8000b08 <__aeabi_dcmpeq>
 8006174:	2800      	cmp	r0, #0
 8006176:	d034      	beq.n	80061e2 <_printf_float+0x27a>
 8006178:	4a37      	ldr	r2, [pc, #220]	; (8006258 <_printf_float+0x2f0>)
 800617a:	2301      	movs	r3, #1
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f af51 	beq.w	800602a <_printf_float+0xc2>
 8006188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800618c:	429a      	cmp	r2, r3
 800618e:	db02      	blt.n	8006196 <_printf_float+0x22e>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	07d8      	lsls	r0, r3, #31
 8006194:	d510      	bpl.n	80061b8 <_printf_float+0x250>
 8006196:	ee18 3a10 	vmov	r3, s16
 800619a:	4652      	mov	r2, sl
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	f43f af41 	beq.w	800602a <_printf_float+0xc2>
 80061a8:	f04f 0800 	mov.w	r8, #0
 80061ac:	f104 091a 	add.w	r9, r4, #26
 80061b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b2:	3b01      	subs	r3, #1
 80061b4:	4543      	cmp	r3, r8
 80061b6:	dc09      	bgt.n	80061cc <_printf_float+0x264>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	079b      	lsls	r3, r3, #30
 80061bc:	f100 8105 	bmi.w	80063ca <_printf_float+0x462>
 80061c0:	68e0      	ldr	r0, [r4, #12]
 80061c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061c4:	4298      	cmp	r0, r3
 80061c6:	bfb8      	it	lt
 80061c8:	4618      	movlt	r0, r3
 80061ca:	e730      	b.n	800602e <_printf_float+0xc6>
 80061cc:	2301      	movs	r3, #1
 80061ce:	464a      	mov	r2, r9
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	f43f af27 	beq.w	800602a <_printf_float+0xc2>
 80061dc:	f108 0801 	add.w	r8, r8, #1
 80061e0:	e7e6      	b.n	80061b0 <_printf_float+0x248>
 80061e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	dc39      	bgt.n	800625c <_printf_float+0x2f4>
 80061e8:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <_printf_float+0x2f0>)
 80061ea:	2301      	movs	r3, #1
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f af19 	beq.w	800602a <_printf_float+0xc2>
 80061f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d102      	bne.n	8006206 <_printf_float+0x29e>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	07d9      	lsls	r1, r3, #31
 8006204:	d5d8      	bpl.n	80061b8 <_printf_float+0x250>
 8006206:	ee18 3a10 	vmov	r3, s16
 800620a:	4652      	mov	r2, sl
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	f43f af09 	beq.w	800602a <_printf_float+0xc2>
 8006218:	f04f 0900 	mov.w	r9, #0
 800621c:	f104 0a1a 	add.w	sl, r4, #26
 8006220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006222:	425b      	negs	r3, r3
 8006224:	454b      	cmp	r3, r9
 8006226:	dc01      	bgt.n	800622c <_printf_float+0x2c4>
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	e792      	b.n	8006152 <_printf_float+0x1ea>
 800622c:	2301      	movs	r3, #1
 800622e:	4652      	mov	r2, sl
 8006230:	4631      	mov	r1, r6
 8006232:	4628      	mov	r0, r5
 8006234:	47b8      	blx	r7
 8006236:	3001      	adds	r0, #1
 8006238:	f43f aef7 	beq.w	800602a <_printf_float+0xc2>
 800623c:	f109 0901 	add.w	r9, r9, #1
 8006240:	e7ee      	b.n	8006220 <_printf_float+0x2b8>
 8006242:	bf00      	nop
 8006244:	7fefffff 	.word	0x7fefffff
 8006248:	08009534 	.word	0x08009534
 800624c:	08009538 	.word	0x08009538
 8006250:	08009540 	.word	0x08009540
 8006254:	0800953c 	.word	0x0800953c
 8006258:	08009544 	.word	0x08009544
 800625c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800625e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006260:	429a      	cmp	r2, r3
 8006262:	bfa8      	it	ge
 8006264:	461a      	movge	r2, r3
 8006266:	2a00      	cmp	r2, #0
 8006268:	4691      	mov	r9, r2
 800626a:	dc37      	bgt.n	80062dc <_printf_float+0x374>
 800626c:	f04f 0b00 	mov.w	fp, #0
 8006270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006274:	f104 021a 	add.w	r2, r4, #26
 8006278:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800627a:	9305      	str	r3, [sp, #20]
 800627c:	eba3 0309 	sub.w	r3, r3, r9
 8006280:	455b      	cmp	r3, fp
 8006282:	dc33      	bgt.n	80062ec <_printf_float+0x384>
 8006284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006288:	429a      	cmp	r2, r3
 800628a:	db3b      	blt.n	8006304 <_printf_float+0x39c>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	07da      	lsls	r2, r3, #31
 8006290:	d438      	bmi.n	8006304 <_printf_float+0x39c>
 8006292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006294:	9b05      	ldr	r3, [sp, #20]
 8006296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	eba2 0901 	sub.w	r9, r2, r1
 800629e:	4599      	cmp	r9, r3
 80062a0:	bfa8      	it	ge
 80062a2:	4699      	movge	r9, r3
 80062a4:	f1b9 0f00 	cmp.w	r9, #0
 80062a8:	dc35      	bgt.n	8006316 <_printf_float+0x3ae>
 80062aa:	f04f 0800 	mov.w	r8, #0
 80062ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062b2:	f104 0a1a 	add.w	sl, r4, #26
 80062b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	eba3 0309 	sub.w	r3, r3, r9
 80062c0:	4543      	cmp	r3, r8
 80062c2:	f77f af79 	ble.w	80061b8 <_printf_float+0x250>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4652      	mov	r2, sl
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f aeaa 	beq.w	800602a <_printf_float+0xc2>
 80062d6:	f108 0801 	add.w	r8, r8, #1
 80062da:	e7ec      	b.n	80062b6 <_printf_float+0x34e>
 80062dc:	4613      	mov	r3, r2
 80062de:	4631      	mov	r1, r6
 80062e0:	4642      	mov	r2, r8
 80062e2:	4628      	mov	r0, r5
 80062e4:	47b8      	blx	r7
 80062e6:	3001      	adds	r0, #1
 80062e8:	d1c0      	bne.n	800626c <_printf_float+0x304>
 80062ea:	e69e      	b.n	800602a <_printf_float+0xc2>
 80062ec:	2301      	movs	r3, #1
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	9205      	str	r2, [sp, #20]
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f ae97 	beq.w	800602a <_printf_float+0xc2>
 80062fc:	9a05      	ldr	r2, [sp, #20]
 80062fe:	f10b 0b01 	add.w	fp, fp, #1
 8006302:	e7b9      	b.n	8006278 <_printf_float+0x310>
 8006304:	ee18 3a10 	vmov	r3, s16
 8006308:	4652      	mov	r2, sl
 800630a:	4631      	mov	r1, r6
 800630c:	4628      	mov	r0, r5
 800630e:	47b8      	blx	r7
 8006310:	3001      	adds	r0, #1
 8006312:	d1be      	bne.n	8006292 <_printf_float+0x32a>
 8006314:	e689      	b.n	800602a <_printf_float+0xc2>
 8006316:	9a05      	ldr	r2, [sp, #20]
 8006318:	464b      	mov	r3, r9
 800631a:	4442      	add	r2, r8
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	d1c1      	bne.n	80062aa <_printf_float+0x342>
 8006326:	e680      	b.n	800602a <_printf_float+0xc2>
 8006328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800632a:	2a01      	cmp	r2, #1
 800632c:	dc01      	bgt.n	8006332 <_printf_float+0x3ca>
 800632e:	07db      	lsls	r3, r3, #31
 8006330:	d538      	bpl.n	80063a4 <_printf_float+0x43c>
 8006332:	2301      	movs	r3, #1
 8006334:	4642      	mov	r2, r8
 8006336:	4631      	mov	r1, r6
 8006338:	4628      	mov	r0, r5
 800633a:	47b8      	blx	r7
 800633c:	3001      	adds	r0, #1
 800633e:	f43f ae74 	beq.w	800602a <_printf_float+0xc2>
 8006342:	ee18 3a10 	vmov	r3, s16
 8006346:	4652      	mov	r2, sl
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f ae6b 	beq.w	800602a <_printf_float+0xc2>
 8006354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006358:	2200      	movs	r2, #0
 800635a:	2300      	movs	r3, #0
 800635c:	f7fa fbd4 	bl	8000b08 <__aeabi_dcmpeq>
 8006360:	b9d8      	cbnz	r0, 800639a <_printf_float+0x432>
 8006362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006364:	f108 0201 	add.w	r2, r8, #1
 8006368:	3b01      	subs	r3, #1
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	d10e      	bne.n	8006392 <_printf_float+0x42a>
 8006374:	e659      	b.n	800602a <_printf_float+0xc2>
 8006376:	2301      	movs	r3, #1
 8006378:	4652      	mov	r2, sl
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	f43f ae52 	beq.w	800602a <_printf_float+0xc2>
 8006386:	f108 0801 	add.w	r8, r8, #1
 800638a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800638c:	3b01      	subs	r3, #1
 800638e:	4543      	cmp	r3, r8
 8006390:	dcf1      	bgt.n	8006376 <_printf_float+0x40e>
 8006392:	464b      	mov	r3, r9
 8006394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006398:	e6dc      	b.n	8006154 <_printf_float+0x1ec>
 800639a:	f04f 0800 	mov.w	r8, #0
 800639e:	f104 0a1a 	add.w	sl, r4, #26
 80063a2:	e7f2      	b.n	800638a <_printf_float+0x422>
 80063a4:	2301      	movs	r3, #1
 80063a6:	4642      	mov	r2, r8
 80063a8:	e7df      	b.n	800636a <_printf_float+0x402>
 80063aa:	2301      	movs	r3, #1
 80063ac:	464a      	mov	r2, r9
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	f43f ae38 	beq.w	800602a <_printf_float+0xc2>
 80063ba:	f108 0801 	add.w	r8, r8, #1
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063c2:	1a5b      	subs	r3, r3, r1
 80063c4:	4543      	cmp	r3, r8
 80063c6:	dcf0      	bgt.n	80063aa <_printf_float+0x442>
 80063c8:	e6fa      	b.n	80061c0 <_printf_float+0x258>
 80063ca:	f04f 0800 	mov.w	r8, #0
 80063ce:	f104 0919 	add.w	r9, r4, #25
 80063d2:	e7f4      	b.n	80063be <_printf_float+0x456>

080063d4 <_printf_common>:
 80063d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	4616      	mov	r6, r2
 80063da:	4699      	mov	r9, r3
 80063dc:	688a      	ldr	r2, [r1, #8]
 80063de:	690b      	ldr	r3, [r1, #16]
 80063e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063e4:	4293      	cmp	r3, r2
 80063e6:	bfb8      	it	lt
 80063e8:	4613      	movlt	r3, r2
 80063ea:	6033      	str	r3, [r6, #0]
 80063ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063f0:	4607      	mov	r7, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	b10a      	cbz	r2, 80063fa <_printf_common+0x26>
 80063f6:	3301      	adds	r3, #1
 80063f8:	6033      	str	r3, [r6, #0]
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	0699      	lsls	r1, r3, #26
 80063fe:	bf42      	ittt	mi
 8006400:	6833      	ldrmi	r3, [r6, #0]
 8006402:	3302      	addmi	r3, #2
 8006404:	6033      	strmi	r3, [r6, #0]
 8006406:	6825      	ldr	r5, [r4, #0]
 8006408:	f015 0506 	ands.w	r5, r5, #6
 800640c:	d106      	bne.n	800641c <_printf_common+0x48>
 800640e:	f104 0a19 	add.w	sl, r4, #25
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	6832      	ldr	r2, [r6, #0]
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	42ab      	cmp	r3, r5
 800641a:	dc26      	bgt.n	800646a <_printf_common+0x96>
 800641c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006420:	1e13      	subs	r3, r2, #0
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	bf18      	it	ne
 8006426:	2301      	movne	r3, #1
 8006428:	0692      	lsls	r2, r2, #26
 800642a:	d42b      	bmi.n	8006484 <_printf_common+0xb0>
 800642c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006430:	4649      	mov	r1, r9
 8006432:	4638      	mov	r0, r7
 8006434:	47c0      	blx	r8
 8006436:	3001      	adds	r0, #1
 8006438:	d01e      	beq.n	8006478 <_printf_common+0xa4>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	68e5      	ldr	r5, [r4, #12]
 800643e:	6832      	ldr	r2, [r6, #0]
 8006440:	f003 0306 	and.w	r3, r3, #6
 8006444:	2b04      	cmp	r3, #4
 8006446:	bf08      	it	eq
 8006448:	1aad      	subeq	r5, r5, r2
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	6922      	ldr	r2, [r4, #16]
 800644e:	bf0c      	ite	eq
 8006450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006454:	2500      	movne	r5, #0
 8006456:	4293      	cmp	r3, r2
 8006458:	bfc4      	itt	gt
 800645a:	1a9b      	subgt	r3, r3, r2
 800645c:	18ed      	addgt	r5, r5, r3
 800645e:	2600      	movs	r6, #0
 8006460:	341a      	adds	r4, #26
 8006462:	42b5      	cmp	r5, r6
 8006464:	d11a      	bne.n	800649c <_printf_common+0xc8>
 8006466:	2000      	movs	r0, #0
 8006468:	e008      	b.n	800647c <_printf_common+0xa8>
 800646a:	2301      	movs	r3, #1
 800646c:	4652      	mov	r2, sl
 800646e:	4649      	mov	r1, r9
 8006470:	4638      	mov	r0, r7
 8006472:	47c0      	blx	r8
 8006474:	3001      	adds	r0, #1
 8006476:	d103      	bne.n	8006480 <_printf_common+0xac>
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006480:	3501      	adds	r5, #1
 8006482:	e7c6      	b.n	8006412 <_printf_common+0x3e>
 8006484:	18e1      	adds	r1, r4, r3
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	2030      	movs	r0, #48	; 0x30
 800648a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800648e:	4422      	add	r2, r4
 8006490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006498:	3302      	adds	r3, #2
 800649a:	e7c7      	b.n	800642c <_printf_common+0x58>
 800649c:	2301      	movs	r3, #1
 800649e:	4622      	mov	r2, r4
 80064a0:	4649      	mov	r1, r9
 80064a2:	4638      	mov	r0, r7
 80064a4:	47c0      	blx	r8
 80064a6:	3001      	adds	r0, #1
 80064a8:	d0e6      	beq.n	8006478 <_printf_common+0xa4>
 80064aa:	3601      	adds	r6, #1
 80064ac:	e7d9      	b.n	8006462 <_printf_common+0x8e>
	...

080064b0 <_printf_i>:
 80064b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	460c      	mov	r4, r1
 80064b6:	4691      	mov	r9, r2
 80064b8:	7e27      	ldrb	r7, [r4, #24]
 80064ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064bc:	2f78      	cmp	r7, #120	; 0x78
 80064be:	4680      	mov	r8, r0
 80064c0:	469a      	mov	sl, r3
 80064c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064c6:	d807      	bhi.n	80064d8 <_printf_i+0x28>
 80064c8:	2f62      	cmp	r7, #98	; 0x62
 80064ca:	d80a      	bhi.n	80064e2 <_printf_i+0x32>
 80064cc:	2f00      	cmp	r7, #0
 80064ce:	f000 80d8 	beq.w	8006682 <_printf_i+0x1d2>
 80064d2:	2f58      	cmp	r7, #88	; 0x58
 80064d4:	f000 80a3 	beq.w	800661e <_printf_i+0x16e>
 80064d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064e0:	e03a      	b.n	8006558 <_printf_i+0xa8>
 80064e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064e6:	2b15      	cmp	r3, #21
 80064e8:	d8f6      	bhi.n	80064d8 <_printf_i+0x28>
 80064ea:	a001      	add	r0, pc, #4	; (adr r0, 80064f0 <_printf_i+0x40>)
 80064ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80064f0:	08006549 	.word	0x08006549
 80064f4:	0800655d 	.word	0x0800655d
 80064f8:	080064d9 	.word	0x080064d9
 80064fc:	080064d9 	.word	0x080064d9
 8006500:	080064d9 	.word	0x080064d9
 8006504:	080064d9 	.word	0x080064d9
 8006508:	0800655d 	.word	0x0800655d
 800650c:	080064d9 	.word	0x080064d9
 8006510:	080064d9 	.word	0x080064d9
 8006514:	080064d9 	.word	0x080064d9
 8006518:	080064d9 	.word	0x080064d9
 800651c:	08006669 	.word	0x08006669
 8006520:	0800658d 	.word	0x0800658d
 8006524:	0800664b 	.word	0x0800664b
 8006528:	080064d9 	.word	0x080064d9
 800652c:	080064d9 	.word	0x080064d9
 8006530:	0800668b 	.word	0x0800668b
 8006534:	080064d9 	.word	0x080064d9
 8006538:	0800658d 	.word	0x0800658d
 800653c:	080064d9 	.word	0x080064d9
 8006540:	080064d9 	.word	0x080064d9
 8006544:	08006653 	.word	0x08006653
 8006548:	680b      	ldr	r3, [r1, #0]
 800654a:	1d1a      	adds	r2, r3, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	600a      	str	r2, [r1, #0]
 8006550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006558:	2301      	movs	r3, #1
 800655a:	e0a3      	b.n	80066a4 <_printf_i+0x1f4>
 800655c:	6825      	ldr	r5, [r4, #0]
 800655e:	6808      	ldr	r0, [r1, #0]
 8006560:	062e      	lsls	r6, r5, #24
 8006562:	f100 0304 	add.w	r3, r0, #4
 8006566:	d50a      	bpl.n	800657e <_printf_i+0xce>
 8006568:	6805      	ldr	r5, [r0, #0]
 800656a:	600b      	str	r3, [r1, #0]
 800656c:	2d00      	cmp	r5, #0
 800656e:	da03      	bge.n	8006578 <_printf_i+0xc8>
 8006570:	232d      	movs	r3, #45	; 0x2d
 8006572:	426d      	negs	r5, r5
 8006574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006578:	485e      	ldr	r0, [pc, #376]	; (80066f4 <_printf_i+0x244>)
 800657a:	230a      	movs	r3, #10
 800657c:	e019      	b.n	80065b2 <_printf_i+0x102>
 800657e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006582:	6805      	ldr	r5, [r0, #0]
 8006584:	600b      	str	r3, [r1, #0]
 8006586:	bf18      	it	ne
 8006588:	b22d      	sxthne	r5, r5
 800658a:	e7ef      	b.n	800656c <_printf_i+0xbc>
 800658c:	680b      	ldr	r3, [r1, #0]
 800658e:	6825      	ldr	r5, [r4, #0]
 8006590:	1d18      	adds	r0, r3, #4
 8006592:	6008      	str	r0, [r1, #0]
 8006594:	0628      	lsls	r0, r5, #24
 8006596:	d501      	bpl.n	800659c <_printf_i+0xec>
 8006598:	681d      	ldr	r5, [r3, #0]
 800659a:	e002      	b.n	80065a2 <_printf_i+0xf2>
 800659c:	0669      	lsls	r1, r5, #25
 800659e:	d5fb      	bpl.n	8006598 <_printf_i+0xe8>
 80065a0:	881d      	ldrh	r5, [r3, #0]
 80065a2:	4854      	ldr	r0, [pc, #336]	; (80066f4 <_printf_i+0x244>)
 80065a4:	2f6f      	cmp	r7, #111	; 0x6f
 80065a6:	bf0c      	ite	eq
 80065a8:	2308      	moveq	r3, #8
 80065aa:	230a      	movne	r3, #10
 80065ac:	2100      	movs	r1, #0
 80065ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065b2:	6866      	ldr	r6, [r4, #4]
 80065b4:	60a6      	str	r6, [r4, #8]
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	bfa2      	ittt	ge
 80065ba:	6821      	ldrge	r1, [r4, #0]
 80065bc:	f021 0104 	bicge.w	r1, r1, #4
 80065c0:	6021      	strge	r1, [r4, #0]
 80065c2:	b90d      	cbnz	r5, 80065c8 <_printf_i+0x118>
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	d04d      	beq.n	8006664 <_printf_i+0x1b4>
 80065c8:	4616      	mov	r6, r2
 80065ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80065ce:	fb03 5711 	mls	r7, r3, r1, r5
 80065d2:	5dc7      	ldrb	r7, [r0, r7]
 80065d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065d8:	462f      	mov	r7, r5
 80065da:	42bb      	cmp	r3, r7
 80065dc:	460d      	mov	r5, r1
 80065de:	d9f4      	bls.n	80065ca <_printf_i+0x11a>
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d10b      	bne.n	80065fc <_printf_i+0x14c>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	07df      	lsls	r7, r3, #31
 80065e8:	d508      	bpl.n	80065fc <_printf_i+0x14c>
 80065ea:	6923      	ldr	r3, [r4, #16]
 80065ec:	6861      	ldr	r1, [r4, #4]
 80065ee:	4299      	cmp	r1, r3
 80065f0:	bfde      	ittt	le
 80065f2:	2330      	movle	r3, #48	; 0x30
 80065f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065fc:	1b92      	subs	r2, r2, r6
 80065fe:	6122      	str	r2, [r4, #16]
 8006600:	f8cd a000 	str.w	sl, [sp]
 8006604:	464b      	mov	r3, r9
 8006606:	aa03      	add	r2, sp, #12
 8006608:	4621      	mov	r1, r4
 800660a:	4640      	mov	r0, r8
 800660c:	f7ff fee2 	bl	80063d4 <_printf_common>
 8006610:	3001      	adds	r0, #1
 8006612:	d14c      	bne.n	80066ae <_printf_i+0x1fe>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	b004      	add	sp, #16
 800661a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661e:	4835      	ldr	r0, [pc, #212]	; (80066f4 <_printf_i+0x244>)
 8006620:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	680e      	ldr	r6, [r1, #0]
 8006628:	061f      	lsls	r7, r3, #24
 800662a:	f856 5b04 	ldr.w	r5, [r6], #4
 800662e:	600e      	str	r6, [r1, #0]
 8006630:	d514      	bpl.n	800665c <_printf_i+0x1ac>
 8006632:	07d9      	lsls	r1, r3, #31
 8006634:	bf44      	itt	mi
 8006636:	f043 0320 	orrmi.w	r3, r3, #32
 800663a:	6023      	strmi	r3, [r4, #0]
 800663c:	b91d      	cbnz	r5, 8006646 <_printf_i+0x196>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	f023 0320 	bic.w	r3, r3, #32
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	2310      	movs	r3, #16
 8006648:	e7b0      	b.n	80065ac <_printf_i+0xfc>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	f043 0320 	orr.w	r3, r3, #32
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	2378      	movs	r3, #120	; 0x78
 8006654:	4828      	ldr	r0, [pc, #160]	; (80066f8 <_printf_i+0x248>)
 8006656:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800665a:	e7e3      	b.n	8006624 <_printf_i+0x174>
 800665c:	065e      	lsls	r6, r3, #25
 800665e:	bf48      	it	mi
 8006660:	b2ad      	uxthmi	r5, r5
 8006662:	e7e6      	b.n	8006632 <_printf_i+0x182>
 8006664:	4616      	mov	r6, r2
 8006666:	e7bb      	b.n	80065e0 <_printf_i+0x130>
 8006668:	680b      	ldr	r3, [r1, #0]
 800666a:	6826      	ldr	r6, [r4, #0]
 800666c:	6960      	ldr	r0, [r4, #20]
 800666e:	1d1d      	adds	r5, r3, #4
 8006670:	600d      	str	r5, [r1, #0]
 8006672:	0635      	lsls	r5, r6, #24
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	d501      	bpl.n	800667c <_printf_i+0x1cc>
 8006678:	6018      	str	r0, [r3, #0]
 800667a:	e002      	b.n	8006682 <_printf_i+0x1d2>
 800667c:	0671      	lsls	r1, r6, #25
 800667e:	d5fb      	bpl.n	8006678 <_printf_i+0x1c8>
 8006680:	8018      	strh	r0, [r3, #0]
 8006682:	2300      	movs	r3, #0
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	4616      	mov	r6, r2
 8006688:	e7ba      	b.n	8006600 <_printf_i+0x150>
 800668a:	680b      	ldr	r3, [r1, #0]
 800668c:	1d1a      	adds	r2, r3, #4
 800668e:	600a      	str	r2, [r1, #0]
 8006690:	681e      	ldr	r6, [r3, #0]
 8006692:	6862      	ldr	r2, [r4, #4]
 8006694:	2100      	movs	r1, #0
 8006696:	4630      	mov	r0, r6
 8006698:	f7f9 fdc2 	bl	8000220 <memchr>
 800669c:	b108      	cbz	r0, 80066a2 <_printf_i+0x1f2>
 800669e:	1b80      	subs	r0, r0, r6
 80066a0:	6060      	str	r0, [r4, #4]
 80066a2:	6863      	ldr	r3, [r4, #4]
 80066a4:	6123      	str	r3, [r4, #16]
 80066a6:	2300      	movs	r3, #0
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ac:	e7a8      	b.n	8006600 <_printf_i+0x150>
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	4632      	mov	r2, r6
 80066b2:	4649      	mov	r1, r9
 80066b4:	4640      	mov	r0, r8
 80066b6:	47d0      	blx	sl
 80066b8:	3001      	adds	r0, #1
 80066ba:	d0ab      	beq.n	8006614 <_printf_i+0x164>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	079b      	lsls	r3, r3, #30
 80066c0:	d413      	bmi.n	80066ea <_printf_i+0x23a>
 80066c2:	68e0      	ldr	r0, [r4, #12]
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	4298      	cmp	r0, r3
 80066c8:	bfb8      	it	lt
 80066ca:	4618      	movlt	r0, r3
 80066cc:	e7a4      	b.n	8006618 <_printf_i+0x168>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4632      	mov	r2, r6
 80066d2:	4649      	mov	r1, r9
 80066d4:	4640      	mov	r0, r8
 80066d6:	47d0      	blx	sl
 80066d8:	3001      	adds	r0, #1
 80066da:	d09b      	beq.n	8006614 <_printf_i+0x164>
 80066dc:	3501      	adds	r5, #1
 80066de:	68e3      	ldr	r3, [r4, #12]
 80066e0:	9903      	ldr	r1, [sp, #12]
 80066e2:	1a5b      	subs	r3, r3, r1
 80066e4:	42ab      	cmp	r3, r5
 80066e6:	dcf2      	bgt.n	80066ce <_printf_i+0x21e>
 80066e8:	e7eb      	b.n	80066c2 <_printf_i+0x212>
 80066ea:	2500      	movs	r5, #0
 80066ec:	f104 0619 	add.w	r6, r4, #25
 80066f0:	e7f5      	b.n	80066de <_printf_i+0x22e>
 80066f2:	bf00      	nop
 80066f4:	08009546 	.word	0x08009546
 80066f8:	08009557 	.word	0x08009557

080066fc <quorem>:
 80066fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006700:	6903      	ldr	r3, [r0, #16]
 8006702:	690c      	ldr	r4, [r1, #16]
 8006704:	42a3      	cmp	r3, r4
 8006706:	4607      	mov	r7, r0
 8006708:	f2c0 8081 	blt.w	800680e <quorem+0x112>
 800670c:	3c01      	subs	r4, #1
 800670e:	f101 0814 	add.w	r8, r1, #20
 8006712:	f100 0514 	add.w	r5, r0, #20
 8006716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006720:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006724:	3301      	adds	r3, #1
 8006726:	429a      	cmp	r2, r3
 8006728:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800672c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006730:	fbb2 f6f3 	udiv	r6, r2, r3
 8006734:	d331      	bcc.n	800679a <quorem+0x9e>
 8006736:	f04f 0e00 	mov.w	lr, #0
 800673a:	4640      	mov	r0, r8
 800673c:	46ac      	mov	ip, r5
 800673e:	46f2      	mov	sl, lr
 8006740:	f850 2b04 	ldr.w	r2, [r0], #4
 8006744:	b293      	uxth	r3, r2
 8006746:	fb06 e303 	mla	r3, r6, r3, lr
 800674a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800674e:	b29b      	uxth	r3, r3
 8006750:	ebaa 0303 	sub.w	r3, sl, r3
 8006754:	0c12      	lsrs	r2, r2, #16
 8006756:	f8dc a000 	ldr.w	sl, [ip]
 800675a:	fb06 e202 	mla	r2, r6, r2, lr
 800675e:	fa13 f38a 	uxtah	r3, r3, sl
 8006762:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006766:	fa1f fa82 	uxth.w	sl, r2
 800676a:	f8dc 2000 	ldr.w	r2, [ip]
 800676e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006772:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800677c:	4581      	cmp	r9, r0
 800677e:	f84c 3b04 	str.w	r3, [ip], #4
 8006782:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006786:	d2db      	bcs.n	8006740 <quorem+0x44>
 8006788:	f855 300b 	ldr.w	r3, [r5, fp]
 800678c:	b92b      	cbnz	r3, 800679a <quorem+0x9e>
 800678e:	9b01      	ldr	r3, [sp, #4]
 8006790:	3b04      	subs	r3, #4
 8006792:	429d      	cmp	r5, r3
 8006794:	461a      	mov	r2, r3
 8006796:	d32e      	bcc.n	80067f6 <quorem+0xfa>
 8006798:	613c      	str	r4, [r7, #16]
 800679a:	4638      	mov	r0, r7
 800679c:	f001 f8c0 	bl	8007920 <__mcmp>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	db24      	blt.n	80067ee <quorem+0xf2>
 80067a4:	3601      	adds	r6, #1
 80067a6:	4628      	mov	r0, r5
 80067a8:	f04f 0c00 	mov.w	ip, #0
 80067ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80067b0:	f8d0 e000 	ldr.w	lr, [r0]
 80067b4:	b293      	uxth	r3, r2
 80067b6:	ebac 0303 	sub.w	r3, ip, r3
 80067ba:	0c12      	lsrs	r2, r2, #16
 80067bc:	fa13 f38e 	uxtah	r3, r3, lr
 80067c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067ce:	45c1      	cmp	r9, r8
 80067d0:	f840 3b04 	str.w	r3, [r0], #4
 80067d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067d8:	d2e8      	bcs.n	80067ac <quorem+0xb0>
 80067da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067e2:	b922      	cbnz	r2, 80067ee <quorem+0xf2>
 80067e4:	3b04      	subs	r3, #4
 80067e6:	429d      	cmp	r5, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	d30a      	bcc.n	8006802 <quorem+0x106>
 80067ec:	613c      	str	r4, [r7, #16]
 80067ee:	4630      	mov	r0, r6
 80067f0:	b003      	add	sp, #12
 80067f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	3b04      	subs	r3, #4
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d1cc      	bne.n	8006798 <quorem+0x9c>
 80067fe:	3c01      	subs	r4, #1
 8006800:	e7c7      	b.n	8006792 <quorem+0x96>
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	3b04      	subs	r3, #4
 8006806:	2a00      	cmp	r2, #0
 8006808:	d1f0      	bne.n	80067ec <quorem+0xf0>
 800680a:	3c01      	subs	r4, #1
 800680c:	e7eb      	b.n	80067e6 <quorem+0xea>
 800680e:	2000      	movs	r0, #0
 8006810:	e7ee      	b.n	80067f0 <quorem+0xf4>
 8006812:	0000      	movs	r0, r0
 8006814:	0000      	movs	r0, r0
	...

08006818 <_dtoa_r>:
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	ed2d 8b02 	vpush	{d8}
 8006820:	ec57 6b10 	vmov	r6, r7, d0
 8006824:	b095      	sub	sp, #84	; 0x54
 8006826:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006828:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800682c:	9105      	str	r1, [sp, #20]
 800682e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006832:	4604      	mov	r4, r0
 8006834:	9209      	str	r2, [sp, #36]	; 0x24
 8006836:	930f      	str	r3, [sp, #60]	; 0x3c
 8006838:	b975      	cbnz	r5, 8006858 <_dtoa_r+0x40>
 800683a:	2010      	movs	r0, #16
 800683c:	f000 fddc 	bl	80073f8 <malloc>
 8006840:	4602      	mov	r2, r0
 8006842:	6260      	str	r0, [r4, #36]	; 0x24
 8006844:	b920      	cbnz	r0, 8006850 <_dtoa_r+0x38>
 8006846:	4bb2      	ldr	r3, [pc, #712]	; (8006b10 <_dtoa_r+0x2f8>)
 8006848:	21ea      	movs	r1, #234	; 0xea
 800684a:	48b2      	ldr	r0, [pc, #712]	; (8006b14 <_dtoa_r+0x2fc>)
 800684c:	f001 fa32 	bl	8007cb4 <__assert_func>
 8006850:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006854:	6005      	str	r5, [r0, #0]
 8006856:	60c5      	str	r5, [r0, #12]
 8006858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800685a:	6819      	ldr	r1, [r3, #0]
 800685c:	b151      	cbz	r1, 8006874 <_dtoa_r+0x5c>
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	604a      	str	r2, [r1, #4]
 8006862:	2301      	movs	r3, #1
 8006864:	4093      	lsls	r3, r2
 8006866:	608b      	str	r3, [r1, #8]
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fe1b 	bl	80074a4 <_Bfree>
 800686e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	1e3b      	subs	r3, r7, #0
 8006876:	bfb9      	ittee	lt
 8006878:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800687c:	9303      	strlt	r3, [sp, #12]
 800687e:	2300      	movge	r3, #0
 8006880:	f8c8 3000 	strge.w	r3, [r8]
 8006884:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006888:	4ba3      	ldr	r3, [pc, #652]	; (8006b18 <_dtoa_r+0x300>)
 800688a:	bfbc      	itt	lt
 800688c:	2201      	movlt	r2, #1
 800688e:	f8c8 2000 	strlt.w	r2, [r8]
 8006892:	ea33 0309 	bics.w	r3, r3, r9
 8006896:	d11b      	bne.n	80068d0 <_dtoa_r+0xb8>
 8006898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800689a:	f242 730f 	movw	r3, #9999	; 0x270f
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068a4:	4333      	orrs	r3, r6
 80068a6:	f000 857a 	beq.w	800739e <_dtoa_r+0xb86>
 80068aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068ac:	b963      	cbnz	r3, 80068c8 <_dtoa_r+0xb0>
 80068ae:	4b9b      	ldr	r3, [pc, #620]	; (8006b1c <_dtoa_r+0x304>)
 80068b0:	e024      	b.n	80068fc <_dtoa_r+0xe4>
 80068b2:	4b9b      	ldr	r3, [pc, #620]	; (8006b20 <_dtoa_r+0x308>)
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	9800      	ldr	r0, [sp, #0]
 80068be:	b015      	add	sp, #84	; 0x54
 80068c0:	ecbd 8b02 	vpop	{d8}
 80068c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	4b94      	ldr	r3, [pc, #592]	; (8006b1c <_dtoa_r+0x304>)
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	3303      	adds	r3, #3
 80068ce:	e7f3      	b.n	80068b8 <_dtoa_r+0xa0>
 80068d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	ec51 0b17 	vmov	r0, r1, d7
 80068da:	2300      	movs	r3, #0
 80068dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80068e0:	f7fa f912 	bl	8000b08 <__aeabi_dcmpeq>
 80068e4:	4680      	mov	r8, r0
 80068e6:	b158      	cbz	r0, 8006900 <_dtoa_r+0xe8>
 80068e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068ea:	2301      	movs	r3, #1
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8551 	beq.w	8007398 <_dtoa_r+0xb80>
 80068f6:	488b      	ldr	r0, [pc, #556]	; (8006b24 <_dtoa_r+0x30c>)
 80068f8:	6018      	str	r0, [r3, #0]
 80068fa:	1e43      	subs	r3, r0, #1
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	e7dd      	b.n	80068bc <_dtoa_r+0xa4>
 8006900:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006904:	aa12      	add	r2, sp, #72	; 0x48
 8006906:	a913      	add	r1, sp, #76	; 0x4c
 8006908:	4620      	mov	r0, r4
 800690a:	f001 f8ad 	bl	8007a68 <__d2b>
 800690e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006912:	4683      	mov	fp, r0
 8006914:	2d00      	cmp	r5, #0
 8006916:	d07c      	beq.n	8006a12 <_dtoa_r+0x1fa>
 8006918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800691a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800691e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006922:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006926:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800692a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800692e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006932:	4b7d      	ldr	r3, [pc, #500]	; (8006b28 <_dtoa_r+0x310>)
 8006934:	2200      	movs	r2, #0
 8006936:	4630      	mov	r0, r6
 8006938:	4639      	mov	r1, r7
 800693a:	f7f9 fcc5 	bl	80002c8 <__aeabi_dsub>
 800693e:	a36e      	add	r3, pc, #440	; (adr r3, 8006af8 <_dtoa_r+0x2e0>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f7f9 fe78 	bl	8000638 <__aeabi_dmul>
 8006948:	a36d      	add	r3, pc, #436	; (adr r3, 8006b00 <_dtoa_r+0x2e8>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f7f9 fcbd 	bl	80002cc <__adddf3>
 8006952:	4606      	mov	r6, r0
 8006954:	4628      	mov	r0, r5
 8006956:	460f      	mov	r7, r1
 8006958:	f7f9 fe04 	bl	8000564 <__aeabi_i2d>
 800695c:	a36a      	add	r3, pc, #424	; (adr r3, 8006b08 <_dtoa_r+0x2f0>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f7f9 fe69 	bl	8000638 <__aeabi_dmul>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4630      	mov	r0, r6
 800696c:	4639      	mov	r1, r7
 800696e:	f7f9 fcad 	bl	80002cc <__adddf3>
 8006972:	4606      	mov	r6, r0
 8006974:	460f      	mov	r7, r1
 8006976:	f7fa f90f 	bl	8000b98 <__aeabi_d2iz>
 800697a:	2200      	movs	r2, #0
 800697c:	4682      	mov	sl, r0
 800697e:	2300      	movs	r3, #0
 8006980:	4630      	mov	r0, r6
 8006982:	4639      	mov	r1, r7
 8006984:	f7fa f8ca 	bl	8000b1c <__aeabi_dcmplt>
 8006988:	b148      	cbz	r0, 800699e <_dtoa_r+0x186>
 800698a:	4650      	mov	r0, sl
 800698c:	f7f9 fdea 	bl	8000564 <__aeabi_i2d>
 8006990:	4632      	mov	r2, r6
 8006992:	463b      	mov	r3, r7
 8006994:	f7fa f8b8 	bl	8000b08 <__aeabi_dcmpeq>
 8006998:	b908      	cbnz	r0, 800699e <_dtoa_r+0x186>
 800699a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800699e:	f1ba 0f16 	cmp.w	sl, #22
 80069a2:	d854      	bhi.n	8006a4e <_dtoa_r+0x236>
 80069a4:	4b61      	ldr	r3, [pc, #388]	; (8006b2c <_dtoa_r+0x314>)
 80069a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069b2:	f7fa f8b3 	bl	8000b1c <__aeabi_dcmplt>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d04b      	beq.n	8006a52 <_dtoa_r+0x23a>
 80069ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069be:	2300      	movs	r3, #0
 80069c0:	930e      	str	r3, [sp, #56]	; 0x38
 80069c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069c4:	1b5d      	subs	r5, r3, r5
 80069c6:	1e6b      	subs	r3, r5, #1
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	bf43      	ittte	mi
 80069cc:	2300      	movmi	r3, #0
 80069ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80069d2:	9304      	strmi	r3, [sp, #16]
 80069d4:	f04f 0800 	movpl.w	r8, #0
 80069d8:	f1ba 0f00 	cmp.w	sl, #0
 80069dc:	db3b      	blt.n	8006a56 <_dtoa_r+0x23e>
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80069e4:	4453      	add	r3, sl
 80069e6:	9304      	str	r3, [sp, #16]
 80069e8:	2300      	movs	r3, #0
 80069ea:	9306      	str	r3, [sp, #24]
 80069ec:	9b05      	ldr	r3, [sp, #20]
 80069ee:	2b09      	cmp	r3, #9
 80069f0:	d869      	bhi.n	8006ac6 <_dtoa_r+0x2ae>
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	bfc4      	itt	gt
 80069f6:	3b04      	subgt	r3, #4
 80069f8:	9305      	strgt	r3, [sp, #20]
 80069fa:	9b05      	ldr	r3, [sp, #20]
 80069fc:	f1a3 0302 	sub.w	r3, r3, #2
 8006a00:	bfcc      	ite	gt
 8006a02:	2500      	movgt	r5, #0
 8006a04:	2501      	movle	r5, #1
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d869      	bhi.n	8006ade <_dtoa_r+0x2c6>
 8006a0a:	e8df f003 	tbb	[pc, r3]
 8006a0e:	4e2c      	.short	0x4e2c
 8006a10:	5a4c      	.short	0x5a4c
 8006a12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006a16:	441d      	add	r5, r3
 8006a18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	bfc1      	itttt	gt
 8006a20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006a28:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a30:	bfda      	itte	le
 8006a32:	f1c3 0320 	rsble	r3, r3, #32
 8006a36:	fa06 f003 	lslle.w	r0, r6, r3
 8006a3a:	4318      	orrgt	r0, r3
 8006a3c:	f7f9 fd82 	bl	8000544 <__aeabi_ui2d>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4606      	mov	r6, r0
 8006a44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006a48:	3d01      	subs	r5, #1
 8006a4a:	9310      	str	r3, [sp, #64]	; 0x40
 8006a4c:	e771      	b.n	8006932 <_dtoa_r+0x11a>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e7b6      	b.n	80069c0 <_dtoa_r+0x1a8>
 8006a52:	900e      	str	r0, [sp, #56]	; 0x38
 8006a54:	e7b5      	b.n	80069c2 <_dtoa_r+0x1aa>
 8006a56:	f1ca 0300 	rsb	r3, sl, #0
 8006a5a:	9306      	str	r3, [sp, #24]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	eba8 080a 	sub.w	r8, r8, sl
 8006a62:	930d      	str	r3, [sp, #52]	; 0x34
 8006a64:	e7c2      	b.n	80069ec <_dtoa_r+0x1d4>
 8006a66:	2300      	movs	r3, #0
 8006a68:	9308      	str	r3, [sp, #32]
 8006a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	dc39      	bgt.n	8006ae4 <_dtoa_r+0x2cc>
 8006a70:	f04f 0901 	mov.w	r9, #1
 8006a74:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a78:	464b      	mov	r3, r9
 8006a7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a80:	2200      	movs	r2, #0
 8006a82:	6042      	str	r2, [r0, #4]
 8006a84:	2204      	movs	r2, #4
 8006a86:	f102 0614 	add.w	r6, r2, #20
 8006a8a:	429e      	cmp	r6, r3
 8006a8c:	6841      	ldr	r1, [r0, #4]
 8006a8e:	d92f      	bls.n	8006af0 <_dtoa_r+0x2d8>
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fcc7 	bl	8007424 <_Balloc>
 8006a96:	9000      	str	r0, [sp, #0]
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d14b      	bne.n	8006b34 <_dtoa_r+0x31c>
 8006a9c:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <_dtoa_r+0x318>)
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006aa4:	e6d1      	b.n	800684a <_dtoa_r+0x32>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e7de      	b.n	8006a68 <_dtoa_r+0x250>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9308      	str	r3, [sp, #32]
 8006aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab0:	eb0a 0903 	add.w	r9, sl, r3
 8006ab4:	f109 0301 	add.w	r3, r9, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	bfb8      	it	lt
 8006abe:	2301      	movlt	r3, #1
 8006ac0:	e7dd      	b.n	8006a7e <_dtoa_r+0x266>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e7f2      	b.n	8006aac <_dtoa_r+0x294>
 8006ac6:	2501      	movs	r5, #1
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9305      	str	r3, [sp, #20]
 8006acc:	9508      	str	r5, [sp, #32]
 8006ace:	f04f 39ff 	mov.w	r9, #4294967295
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ad8:	2312      	movs	r3, #18
 8006ada:	9209      	str	r2, [sp, #36]	; 0x24
 8006adc:	e7cf      	b.n	8006a7e <_dtoa_r+0x266>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	9308      	str	r3, [sp, #32]
 8006ae2:	e7f4      	b.n	8006ace <_dtoa_r+0x2b6>
 8006ae4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ae8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006aec:	464b      	mov	r3, r9
 8006aee:	e7c6      	b.n	8006a7e <_dtoa_r+0x266>
 8006af0:	3101      	adds	r1, #1
 8006af2:	6041      	str	r1, [r0, #4]
 8006af4:	0052      	lsls	r2, r2, #1
 8006af6:	e7c6      	b.n	8006a86 <_dtoa_r+0x26e>
 8006af8:	636f4361 	.word	0x636f4361
 8006afc:	3fd287a7 	.word	0x3fd287a7
 8006b00:	8b60c8b3 	.word	0x8b60c8b3
 8006b04:	3fc68a28 	.word	0x3fc68a28
 8006b08:	509f79fb 	.word	0x509f79fb
 8006b0c:	3fd34413 	.word	0x3fd34413
 8006b10:	08009575 	.word	0x08009575
 8006b14:	0800958c 	.word	0x0800958c
 8006b18:	7ff00000 	.word	0x7ff00000
 8006b1c:	08009571 	.word	0x08009571
 8006b20:	08009568 	.word	0x08009568
 8006b24:	08009545 	.word	0x08009545
 8006b28:	3ff80000 	.word	0x3ff80000
 8006b2c:	08009688 	.word	0x08009688
 8006b30:	080095eb 	.word	0x080095eb
 8006b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b36:	9a00      	ldr	r2, [sp, #0]
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	2b0e      	cmp	r3, #14
 8006b3e:	f200 80ad 	bhi.w	8006c9c <_dtoa_r+0x484>
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	f000 80aa 	beq.w	8006c9c <_dtoa_r+0x484>
 8006b48:	f1ba 0f00 	cmp.w	sl, #0
 8006b4c:	dd36      	ble.n	8006bbc <_dtoa_r+0x3a4>
 8006b4e:	4ac3      	ldr	r2, [pc, #780]	; (8006e5c <_dtoa_r+0x644>)
 8006b50:	f00a 030f 	and.w	r3, sl, #15
 8006b54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b58:	ed93 7b00 	vldr	d7, [r3]
 8006b5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006b64:	eeb0 8a47 	vmov.f32	s16, s14
 8006b68:	eef0 8a67 	vmov.f32	s17, s15
 8006b6c:	d016      	beq.n	8006b9c <_dtoa_r+0x384>
 8006b6e:	4bbc      	ldr	r3, [pc, #752]	; (8006e60 <_dtoa_r+0x648>)
 8006b70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b78:	f7f9 fe88 	bl	800088c <__aeabi_ddiv>
 8006b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b80:	f007 070f 	and.w	r7, r7, #15
 8006b84:	2503      	movs	r5, #3
 8006b86:	4eb6      	ldr	r6, [pc, #728]	; (8006e60 <_dtoa_r+0x648>)
 8006b88:	b957      	cbnz	r7, 8006ba0 <_dtoa_r+0x388>
 8006b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b8e:	ec53 2b18 	vmov	r2, r3, d8
 8006b92:	f7f9 fe7b 	bl	800088c <__aeabi_ddiv>
 8006b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b9a:	e029      	b.n	8006bf0 <_dtoa_r+0x3d8>
 8006b9c:	2502      	movs	r5, #2
 8006b9e:	e7f2      	b.n	8006b86 <_dtoa_r+0x36e>
 8006ba0:	07f9      	lsls	r1, r7, #31
 8006ba2:	d508      	bpl.n	8006bb6 <_dtoa_r+0x39e>
 8006ba4:	ec51 0b18 	vmov	r0, r1, d8
 8006ba8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bac:	f7f9 fd44 	bl	8000638 <__aeabi_dmul>
 8006bb0:	ec41 0b18 	vmov	d8, r0, r1
 8006bb4:	3501      	adds	r5, #1
 8006bb6:	107f      	asrs	r7, r7, #1
 8006bb8:	3608      	adds	r6, #8
 8006bba:	e7e5      	b.n	8006b88 <_dtoa_r+0x370>
 8006bbc:	f000 80a6 	beq.w	8006d0c <_dtoa_r+0x4f4>
 8006bc0:	f1ca 0600 	rsb	r6, sl, #0
 8006bc4:	4ba5      	ldr	r3, [pc, #660]	; (8006e5c <_dtoa_r+0x644>)
 8006bc6:	4fa6      	ldr	r7, [pc, #664]	; (8006e60 <_dtoa_r+0x648>)
 8006bc8:	f006 020f 	and.w	r2, r6, #15
 8006bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bd8:	f7f9 fd2e 	bl	8000638 <__aeabi_dmul>
 8006bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006be0:	1136      	asrs	r6, r6, #4
 8006be2:	2300      	movs	r3, #0
 8006be4:	2502      	movs	r5, #2
 8006be6:	2e00      	cmp	r6, #0
 8006be8:	f040 8085 	bne.w	8006cf6 <_dtoa_r+0x4de>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1d2      	bne.n	8006b96 <_dtoa_r+0x37e>
 8006bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 808c 	beq.w	8006d10 <_dtoa_r+0x4f8>
 8006bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bfc:	4b99      	ldr	r3, [pc, #612]	; (8006e64 <_dtoa_r+0x64c>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 ff8a 	bl	8000b1c <__aeabi_dcmplt>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	f000 8081 	beq.w	8006d10 <_dtoa_r+0x4f8>
 8006c0e:	9b01      	ldr	r3, [sp, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d07d      	beq.n	8006d10 <_dtoa_r+0x4f8>
 8006c14:	f1b9 0f00 	cmp.w	r9, #0
 8006c18:	dd3c      	ble.n	8006c94 <_dtoa_r+0x47c>
 8006c1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c1e:	9307      	str	r3, [sp, #28]
 8006c20:	2200      	movs	r2, #0
 8006c22:	4b91      	ldr	r3, [pc, #580]	; (8006e68 <_dtoa_r+0x650>)
 8006c24:	4630      	mov	r0, r6
 8006c26:	4639      	mov	r1, r7
 8006c28:	f7f9 fd06 	bl	8000638 <__aeabi_dmul>
 8006c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c30:	3501      	adds	r5, #1
 8006c32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006c36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f7f9 fc92 	bl	8000564 <__aeabi_i2d>
 8006c40:	4632      	mov	r2, r6
 8006c42:	463b      	mov	r3, r7
 8006c44:	f7f9 fcf8 	bl	8000638 <__aeabi_dmul>
 8006c48:	4b88      	ldr	r3, [pc, #544]	; (8006e6c <_dtoa_r+0x654>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f7f9 fb3e 	bl	80002cc <__adddf3>
 8006c50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c58:	9303      	str	r3, [sp, #12]
 8006c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d15c      	bne.n	8006d1a <_dtoa_r+0x502>
 8006c60:	4b83      	ldr	r3, [pc, #524]	; (8006e70 <_dtoa_r+0x658>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	4630      	mov	r0, r6
 8006c66:	4639      	mov	r1, r7
 8006c68:	f7f9 fb2e 	bl	80002c8 <__aeabi_dsub>
 8006c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c70:	4606      	mov	r6, r0
 8006c72:	460f      	mov	r7, r1
 8006c74:	f7f9 ff70 	bl	8000b58 <__aeabi_dcmpgt>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	f040 8296 	bne.w	80071aa <_dtoa_r+0x992>
 8006c7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c82:	4630      	mov	r0, r6
 8006c84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c88:	4639      	mov	r1, r7
 8006c8a:	f7f9 ff47 	bl	8000b1c <__aeabi_dcmplt>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	f040 8288 	bne.w	80071a4 <_dtoa_r+0x98c>
 8006c94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f2c0 8158 	blt.w	8006f54 <_dtoa_r+0x73c>
 8006ca4:	f1ba 0f0e 	cmp.w	sl, #14
 8006ca8:	f300 8154 	bgt.w	8006f54 <_dtoa_r+0x73c>
 8006cac:	4b6b      	ldr	r3, [pc, #428]	; (8006e5c <_dtoa_r+0x644>)
 8006cae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f280 80e3 	bge.w	8006e84 <_dtoa_r+0x66c>
 8006cbe:	9b01      	ldr	r3, [sp, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f300 80df 	bgt.w	8006e84 <_dtoa_r+0x66c>
 8006cc6:	f040 826d 	bne.w	80071a4 <_dtoa_r+0x98c>
 8006cca:	4b69      	ldr	r3, [pc, #420]	; (8006e70 <_dtoa_r+0x658>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 fcb1 	bl	8000638 <__aeabi_dmul>
 8006cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cda:	f7f9 ff33 	bl	8000b44 <__aeabi_dcmpge>
 8006cde:	9e01      	ldr	r6, [sp, #4]
 8006ce0:	4637      	mov	r7, r6
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	f040 8243 	bne.w	800716e <_dtoa_r+0x956>
 8006ce8:	9d00      	ldr	r5, [sp, #0]
 8006cea:	2331      	movs	r3, #49	; 0x31
 8006cec:	f805 3b01 	strb.w	r3, [r5], #1
 8006cf0:	f10a 0a01 	add.w	sl, sl, #1
 8006cf4:	e23f      	b.n	8007176 <_dtoa_r+0x95e>
 8006cf6:	07f2      	lsls	r2, r6, #31
 8006cf8:	d505      	bpl.n	8006d06 <_dtoa_r+0x4ee>
 8006cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfe:	f7f9 fc9b 	bl	8000638 <__aeabi_dmul>
 8006d02:	3501      	adds	r5, #1
 8006d04:	2301      	movs	r3, #1
 8006d06:	1076      	asrs	r6, r6, #1
 8006d08:	3708      	adds	r7, #8
 8006d0a:	e76c      	b.n	8006be6 <_dtoa_r+0x3ce>
 8006d0c:	2502      	movs	r5, #2
 8006d0e:	e76f      	b.n	8006bf0 <_dtoa_r+0x3d8>
 8006d10:	9b01      	ldr	r3, [sp, #4]
 8006d12:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d16:	930c      	str	r3, [sp, #48]	; 0x30
 8006d18:	e78d      	b.n	8006c36 <_dtoa_r+0x41e>
 8006d1a:	9900      	ldr	r1, [sp, #0]
 8006d1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d20:	4b4e      	ldr	r3, [pc, #312]	; (8006e5c <_dtoa_r+0x644>)
 8006d22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d26:	4401      	add	r1, r0
 8006d28:	9102      	str	r1, [sp, #8]
 8006d2a:	9908      	ldr	r1, [sp, #32]
 8006d2c:	eeb0 8a47 	vmov.f32	s16, s14
 8006d30:	eef0 8a67 	vmov.f32	s17, s15
 8006d34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	d045      	beq.n	8006dcc <_dtoa_r+0x5b4>
 8006d40:	494c      	ldr	r1, [pc, #304]	; (8006e74 <_dtoa_r+0x65c>)
 8006d42:	2000      	movs	r0, #0
 8006d44:	f7f9 fda2 	bl	800088c <__aeabi_ddiv>
 8006d48:	ec53 2b18 	vmov	r2, r3, d8
 8006d4c:	f7f9 fabc 	bl	80002c8 <__aeabi_dsub>
 8006d50:	9d00      	ldr	r5, [sp, #0]
 8006d52:	ec41 0b18 	vmov	d8, r0, r1
 8006d56:	4639      	mov	r1, r7
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7f9 ff1d 	bl	8000b98 <__aeabi_d2iz>
 8006d5e:	900c      	str	r0, [sp, #48]	; 0x30
 8006d60:	f7f9 fc00 	bl	8000564 <__aeabi_i2d>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4630      	mov	r0, r6
 8006d6a:	4639      	mov	r1, r7
 8006d6c:	f7f9 faac 	bl	80002c8 <__aeabi_dsub>
 8006d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d72:	3330      	adds	r3, #48	; 0x30
 8006d74:	f805 3b01 	strb.w	r3, [r5], #1
 8006d78:	ec53 2b18 	vmov	r2, r3, d8
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	460f      	mov	r7, r1
 8006d80:	f7f9 fecc 	bl	8000b1c <__aeabi_dcmplt>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d165      	bne.n	8006e54 <_dtoa_r+0x63c>
 8006d88:	4632      	mov	r2, r6
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	4935      	ldr	r1, [pc, #212]	; (8006e64 <_dtoa_r+0x64c>)
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f7f9 fa9a 	bl	80002c8 <__aeabi_dsub>
 8006d94:	ec53 2b18 	vmov	r2, r3, d8
 8006d98:	f7f9 fec0 	bl	8000b1c <__aeabi_dcmplt>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f040 80b9 	bne.w	8006f14 <_dtoa_r+0x6fc>
 8006da2:	9b02      	ldr	r3, [sp, #8]
 8006da4:	429d      	cmp	r5, r3
 8006da6:	f43f af75 	beq.w	8006c94 <_dtoa_r+0x47c>
 8006daa:	4b2f      	ldr	r3, [pc, #188]	; (8006e68 <_dtoa_r+0x650>)
 8006dac:	ec51 0b18 	vmov	r0, r1, d8
 8006db0:	2200      	movs	r2, #0
 8006db2:	f7f9 fc41 	bl	8000638 <__aeabi_dmul>
 8006db6:	4b2c      	ldr	r3, [pc, #176]	; (8006e68 <_dtoa_r+0x650>)
 8006db8:	ec41 0b18 	vmov	d8, r0, r1
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fc39 	bl	8000638 <__aeabi_dmul>
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	e7c4      	b.n	8006d56 <_dtoa_r+0x53e>
 8006dcc:	ec51 0b17 	vmov	r0, r1, d7
 8006dd0:	f7f9 fc32 	bl	8000638 <__aeabi_dmul>
 8006dd4:	9b02      	ldr	r3, [sp, #8]
 8006dd6:	9d00      	ldr	r5, [sp, #0]
 8006dd8:	930c      	str	r3, [sp, #48]	; 0x30
 8006dda:	ec41 0b18 	vmov	d8, r0, r1
 8006dde:	4639      	mov	r1, r7
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7f9 fed9 	bl	8000b98 <__aeabi_d2iz>
 8006de6:	9011      	str	r0, [sp, #68]	; 0x44
 8006de8:	f7f9 fbbc 	bl	8000564 <__aeabi_i2d>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 fa68 	bl	80002c8 <__aeabi_dsub>
 8006df8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dfa:	3330      	adds	r3, #48	; 0x30
 8006dfc:	f805 3b01 	strb.w	r3, [r5], #1
 8006e00:	9b02      	ldr	r3, [sp, #8]
 8006e02:	429d      	cmp	r5, r3
 8006e04:	4606      	mov	r6, r0
 8006e06:	460f      	mov	r7, r1
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	d134      	bne.n	8006e78 <_dtoa_r+0x660>
 8006e0e:	4b19      	ldr	r3, [pc, #100]	; (8006e74 <_dtoa_r+0x65c>)
 8006e10:	ec51 0b18 	vmov	r0, r1, d8
 8006e14:	f7f9 fa5a 	bl	80002cc <__adddf3>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	4639      	mov	r1, r7
 8006e20:	f7f9 fe9a 	bl	8000b58 <__aeabi_dcmpgt>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d175      	bne.n	8006f14 <_dtoa_r+0x6fc>
 8006e28:	ec53 2b18 	vmov	r2, r3, d8
 8006e2c:	4911      	ldr	r1, [pc, #68]	; (8006e74 <_dtoa_r+0x65c>)
 8006e2e:	2000      	movs	r0, #0
 8006e30:	f7f9 fa4a 	bl	80002c8 <__aeabi_dsub>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4630      	mov	r0, r6
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	f7f9 fe6e 	bl	8000b1c <__aeabi_dcmplt>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	f43f af27 	beq.w	8006c94 <_dtoa_r+0x47c>
 8006e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e48:	1e6b      	subs	r3, r5, #1
 8006e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e50:	2b30      	cmp	r3, #48	; 0x30
 8006e52:	d0f8      	beq.n	8006e46 <_dtoa_r+0x62e>
 8006e54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e58:	e04a      	b.n	8006ef0 <_dtoa_r+0x6d8>
 8006e5a:	bf00      	nop
 8006e5c:	08009688 	.word	0x08009688
 8006e60:	08009660 	.word	0x08009660
 8006e64:	3ff00000 	.word	0x3ff00000
 8006e68:	40240000 	.word	0x40240000
 8006e6c:	401c0000 	.word	0x401c0000
 8006e70:	40140000 	.word	0x40140000
 8006e74:	3fe00000 	.word	0x3fe00000
 8006e78:	4baf      	ldr	r3, [pc, #700]	; (8007138 <_dtoa_r+0x920>)
 8006e7a:	f7f9 fbdd 	bl	8000638 <__aeabi_dmul>
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460f      	mov	r7, r1
 8006e82:	e7ac      	b.n	8006dde <_dtoa_r+0x5c6>
 8006e84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e88:	9d00      	ldr	r5, [sp, #0]
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	4630      	mov	r0, r6
 8006e90:	4639      	mov	r1, r7
 8006e92:	f7f9 fcfb 	bl	800088c <__aeabi_ddiv>
 8006e96:	f7f9 fe7f 	bl	8000b98 <__aeabi_d2iz>
 8006e9a:	9002      	str	r0, [sp, #8]
 8006e9c:	f7f9 fb62 	bl	8000564 <__aeabi_i2d>
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	f7f9 fbc8 	bl	8000638 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4630      	mov	r0, r6
 8006eae:	4639      	mov	r1, r7
 8006eb0:	f7f9 fa0a 	bl	80002c8 <__aeabi_dsub>
 8006eb4:	9e02      	ldr	r6, [sp, #8]
 8006eb6:	9f01      	ldr	r7, [sp, #4]
 8006eb8:	3630      	adds	r6, #48	; 0x30
 8006eba:	f805 6b01 	strb.w	r6, [r5], #1
 8006ebe:	9e00      	ldr	r6, [sp, #0]
 8006ec0:	1bae      	subs	r6, r5, r6
 8006ec2:	42b7      	cmp	r7, r6
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	d137      	bne.n	8006f3a <_dtoa_r+0x722>
 8006eca:	f7f9 f9ff 	bl	80002cc <__adddf3>
 8006ece:	4642      	mov	r2, r8
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460f      	mov	r7, r1
 8006ed6:	f7f9 fe3f 	bl	8000b58 <__aeabi_dcmpgt>
 8006eda:	b9c8      	cbnz	r0, 8006f10 <_dtoa_r+0x6f8>
 8006edc:	4642      	mov	r2, r8
 8006ede:	464b      	mov	r3, r9
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	f7f9 fe10 	bl	8000b08 <__aeabi_dcmpeq>
 8006ee8:	b110      	cbz	r0, 8006ef0 <_dtoa_r+0x6d8>
 8006eea:	9b02      	ldr	r3, [sp, #8]
 8006eec:	07d9      	lsls	r1, r3, #31
 8006eee:	d40f      	bmi.n	8006f10 <_dtoa_r+0x6f8>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4659      	mov	r1, fp
 8006ef4:	f000 fad6 	bl	80074a4 <_Bfree>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	702b      	strb	r3, [r5, #0]
 8006efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006efe:	f10a 0001 	add.w	r0, sl, #1
 8006f02:	6018      	str	r0, [r3, #0]
 8006f04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f43f acd8 	beq.w	80068bc <_dtoa_r+0xa4>
 8006f0c:	601d      	str	r5, [r3, #0]
 8006f0e:	e4d5      	b.n	80068bc <_dtoa_r+0xa4>
 8006f10:	f8cd a01c 	str.w	sl, [sp, #28]
 8006f14:	462b      	mov	r3, r5
 8006f16:	461d      	mov	r5, r3
 8006f18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f1c:	2a39      	cmp	r2, #57	; 0x39
 8006f1e:	d108      	bne.n	8006f32 <_dtoa_r+0x71a>
 8006f20:	9a00      	ldr	r2, [sp, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d1f7      	bne.n	8006f16 <_dtoa_r+0x6fe>
 8006f26:	9a07      	ldr	r2, [sp, #28]
 8006f28:	9900      	ldr	r1, [sp, #0]
 8006f2a:	3201      	adds	r2, #1
 8006f2c:	9207      	str	r2, [sp, #28]
 8006f2e:	2230      	movs	r2, #48	; 0x30
 8006f30:	700a      	strb	r2, [r1, #0]
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	3201      	adds	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e78c      	b.n	8006e54 <_dtoa_r+0x63c>
 8006f3a:	4b7f      	ldr	r3, [pc, #508]	; (8007138 <_dtoa_r+0x920>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f7f9 fb7b 	bl	8000638 <__aeabi_dmul>
 8006f42:	2200      	movs	r2, #0
 8006f44:	2300      	movs	r3, #0
 8006f46:	4606      	mov	r6, r0
 8006f48:	460f      	mov	r7, r1
 8006f4a:	f7f9 fddd 	bl	8000b08 <__aeabi_dcmpeq>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d09b      	beq.n	8006e8a <_dtoa_r+0x672>
 8006f52:	e7cd      	b.n	8006ef0 <_dtoa_r+0x6d8>
 8006f54:	9a08      	ldr	r2, [sp, #32]
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	f000 80c4 	beq.w	80070e4 <_dtoa_r+0x8cc>
 8006f5c:	9a05      	ldr	r2, [sp, #20]
 8006f5e:	2a01      	cmp	r2, #1
 8006f60:	f300 80a8 	bgt.w	80070b4 <_dtoa_r+0x89c>
 8006f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	f000 80a0 	beq.w	80070ac <_dtoa_r+0x894>
 8006f6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f70:	9e06      	ldr	r6, [sp, #24]
 8006f72:	4645      	mov	r5, r8
 8006f74:	9a04      	ldr	r2, [sp, #16]
 8006f76:	2101      	movs	r1, #1
 8006f78:	441a      	add	r2, r3
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4498      	add	r8, r3
 8006f7e:	9204      	str	r2, [sp, #16]
 8006f80:	f000 fb4c 	bl	800761c <__i2b>
 8006f84:	4607      	mov	r7, r0
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	dd0b      	ble.n	8006fa2 <_dtoa_r+0x78a>
 8006f8a:	9b04      	ldr	r3, [sp, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	dd08      	ble.n	8006fa2 <_dtoa_r+0x78a>
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	9a04      	ldr	r2, [sp, #16]
 8006f94:	bfa8      	it	ge
 8006f96:	462b      	movge	r3, r5
 8006f98:	eba8 0803 	sub.w	r8, r8, r3
 8006f9c:	1aed      	subs	r5, r5, r3
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	9b06      	ldr	r3, [sp, #24]
 8006fa4:	b1fb      	cbz	r3, 8006fe6 <_dtoa_r+0x7ce>
 8006fa6:	9b08      	ldr	r3, [sp, #32]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 809f 	beq.w	80070ec <_dtoa_r+0x8d4>
 8006fae:	2e00      	cmp	r6, #0
 8006fb0:	dd11      	ble.n	8006fd6 <_dtoa_r+0x7be>
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f000 fbec 	bl	8007794 <__pow5mult>
 8006fbc:	465a      	mov	r2, fp
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fb40 	bl	8007648 <__multiply>
 8006fc8:	4659      	mov	r1, fp
 8006fca:	9007      	str	r0, [sp, #28]
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fa69 	bl	80074a4 <_Bfree>
 8006fd2:	9b07      	ldr	r3, [sp, #28]
 8006fd4:	469b      	mov	fp, r3
 8006fd6:	9b06      	ldr	r3, [sp, #24]
 8006fd8:	1b9a      	subs	r2, r3, r6
 8006fda:	d004      	beq.n	8006fe6 <_dtoa_r+0x7ce>
 8006fdc:	4659      	mov	r1, fp
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 fbd8 	bl	8007794 <__pow5mult>
 8006fe4:	4683      	mov	fp, r0
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 fb17 	bl	800761c <__i2b>
 8006fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	dd7c      	ble.n	80070f0 <_dtoa_r+0x8d8>
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4601      	mov	r1, r0
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 fbca 	bl	8007794 <__pow5mult>
 8007000:	9b05      	ldr	r3, [sp, #20]
 8007002:	2b01      	cmp	r3, #1
 8007004:	4606      	mov	r6, r0
 8007006:	dd76      	ble.n	80070f6 <_dtoa_r+0x8de>
 8007008:	2300      	movs	r3, #0
 800700a:	9306      	str	r3, [sp, #24]
 800700c:	6933      	ldr	r3, [r6, #16]
 800700e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007012:	6918      	ldr	r0, [r3, #16]
 8007014:	f000 fab2 	bl	800757c <__hi0bits>
 8007018:	f1c0 0020 	rsb	r0, r0, #32
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	4418      	add	r0, r3
 8007020:	f010 001f 	ands.w	r0, r0, #31
 8007024:	f000 8086 	beq.w	8007134 <_dtoa_r+0x91c>
 8007028:	f1c0 0320 	rsb	r3, r0, #32
 800702c:	2b04      	cmp	r3, #4
 800702e:	dd7f      	ble.n	8007130 <_dtoa_r+0x918>
 8007030:	f1c0 001c 	rsb	r0, r0, #28
 8007034:	9b04      	ldr	r3, [sp, #16]
 8007036:	4403      	add	r3, r0
 8007038:	4480      	add	r8, r0
 800703a:	4405      	add	r5, r0
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	f1b8 0f00 	cmp.w	r8, #0
 8007042:	dd05      	ble.n	8007050 <_dtoa_r+0x838>
 8007044:	4659      	mov	r1, fp
 8007046:	4642      	mov	r2, r8
 8007048:	4620      	mov	r0, r4
 800704a:	f000 fbfd 	bl	8007848 <__lshift>
 800704e:	4683      	mov	fp, r0
 8007050:	9b04      	ldr	r3, [sp, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dd05      	ble.n	8007062 <_dtoa_r+0x84a>
 8007056:	4631      	mov	r1, r6
 8007058:	461a      	mov	r2, r3
 800705a:	4620      	mov	r0, r4
 800705c:	f000 fbf4 	bl	8007848 <__lshift>
 8007060:	4606      	mov	r6, r0
 8007062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007064:	2b00      	cmp	r3, #0
 8007066:	d069      	beq.n	800713c <_dtoa_r+0x924>
 8007068:	4631      	mov	r1, r6
 800706a:	4658      	mov	r0, fp
 800706c:	f000 fc58 	bl	8007920 <__mcmp>
 8007070:	2800      	cmp	r0, #0
 8007072:	da63      	bge.n	800713c <_dtoa_r+0x924>
 8007074:	2300      	movs	r3, #0
 8007076:	4659      	mov	r1, fp
 8007078:	220a      	movs	r2, #10
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fa34 	bl	80074e8 <__multadd>
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007086:	4683      	mov	fp, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 818f 	beq.w	80073ac <_dtoa_r+0xb94>
 800708e:	4639      	mov	r1, r7
 8007090:	2300      	movs	r3, #0
 8007092:	220a      	movs	r2, #10
 8007094:	4620      	mov	r0, r4
 8007096:	f000 fa27 	bl	80074e8 <__multadd>
 800709a:	f1b9 0f00 	cmp.w	r9, #0
 800709e:	4607      	mov	r7, r0
 80070a0:	f300 808e 	bgt.w	80071c0 <_dtoa_r+0x9a8>
 80070a4:	9b05      	ldr	r3, [sp, #20]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	dc50      	bgt.n	800714c <_dtoa_r+0x934>
 80070aa:	e089      	b.n	80071c0 <_dtoa_r+0x9a8>
 80070ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070b2:	e75d      	b.n	8006f70 <_dtoa_r+0x758>
 80070b4:	9b01      	ldr	r3, [sp, #4]
 80070b6:	1e5e      	subs	r6, r3, #1
 80070b8:	9b06      	ldr	r3, [sp, #24]
 80070ba:	42b3      	cmp	r3, r6
 80070bc:	bfbf      	itttt	lt
 80070be:	9b06      	ldrlt	r3, [sp, #24]
 80070c0:	9606      	strlt	r6, [sp, #24]
 80070c2:	1af2      	sublt	r2, r6, r3
 80070c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80070c6:	bfb6      	itet	lt
 80070c8:	189b      	addlt	r3, r3, r2
 80070ca:	1b9e      	subge	r6, r3, r6
 80070cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	bfb8      	it	lt
 80070d2:	2600      	movlt	r6, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bfb5      	itete	lt
 80070d8:	eba8 0503 	sublt.w	r5, r8, r3
 80070dc:	9b01      	ldrge	r3, [sp, #4]
 80070de:	2300      	movlt	r3, #0
 80070e0:	4645      	movge	r5, r8
 80070e2:	e747      	b.n	8006f74 <_dtoa_r+0x75c>
 80070e4:	9e06      	ldr	r6, [sp, #24]
 80070e6:	9f08      	ldr	r7, [sp, #32]
 80070e8:	4645      	mov	r5, r8
 80070ea:	e74c      	b.n	8006f86 <_dtoa_r+0x76e>
 80070ec:	9a06      	ldr	r2, [sp, #24]
 80070ee:	e775      	b.n	8006fdc <_dtoa_r+0x7c4>
 80070f0:	9b05      	ldr	r3, [sp, #20]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	dc18      	bgt.n	8007128 <_dtoa_r+0x910>
 80070f6:	9b02      	ldr	r3, [sp, #8]
 80070f8:	b9b3      	cbnz	r3, 8007128 <_dtoa_r+0x910>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007100:	b9a3      	cbnz	r3, 800712c <_dtoa_r+0x914>
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007108:	0d1b      	lsrs	r3, r3, #20
 800710a:	051b      	lsls	r3, r3, #20
 800710c:	b12b      	cbz	r3, 800711a <_dtoa_r+0x902>
 800710e:	9b04      	ldr	r3, [sp, #16]
 8007110:	3301      	adds	r3, #1
 8007112:	9304      	str	r3, [sp, #16]
 8007114:	f108 0801 	add.w	r8, r8, #1
 8007118:	2301      	movs	r3, #1
 800711a:	9306      	str	r3, [sp, #24]
 800711c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800711e:	2b00      	cmp	r3, #0
 8007120:	f47f af74 	bne.w	800700c <_dtoa_r+0x7f4>
 8007124:	2001      	movs	r0, #1
 8007126:	e779      	b.n	800701c <_dtoa_r+0x804>
 8007128:	2300      	movs	r3, #0
 800712a:	e7f6      	b.n	800711a <_dtoa_r+0x902>
 800712c:	9b02      	ldr	r3, [sp, #8]
 800712e:	e7f4      	b.n	800711a <_dtoa_r+0x902>
 8007130:	d085      	beq.n	800703e <_dtoa_r+0x826>
 8007132:	4618      	mov	r0, r3
 8007134:	301c      	adds	r0, #28
 8007136:	e77d      	b.n	8007034 <_dtoa_r+0x81c>
 8007138:	40240000 	.word	0x40240000
 800713c:	9b01      	ldr	r3, [sp, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	dc38      	bgt.n	80071b4 <_dtoa_r+0x99c>
 8007142:	9b05      	ldr	r3, [sp, #20]
 8007144:	2b02      	cmp	r3, #2
 8007146:	dd35      	ble.n	80071b4 <_dtoa_r+0x99c>
 8007148:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800714c:	f1b9 0f00 	cmp.w	r9, #0
 8007150:	d10d      	bne.n	800716e <_dtoa_r+0x956>
 8007152:	4631      	mov	r1, r6
 8007154:	464b      	mov	r3, r9
 8007156:	2205      	movs	r2, #5
 8007158:	4620      	mov	r0, r4
 800715a:	f000 f9c5 	bl	80074e8 <__multadd>
 800715e:	4601      	mov	r1, r0
 8007160:	4606      	mov	r6, r0
 8007162:	4658      	mov	r0, fp
 8007164:	f000 fbdc 	bl	8007920 <__mcmp>
 8007168:	2800      	cmp	r0, #0
 800716a:	f73f adbd 	bgt.w	8006ce8 <_dtoa_r+0x4d0>
 800716e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007170:	9d00      	ldr	r5, [sp, #0]
 8007172:	ea6f 0a03 	mvn.w	sl, r3
 8007176:	f04f 0800 	mov.w	r8, #0
 800717a:	4631      	mov	r1, r6
 800717c:	4620      	mov	r0, r4
 800717e:	f000 f991 	bl	80074a4 <_Bfree>
 8007182:	2f00      	cmp	r7, #0
 8007184:	f43f aeb4 	beq.w	8006ef0 <_dtoa_r+0x6d8>
 8007188:	f1b8 0f00 	cmp.w	r8, #0
 800718c:	d005      	beq.n	800719a <_dtoa_r+0x982>
 800718e:	45b8      	cmp	r8, r7
 8007190:	d003      	beq.n	800719a <_dtoa_r+0x982>
 8007192:	4641      	mov	r1, r8
 8007194:	4620      	mov	r0, r4
 8007196:	f000 f985 	bl	80074a4 <_Bfree>
 800719a:	4639      	mov	r1, r7
 800719c:	4620      	mov	r0, r4
 800719e:	f000 f981 	bl	80074a4 <_Bfree>
 80071a2:	e6a5      	b.n	8006ef0 <_dtoa_r+0x6d8>
 80071a4:	2600      	movs	r6, #0
 80071a6:	4637      	mov	r7, r6
 80071a8:	e7e1      	b.n	800716e <_dtoa_r+0x956>
 80071aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80071ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071b0:	4637      	mov	r7, r6
 80071b2:	e599      	b.n	8006ce8 <_dtoa_r+0x4d0>
 80071b4:	9b08      	ldr	r3, [sp, #32]
 80071b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 80fd 	beq.w	80073ba <_dtoa_r+0xba2>
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	dd05      	ble.n	80071d0 <_dtoa_r+0x9b8>
 80071c4:	4639      	mov	r1, r7
 80071c6:	462a      	mov	r2, r5
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fb3d 	bl	8007848 <__lshift>
 80071ce:	4607      	mov	r7, r0
 80071d0:	9b06      	ldr	r3, [sp, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d05c      	beq.n	8007290 <_dtoa_r+0xa78>
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 f923 	bl	8007424 <_Balloc>
 80071de:	4605      	mov	r5, r0
 80071e0:	b928      	cbnz	r0, 80071ee <_dtoa_r+0x9d6>
 80071e2:	4b80      	ldr	r3, [pc, #512]	; (80073e4 <_dtoa_r+0xbcc>)
 80071e4:	4602      	mov	r2, r0
 80071e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80071ea:	f7ff bb2e 	b.w	800684a <_dtoa_r+0x32>
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	3202      	adds	r2, #2
 80071f2:	0092      	lsls	r2, r2, #2
 80071f4:	f107 010c 	add.w	r1, r7, #12
 80071f8:	300c      	adds	r0, #12
 80071fa:	f000 f905 	bl	8007408 <memcpy>
 80071fe:	2201      	movs	r2, #1
 8007200:	4629      	mov	r1, r5
 8007202:	4620      	mov	r0, r4
 8007204:	f000 fb20 	bl	8007848 <__lshift>
 8007208:	9b00      	ldr	r3, [sp, #0]
 800720a:	3301      	adds	r3, #1
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	9b00      	ldr	r3, [sp, #0]
 8007210:	444b      	add	r3, r9
 8007212:	9307      	str	r3, [sp, #28]
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	46b8      	mov	r8, r7
 800721c:	9306      	str	r3, [sp, #24]
 800721e:	4607      	mov	r7, r0
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	4631      	mov	r1, r6
 8007224:	3b01      	subs	r3, #1
 8007226:	4658      	mov	r0, fp
 8007228:	9302      	str	r3, [sp, #8]
 800722a:	f7ff fa67 	bl	80066fc <quorem>
 800722e:	4603      	mov	r3, r0
 8007230:	3330      	adds	r3, #48	; 0x30
 8007232:	9004      	str	r0, [sp, #16]
 8007234:	4641      	mov	r1, r8
 8007236:	4658      	mov	r0, fp
 8007238:	9308      	str	r3, [sp, #32]
 800723a:	f000 fb71 	bl	8007920 <__mcmp>
 800723e:	463a      	mov	r2, r7
 8007240:	4681      	mov	r9, r0
 8007242:	4631      	mov	r1, r6
 8007244:	4620      	mov	r0, r4
 8007246:	f000 fb87 	bl	8007958 <__mdiff>
 800724a:	68c2      	ldr	r2, [r0, #12]
 800724c:	9b08      	ldr	r3, [sp, #32]
 800724e:	4605      	mov	r5, r0
 8007250:	bb02      	cbnz	r2, 8007294 <_dtoa_r+0xa7c>
 8007252:	4601      	mov	r1, r0
 8007254:	4658      	mov	r0, fp
 8007256:	f000 fb63 	bl	8007920 <__mcmp>
 800725a:	9b08      	ldr	r3, [sp, #32]
 800725c:	4602      	mov	r2, r0
 800725e:	4629      	mov	r1, r5
 8007260:	4620      	mov	r0, r4
 8007262:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007266:	f000 f91d 	bl	80074a4 <_Bfree>
 800726a:	9b05      	ldr	r3, [sp, #20]
 800726c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800726e:	9d01      	ldr	r5, [sp, #4]
 8007270:	ea43 0102 	orr.w	r1, r3, r2
 8007274:	9b06      	ldr	r3, [sp, #24]
 8007276:	430b      	orrs	r3, r1
 8007278:	9b08      	ldr	r3, [sp, #32]
 800727a:	d10d      	bne.n	8007298 <_dtoa_r+0xa80>
 800727c:	2b39      	cmp	r3, #57	; 0x39
 800727e:	d029      	beq.n	80072d4 <_dtoa_r+0xabc>
 8007280:	f1b9 0f00 	cmp.w	r9, #0
 8007284:	dd01      	ble.n	800728a <_dtoa_r+0xa72>
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	3331      	adds	r3, #49	; 0x31
 800728a:	9a02      	ldr	r2, [sp, #8]
 800728c:	7013      	strb	r3, [r2, #0]
 800728e:	e774      	b.n	800717a <_dtoa_r+0x962>
 8007290:	4638      	mov	r0, r7
 8007292:	e7b9      	b.n	8007208 <_dtoa_r+0x9f0>
 8007294:	2201      	movs	r2, #1
 8007296:	e7e2      	b.n	800725e <_dtoa_r+0xa46>
 8007298:	f1b9 0f00 	cmp.w	r9, #0
 800729c:	db06      	blt.n	80072ac <_dtoa_r+0xa94>
 800729e:	9905      	ldr	r1, [sp, #20]
 80072a0:	ea41 0909 	orr.w	r9, r1, r9
 80072a4:	9906      	ldr	r1, [sp, #24]
 80072a6:	ea59 0101 	orrs.w	r1, r9, r1
 80072aa:	d120      	bne.n	80072ee <_dtoa_r+0xad6>
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	ddec      	ble.n	800728a <_dtoa_r+0xa72>
 80072b0:	4659      	mov	r1, fp
 80072b2:	2201      	movs	r2, #1
 80072b4:	4620      	mov	r0, r4
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	f000 fac6 	bl	8007848 <__lshift>
 80072bc:	4631      	mov	r1, r6
 80072be:	4683      	mov	fp, r0
 80072c0:	f000 fb2e 	bl	8007920 <__mcmp>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	dc02      	bgt.n	80072d0 <_dtoa_r+0xab8>
 80072ca:	d1de      	bne.n	800728a <_dtoa_r+0xa72>
 80072cc:	07da      	lsls	r2, r3, #31
 80072ce:	d5dc      	bpl.n	800728a <_dtoa_r+0xa72>
 80072d0:	2b39      	cmp	r3, #57	; 0x39
 80072d2:	d1d8      	bne.n	8007286 <_dtoa_r+0xa6e>
 80072d4:	9a02      	ldr	r2, [sp, #8]
 80072d6:	2339      	movs	r3, #57	; 0x39
 80072d8:	7013      	strb	r3, [r2, #0]
 80072da:	462b      	mov	r3, r5
 80072dc:	461d      	mov	r5, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80072e4:	2a39      	cmp	r2, #57	; 0x39
 80072e6:	d050      	beq.n	800738a <_dtoa_r+0xb72>
 80072e8:	3201      	adds	r2, #1
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e745      	b.n	800717a <_dtoa_r+0x962>
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	dd03      	ble.n	80072fa <_dtoa_r+0xae2>
 80072f2:	2b39      	cmp	r3, #57	; 0x39
 80072f4:	d0ee      	beq.n	80072d4 <_dtoa_r+0xabc>
 80072f6:	3301      	adds	r3, #1
 80072f8:	e7c7      	b.n	800728a <_dtoa_r+0xa72>
 80072fa:	9a01      	ldr	r2, [sp, #4]
 80072fc:	9907      	ldr	r1, [sp, #28]
 80072fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007302:	428a      	cmp	r2, r1
 8007304:	d02a      	beq.n	800735c <_dtoa_r+0xb44>
 8007306:	4659      	mov	r1, fp
 8007308:	2300      	movs	r3, #0
 800730a:	220a      	movs	r2, #10
 800730c:	4620      	mov	r0, r4
 800730e:	f000 f8eb 	bl	80074e8 <__multadd>
 8007312:	45b8      	cmp	r8, r7
 8007314:	4683      	mov	fp, r0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	f04f 020a 	mov.w	r2, #10
 800731e:	4641      	mov	r1, r8
 8007320:	4620      	mov	r0, r4
 8007322:	d107      	bne.n	8007334 <_dtoa_r+0xb1c>
 8007324:	f000 f8e0 	bl	80074e8 <__multadd>
 8007328:	4680      	mov	r8, r0
 800732a:	4607      	mov	r7, r0
 800732c:	9b01      	ldr	r3, [sp, #4]
 800732e:	3301      	adds	r3, #1
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	e775      	b.n	8007220 <_dtoa_r+0xa08>
 8007334:	f000 f8d8 	bl	80074e8 <__multadd>
 8007338:	4639      	mov	r1, r7
 800733a:	4680      	mov	r8, r0
 800733c:	2300      	movs	r3, #0
 800733e:	220a      	movs	r2, #10
 8007340:	4620      	mov	r0, r4
 8007342:	f000 f8d1 	bl	80074e8 <__multadd>
 8007346:	4607      	mov	r7, r0
 8007348:	e7f0      	b.n	800732c <_dtoa_r+0xb14>
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	9a00      	ldr	r2, [sp, #0]
 8007350:	bfcc      	ite	gt
 8007352:	464d      	movgt	r5, r9
 8007354:	2501      	movle	r5, #1
 8007356:	4415      	add	r5, r2
 8007358:	f04f 0800 	mov.w	r8, #0
 800735c:	4659      	mov	r1, fp
 800735e:	2201      	movs	r2, #1
 8007360:	4620      	mov	r0, r4
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	f000 fa70 	bl	8007848 <__lshift>
 8007368:	4631      	mov	r1, r6
 800736a:	4683      	mov	fp, r0
 800736c:	f000 fad8 	bl	8007920 <__mcmp>
 8007370:	2800      	cmp	r0, #0
 8007372:	dcb2      	bgt.n	80072da <_dtoa_r+0xac2>
 8007374:	d102      	bne.n	800737c <_dtoa_r+0xb64>
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	07db      	lsls	r3, r3, #31
 800737a:	d4ae      	bmi.n	80072da <_dtoa_r+0xac2>
 800737c:	462b      	mov	r3, r5
 800737e:	461d      	mov	r5, r3
 8007380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007384:	2a30      	cmp	r2, #48	; 0x30
 8007386:	d0fa      	beq.n	800737e <_dtoa_r+0xb66>
 8007388:	e6f7      	b.n	800717a <_dtoa_r+0x962>
 800738a:	9a00      	ldr	r2, [sp, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d1a5      	bne.n	80072dc <_dtoa_r+0xac4>
 8007390:	f10a 0a01 	add.w	sl, sl, #1
 8007394:	2331      	movs	r3, #49	; 0x31
 8007396:	e779      	b.n	800728c <_dtoa_r+0xa74>
 8007398:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <_dtoa_r+0xbd0>)
 800739a:	f7ff baaf 	b.w	80068fc <_dtoa_r+0xe4>
 800739e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f47f aa86 	bne.w	80068b2 <_dtoa_r+0x9a>
 80073a6:	4b11      	ldr	r3, [pc, #68]	; (80073ec <_dtoa_r+0xbd4>)
 80073a8:	f7ff baa8 	b.w	80068fc <_dtoa_r+0xe4>
 80073ac:	f1b9 0f00 	cmp.w	r9, #0
 80073b0:	dc03      	bgt.n	80073ba <_dtoa_r+0xba2>
 80073b2:	9b05      	ldr	r3, [sp, #20]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	f73f aec9 	bgt.w	800714c <_dtoa_r+0x934>
 80073ba:	9d00      	ldr	r5, [sp, #0]
 80073bc:	4631      	mov	r1, r6
 80073be:	4658      	mov	r0, fp
 80073c0:	f7ff f99c 	bl	80066fc <quorem>
 80073c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80073c8:	f805 3b01 	strb.w	r3, [r5], #1
 80073cc:	9a00      	ldr	r2, [sp, #0]
 80073ce:	1aaa      	subs	r2, r5, r2
 80073d0:	4591      	cmp	r9, r2
 80073d2:	ddba      	ble.n	800734a <_dtoa_r+0xb32>
 80073d4:	4659      	mov	r1, fp
 80073d6:	2300      	movs	r3, #0
 80073d8:	220a      	movs	r2, #10
 80073da:	4620      	mov	r0, r4
 80073dc:	f000 f884 	bl	80074e8 <__multadd>
 80073e0:	4683      	mov	fp, r0
 80073e2:	e7eb      	b.n	80073bc <_dtoa_r+0xba4>
 80073e4:	080095eb 	.word	0x080095eb
 80073e8:	08009544 	.word	0x08009544
 80073ec:	08009568 	.word	0x08009568

080073f0 <_localeconv_r>:
 80073f0:	4800      	ldr	r0, [pc, #0]	; (80073f4 <_localeconv_r+0x4>)
 80073f2:	4770      	bx	lr
 80073f4:	2000016c 	.word	0x2000016c

080073f8 <malloc>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	; (8007404 <malloc+0xc>)
 80073fa:	4601      	mov	r1, r0
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f000 bbef 	b.w	8007be0 <_malloc_r>
 8007402:	bf00      	nop
 8007404:	20000018 	.word	0x20000018

08007408 <memcpy>:
 8007408:	440a      	add	r2, r1
 800740a:	4291      	cmp	r1, r2
 800740c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007410:	d100      	bne.n	8007414 <memcpy+0xc>
 8007412:	4770      	bx	lr
 8007414:	b510      	push	{r4, lr}
 8007416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800741a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800741e:	4291      	cmp	r1, r2
 8007420:	d1f9      	bne.n	8007416 <memcpy+0xe>
 8007422:	bd10      	pop	{r4, pc}

08007424 <_Balloc>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007428:	4604      	mov	r4, r0
 800742a:	460d      	mov	r5, r1
 800742c:	b976      	cbnz	r6, 800744c <_Balloc+0x28>
 800742e:	2010      	movs	r0, #16
 8007430:	f7ff ffe2 	bl	80073f8 <malloc>
 8007434:	4602      	mov	r2, r0
 8007436:	6260      	str	r0, [r4, #36]	; 0x24
 8007438:	b920      	cbnz	r0, 8007444 <_Balloc+0x20>
 800743a:	4b18      	ldr	r3, [pc, #96]	; (800749c <_Balloc+0x78>)
 800743c:	4818      	ldr	r0, [pc, #96]	; (80074a0 <_Balloc+0x7c>)
 800743e:	2166      	movs	r1, #102	; 0x66
 8007440:	f000 fc38 	bl	8007cb4 <__assert_func>
 8007444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007448:	6006      	str	r6, [r0, #0]
 800744a:	60c6      	str	r6, [r0, #12]
 800744c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800744e:	68f3      	ldr	r3, [r6, #12]
 8007450:	b183      	cbz	r3, 8007474 <_Balloc+0x50>
 8007452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800745a:	b9b8      	cbnz	r0, 800748c <_Balloc+0x68>
 800745c:	2101      	movs	r1, #1
 800745e:	fa01 f605 	lsl.w	r6, r1, r5
 8007462:	1d72      	adds	r2, r6, #5
 8007464:	0092      	lsls	r2, r2, #2
 8007466:	4620      	mov	r0, r4
 8007468:	f000 fb5a 	bl	8007b20 <_calloc_r>
 800746c:	b160      	cbz	r0, 8007488 <_Balloc+0x64>
 800746e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007472:	e00e      	b.n	8007492 <_Balloc+0x6e>
 8007474:	2221      	movs	r2, #33	; 0x21
 8007476:	2104      	movs	r1, #4
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fb51 	bl	8007b20 <_calloc_r>
 800747e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007480:	60f0      	str	r0, [r6, #12]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e4      	bne.n	8007452 <_Balloc+0x2e>
 8007488:	2000      	movs	r0, #0
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	6802      	ldr	r2, [r0, #0]
 800748e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007492:	2300      	movs	r3, #0
 8007494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007498:	e7f7      	b.n	800748a <_Balloc+0x66>
 800749a:	bf00      	nop
 800749c:	08009575 	.word	0x08009575
 80074a0:	080095fc 	.word	0x080095fc

080074a4 <_Bfree>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074a8:	4605      	mov	r5, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	b976      	cbnz	r6, 80074cc <_Bfree+0x28>
 80074ae:	2010      	movs	r0, #16
 80074b0:	f7ff ffa2 	bl	80073f8 <malloc>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6268      	str	r0, [r5, #36]	; 0x24
 80074b8:	b920      	cbnz	r0, 80074c4 <_Bfree+0x20>
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <_Bfree+0x3c>)
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <_Bfree+0x40>)
 80074be:	218a      	movs	r1, #138	; 0x8a
 80074c0:	f000 fbf8 	bl	8007cb4 <__assert_func>
 80074c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c8:	6006      	str	r6, [r0, #0]
 80074ca:	60c6      	str	r6, [r0, #12]
 80074cc:	b13c      	cbz	r4, 80074de <_Bfree+0x3a>
 80074ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074d0:	6862      	ldr	r2, [r4, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074d8:	6021      	str	r1, [r4, #0]
 80074da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	08009575 	.word	0x08009575
 80074e4:	080095fc 	.word	0x080095fc

080074e8 <__multadd>:
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	690e      	ldr	r6, [r1, #16]
 80074ee:	4607      	mov	r7, r0
 80074f0:	4698      	mov	r8, r3
 80074f2:	460c      	mov	r4, r1
 80074f4:	f101 0014 	add.w	r0, r1, #20
 80074f8:	2300      	movs	r3, #0
 80074fa:	6805      	ldr	r5, [r0, #0]
 80074fc:	b2a9      	uxth	r1, r5
 80074fe:	fb02 8101 	mla	r1, r2, r1, r8
 8007502:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007506:	0c2d      	lsrs	r5, r5, #16
 8007508:	fb02 c505 	mla	r5, r2, r5, ip
 800750c:	b289      	uxth	r1, r1
 800750e:	3301      	adds	r3, #1
 8007510:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007514:	429e      	cmp	r6, r3
 8007516:	f840 1b04 	str.w	r1, [r0], #4
 800751a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800751e:	dcec      	bgt.n	80074fa <__multadd+0x12>
 8007520:	f1b8 0f00 	cmp.w	r8, #0
 8007524:	d022      	beq.n	800756c <__multadd+0x84>
 8007526:	68a3      	ldr	r3, [r4, #8]
 8007528:	42b3      	cmp	r3, r6
 800752a:	dc19      	bgt.n	8007560 <__multadd+0x78>
 800752c:	6861      	ldr	r1, [r4, #4]
 800752e:	4638      	mov	r0, r7
 8007530:	3101      	adds	r1, #1
 8007532:	f7ff ff77 	bl	8007424 <_Balloc>
 8007536:	4605      	mov	r5, r0
 8007538:	b928      	cbnz	r0, 8007546 <__multadd+0x5e>
 800753a:	4602      	mov	r2, r0
 800753c:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <__multadd+0x8c>)
 800753e:	480e      	ldr	r0, [pc, #56]	; (8007578 <__multadd+0x90>)
 8007540:	21b5      	movs	r1, #181	; 0xb5
 8007542:	f000 fbb7 	bl	8007cb4 <__assert_func>
 8007546:	6922      	ldr	r2, [r4, #16]
 8007548:	3202      	adds	r2, #2
 800754a:	f104 010c 	add.w	r1, r4, #12
 800754e:	0092      	lsls	r2, r2, #2
 8007550:	300c      	adds	r0, #12
 8007552:	f7ff ff59 	bl	8007408 <memcpy>
 8007556:	4621      	mov	r1, r4
 8007558:	4638      	mov	r0, r7
 800755a:	f7ff ffa3 	bl	80074a4 <_Bfree>
 800755e:	462c      	mov	r4, r5
 8007560:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007564:	3601      	adds	r6, #1
 8007566:	f8c3 8014 	str.w	r8, [r3, #20]
 800756a:	6126      	str	r6, [r4, #16]
 800756c:	4620      	mov	r0, r4
 800756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007572:	bf00      	nop
 8007574:	080095eb 	.word	0x080095eb
 8007578:	080095fc 	.word	0x080095fc

0800757c <__hi0bits>:
 800757c:	0c03      	lsrs	r3, r0, #16
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	b9d3      	cbnz	r3, 80075b8 <__hi0bits+0x3c>
 8007582:	0400      	lsls	r0, r0, #16
 8007584:	2310      	movs	r3, #16
 8007586:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800758a:	bf04      	itt	eq
 800758c:	0200      	lsleq	r0, r0, #8
 800758e:	3308      	addeq	r3, #8
 8007590:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007594:	bf04      	itt	eq
 8007596:	0100      	lsleq	r0, r0, #4
 8007598:	3304      	addeq	r3, #4
 800759a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800759e:	bf04      	itt	eq
 80075a0:	0080      	lsleq	r0, r0, #2
 80075a2:	3302      	addeq	r3, #2
 80075a4:	2800      	cmp	r0, #0
 80075a6:	db05      	blt.n	80075b4 <__hi0bits+0x38>
 80075a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075ac:	f103 0301 	add.w	r3, r3, #1
 80075b0:	bf08      	it	eq
 80075b2:	2320      	moveq	r3, #32
 80075b4:	4618      	mov	r0, r3
 80075b6:	4770      	bx	lr
 80075b8:	2300      	movs	r3, #0
 80075ba:	e7e4      	b.n	8007586 <__hi0bits+0xa>

080075bc <__lo0bits>:
 80075bc:	6803      	ldr	r3, [r0, #0]
 80075be:	f013 0207 	ands.w	r2, r3, #7
 80075c2:	4601      	mov	r1, r0
 80075c4:	d00b      	beq.n	80075de <__lo0bits+0x22>
 80075c6:	07da      	lsls	r2, r3, #31
 80075c8:	d424      	bmi.n	8007614 <__lo0bits+0x58>
 80075ca:	0798      	lsls	r0, r3, #30
 80075cc:	bf49      	itett	mi
 80075ce:	085b      	lsrmi	r3, r3, #1
 80075d0:	089b      	lsrpl	r3, r3, #2
 80075d2:	2001      	movmi	r0, #1
 80075d4:	600b      	strmi	r3, [r1, #0]
 80075d6:	bf5c      	itt	pl
 80075d8:	600b      	strpl	r3, [r1, #0]
 80075da:	2002      	movpl	r0, #2
 80075dc:	4770      	bx	lr
 80075de:	b298      	uxth	r0, r3
 80075e0:	b9b0      	cbnz	r0, 8007610 <__lo0bits+0x54>
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	2010      	movs	r0, #16
 80075e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075ea:	bf04      	itt	eq
 80075ec:	0a1b      	lsreq	r3, r3, #8
 80075ee:	3008      	addeq	r0, #8
 80075f0:	071a      	lsls	r2, r3, #28
 80075f2:	bf04      	itt	eq
 80075f4:	091b      	lsreq	r3, r3, #4
 80075f6:	3004      	addeq	r0, #4
 80075f8:	079a      	lsls	r2, r3, #30
 80075fa:	bf04      	itt	eq
 80075fc:	089b      	lsreq	r3, r3, #2
 80075fe:	3002      	addeq	r0, #2
 8007600:	07da      	lsls	r2, r3, #31
 8007602:	d403      	bmi.n	800760c <__lo0bits+0x50>
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	f100 0001 	add.w	r0, r0, #1
 800760a:	d005      	beq.n	8007618 <__lo0bits+0x5c>
 800760c:	600b      	str	r3, [r1, #0]
 800760e:	4770      	bx	lr
 8007610:	4610      	mov	r0, r2
 8007612:	e7e8      	b.n	80075e6 <__lo0bits+0x2a>
 8007614:	2000      	movs	r0, #0
 8007616:	4770      	bx	lr
 8007618:	2020      	movs	r0, #32
 800761a:	4770      	bx	lr

0800761c <__i2b>:
 800761c:	b510      	push	{r4, lr}
 800761e:	460c      	mov	r4, r1
 8007620:	2101      	movs	r1, #1
 8007622:	f7ff feff 	bl	8007424 <_Balloc>
 8007626:	4602      	mov	r2, r0
 8007628:	b928      	cbnz	r0, 8007636 <__i2b+0x1a>
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <__i2b+0x24>)
 800762c:	4805      	ldr	r0, [pc, #20]	; (8007644 <__i2b+0x28>)
 800762e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007632:	f000 fb3f 	bl	8007cb4 <__assert_func>
 8007636:	2301      	movs	r3, #1
 8007638:	6144      	str	r4, [r0, #20]
 800763a:	6103      	str	r3, [r0, #16]
 800763c:	bd10      	pop	{r4, pc}
 800763e:	bf00      	nop
 8007640:	080095eb 	.word	0x080095eb
 8007644:	080095fc 	.word	0x080095fc

08007648 <__multiply>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	4614      	mov	r4, r2
 800764e:	690a      	ldr	r2, [r1, #16]
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	429a      	cmp	r2, r3
 8007654:	bfb8      	it	lt
 8007656:	460b      	movlt	r3, r1
 8007658:	460d      	mov	r5, r1
 800765a:	bfbc      	itt	lt
 800765c:	4625      	movlt	r5, r4
 800765e:	461c      	movlt	r4, r3
 8007660:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007664:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007668:	68ab      	ldr	r3, [r5, #8]
 800766a:	6869      	ldr	r1, [r5, #4]
 800766c:	eb0a 0709 	add.w	r7, sl, r9
 8007670:	42bb      	cmp	r3, r7
 8007672:	b085      	sub	sp, #20
 8007674:	bfb8      	it	lt
 8007676:	3101      	addlt	r1, #1
 8007678:	f7ff fed4 	bl	8007424 <_Balloc>
 800767c:	b930      	cbnz	r0, 800768c <__multiply+0x44>
 800767e:	4602      	mov	r2, r0
 8007680:	4b42      	ldr	r3, [pc, #264]	; (800778c <__multiply+0x144>)
 8007682:	4843      	ldr	r0, [pc, #268]	; (8007790 <__multiply+0x148>)
 8007684:	f240 115d 	movw	r1, #349	; 0x15d
 8007688:	f000 fb14 	bl	8007cb4 <__assert_func>
 800768c:	f100 0614 	add.w	r6, r0, #20
 8007690:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007694:	4633      	mov	r3, r6
 8007696:	2200      	movs	r2, #0
 8007698:	4543      	cmp	r3, r8
 800769a:	d31e      	bcc.n	80076da <__multiply+0x92>
 800769c:	f105 0c14 	add.w	ip, r5, #20
 80076a0:	f104 0314 	add.w	r3, r4, #20
 80076a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80076a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80076ac:	9202      	str	r2, [sp, #8]
 80076ae:	ebac 0205 	sub.w	r2, ip, r5
 80076b2:	3a15      	subs	r2, #21
 80076b4:	f022 0203 	bic.w	r2, r2, #3
 80076b8:	3204      	adds	r2, #4
 80076ba:	f105 0115 	add.w	r1, r5, #21
 80076be:	458c      	cmp	ip, r1
 80076c0:	bf38      	it	cc
 80076c2:	2204      	movcc	r2, #4
 80076c4:	9201      	str	r2, [sp, #4]
 80076c6:	9a02      	ldr	r2, [sp, #8]
 80076c8:	9303      	str	r3, [sp, #12]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d808      	bhi.n	80076e0 <__multiply+0x98>
 80076ce:	2f00      	cmp	r7, #0
 80076d0:	dc55      	bgt.n	800777e <__multiply+0x136>
 80076d2:	6107      	str	r7, [r0, #16]
 80076d4:	b005      	add	sp, #20
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	f843 2b04 	str.w	r2, [r3], #4
 80076de:	e7db      	b.n	8007698 <__multiply+0x50>
 80076e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80076e4:	f1ba 0f00 	cmp.w	sl, #0
 80076e8:	d020      	beq.n	800772c <__multiply+0xe4>
 80076ea:	f105 0e14 	add.w	lr, r5, #20
 80076ee:	46b1      	mov	r9, r6
 80076f0:	2200      	movs	r2, #0
 80076f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80076f6:	f8d9 b000 	ldr.w	fp, [r9]
 80076fa:	b2a1      	uxth	r1, r4
 80076fc:	fa1f fb8b 	uxth.w	fp, fp
 8007700:	fb0a b101 	mla	r1, sl, r1, fp
 8007704:	4411      	add	r1, r2
 8007706:	f8d9 2000 	ldr.w	r2, [r9]
 800770a:	0c24      	lsrs	r4, r4, #16
 800770c:	0c12      	lsrs	r2, r2, #16
 800770e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007712:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007716:	b289      	uxth	r1, r1
 8007718:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800771c:	45f4      	cmp	ip, lr
 800771e:	f849 1b04 	str.w	r1, [r9], #4
 8007722:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007726:	d8e4      	bhi.n	80076f2 <__multiply+0xaa>
 8007728:	9901      	ldr	r1, [sp, #4]
 800772a:	5072      	str	r2, [r6, r1]
 800772c:	9a03      	ldr	r2, [sp, #12]
 800772e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007732:	3304      	adds	r3, #4
 8007734:	f1b9 0f00 	cmp.w	r9, #0
 8007738:	d01f      	beq.n	800777a <__multiply+0x132>
 800773a:	6834      	ldr	r4, [r6, #0]
 800773c:	f105 0114 	add.w	r1, r5, #20
 8007740:	46b6      	mov	lr, r6
 8007742:	f04f 0a00 	mov.w	sl, #0
 8007746:	880a      	ldrh	r2, [r1, #0]
 8007748:	f8be b002 	ldrh.w	fp, [lr, #2]
 800774c:	fb09 b202 	mla	r2, r9, r2, fp
 8007750:	4492      	add	sl, r2
 8007752:	b2a4      	uxth	r4, r4
 8007754:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007758:	f84e 4b04 	str.w	r4, [lr], #4
 800775c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007760:	f8be 2000 	ldrh.w	r2, [lr]
 8007764:	0c24      	lsrs	r4, r4, #16
 8007766:	fb09 2404 	mla	r4, r9, r4, r2
 800776a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800776e:	458c      	cmp	ip, r1
 8007770:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007774:	d8e7      	bhi.n	8007746 <__multiply+0xfe>
 8007776:	9a01      	ldr	r2, [sp, #4]
 8007778:	50b4      	str	r4, [r6, r2]
 800777a:	3604      	adds	r6, #4
 800777c:	e7a3      	b.n	80076c6 <__multiply+0x7e>
 800777e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1a5      	bne.n	80076d2 <__multiply+0x8a>
 8007786:	3f01      	subs	r7, #1
 8007788:	e7a1      	b.n	80076ce <__multiply+0x86>
 800778a:	bf00      	nop
 800778c:	080095eb 	.word	0x080095eb
 8007790:	080095fc 	.word	0x080095fc

08007794 <__pow5mult>:
 8007794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007798:	4615      	mov	r5, r2
 800779a:	f012 0203 	ands.w	r2, r2, #3
 800779e:	4606      	mov	r6, r0
 80077a0:	460f      	mov	r7, r1
 80077a2:	d007      	beq.n	80077b4 <__pow5mult+0x20>
 80077a4:	4c25      	ldr	r4, [pc, #148]	; (800783c <__pow5mult+0xa8>)
 80077a6:	3a01      	subs	r2, #1
 80077a8:	2300      	movs	r3, #0
 80077aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ae:	f7ff fe9b 	bl	80074e8 <__multadd>
 80077b2:	4607      	mov	r7, r0
 80077b4:	10ad      	asrs	r5, r5, #2
 80077b6:	d03d      	beq.n	8007834 <__pow5mult+0xa0>
 80077b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077ba:	b97c      	cbnz	r4, 80077dc <__pow5mult+0x48>
 80077bc:	2010      	movs	r0, #16
 80077be:	f7ff fe1b 	bl	80073f8 <malloc>
 80077c2:	4602      	mov	r2, r0
 80077c4:	6270      	str	r0, [r6, #36]	; 0x24
 80077c6:	b928      	cbnz	r0, 80077d4 <__pow5mult+0x40>
 80077c8:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <__pow5mult+0xac>)
 80077ca:	481e      	ldr	r0, [pc, #120]	; (8007844 <__pow5mult+0xb0>)
 80077cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80077d0:	f000 fa70 	bl	8007cb4 <__assert_func>
 80077d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d8:	6004      	str	r4, [r0, #0]
 80077da:	60c4      	str	r4, [r0, #12]
 80077dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e4:	b94c      	cbnz	r4, 80077fa <__pow5mult+0x66>
 80077e6:	f240 2171 	movw	r1, #625	; 0x271
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ff16 	bl	800761c <__i2b>
 80077f0:	2300      	movs	r3, #0
 80077f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f6:	4604      	mov	r4, r0
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	f04f 0900 	mov.w	r9, #0
 80077fe:	07eb      	lsls	r3, r5, #31
 8007800:	d50a      	bpl.n	8007818 <__pow5mult+0x84>
 8007802:	4639      	mov	r1, r7
 8007804:	4622      	mov	r2, r4
 8007806:	4630      	mov	r0, r6
 8007808:	f7ff ff1e 	bl	8007648 <__multiply>
 800780c:	4639      	mov	r1, r7
 800780e:	4680      	mov	r8, r0
 8007810:	4630      	mov	r0, r6
 8007812:	f7ff fe47 	bl	80074a4 <_Bfree>
 8007816:	4647      	mov	r7, r8
 8007818:	106d      	asrs	r5, r5, #1
 800781a:	d00b      	beq.n	8007834 <__pow5mult+0xa0>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	b938      	cbnz	r0, 8007830 <__pow5mult+0x9c>
 8007820:	4622      	mov	r2, r4
 8007822:	4621      	mov	r1, r4
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ff0f 	bl	8007648 <__multiply>
 800782a:	6020      	str	r0, [r4, #0]
 800782c:	f8c0 9000 	str.w	r9, [r0]
 8007830:	4604      	mov	r4, r0
 8007832:	e7e4      	b.n	80077fe <__pow5mult+0x6a>
 8007834:	4638      	mov	r0, r7
 8007836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783a:	bf00      	nop
 800783c:	08009750 	.word	0x08009750
 8007840:	08009575 	.word	0x08009575
 8007844:	080095fc 	.word	0x080095fc

08007848 <__lshift>:
 8007848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	6849      	ldr	r1, [r1, #4]
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	4607      	mov	r7, r0
 800785a:	4691      	mov	r9, r2
 800785c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007860:	f108 0601 	add.w	r6, r8, #1
 8007864:	42b3      	cmp	r3, r6
 8007866:	db0b      	blt.n	8007880 <__lshift+0x38>
 8007868:	4638      	mov	r0, r7
 800786a:	f7ff fddb 	bl	8007424 <_Balloc>
 800786e:	4605      	mov	r5, r0
 8007870:	b948      	cbnz	r0, 8007886 <__lshift+0x3e>
 8007872:	4602      	mov	r2, r0
 8007874:	4b28      	ldr	r3, [pc, #160]	; (8007918 <__lshift+0xd0>)
 8007876:	4829      	ldr	r0, [pc, #164]	; (800791c <__lshift+0xd4>)
 8007878:	f240 11d9 	movw	r1, #473	; 0x1d9
 800787c:	f000 fa1a 	bl	8007cb4 <__assert_func>
 8007880:	3101      	adds	r1, #1
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	e7ee      	b.n	8007864 <__lshift+0x1c>
 8007886:	2300      	movs	r3, #0
 8007888:	f100 0114 	add.w	r1, r0, #20
 800788c:	f100 0210 	add.w	r2, r0, #16
 8007890:	4618      	mov	r0, r3
 8007892:	4553      	cmp	r3, sl
 8007894:	db33      	blt.n	80078fe <__lshift+0xb6>
 8007896:	6920      	ldr	r0, [r4, #16]
 8007898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800789c:	f104 0314 	add.w	r3, r4, #20
 80078a0:	f019 091f 	ands.w	r9, r9, #31
 80078a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078ac:	d02b      	beq.n	8007906 <__lshift+0xbe>
 80078ae:	f1c9 0e20 	rsb	lr, r9, #32
 80078b2:	468a      	mov	sl, r1
 80078b4:	2200      	movs	r2, #0
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	fa00 f009 	lsl.w	r0, r0, r9
 80078bc:	4302      	orrs	r2, r0
 80078be:	f84a 2b04 	str.w	r2, [sl], #4
 80078c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c6:	459c      	cmp	ip, r3
 80078c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80078cc:	d8f3      	bhi.n	80078b6 <__lshift+0x6e>
 80078ce:	ebac 0304 	sub.w	r3, ip, r4
 80078d2:	3b15      	subs	r3, #21
 80078d4:	f023 0303 	bic.w	r3, r3, #3
 80078d8:	3304      	adds	r3, #4
 80078da:	f104 0015 	add.w	r0, r4, #21
 80078de:	4584      	cmp	ip, r0
 80078e0:	bf38      	it	cc
 80078e2:	2304      	movcc	r3, #4
 80078e4:	50ca      	str	r2, [r1, r3]
 80078e6:	b10a      	cbz	r2, 80078ec <__lshift+0xa4>
 80078e8:	f108 0602 	add.w	r6, r8, #2
 80078ec:	3e01      	subs	r6, #1
 80078ee:	4638      	mov	r0, r7
 80078f0:	612e      	str	r6, [r5, #16]
 80078f2:	4621      	mov	r1, r4
 80078f4:	f7ff fdd6 	bl	80074a4 <_Bfree>
 80078f8:	4628      	mov	r0, r5
 80078fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007902:	3301      	adds	r3, #1
 8007904:	e7c5      	b.n	8007892 <__lshift+0x4a>
 8007906:	3904      	subs	r1, #4
 8007908:	f853 2b04 	ldr.w	r2, [r3], #4
 800790c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007910:	459c      	cmp	ip, r3
 8007912:	d8f9      	bhi.n	8007908 <__lshift+0xc0>
 8007914:	e7ea      	b.n	80078ec <__lshift+0xa4>
 8007916:	bf00      	nop
 8007918:	080095eb 	.word	0x080095eb
 800791c:	080095fc 	.word	0x080095fc

08007920 <__mcmp>:
 8007920:	b530      	push	{r4, r5, lr}
 8007922:	6902      	ldr	r2, [r0, #16]
 8007924:	690c      	ldr	r4, [r1, #16]
 8007926:	1b12      	subs	r2, r2, r4
 8007928:	d10e      	bne.n	8007948 <__mcmp+0x28>
 800792a:	f100 0314 	add.w	r3, r0, #20
 800792e:	3114      	adds	r1, #20
 8007930:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007934:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007938:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800793c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007940:	42a5      	cmp	r5, r4
 8007942:	d003      	beq.n	800794c <__mcmp+0x2c>
 8007944:	d305      	bcc.n	8007952 <__mcmp+0x32>
 8007946:	2201      	movs	r2, #1
 8007948:	4610      	mov	r0, r2
 800794a:	bd30      	pop	{r4, r5, pc}
 800794c:	4283      	cmp	r3, r0
 800794e:	d3f3      	bcc.n	8007938 <__mcmp+0x18>
 8007950:	e7fa      	b.n	8007948 <__mcmp+0x28>
 8007952:	f04f 32ff 	mov.w	r2, #4294967295
 8007956:	e7f7      	b.n	8007948 <__mcmp+0x28>

08007958 <__mdiff>:
 8007958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	460c      	mov	r4, r1
 800795e:	4606      	mov	r6, r0
 8007960:	4611      	mov	r1, r2
 8007962:	4620      	mov	r0, r4
 8007964:	4617      	mov	r7, r2
 8007966:	f7ff ffdb 	bl	8007920 <__mcmp>
 800796a:	1e05      	subs	r5, r0, #0
 800796c:	d110      	bne.n	8007990 <__mdiff+0x38>
 800796e:	4629      	mov	r1, r5
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff fd57 	bl	8007424 <_Balloc>
 8007976:	b930      	cbnz	r0, 8007986 <__mdiff+0x2e>
 8007978:	4b39      	ldr	r3, [pc, #228]	; (8007a60 <__mdiff+0x108>)
 800797a:	4602      	mov	r2, r0
 800797c:	f240 2132 	movw	r1, #562	; 0x232
 8007980:	4838      	ldr	r0, [pc, #224]	; (8007a64 <__mdiff+0x10c>)
 8007982:	f000 f997 	bl	8007cb4 <__assert_func>
 8007986:	2301      	movs	r3, #1
 8007988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800798c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007990:	bfa4      	itt	ge
 8007992:	463b      	movge	r3, r7
 8007994:	4627      	movge	r7, r4
 8007996:	4630      	mov	r0, r6
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	bfa6      	itte	ge
 800799c:	461c      	movge	r4, r3
 800799e:	2500      	movge	r5, #0
 80079a0:	2501      	movlt	r5, #1
 80079a2:	f7ff fd3f 	bl	8007424 <_Balloc>
 80079a6:	b920      	cbnz	r0, 80079b2 <__mdiff+0x5a>
 80079a8:	4b2d      	ldr	r3, [pc, #180]	; (8007a60 <__mdiff+0x108>)
 80079aa:	4602      	mov	r2, r0
 80079ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80079b0:	e7e6      	b.n	8007980 <__mdiff+0x28>
 80079b2:	693e      	ldr	r6, [r7, #16]
 80079b4:	60c5      	str	r5, [r0, #12]
 80079b6:	6925      	ldr	r5, [r4, #16]
 80079b8:	f107 0114 	add.w	r1, r7, #20
 80079bc:	f104 0914 	add.w	r9, r4, #20
 80079c0:	f100 0e14 	add.w	lr, r0, #20
 80079c4:	f107 0210 	add.w	r2, r7, #16
 80079c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80079cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80079d0:	46f2      	mov	sl, lr
 80079d2:	2700      	movs	r7, #0
 80079d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80079d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079dc:	fa1f f883 	uxth.w	r8, r3
 80079e0:	fa17 f78b 	uxtah	r7, r7, fp
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	eba7 0808 	sub.w	r8, r7, r8
 80079ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079f2:	fa1f f888 	uxth.w	r8, r8
 80079f6:	141f      	asrs	r7, r3, #16
 80079f8:	454d      	cmp	r5, r9
 80079fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079fe:	f84a 3b04 	str.w	r3, [sl], #4
 8007a02:	d8e7      	bhi.n	80079d4 <__mdiff+0x7c>
 8007a04:	1b2b      	subs	r3, r5, r4
 8007a06:	3b15      	subs	r3, #21
 8007a08:	f023 0303 	bic.w	r3, r3, #3
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	3415      	adds	r4, #21
 8007a10:	42a5      	cmp	r5, r4
 8007a12:	bf38      	it	cc
 8007a14:	2304      	movcc	r3, #4
 8007a16:	4419      	add	r1, r3
 8007a18:	4473      	add	r3, lr
 8007a1a:	469e      	mov	lr, r3
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	4565      	cmp	r5, ip
 8007a20:	d30e      	bcc.n	8007a40 <__mdiff+0xe8>
 8007a22:	f10c 0203 	add.w	r2, ip, #3
 8007a26:	1a52      	subs	r2, r2, r1
 8007a28:	f022 0203 	bic.w	r2, r2, #3
 8007a2c:	3903      	subs	r1, #3
 8007a2e:	458c      	cmp	ip, r1
 8007a30:	bf38      	it	cc
 8007a32:	2200      	movcc	r2, #0
 8007a34:	441a      	add	r2, r3
 8007a36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a3a:	b17b      	cbz	r3, 8007a5c <__mdiff+0x104>
 8007a3c:	6106      	str	r6, [r0, #16]
 8007a3e:	e7a5      	b.n	800798c <__mdiff+0x34>
 8007a40:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a44:	fa17 f488 	uxtah	r4, r7, r8
 8007a48:	1422      	asrs	r2, r4, #16
 8007a4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007a4e:	b2a4      	uxth	r4, r4
 8007a50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007a54:	f84e 4b04 	str.w	r4, [lr], #4
 8007a58:	1417      	asrs	r7, r2, #16
 8007a5a:	e7e0      	b.n	8007a1e <__mdiff+0xc6>
 8007a5c:	3e01      	subs	r6, #1
 8007a5e:	e7ea      	b.n	8007a36 <__mdiff+0xde>
 8007a60:	080095eb 	.word	0x080095eb
 8007a64:	080095fc 	.word	0x080095fc

08007a68 <__d2b>:
 8007a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	4689      	mov	r9, r1
 8007a6e:	2101      	movs	r1, #1
 8007a70:	ec57 6b10 	vmov	r6, r7, d0
 8007a74:	4690      	mov	r8, r2
 8007a76:	f7ff fcd5 	bl	8007424 <_Balloc>
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	b930      	cbnz	r0, 8007a8c <__d2b+0x24>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	4b25      	ldr	r3, [pc, #148]	; (8007b18 <__d2b+0xb0>)
 8007a82:	4826      	ldr	r0, [pc, #152]	; (8007b1c <__d2b+0xb4>)
 8007a84:	f240 310a 	movw	r1, #778	; 0x30a
 8007a88:	f000 f914 	bl	8007cb4 <__assert_func>
 8007a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a94:	bb35      	cbnz	r5, 8007ae4 <__d2b+0x7c>
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	d028      	beq.n	8007aee <__d2b+0x86>
 8007a9c:	4668      	mov	r0, sp
 8007a9e:	9600      	str	r6, [sp, #0]
 8007aa0:	f7ff fd8c 	bl	80075bc <__lo0bits>
 8007aa4:	9900      	ldr	r1, [sp, #0]
 8007aa6:	b300      	cbz	r0, 8007aea <__d2b+0x82>
 8007aa8:	9a01      	ldr	r2, [sp, #4]
 8007aaa:	f1c0 0320 	rsb	r3, r0, #32
 8007aae:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	40c2      	lsrs	r2, r0
 8007ab6:	6163      	str	r3, [r4, #20]
 8007ab8:	9201      	str	r2, [sp, #4]
 8007aba:	9b01      	ldr	r3, [sp, #4]
 8007abc:	61a3      	str	r3, [r4, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bf14      	ite	ne
 8007ac2:	2202      	movne	r2, #2
 8007ac4:	2201      	moveq	r2, #1
 8007ac6:	6122      	str	r2, [r4, #16]
 8007ac8:	b1d5      	cbz	r5, 8007b00 <__d2b+0x98>
 8007aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ace:	4405      	add	r5, r0
 8007ad0:	f8c9 5000 	str.w	r5, [r9]
 8007ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ad8:	f8c8 0000 	str.w	r0, [r8]
 8007adc:	4620      	mov	r0, r4
 8007ade:	b003      	add	sp, #12
 8007ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ae8:	e7d5      	b.n	8007a96 <__d2b+0x2e>
 8007aea:	6161      	str	r1, [r4, #20]
 8007aec:	e7e5      	b.n	8007aba <__d2b+0x52>
 8007aee:	a801      	add	r0, sp, #4
 8007af0:	f7ff fd64 	bl	80075bc <__lo0bits>
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	6163      	str	r3, [r4, #20]
 8007af8:	2201      	movs	r2, #1
 8007afa:	6122      	str	r2, [r4, #16]
 8007afc:	3020      	adds	r0, #32
 8007afe:	e7e3      	b.n	8007ac8 <__d2b+0x60>
 8007b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b08:	f8c9 0000 	str.w	r0, [r9]
 8007b0c:	6918      	ldr	r0, [r3, #16]
 8007b0e:	f7ff fd35 	bl	800757c <__hi0bits>
 8007b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b16:	e7df      	b.n	8007ad8 <__d2b+0x70>
 8007b18:	080095eb 	.word	0x080095eb
 8007b1c:	080095fc 	.word	0x080095fc

08007b20 <_calloc_r>:
 8007b20:	b513      	push	{r0, r1, r4, lr}
 8007b22:	434a      	muls	r2, r1
 8007b24:	4611      	mov	r1, r2
 8007b26:	9201      	str	r2, [sp, #4]
 8007b28:	f000 f85a 	bl	8007be0 <_malloc_r>
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	b118      	cbz	r0, 8007b38 <_calloc_r+0x18>
 8007b30:	9a01      	ldr	r2, [sp, #4]
 8007b32:	2100      	movs	r1, #0
 8007b34:	f7fe f970 	bl	8005e18 <memset>
 8007b38:	4620      	mov	r0, r4
 8007b3a:	b002      	add	sp, #8
 8007b3c:	bd10      	pop	{r4, pc}
	...

08007b40 <_free_r>:
 8007b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b42:	2900      	cmp	r1, #0
 8007b44:	d048      	beq.n	8007bd8 <_free_r+0x98>
 8007b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b4a:	9001      	str	r0, [sp, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b52:	bfb8      	it	lt
 8007b54:	18e4      	addlt	r4, r4, r3
 8007b56:	f000 f8ef 	bl	8007d38 <__malloc_lock>
 8007b5a:	4a20      	ldr	r2, [pc, #128]	; (8007bdc <_free_r+0x9c>)
 8007b5c:	9801      	ldr	r0, [sp, #4]
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	4615      	mov	r5, r2
 8007b62:	b933      	cbnz	r3, 8007b72 <_free_r+0x32>
 8007b64:	6063      	str	r3, [r4, #4]
 8007b66:	6014      	str	r4, [r2, #0]
 8007b68:	b003      	add	sp, #12
 8007b6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b6e:	f000 b8e9 	b.w	8007d44 <__malloc_unlock>
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	d90b      	bls.n	8007b8e <_free_r+0x4e>
 8007b76:	6821      	ldr	r1, [r4, #0]
 8007b78:	1862      	adds	r2, r4, r1
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	bf04      	itt	eq
 8007b7e:	681a      	ldreq	r2, [r3, #0]
 8007b80:	685b      	ldreq	r3, [r3, #4]
 8007b82:	6063      	str	r3, [r4, #4]
 8007b84:	bf04      	itt	eq
 8007b86:	1852      	addeq	r2, r2, r1
 8007b88:	6022      	streq	r2, [r4, #0]
 8007b8a:	602c      	str	r4, [r5, #0]
 8007b8c:	e7ec      	b.n	8007b68 <_free_r+0x28>
 8007b8e:	461a      	mov	r2, r3
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	b10b      	cbz	r3, 8007b98 <_free_r+0x58>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d9fa      	bls.n	8007b8e <_free_r+0x4e>
 8007b98:	6811      	ldr	r1, [r2, #0]
 8007b9a:	1855      	adds	r5, r2, r1
 8007b9c:	42a5      	cmp	r5, r4
 8007b9e:	d10b      	bne.n	8007bb8 <_free_r+0x78>
 8007ba0:	6824      	ldr	r4, [r4, #0]
 8007ba2:	4421      	add	r1, r4
 8007ba4:	1854      	adds	r4, r2, r1
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	d1dd      	bne.n	8007b68 <_free_r+0x28>
 8007bac:	681c      	ldr	r4, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	6053      	str	r3, [r2, #4]
 8007bb2:	4421      	add	r1, r4
 8007bb4:	6011      	str	r1, [r2, #0]
 8007bb6:	e7d7      	b.n	8007b68 <_free_r+0x28>
 8007bb8:	d902      	bls.n	8007bc0 <_free_r+0x80>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	e7d3      	b.n	8007b68 <_free_r+0x28>
 8007bc0:	6825      	ldr	r5, [r4, #0]
 8007bc2:	1961      	adds	r1, r4, r5
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf04      	itt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	6063      	str	r3, [r4, #4]
 8007bce:	bf04      	itt	eq
 8007bd0:	1949      	addeq	r1, r1, r5
 8007bd2:	6021      	streq	r1, [r4, #0]
 8007bd4:	6054      	str	r4, [r2, #4]
 8007bd6:	e7c7      	b.n	8007b68 <_free_r+0x28>
 8007bd8:	b003      	add	sp, #12
 8007bda:	bd30      	pop	{r4, r5, pc}
 8007bdc:	20000238 	.word	0x20000238

08007be0 <_malloc_r>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	1ccd      	adds	r5, r1, #3
 8007be4:	f025 0503 	bic.w	r5, r5, #3
 8007be8:	3508      	adds	r5, #8
 8007bea:	2d0c      	cmp	r5, #12
 8007bec:	bf38      	it	cc
 8007bee:	250c      	movcc	r5, #12
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	db01      	blt.n	8007bfa <_malloc_r+0x1a>
 8007bf6:	42a9      	cmp	r1, r5
 8007bf8:	d903      	bls.n	8007c02 <_malloc_r+0x22>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	6033      	str	r3, [r6, #0]
 8007bfe:	2000      	movs	r0, #0
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c02:	f000 f899 	bl	8007d38 <__malloc_lock>
 8007c06:	4921      	ldr	r1, [pc, #132]	; (8007c8c <_malloc_r+0xac>)
 8007c08:	680a      	ldr	r2, [r1, #0]
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	b99c      	cbnz	r4, 8007c36 <_malloc_r+0x56>
 8007c0e:	4f20      	ldr	r7, [pc, #128]	; (8007c90 <_malloc_r+0xb0>)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	b923      	cbnz	r3, 8007c1e <_malloc_r+0x3e>
 8007c14:	4621      	mov	r1, r4
 8007c16:	4630      	mov	r0, r6
 8007c18:	f000 f83c 	bl	8007c94 <_sbrk_r>
 8007c1c:	6038      	str	r0, [r7, #0]
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4630      	mov	r0, r6
 8007c22:	f000 f837 	bl	8007c94 <_sbrk_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d123      	bne.n	8007c72 <_malloc_r+0x92>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	6033      	str	r3, [r6, #0]
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 f888 	bl	8007d44 <__malloc_unlock>
 8007c34:	e7e3      	b.n	8007bfe <_malloc_r+0x1e>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	1b5b      	subs	r3, r3, r5
 8007c3a:	d417      	bmi.n	8007c6c <_malloc_r+0x8c>
 8007c3c:	2b0b      	cmp	r3, #11
 8007c3e:	d903      	bls.n	8007c48 <_malloc_r+0x68>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	441c      	add	r4, r3
 8007c44:	6025      	str	r5, [r4, #0]
 8007c46:	e004      	b.n	8007c52 <_malloc_r+0x72>
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	42a2      	cmp	r2, r4
 8007c4c:	bf0c      	ite	eq
 8007c4e:	600b      	streq	r3, [r1, #0]
 8007c50:	6053      	strne	r3, [r2, #4]
 8007c52:	4630      	mov	r0, r6
 8007c54:	f000 f876 	bl	8007d44 <__malloc_unlock>
 8007c58:	f104 000b 	add.w	r0, r4, #11
 8007c5c:	1d23      	adds	r3, r4, #4
 8007c5e:	f020 0007 	bic.w	r0, r0, #7
 8007c62:	1ac2      	subs	r2, r0, r3
 8007c64:	d0cc      	beq.n	8007c00 <_malloc_r+0x20>
 8007c66:	1a1b      	subs	r3, r3, r0
 8007c68:	50a3      	str	r3, [r4, r2]
 8007c6a:	e7c9      	b.n	8007c00 <_malloc_r+0x20>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	6864      	ldr	r4, [r4, #4]
 8007c70:	e7cc      	b.n	8007c0c <_malloc_r+0x2c>
 8007c72:	1cc4      	adds	r4, r0, #3
 8007c74:	f024 0403 	bic.w	r4, r4, #3
 8007c78:	42a0      	cmp	r0, r4
 8007c7a:	d0e3      	beq.n	8007c44 <_malloc_r+0x64>
 8007c7c:	1a21      	subs	r1, r4, r0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 f808 	bl	8007c94 <_sbrk_r>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d1dd      	bne.n	8007c44 <_malloc_r+0x64>
 8007c88:	e7cf      	b.n	8007c2a <_malloc_r+0x4a>
 8007c8a:	bf00      	nop
 8007c8c:	20000238 	.word	0x20000238
 8007c90:	2000023c 	.word	0x2000023c

08007c94 <_sbrk_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d06      	ldr	r5, [pc, #24]	; (8007cb0 <_sbrk_r+0x1c>)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	f7fa f970 	bl	8001f84 <_sbrk>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_sbrk_r+0x1a>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_sbrk_r+0x1a>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	200023cc 	.word	0x200023cc

08007cb4 <__assert_func>:
 8007cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <__assert_func+0x2c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	68d8      	ldr	r0, [r3, #12]
 8007cc2:	b14c      	cbz	r4, 8007cd8 <__assert_func+0x24>
 8007cc4:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <__assert_func+0x30>)
 8007cc6:	9100      	str	r1, [sp, #0]
 8007cc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ccc:	4906      	ldr	r1, [pc, #24]	; (8007ce8 <__assert_func+0x34>)
 8007cce:	462b      	mov	r3, r5
 8007cd0:	f000 f80e 	bl	8007cf0 <fiprintf>
 8007cd4:	f000 fa64 	bl	80081a0 <abort>
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <__assert_func+0x38>)
 8007cda:	461c      	mov	r4, r3
 8007cdc:	e7f3      	b.n	8007cc6 <__assert_func+0x12>
 8007cde:	bf00      	nop
 8007ce0:	20000018 	.word	0x20000018
 8007ce4:	0800975c 	.word	0x0800975c
 8007ce8:	08009769 	.word	0x08009769
 8007cec:	08009797 	.word	0x08009797

08007cf0 <fiprintf>:
 8007cf0:	b40e      	push	{r1, r2, r3}
 8007cf2:	b503      	push	{r0, r1, lr}
 8007cf4:	4601      	mov	r1, r0
 8007cf6:	ab03      	add	r3, sp, #12
 8007cf8:	4805      	ldr	r0, [pc, #20]	; (8007d10 <fiprintf+0x20>)
 8007cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfe:	6800      	ldr	r0, [r0, #0]
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	f000 f84f 	bl	8007da4 <_vfiprintf_r>
 8007d06:	b002      	add	sp, #8
 8007d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d0c:	b003      	add	sp, #12
 8007d0e:	4770      	bx	lr
 8007d10:	20000018 	.word	0x20000018

08007d14 <__ascii_mbtowc>:
 8007d14:	b082      	sub	sp, #8
 8007d16:	b901      	cbnz	r1, 8007d1a <__ascii_mbtowc+0x6>
 8007d18:	a901      	add	r1, sp, #4
 8007d1a:	b142      	cbz	r2, 8007d2e <__ascii_mbtowc+0x1a>
 8007d1c:	b14b      	cbz	r3, 8007d32 <__ascii_mbtowc+0x1e>
 8007d1e:	7813      	ldrb	r3, [r2, #0]
 8007d20:	600b      	str	r3, [r1, #0]
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	1e10      	subs	r0, r2, #0
 8007d26:	bf18      	it	ne
 8007d28:	2001      	movne	r0, #1
 8007d2a:	b002      	add	sp, #8
 8007d2c:	4770      	bx	lr
 8007d2e:	4610      	mov	r0, r2
 8007d30:	e7fb      	b.n	8007d2a <__ascii_mbtowc+0x16>
 8007d32:	f06f 0001 	mvn.w	r0, #1
 8007d36:	e7f8      	b.n	8007d2a <__ascii_mbtowc+0x16>

08007d38 <__malloc_lock>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__malloc_lock+0x8>)
 8007d3a:	f000 bbf1 	b.w	8008520 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	200023d4 	.word	0x200023d4

08007d44 <__malloc_unlock>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__malloc_unlock+0x8>)
 8007d46:	f000 bbec 	b.w	8008522 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	200023d4 	.word	0x200023d4

08007d50 <__sfputc_r>:
 8007d50:	6893      	ldr	r3, [r2, #8]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	b410      	push	{r4}
 8007d58:	6093      	str	r3, [r2, #8]
 8007d5a:	da08      	bge.n	8007d6e <__sfputc_r+0x1e>
 8007d5c:	6994      	ldr	r4, [r2, #24]
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	db01      	blt.n	8007d66 <__sfputc_r+0x16>
 8007d62:	290a      	cmp	r1, #10
 8007d64:	d103      	bne.n	8007d6e <__sfputc_r+0x1e>
 8007d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d6a:	f000 b94b 	b.w	8008004 <__swbuf_r>
 8007d6e:	6813      	ldr	r3, [r2, #0]
 8007d70:	1c58      	adds	r0, r3, #1
 8007d72:	6010      	str	r0, [r2, #0]
 8007d74:	7019      	strb	r1, [r3, #0]
 8007d76:	4608      	mov	r0, r1
 8007d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <__sfputs_r>:
 8007d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d80:	4606      	mov	r6, r0
 8007d82:	460f      	mov	r7, r1
 8007d84:	4614      	mov	r4, r2
 8007d86:	18d5      	adds	r5, r2, r3
 8007d88:	42ac      	cmp	r4, r5
 8007d8a:	d101      	bne.n	8007d90 <__sfputs_r+0x12>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e007      	b.n	8007da0 <__sfputs_r+0x22>
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	463a      	mov	r2, r7
 8007d96:	4630      	mov	r0, r6
 8007d98:	f7ff ffda 	bl	8007d50 <__sfputc_r>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d1f3      	bne.n	8007d88 <__sfputs_r+0xa>
 8007da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007da4 <_vfiprintf_r>:
 8007da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	460d      	mov	r5, r1
 8007daa:	b09d      	sub	sp, #116	; 0x74
 8007dac:	4614      	mov	r4, r2
 8007dae:	4698      	mov	r8, r3
 8007db0:	4606      	mov	r6, r0
 8007db2:	b118      	cbz	r0, 8007dbc <_vfiprintf_r+0x18>
 8007db4:	6983      	ldr	r3, [r0, #24]
 8007db6:	b90b      	cbnz	r3, 8007dbc <_vfiprintf_r+0x18>
 8007db8:	f000 fb14 	bl	80083e4 <__sinit>
 8007dbc:	4b89      	ldr	r3, [pc, #548]	; (8007fe4 <_vfiprintf_r+0x240>)
 8007dbe:	429d      	cmp	r5, r3
 8007dc0:	d11b      	bne.n	8007dfa <_vfiprintf_r+0x56>
 8007dc2:	6875      	ldr	r5, [r6, #4]
 8007dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dc6:	07d9      	lsls	r1, r3, #31
 8007dc8:	d405      	bmi.n	8007dd6 <_vfiprintf_r+0x32>
 8007dca:	89ab      	ldrh	r3, [r5, #12]
 8007dcc:	059a      	lsls	r2, r3, #22
 8007dce:	d402      	bmi.n	8007dd6 <_vfiprintf_r+0x32>
 8007dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dd2:	f000 fba5 	bl	8008520 <__retarget_lock_acquire_recursive>
 8007dd6:	89ab      	ldrh	r3, [r5, #12]
 8007dd8:	071b      	lsls	r3, r3, #28
 8007dda:	d501      	bpl.n	8007de0 <_vfiprintf_r+0x3c>
 8007ddc:	692b      	ldr	r3, [r5, #16]
 8007dde:	b9eb      	cbnz	r3, 8007e1c <_vfiprintf_r+0x78>
 8007de0:	4629      	mov	r1, r5
 8007de2:	4630      	mov	r0, r6
 8007de4:	f000 f96e 	bl	80080c4 <__swsetup_r>
 8007de8:	b1c0      	cbz	r0, 8007e1c <_vfiprintf_r+0x78>
 8007dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dec:	07dc      	lsls	r4, r3, #31
 8007dee:	d50e      	bpl.n	8007e0e <_vfiprintf_r+0x6a>
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	b01d      	add	sp, #116	; 0x74
 8007df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfa:	4b7b      	ldr	r3, [pc, #492]	; (8007fe8 <_vfiprintf_r+0x244>)
 8007dfc:	429d      	cmp	r5, r3
 8007dfe:	d101      	bne.n	8007e04 <_vfiprintf_r+0x60>
 8007e00:	68b5      	ldr	r5, [r6, #8]
 8007e02:	e7df      	b.n	8007dc4 <_vfiprintf_r+0x20>
 8007e04:	4b79      	ldr	r3, [pc, #484]	; (8007fec <_vfiprintf_r+0x248>)
 8007e06:	429d      	cmp	r5, r3
 8007e08:	bf08      	it	eq
 8007e0a:	68f5      	ldreq	r5, [r6, #12]
 8007e0c:	e7da      	b.n	8007dc4 <_vfiprintf_r+0x20>
 8007e0e:	89ab      	ldrh	r3, [r5, #12]
 8007e10:	0598      	lsls	r0, r3, #22
 8007e12:	d4ed      	bmi.n	8007df0 <_vfiprintf_r+0x4c>
 8007e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e16:	f000 fb84 	bl	8008522 <__retarget_lock_release_recursive>
 8007e1a:	e7e9      	b.n	8007df0 <_vfiprintf_r+0x4c>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e20:	2320      	movs	r3, #32
 8007e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e2a:	2330      	movs	r3, #48	; 0x30
 8007e2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ff0 <_vfiprintf_r+0x24c>
 8007e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e34:	f04f 0901 	mov.w	r9, #1
 8007e38:	4623      	mov	r3, r4
 8007e3a:	469a      	mov	sl, r3
 8007e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e40:	b10a      	cbz	r2, 8007e46 <_vfiprintf_r+0xa2>
 8007e42:	2a25      	cmp	r2, #37	; 0x25
 8007e44:	d1f9      	bne.n	8007e3a <_vfiprintf_r+0x96>
 8007e46:	ebba 0b04 	subs.w	fp, sl, r4
 8007e4a:	d00b      	beq.n	8007e64 <_vfiprintf_r+0xc0>
 8007e4c:	465b      	mov	r3, fp
 8007e4e:	4622      	mov	r2, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7ff ff93 	bl	8007d7e <__sfputs_r>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f000 80aa 	beq.w	8007fb2 <_vfiprintf_r+0x20e>
 8007e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e60:	445a      	add	r2, fp
 8007e62:	9209      	str	r2, [sp, #36]	; 0x24
 8007e64:	f89a 3000 	ldrb.w	r3, [sl]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80a2 	beq.w	8007fb2 <_vfiprintf_r+0x20e>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f04f 32ff 	mov.w	r2, #4294967295
 8007e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e78:	f10a 0a01 	add.w	sl, sl, #1
 8007e7c:	9304      	str	r3, [sp, #16]
 8007e7e:	9307      	str	r3, [sp, #28]
 8007e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e84:	931a      	str	r3, [sp, #104]	; 0x68
 8007e86:	4654      	mov	r4, sl
 8007e88:	2205      	movs	r2, #5
 8007e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8e:	4858      	ldr	r0, [pc, #352]	; (8007ff0 <_vfiprintf_r+0x24c>)
 8007e90:	f7f8 f9c6 	bl	8000220 <memchr>
 8007e94:	9a04      	ldr	r2, [sp, #16]
 8007e96:	b9d8      	cbnz	r0, 8007ed0 <_vfiprintf_r+0x12c>
 8007e98:	06d1      	lsls	r1, r2, #27
 8007e9a:	bf44      	itt	mi
 8007e9c:	2320      	movmi	r3, #32
 8007e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea2:	0713      	lsls	r3, r2, #28
 8007ea4:	bf44      	itt	mi
 8007ea6:	232b      	movmi	r3, #43	; 0x2b
 8007ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eac:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb2:	d015      	beq.n	8007ee0 <_vfiprintf_r+0x13c>
 8007eb4:	9a07      	ldr	r2, [sp, #28]
 8007eb6:	4654      	mov	r4, sl
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f04f 0c0a 	mov.w	ip, #10
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ec4:	3b30      	subs	r3, #48	; 0x30
 8007ec6:	2b09      	cmp	r3, #9
 8007ec8:	d94e      	bls.n	8007f68 <_vfiprintf_r+0x1c4>
 8007eca:	b1b0      	cbz	r0, 8007efa <_vfiprintf_r+0x156>
 8007ecc:	9207      	str	r2, [sp, #28]
 8007ece:	e014      	b.n	8007efa <_vfiprintf_r+0x156>
 8007ed0:	eba0 0308 	sub.w	r3, r0, r8
 8007ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	46a2      	mov	sl, r4
 8007ede:	e7d2      	b.n	8007e86 <_vfiprintf_r+0xe2>
 8007ee0:	9b03      	ldr	r3, [sp, #12]
 8007ee2:	1d19      	adds	r1, r3, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	9103      	str	r1, [sp, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	bfbb      	ittet	lt
 8007eec:	425b      	neglt	r3, r3
 8007eee:	f042 0202 	orrlt.w	r2, r2, #2
 8007ef2:	9307      	strge	r3, [sp, #28]
 8007ef4:	9307      	strlt	r3, [sp, #28]
 8007ef6:	bfb8      	it	lt
 8007ef8:	9204      	strlt	r2, [sp, #16]
 8007efa:	7823      	ldrb	r3, [r4, #0]
 8007efc:	2b2e      	cmp	r3, #46	; 0x2e
 8007efe:	d10c      	bne.n	8007f1a <_vfiprintf_r+0x176>
 8007f00:	7863      	ldrb	r3, [r4, #1]
 8007f02:	2b2a      	cmp	r3, #42	; 0x2a
 8007f04:	d135      	bne.n	8007f72 <_vfiprintf_r+0x1ce>
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	1d1a      	adds	r2, r3, #4
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	9203      	str	r2, [sp, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bfb8      	it	lt
 8007f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f16:	3402      	adds	r4, #2
 8007f18:	9305      	str	r3, [sp, #20]
 8007f1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008000 <_vfiprintf_r+0x25c>
 8007f1e:	7821      	ldrb	r1, [r4, #0]
 8007f20:	2203      	movs	r2, #3
 8007f22:	4650      	mov	r0, sl
 8007f24:	f7f8 f97c 	bl	8000220 <memchr>
 8007f28:	b140      	cbz	r0, 8007f3c <_vfiprintf_r+0x198>
 8007f2a:	2340      	movs	r3, #64	; 0x40
 8007f2c:	eba0 000a 	sub.w	r0, r0, sl
 8007f30:	fa03 f000 	lsl.w	r0, r3, r0
 8007f34:	9b04      	ldr	r3, [sp, #16]
 8007f36:	4303      	orrs	r3, r0
 8007f38:	3401      	adds	r4, #1
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f40:	482c      	ldr	r0, [pc, #176]	; (8007ff4 <_vfiprintf_r+0x250>)
 8007f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f46:	2206      	movs	r2, #6
 8007f48:	f7f8 f96a 	bl	8000220 <memchr>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d03f      	beq.n	8007fd0 <_vfiprintf_r+0x22c>
 8007f50:	4b29      	ldr	r3, [pc, #164]	; (8007ff8 <_vfiprintf_r+0x254>)
 8007f52:	bb1b      	cbnz	r3, 8007f9c <_vfiprintf_r+0x1f8>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	3307      	adds	r3, #7
 8007f58:	f023 0307 	bic.w	r3, r3, #7
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	9303      	str	r3, [sp, #12]
 8007f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f62:	443b      	add	r3, r7
 8007f64:	9309      	str	r3, [sp, #36]	; 0x24
 8007f66:	e767      	b.n	8007e38 <_vfiprintf_r+0x94>
 8007f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	2001      	movs	r0, #1
 8007f70:	e7a5      	b.n	8007ebe <_vfiprintf_r+0x11a>
 8007f72:	2300      	movs	r3, #0
 8007f74:	3401      	adds	r4, #1
 8007f76:	9305      	str	r3, [sp, #20]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f04f 0c0a 	mov.w	ip, #10
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f84:	3a30      	subs	r2, #48	; 0x30
 8007f86:	2a09      	cmp	r2, #9
 8007f88:	d903      	bls.n	8007f92 <_vfiprintf_r+0x1ee>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0c5      	beq.n	8007f1a <_vfiprintf_r+0x176>
 8007f8e:	9105      	str	r1, [sp, #20]
 8007f90:	e7c3      	b.n	8007f1a <_vfiprintf_r+0x176>
 8007f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f96:	4604      	mov	r4, r0
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e7f0      	b.n	8007f7e <_vfiprintf_r+0x1da>
 8007f9c:	ab03      	add	r3, sp, #12
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4b16      	ldr	r3, [pc, #88]	; (8007ffc <_vfiprintf_r+0x258>)
 8007fa4:	a904      	add	r1, sp, #16
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f7fd ffde 	bl	8005f68 <_printf_float>
 8007fac:	4607      	mov	r7, r0
 8007fae:	1c78      	adds	r0, r7, #1
 8007fb0:	d1d6      	bne.n	8007f60 <_vfiprintf_r+0x1bc>
 8007fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fb4:	07d9      	lsls	r1, r3, #31
 8007fb6:	d405      	bmi.n	8007fc4 <_vfiprintf_r+0x220>
 8007fb8:	89ab      	ldrh	r3, [r5, #12]
 8007fba:	059a      	lsls	r2, r3, #22
 8007fbc:	d402      	bmi.n	8007fc4 <_vfiprintf_r+0x220>
 8007fbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fc0:	f000 faaf 	bl	8008522 <__retarget_lock_release_recursive>
 8007fc4:	89ab      	ldrh	r3, [r5, #12]
 8007fc6:	065b      	lsls	r3, r3, #25
 8007fc8:	f53f af12 	bmi.w	8007df0 <_vfiprintf_r+0x4c>
 8007fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fce:	e711      	b.n	8007df4 <_vfiprintf_r+0x50>
 8007fd0:	ab03      	add	r3, sp, #12
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	462a      	mov	r2, r5
 8007fd6:	4b09      	ldr	r3, [pc, #36]	; (8007ffc <_vfiprintf_r+0x258>)
 8007fd8:	a904      	add	r1, sp, #16
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7fe fa68 	bl	80064b0 <_printf_i>
 8007fe0:	e7e4      	b.n	8007fac <_vfiprintf_r+0x208>
 8007fe2:	bf00      	nop
 8007fe4:	080098d4 	.word	0x080098d4
 8007fe8:	080098f4 	.word	0x080098f4
 8007fec:	080098b4 	.word	0x080098b4
 8007ff0:	080097a2 	.word	0x080097a2
 8007ff4:	080097ac 	.word	0x080097ac
 8007ff8:	08005f69 	.word	0x08005f69
 8007ffc:	08007d7f 	.word	0x08007d7f
 8008000:	080097a8 	.word	0x080097a8

08008004 <__swbuf_r>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	460e      	mov	r6, r1
 8008008:	4614      	mov	r4, r2
 800800a:	4605      	mov	r5, r0
 800800c:	b118      	cbz	r0, 8008016 <__swbuf_r+0x12>
 800800e:	6983      	ldr	r3, [r0, #24]
 8008010:	b90b      	cbnz	r3, 8008016 <__swbuf_r+0x12>
 8008012:	f000 f9e7 	bl	80083e4 <__sinit>
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <__swbuf_r+0x98>)
 8008018:	429c      	cmp	r4, r3
 800801a:	d12b      	bne.n	8008074 <__swbuf_r+0x70>
 800801c:	686c      	ldr	r4, [r5, #4]
 800801e:	69a3      	ldr	r3, [r4, #24]
 8008020:	60a3      	str	r3, [r4, #8]
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	071a      	lsls	r2, r3, #28
 8008026:	d52f      	bpl.n	8008088 <__swbuf_r+0x84>
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	b36b      	cbz	r3, 8008088 <__swbuf_r+0x84>
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	1ac0      	subs	r0, r0, r3
 8008032:	6963      	ldr	r3, [r4, #20]
 8008034:	b2f6      	uxtb	r6, r6
 8008036:	4283      	cmp	r3, r0
 8008038:	4637      	mov	r7, r6
 800803a:	dc04      	bgt.n	8008046 <__swbuf_r+0x42>
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f000 f93c 	bl	80082bc <_fflush_r>
 8008044:	bb30      	cbnz	r0, 8008094 <__swbuf_r+0x90>
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	3b01      	subs	r3, #1
 800804a:	60a3      	str	r3, [r4, #8]
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	701e      	strb	r6, [r3, #0]
 8008054:	6963      	ldr	r3, [r4, #20]
 8008056:	3001      	adds	r0, #1
 8008058:	4283      	cmp	r3, r0
 800805a:	d004      	beq.n	8008066 <__swbuf_r+0x62>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	07db      	lsls	r3, r3, #31
 8008060:	d506      	bpl.n	8008070 <__swbuf_r+0x6c>
 8008062:	2e0a      	cmp	r6, #10
 8008064:	d104      	bne.n	8008070 <__swbuf_r+0x6c>
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f000 f927 	bl	80082bc <_fflush_r>
 800806e:	b988      	cbnz	r0, 8008094 <__swbuf_r+0x90>
 8008070:	4638      	mov	r0, r7
 8008072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <__swbuf_r+0x9c>)
 8008076:	429c      	cmp	r4, r3
 8008078:	d101      	bne.n	800807e <__swbuf_r+0x7a>
 800807a:	68ac      	ldr	r4, [r5, #8]
 800807c:	e7cf      	b.n	800801e <__swbuf_r+0x1a>
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <__swbuf_r+0xa0>)
 8008080:	429c      	cmp	r4, r3
 8008082:	bf08      	it	eq
 8008084:	68ec      	ldreq	r4, [r5, #12]
 8008086:	e7ca      	b.n	800801e <__swbuf_r+0x1a>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f81a 	bl	80080c4 <__swsetup_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	d0cb      	beq.n	800802c <__swbuf_r+0x28>
 8008094:	f04f 37ff 	mov.w	r7, #4294967295
 8008098:	e7ea      	b.n	8008070 <__swbuf_r+0x6c>
 800809a:	bf00      	nop
 800809c:	080098d4 	.word	0x080098d4
 80080a0:	080098f4 	.word	0x080098f4
 80080a4:	080098b4 	.word	0x080098b4

080080a8 <__ascii_wctomb>:
 80080a8:	b149      	cbz	r1, 80080be <__ascii_wctomb+0x16>
 80080aa:	2aff      	cmp	r2, #255	; 0xff
 80080ac:	bf85      	ittet	hi
 80080ae:	238a      	movhi	r3, #138	; 0x8a
 80080b0:	6003      	strhi	r3, [r0, #0]
 80080b2:	700a      	strbls	r2, [r1, #0]
 80080b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80080b8:	bf98      	it	ls
 80080ba:	2001      	movls	r0, #1
 80080bc:	4770      	bx	lr
 80080be:	4608      	mov	r0, r1
 80080c0:	4770      	bx	lr
	...

080080c4 <__swsetup_r>:
 80080c4:	4b32      	ldr	r3, [pc, #200]	; (8008190 <__swsetup_r+0xcc>)
 80080c6:	b570      	push	{r4, r5, r6, lr}
 80080c8:	681d      	ldr	r5, [r3, #0]
 80080ca:	4606      	mov	r6, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	b125      	cbz	r5, 80080da <__swsetup_r+0x16>
 80080d0:	69ab      	ldr	r3, [r5, #24]
 80080d2:	b913      	cbnz	r3, 80080da <__swsetup_r+0x16>
 80080d4:	4628      	mov	r0, r5
 80080d6:	f000 f985 	bl	80083e4 <__sinit>
 80080da:	4b2e      	ldr	r3, [pc, #184]	; (8008194 <__swsetup_r+0xd0>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	d10f      	bne.n	8008100 <__swsetup_r+0x3c>
 80080e0:	686c      	ldr	r4, [r5, #4]
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080e8:	0719      	lsls	r1, r3, #28
 80080ea:	d42c      	bmi.n	8008146 <__swsetup_r+0x82>
 80080ec:	06dd      	lsls	r5, r3, #27
 80080ee:	d411      	bmi.n	8008114 <__swsetup_r+0x50>
 80080f0:	2309      	movs	r3, #9
 80080f2:	6033      	str	r3, [r6, #0]
 80080f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295
 80080fe:	e03e      	b.n	800817e <__swsetup_r+0xba>
 8008100:	4b25      	ldr	r3, [pc, #148]	; (8008198 <__swsetup_r+0xd4>)
 8008102:	429c      	cmp	r4, r3
 8008104:	d101      	bne.n	800810a <__swsetup_r+0x46>
 8008106:	68ac      	ldr	r4, [r5, #8]
 8008108:	e7eb      	b.n	80080e2 <__swsetup_r+0x1e>
 800810a:	4b24      	ldr	r3, [pc, #144]	; (800819c <__swsetup_r+0xd8>)
 800810c:	429c      	cmp	r4, r3
 800810e:	bf08      	it	eq
 8008110:	68ec      	ldreq	r4, [r5, #12]
 8008112:	e7e6      	b.n	80080e2 <__swsetup_r+0x1e>
 8008114:	0758      	lsls	r0, r3, #29
 8008116:	d512      	bpl.n	800813e <__swsetup_r+0x7a>
 8008118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811a:	b141      	cbz	r1, 800812e <__swsetup_r+0x6a>
 800811c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008120:	4299      	cmp	r1, r3
 8008122:	d002      	beq.n	800812a <__swsetup_r+0x66>
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff fd0b 	bl	8007b40 <_free_r>
 800812a:	2300      	movs	r3, #0
 800812c:	6363      	str	r3, [r4, #52]	; 0x34
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	2300      	movs	r3, #0
 8008138:	6063      	str	r3, [r4, #4]
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	f043 0308 	orr.w	r3, r3, #8
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	b94b      	cbnz	r3, 800815e <__swsetup_r+0x9a>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008154:	d003      	beq.n	800815e <__swsetup_r+0x9a>
 8008156:	4621      	mov	r1, r4
 8008158:	4630      	mov	r0, r6
 800815a:	f000 fa07 	bl	800856c <__smakebuf_r>
 800815e:	89a0      	ldrh	r0, [r4, #12]
 8008160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008164:	f010 0301 	ands.w	r3, r0, #1
 8008168:	d00a      	beq.n	8008180 <__swsetup_r+0xbc>
 800816a:	2300      	movs	r3, #0
 800816c:	60a3      	str	r3, [r4, #8]
 800816e:	6963      	ldr	r3, [r4, #20]
 8008170:	425b      	negs	r3, r3
 8008172:	61a3      	str	r3, [r4, #24]
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	b943      	cbnz	r3, 800818a <__swsetup_r+0xc6>
 8008178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800817c:	d1ba      	bne.n	80080f4 <__swsetup_r+0x30>
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	0781      	lsls	r1, r0, #30
 8008182:	bf58      	it	pl
 8008184:	6963      	ldrpl	r3, [r4, #20]
 8008186:	60a3      	str	r3, [r4, #8]
 8008188:	e7f4      	b.n	8008174 <__swsetup_r+0xb0>
 800818a:	2000      	movs	r0, #0
 800818c:	e7f7      	b.n	800817e <__swsetup_r+0xba>
 800818e:	bf00      	nop
 8008190:	20000018 	.word	0x20000018
 8008194:	080098d4 	.word	0x080098d4
 8008198:	080098f4 	.word	0x080098f4
 800819c:	080098b4 	.word	0x080098b4

080081a0 <abort>:
 80081a0:	b508      	push	{r3, lr}
 80081a2:	2006      	movs	r0, #6
 80081a4:	f000 fa4a 	bl	800863c <raise>
 80081a8:	2001      	movs	r0, #1
 80081aa:	f7f9 fe73 	bl	8001e94 <_exit>
	...

080081b0 <__sflush_r>:
 80081b0:	898a      	ldrh	r2, [r1, #12]
 80081b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	4605      	mov	r5, r0
 80081b8:	0710      	lsls	r0, r2, #28
 80081ba:	460c      	mov	r4, r1
 80081bc:	d458      	bmi.n	8008270 <__sflush_r+0xc0>
 80081be:	684b      	ldr	r3, [r1, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc05      	bgt.n	80081d0 <__sflush_r+0x20>
 80081c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	dc02      	bgt.n	80081d0 <__sflush_r+0x20>
 80081ca:	2000      	movs	r0, #0
 80081cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d2:	2e00      	cmp	r6, #0
 80081d4:	d0f9      	beq.n	80081ca <__sflush_r+0x1a>
 80081d6:	2300      	movs	r3, #0
 80081d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081dc:	682f      	ldr	r7, [r5, #0]
 80081de:	602b      	str	r3, [r5, #0]
 80081e0:	d032      	beq.n	8008248 <__sflush_r+0x98>
 80081e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	075a      	lsls	r2, r3, #29
 80081e8:	d505      	bpl.n	80081f6 <__sflush_r+0x46>
 80081ea:	6863      	ldr	r3, [r4, #4]
 80081ec:	1ac0      	subs	r0, r0, r3
 80081ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081f0:	b10b      	cbz	r3, 80081f6 <__sflush_r+0x46>
 80081f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081f4:	1ac0      	subs	r0, r0, r3
 80081f6:	2300      	movs	r3, #0
 80081f8:	4602      	mov	r2, r0
 80081fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081fc:	6a21      	ldr	r1, [r4, #32]
 80081fe:	4628      	mov	r0, r5
 8008200:	47b0      	blx	r6
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	d106      	bne.n	8008216 <__sflush_r+0x66>
 8008208:	6829      	ldr	r1, [r5, #0]
 800820a:	291d      	cmp	r1, #29
 800820c:	d82c      	bhi.n	8008268 <__sflush_r+0xb8>
 800820e:	4a2a      	ldr	r2, [pc, #168]	; (80082b8 <__sflush_r+0x108>)
 8008210:	40ca      	lsrs	r2, r1
 8008212:	07d6      	lsls	r6, r2, #31
 8008214:	d528      	bpl.n	8008268 <__sflush_r+0xb8>
 8008216:	2200      	movs	r2, #0
 8008218:	6062      	str	r2, [r4, #4]
 800821a:	04d9      	lsls	r1, r3, #19
 800821c:	6922      	ldr	r2, [r4, #16]
 800821e:	6022      	str	r2, [r4, #0]
 8008220:	d504      	bpl.n	800822c <__sflush_r+0x7c>
 8008222:	1c42      	adds	r2, r0, #1
 8008224:	d101      	bne.n	800822a <__sflush_r+0x7a>
 8008226:	682b      	ldr	r3, [r5, #0]
 8008228:	b903      	cbnz	r3, 800822c <__sflush_r+0x7c>
 800822a:	6560      	str	r0, [r4, #84]	; 0x54
 800822c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800822e:	602f      	str	r7, [r5, #0]
 8008230:	2900      	cmp	r1, #0
 8008232:	d0ca      	beq.n	80081ca <__sflush_r+0x1a>
 8008234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008238:	4299      	cmp	r1, r3
 800823a:	d002      	beq.n	8008242 <__sflush_r+0x92>
 800823c:	4628      	mov	r0, r5
 800823e:	f7ff fc7f 	bl	8007b40 <_free_r>
 8008242:	2000      	movs	r0, #0
 8008244:	6360      	str	r0, [r4, #52]	; 0x34
 8008246:	e7c1      	b.n	80081cc <__sflush_r+0x1c>
 8008248:	6a21      	ldr	r1, [r4, #32]
 800824a:	2301      	movs	r3, #1
 800824c:	4628      	mov	r0, r5
 800824e:	47b0      	blx	r6
 8008250:	1c41      	adds	r1, r0, #1
 8008252:	d1c7      	bne.n	80081e4 <__sflush_r+0x34>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0c4      	beq.n	80081e4 <__sflush_r+0x34>
 800825a:	2b1d      	cmp	r3, #29
 800825c:	d001      	beq.n	8008262 <__sflush_r+0xb2>
 800825e:	2b16      	cmp	r3, #22
 8008260:	d101      	bne.n	8008266 <__sflush_r+0xb6>
 8008262:	602f      	str	r7, [r5, #0]
 8008264:	e7b1      	b.n	80081ca <__sflush_r+0x1a>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826c:	81a3      	strh	r3, [r4, #12]
 800826e:	e7ad      	b.n	80081cc <__sflush_r+0x1c>
 8008270:	690f      	ldr	r7, [r1, #16]
 8008272:	2f00      	cmp	r7, #0
 8008274:	d0a9      	beq.n	80081ca <__sflush_r+0x1a>
 8008276:	0793      	lsls	r3, r2, #30
 8008278:	680e      	ldr	r6, [r1, #0]
 800827a:	bf08      	it	eq
 800827c:	694b      	ldreq	r3, [r1, #20]
 800827e:	600f      	str	r7, [r1, #0]
 8008280:	bf18      	it	ne
 8008282:	2300      	movne	r3, #0
 8008284:	eba6 0807 	sub.w	r8, r6, r7
 8008288:	608b      	str	r3, [r1, #8]
 800828a:	f1b8 0f00 	cmp.w	r8, #0
 800828e:	dd9c      	ble.n	80081ca <__sflush_r+0x1a>
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008294:	4643      	mov	r3, r8
 8008296:	463a      	mov	r2, r7
 8008298:	4628      	mov	r0, r5
 800829a:	47b0      	blx	r6
 800829c:	2800      	cmp	r0, #0
 800829e:	dc06      	bgt.n	80082ae <__sflush_r+0xfe>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a6:	81a3      	strh	r3, [r4, #12]
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ac:	e78e      	b.n	80081cc <__sflush_r+0x1c>
 80082ae:	4407      	add	r7, r0
 80082b0:	eba8 0800 	sub.w	r8, r8, r0
 80082b4:	e7e9      	b.n	800828a <__sflush_r+0xda>
 80082b6:	bf00      	nop
 80082b8:	20400001 	.word	0x20400001

080082bc <_fflush_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	690b      	ldr	r3, [r1, #16]
 80082c0:	4605      	mov	r5, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	b913      	cbnz	r3, 80082cc <_fflush_r+0x10>
 80082c6:	2500      	movs	r5, #0
 80082c8:	4628      	mov	r0, r5
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	b118      	cbz	r0, 80082d6 <_fflush_r+0x1a>
 80082ce:	6983      	ldr	r3, [r0, #24]
 80082d0:	b90b      	cbnz	r3, 80082d6 <_fflush_r+0x1a>
 80082d2:	f000 f887 	bl	80083e4 <__sinit>
 80082d6:	4b14      	ldr	r3, [pc, #80]	; (8008328 <_fflush_r+0x6c>)
 80082d8:	429c      	cmp	r4, r3
 80082da:	d11b      	bne.n	8008314 <_fflush_r+0x58>
 80082dc:	686c      	ldr	r4, [r5, #4]
 80082de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0ef      	beq.n	80082c6 <_fflush_r+0xa>
 80082e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082e8:	07d0      	lsls	r0, r2, #31
 80082ea:	d404      	bmi.n	80082f6 <_fflush_r+0x3a>
 80082ec:	0599      	lsls	r1, r3, #22
 80082ee:	d402      	bmi.n	80082f6 <_fflush_r+0x3a>
 80082f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082f2:	f000 f915 	bl	8008520 <__retarget_lock_acquire_recursive>
 80082f6:	4628      	mov	r0, r5
 80082f8:	4621      	mov	r1, r4
 80082fa:	f7ff ff59 	bl	80081b0 <__sflush_r>
 80082fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008300:	07da      	lsls	r2, r3, #31
 8008302:	4605      	mov	r5, r0
 8008304:	d4e0      	bmi.n	80082c8 <_fflush_r+0xc>
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	059b      	lsls	r3, r3, #22
 800830a:	d4dd      	bmi.n	80082c8 <_fflush_r+0xc>
 800830c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830e:	f000 f908 	bl	8008522 <__retarget_lock_release_recursive>
 8008312:	e7d9      	b.n	80082c8 <_fflush_r+0xc>
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <_fflush_r+0x70>)
 8008316:	429c      	cmp	r4, r3
 8008318:	d101      	bne.n	800831e <_fflush_r+0x62>
 800831a:	68ac      	ldr	r4, [r5, #8]
 800831c:	e7df      	b.n	80082de <_fflush_r+0x22>
 800831e:	4b04      	ldr	r3, [pc, #16]	; (8008330 <_fflush_r+0x74>)
 8008320:	429c      	cmp	r4, r3
 8008322:	bf08      	it	eq
 8008324:	68ec      	ldreq	r4, [r5, #12]
 8008326:	e7da      	b.n	80082de <_fflush_r+0x22>
 8008328:	080098d4 	.word	0x080098d4
 800832c:	080098f4 	.word	0x080098f4
 8008330:	080098b4 	.word	0x080098b4

08008334 <std>:
 8008334:	2300      	movs	r3, #0
 8008336:	b510      	push	{r4, lr}
 8008338:	4604      	mov	r4, r0
 800833a:	e9c0 3300 	strd	r3, r3, [r0]
 800833e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008342:	6083      	str	r3, [r0, #8]
 8008344:	8181      	strh	r1, [r0, #12]
 8008346:	6643      	str	r3, [r0, #100]	; 0x64
 8008348:	81c2      	strh	r2, [r0, #14]
 800834a:	6183      	str	r3, [r0, #24]
 800834c:	4619      	mov	r1, r3
 800834e:	2208      	movs	r2, #8
 8008350:	305c      	adds	r0, #92	; 0x5c
 8008352:	f7fd fd61 	bl	8005e18 <memset>
 8008356:	4b05      	ldr	r3, [pc, #20]	; (800836c <std+0x38>)
 8008358:	6263      	str	r3, [r4, #36]	; 0x24
 800835a:	4b05      	ldr	r3, [pc, #20]	; (8008370 <std+0x3c>)
 800835c:	62a3      	str	r3, [r4, #40]	; 0x28
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <std+0x40>)
 8008360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <std+0x44>)
 8008364:	6224      	str	r4, [r4, #32]
 8008366:	6323      	str	r3, [r4, #48]	; 0x30
 8008368:	bd10      	pop	{r4, pc}
 800836a:	bf00      	nop
 800836c:	08008675 	.word	0x08008675
 8008370:	08008697 	.word	0x08008697
 8008374:	080086cf 	.word	0x080086cf
 8008378:	080086f3 	.word	0x080086f3

0800837c <_cleanup_r>:
 800837c:	4901      	ldr	r1, [pc, #4]	; (8008384 <_cleanup_r+0x8>)
 800837e:	f000 b8af 	b.w	80084e0 <_fwalk_reent>
 8008382:	bf00      	nop
 8008384:	080082bd 	.word	0x080082bd

08008388 <__sfmoreglue>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	1e4a      	subs	r2, r1, #1
 800838c:	2568      	movs	r5, #104	; 0x68
 800838e:	4355      	muls	r5, r2
 8008390:	460e      	mov	r6, r1
 8008392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008396:	f7ff fc23 	bl	8007be0 <_malloc_r>
 800839a:	4604      	mov	r4, r0
 800839c:	b140      	cbz	r0, 80083b0 <__sfmoreglue+0x28>
 800839e:	2100      	movs	r1, #0
 80083a0:	e9c0 1600 	strd	r1, r6, [r0]
 80083a4:	300c      	adds	r0, #12
 80083a6:	60a0      	str	r0, [r4, #8]
 80083a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083ac:	f7fd fd34 	bl	8005e18 <memset>
 80083b0:	4620      	mov	r0, r4
 80083b2:	bd70      	pop	{r4, r5, r6, pc}

080083b4 <__sfp_lock_acquire>:
 80083b4:	4801      	ldr	r0, [pc, #4]	; (80083bc <__sfp_lock_acquire+0x8>)
 80083b6:	f000 b8b3 	b.w	8008520 <__retarget_lock_acquire_recursive>
 80083ba:	bf00      	nop
 80083bc:	200023d8 	.word	0x200023d8

080083c0 <__sfp_lock_release>:
 80083c0:	4801      	ldr	r0, [pc, #4]	; (80083c8 <__sfp_lock_release+0x8>)
 80083c2:	f000 b8ae 	b.w	8008522 <__retarget_lock_release_recursive>
 80083c6:	bf00      	nop
 80083c8:	200023d8 	.word	0x200023d8

080083cc <__sinit_lock_acquire>:
 80083cc:	4801      	ldr	r0, [pc, #4]	; (80083d4 <__sinit_lock_acquire+0x8>)
 80083ce:	f000 b8a7 	b.w	8008520 <__retarget_lock_acquire_recursive>
 80083d2:	bf00      	nop
 80083d4:	200023d3 	.word	0x200023d3

080083d8 <__sinit_lock_release>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__sinit_lock_release+0x8>)
 80083da:	f000 b8a2 	b.w	8008522 <__retarget_lock_release_recursive>
 80083de:	bf00      	nop
 80083e0:	200023d3 	.word	0x200023d3

080083e4 <__sinit>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	4604      	mov	r4, r0
 80083e8:	f7ff fff0 	bl	80083cc <__sinit_lock_acquire>
 80083ec:	69a3      	ldr	r3, [r4, #24]
 80083ee:	b11b      	cbz	r3, 80083f8 <__sinit+0x14>
 80083f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f4:	f7ff bff0 	b.w	80083d8 <__sinit_lock_release>
 80083f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083fc:	6523      	str	r3, [r4, #80]	; 0x50
 80083fe:	4b13      	ldr	r3, [pc, #76]	; (800844c <__sinit+0x68>)
 8008400:	4a13      	ldr	r2, [pc, #76]	; (8008450 <__sinit+0x6c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	62a2      	str	r2, [r4, #40]	; 0x28
 8008406:	42a3      	cmp	r3, r4
 8008408:	bf04      	itt	eq
 800840a:	2301      	moveq	r3, #1
 800840c:	61a3      	streq	r3, [r4, #24]
 800840e:	4620      	mov	r0, r4
 8008410:	f000 f820 	bl	8008454 <__sfp>
 8008414:	6060      	str	r0, [r4, #4]
 8008416:	4620      	mov	r0, r4
 8008418:	f000 f81c 	bl	8008454 <__sfp>
 800841c:	60a0      	str	r0, [r4, #8]
 800841e:	4620      	mov	r0, r4
 8008420:	f000 f818 	bl	8008454 <__sfp>
 8008424:	2200      	movs	r2, #0
 8008426:	60e0      	str	r0, [r4, #12]
 8008428:	2104      	movs	r1, #4
 800842a:	6860      	ldr	r0, [r4, #4]
 800842c:	f7ff ff82 	bl	8008334 <std>
 8008430:	68a0      	ldr	r0, [r4, #8]
 8008432:	2201      	movs	r2, #1
 8008434:	2109      	movs	r1, #9
 8008436:	f7ff ff7d 	bl	8008334 <std>
 800843a:	68e0      	ldr	r0, [r4, #12]
 800843c:	2202      	movs	r2, #2
 800843e:	2112      	movs	r1, #18
 8008440:	f7ff ff78 	bl	8008334 <std>
 8008444:	2301      	movs	r3, #1
 8008446:	61a3      	str	r3, [r4, #24]
 8008448:	e7d2      	b.n	80083f0 <__sinit+0xc>
 800844a:	bf00      	nop
 800844c:	08009530 	.word	0x08009530
 8008450:	0800837d 	.word	0x0800837d

08008454 <__sfp>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	4607      	mov	r7, r0
 8008458:	f7ff ffac 	bl	80083b4 <__sfp_lock_acquire>
 800845c:	4b1e      	ldr	r3, [pc, #120]	; (80084d8 <__sfp+0x84>)
 800845e:	681e      	ldr	r6, [r3, #0]
 8008460:	69b3      	ldr	r3, [r6, #24]
 8008462:	b913      	cbnz	r3, 800846a <__sfp+0x16>
 8008464:	4630      	mov	r0, r6
 8008466:	f7ff ffbd 	bl	80083e4 <__sinit>
 800846a:	3648      	adds	r6, #72	; 0x48
 800846c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008470:	3b01      	subs	r3, #1
 8008472:	d503      	bpl.n	800847c <__sfp+0x28>
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	b30b      	cbz	r3, 80084bc <__sfp+0x68>
 8008478:	6836      	ldr	r6, [r6, #0]
 800847a:	e7f7      	b.n	800846c <__sfp+0x18>
 800847c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008480:	b9d5      	cbnz	r5, 80084b8 <__sfp+0x64>
 8008482:	4b16      	ldr	r3, [pc, #88]	; (80084dc <__sfp+0x88>)
 8008484:	60e3      	str	r3, [r4, #12]
 8008486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800848a:	6665      	str	r5, [r4, #100]	; 0x64
 800848c:	f000 f847 	bl	800851e <__retarget_lock_init_recursive>
 8008490:	f7ff ff96 	bl	80083c0 <__sfp_lock_release>
 8008494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800849c:	6025      	str	r5, [r4, #0]
 800849e:	61a5      	str	r5, [r4, #24]
 80084a0:	2208      	movs	r2, #8
 80084a2:	4629      	mov	r1, r5
 80084a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084a8:	f7fd fcb6 	bl	8005e18 <memset>
 80084ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084b4:	4620      	mov	r0, r4
 80084b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b8:	3468      	adds	r4, #104	; 0x68
 80084ba:	e7d9      	b.n	8008470 <__sfp+0x1c>
 80084bc:	2104      	movs	r1, #4
 80084be:	4638      	mov	r0, r7
 80084c0:	f7ff ff62 	bl	8008388 <__sfmoreglue>
 80084c4:	4604      	mov	r4, r0
 80084c6:	6030      	str	r0, [r6, #0]
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d1d5      	bne.n	8008478 <__sfp+0x24>
 80084cc:	f7ff ff78 	bl	80083c0 <__sfp_lock_release>
 80084d0:	230c      	movs	r3, #12
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	e7ee      	b.n	80084b4 <__sfp+0x60>
 80084d6:	bf00      	nop
 80084d8:	08009530 	.word	0x08009530
 80084dc:	ffff0001 	.word	0xffff0001

080084e0 <_fwalk_reent>:
 80084e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e4:	4606      	mov	r6, r0
 80084e6:	4688      	mov	r8, r1
 80084e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084ec:	2700      	movs	r7, #0
 80084ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084f2:	f1b9 0901 	subs.w	r9, r9, #1
 80084f6:	d505      	bpl.n	8008504 <_fwalk_reent+0x24>
 80084f8:	6824      	ldr	r4, [r4, #0]
 80084fa:	2c00      	cmp	r4, #0
 80084fc:	d1f7      	bne.n	80084ee <_fwalk_reent+0xe>
 80084fe:	4638      	mov	r0, r7
 8008500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008504:	89ab      	ldrh	r3, [r5, #12]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d907      	bls.n	800851a <_fwalk_reent+0x3a>
 800850a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800850e:	3301      	adds	r3, #1
 8008510:	d003      	beq.n	800851a <_fwalk_reent+0x3a>
 8008512:	4629      	mov	r1, r5
 8008514:	4630      	mov	r0, r6
 8008516:	47c0      	blx	r8
 8008518:	4307      	orrs	r7, r0
 800851a:	3568      	adds	r5, #104	; 0x68
 800851c:	e7e9      	b.n	80084f2 <_fwalk_reent+0x12>

0800851e <__retarget_lock_init_recursive>:
 800851e:	4770      	bx	lr

08008520 <__retarget_lock_acquire_recursive>:
 8008520:	4770      	bx	lr

08008522 <__retarget_lock_release_recursive>:
 8008522:	4770      	bx	lr

08008524 <__swhatbuf_r>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	460e      	mov	r6, r1
 8008528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800852c:	2900      	cmp	r1, #0
 800852e:	b096      	sub	sp, #88	; 0x58
 8008530:	4614      	mov	r4, r2
 8008532:	461d      	mov	r5, r3
 8008534:	da07      	bge.n	8008546 <__swhatbuf_r+0x22>
 8008536:	2300      	movs	r3, #0
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	89b3      	ldrh	r3, [r6, #12]
 800853c:	061a      	lsls	r2, r3, #24
 800853e:	d410      	bmi.n	8008562 <__swhatbuf_r+0x3e>
 8008540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008544:	e00e      	b.n	8008564 <__swhatbuf_r+0x40>
 8008546:	466a      	mov	r2, sp
 8008548:	f000 f8fa 	bl	8008740 <_fstat_r>
 800854c:	2800      	cmp	r0, #0
 800854e:	dbf2      	blt.n	8008536 <__swhatbuf_r+0x12>
 8008550:	9a01      	ldr	r2, [sp, #4]
 8008552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800855a:	425a      	negs	r2, r3
 800855c:	415a      	adcs	r2, r3
 800855e:	602a      	str	r2, [r5, #0]
 8008560:	e7ee      	b.n	8008540 <__swhatbuf_r+0x1c>
 8008562:	2340      	movs	r3, #64	; 0x40
 8008564:	2000      	movs	r0, #0
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	b016      	add	sp, #88	; 0x58
 800856a:	bd70      	pop	{r4, r5, r6, pc}

0800856c <__smakebuf_r>:
 800856c:	898b      	ldrh	r3, [r1, #12]
 800856e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008570:	079d      	lsls	r5, r3, #30
 8008572:	4606      	mov	r6, r0
 8008574:	460c      	mov	r4, r1
 8008576:	d507      	bpl.n	8008588 <__smakebuf_r+0x1c>
 8008578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	2301      	movs	r3, #1
 8008582:	6163      	str	r3, [r4, #20]
 8008584:	b002      	add	sp, #8
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	ab01      	add	r3, sp, #4
 800858a:	466a      	mov	r2, sp
 800858c:	f7ff ffca 	bl	8008524 <__swhatbuf_r>
 8008590:	9900      	ldr	r1, [sp, #0]
 8008592:	4605      	mov	r5, r0
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff fb23 	bl	8007be0 <_malloc_r>
 800859a:	b948      	cbnz	r0, 80085b0 <__smakebuf_r+0x44>
 800859c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a0:	059a      	lsls	r2, r3, #22
 80085a2:	d4ef      	bmi.n	8008584 <__smakebuf_r+0x18>
 80085a4:	f023 0303 	bic.w	r3, r3, #3
 80085a8:	f043 0302 	orr.w	r3, r3, #2
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	e7e3      	b.n	8008578 <__smakebuf_r+0xc>
 80085b0:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <__smakebuf_r+0x7c>)
 80085b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	6020      	str	r0, [r4, #0]
 80085b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	6163      	str	r3, [r4, #20]
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	6120      	str	r0, [r4, #16]
 80085c6:	b15b      	cbz	r3, 80085e0 <__smakebuf_r+0x74>
 80085c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 f8c9 	bl	8008764 <_isatty_r>
 80085d2:	b128      	cbz	r0, 80085e0 <__smakebuf_r+0x74>
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f023 0303 	bic.w	r3, r3, #3
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	81a3      	strh	r3, [r4, #12]
 80085e0:	89a0      	ldrh	r0, [r4, #12]
 80085e2:	4305      	orrs	r5, r0
 80085e4:	81a5      	strh	r5, [r4, #12]
 80085e6:	e7cd      	b.n	8008584 <__smakebuf_r+0x18>
 80085e8:	0800837d 	.word	0x0800837d

080085ec <_raise_r>:
 80085ec:	291f      	cmp	r1, #31
 80085ee:	b538      	push	{r3, r4, r5, lr}
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	d904      	bls.n	8008600 <_raise_r+0x14>
 80085f6:	2316      	movs	r3, #22
 80085f8:	6003      	str	r3, [r0, #0]
 80085fa:	f04f 30ff 	mov.w	r0, #4294967295
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008602:	b112      	cbz	r2, 800860a <_raise_r+0x1e>
 8008604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008608:	b94b      	cbnz	r3, 800861e <_raise_r+0x32>
 800860a:	4620      	mov	r0, r4
 800860c:	f000 f830 	bl	8008670 <_getpid_r>
 8008610:	462a      	mov	r2, r5
 8008612:	4601      	mov	r1, r0
 8008614:	4620      	mov	r0, r4
 8008616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800861a:	f000 b817 	b.w	800864c <_kill_r>
 800861e:	2b01      	cmp	r3, #1
 8008620:	d00a      	beq.n	8008638 <_raise_r+0x4c>
 8008622:	1c59      	adds	r1, r3, #1
 8008624:	d103      	bne.n	800862e <_raise_r+0x42>
 8008626:	2316      	movs	r3, #22
 8008628:	6003      	str	r3, [r0, #0]
 800862a:	2001      	movs	r0, #1
 800862c:	e7e7      	b.n	80085fe <_raise_r+0x12>
 800862e:	2400      	movs	r4, #0
 8008630:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008634:	4628      	mov	r0, r5
 8008636:	4798      	blx	r3
 8008638:	2000      	movs	r0, #0
 800863a:	e7e0      	b.n	80085fe <_raise_r+0x12>

0800863c <raise>:
 800863c:	4b02      	ldr	r3, [pc, #8]	; (8008648 <raise+0xc>)
 800863e:	4601      	mov	r1, r0
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	f7ff bfd3 	b.w	80085ec <_raise_r>
 8008646:	bf00      	nop
 8008648:	20000018 	.word	0x20000018

0800864c <_kill_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d07      	ldr	r5, [pc, #28]	; (800866c <_kill_r+0x20>)
 8008650:	2300      	movs	r3, #0
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	4611      	mov	r1, r2
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	f7f9 fc0b 	bl	8001e74 <_kill>
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	d102      	bne.n	8008668 <_kill_r+0x1c>
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	b103      	cbz	r3, 8008668 <_kill_r+0x1c>
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	bd38      	pop	{r3, r4, r5, pc}
 800866a:	bf00      	nop
 800866c:	200023cc 	.word	0x200023cc

08008670 <_getpid_r>:
 8008670:	f7f9 bbf8 	b.w	8001e64 <_getpid>

08008674 <__sread>:
 8008674:	b510      	push	{r4, lr}
 8008676:	460c      	mov	r4, r1
 8008678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867c:	f000 f894 	bl	80087a8 <_read_r>
 8008680:	2800      	cmp	r0, #0
 8008682:	bfab      	itete	ge
 8008684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008686:	89a3      	ldrhlt	r3, [r4, #12]
 8008688:	181b      	addge	r3, r3, r0
 800868a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800868e:	bfac      	ite	ge
 8008690:	6563      	strge	r3, [r4, #84]	; 0x54
 8008692:	81a3      	strhlt	r3, [r4, #12]
 8008694:	bd10      	pop	{r4, pc}

08008696 <__swrite>:
 8008696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869a:	461f      	mov	r7, r3
 800869c:	898b      	ldrh	r3, [r1, #12]
 800869e:	05db      	lsls	r3, r3, #23
 80086a0:	4605      	mov	r5, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	4616      	mov	r6, r2
 80086a6:	d505      	bpl.n	80086b4 <__swrite+0x1e>
 80086a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ac:	2302      	movs	r3, #2
 80086ae:	2200      	movs	r2, #0
 80086b0:	f000 f868 	bl	8008784 <_lseek_r>
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	4632      	mov	r2, r6
 80086c2:	463b      	mov	r3, r7
 80086c4:	4628      	mov	r0, r5
 80086c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ca:	f000 b817 	b.w	80086fc <_write_r>

080086ce <__sseek>:
 80086ce:	b510      	push	{r4, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d6:	f000 f855 	bl	8008784 <_lseek_r>
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	bf15      	itete	ne
 80086e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80086e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086ea:	81a3      	strheq	r3, [r4, #12]
 80086ec:	bf18      	it	ne
 80086ee:	81a3      	strhne	r3, [r4, #12]
 80086f0:	bd10      	pop	{r4, pc}

080086f2 <__sclose>:
 80086f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f6:	f000 b813 	b.w	8008720 <_close_r>
	...

080086fc <_write_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	; (800871c <_write_r+0x20>)
 8008700:	4604      	mov	r4, r0
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	2200      	movs	r2, #0
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	f7f9 fbe9 	bl	8001ee2 <_write>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_write_r+0x1e>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_write_r+0x1e>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	200023cc 	.word	0x200023cc

08008720 <_close_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d06      	ldr	r5, [pc, #24]	; (800873c <_close_r+0x1c>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f9 fbf5 	bl	8001f1a <_close>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_close_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_close_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	200023cc 	.word	0x200023cc

08008740 <_fstat_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d07      	ldr	r5, [pc, #28]	; (8008760 <_fstat_r+0x20>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	4611      	mov	r1, r2
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	f7f9 fbf0 	bl	8001f32 <_fstat>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d102      	bne.n	800875c <_fstat_r+0x1c>
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	b103      	cbz	r3, 800875c <_fstat_r+0x1c>
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	bd38      	pop	{r3, r4, r5, pc}
 800875e:	bf00      	nop
 8008760:	200023cc 	.word	0x200023cc

08008764 <_isatty_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d06      	ldr	r5, [pc, #24]	; (8008780 <_isatty_r+0x1c>)
 8008768:	2300      	movs	r3, #0
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	602b      	str	r3, [r5, #0]
 8008770:	f7f9 fbef 	bl	8001f52 <_isatty>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_isatty_r+0x1a>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_isatty_r+0x1a>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	200023cc 	.word	0x200023cc

08008784 <_lseek_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	; (80087a4 <_lseek_r+0x20>)
 8008788:	4604      	mov	r4, r0
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	2200      	movs	r2, #0
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	f7f9 fbe8 	bl	8001f68 <_lseek>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_lseek_r+0x1e>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_lseek_r+0x1e>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	200023cc 	.word	0x200023cc

080087a8 <_read_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	; (80087c8 <_read_r+0x20>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f9 fb76 	bl	8001ea8 <_read>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_read_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_read_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	200023cc 	.word	0x200023cc

080087cc <cosf>:
 80087cc:	ee10 3a10 	vmov	r3, s0
 80087d0:	b507      	push	{r0, r1, r2, lr}
 80087d2:	4a1c      	ldr	r2, [pc, #112]	; (8008844 <cosf+0x78>)
 80087d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087d8:	4293      	cmp	r3, r2
 80087da:	dc04      	bgt.n	80087e6 <cosf+0x1a>
 80087dc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8008848 <cosf+0x7c>
 80087e0:	f000 fa9a 	bl	8008d18 <__kernel_cosf>
 80087e4:	e004      	b.n	80087f0 <cosf+0x24>
 80087e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80087ea:	db04      	blt.n	80087f6 <cosf+0x2a>
 80087ec:	ee30 0a40 	vsub.f32	s0, s0, s0
 80087f0:	b003      	add	sp, #12
 80087f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80087f6:	4668      	mov	r0, sp
 80087f8:	f000 f952 	bl	8008aa0 <__ieee754_rem_pio2f>
 80087fc:	f000 0003 	and.w	r0, r0, #3
 8008800:	2801      	cmp	r0, #1
 8008802:	d007      	beq.n	8008814 <cosf+0x48>
 8008804:	2802      	cmp	r0, #2
 8008806:	d00e      	beq.n	8008826 <cosf+0x5a>
 8008808:	b9a0      	cbnz	r0, 8008834 <cosf+0x68>
 800880a:	eddd 0a01 	vldr	s1, [sp, #4]
 800880e:	ed9d 0a00 	vldr	s0, [sp]
 8008812:	e7e5      	b.n	80087e0 <cosf+0x14>
 8008814:	eddd 0a01 	vldr	s1, [sp, #4]
 8008818:	ed9d 0a00 	vldr	s0, [sp]
 800881c:	f000 fd66 	bl	80092ec <__kernel_sinf>
 8008820:	eeb1 0a40 	vneg.f32	s0, s0
 8008824:	e7e4      	b.n	80087f0 <cosf+0x24>
 8008826:	eddd 0a01 	vldr	s1, [sp, #4]
 800882a:	ed9d 0a00 	vldr	s0, [sp]
 800882e:	f000 fa73 	bl	8008d18 <__kernel_cosf>
 8008832:	e7f5      	b.n	8008820 <cosf+0x54>
 8008834:	eddd 0a01 	vldr	s1, [sp, #4]
 8008838:	ed9d 0a00 	vldr	s0, [sp]
 800883c:	2001      	movs	r0, #1
 800883e:	f000 fd55 	bl	80092ec <__kernel_sinf>
 8008842:	e7d5      	b.n	80087f0 <cosf+0x24>
 8008844:	3f490fd8 	.word	0x3f490fd8
 8008848:	00000000 	.word	0x00000000

0800884c <sinf>:
 800884c:	ee10 3a10 	vmov	r3, s0
 8008850:	b507      	push	{r0, r1, r2, lr}
 8008852:	4a1d      	ldr	r2, [pc, #116]	; (80088c8 <sinf+0x7c>)
 8008854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008858:	4293      	cmp	r3, r2
 800885a:	dc05      	bgt.n	8008868 <sinf+0x1c>
 800885c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80088cc <sinf+0x80>
 8008860:	2000      	movs	r0, #0
 8008862:	f000 fd43 	bl	80092ec <__kernel_sinf>
 8008866:	e004      	b.n	8008872 <sinf+0x26>
 8008868:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800886c:	db04      	blt.n	8008878 <sinf+0x2c>
 800886e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008872:	b003      	add	sp, #12
 8008874:	f85d fb04 	ldr.w	pc, [sp], #4
 8008878:	4668      	mov	r0, sp
 800887a:	f000 f911 	bl	8008aa0 <__ieee754_rem_pio2f>
 800887e:	f000 0003 	and.w	r0, r0, #3
 8008882:	2801      	cmp	r0, #1
 8008884:	d008      	beq.n	8008898 <sinf+0x4c>
 8008886:	2802      	cmp	r0, #2
 8008888:	d00d      	beq.n	80088a6 <sinf+0x5a>
 800888a:	b9b0      	cbnz	r0, 80088ba <sinf+0x6e>
 800888c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008890:	ed9d 0a00 	vldr	s0, [sp]
 8008894:	2001      	movs	r0, #1
 8008896:	e7e4      	b.n	8008862 <sinf+0x16>
 8008898:	eddd 0a01 	vldr	s1, [sp, #4]
 800889c:	ed9d 0a00 	vldr	s0, [sp]
 80088a0:	f000 fa3a 	bl	8008d18 <__kernel_cosf>
 80088a4:	e7e5      	b.n	8008872 <sinf+0x26>
 80088a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80088aa:	ed9d 0a00 	vldr	s0, [sp]
 80088ae:	2001      	movs	r0, #1
 80088b0:	f000 fd1c 	bl	80092ec <__kernel_sinf>
 80088b4:	eeb1 0a40 	vneg.f32	s0, s0
 80088b8:	e7db      	b.n	8008872 <sinf+0x26>
 80088ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80088be:	ed9d 0a00 	vldr	s0, [sp]
 80088c2:	f000 fa29 	bl	8008d18 <__kernel_cosf>
 80088c6:	e7f5      	b.n	80088b4 <sinf+0x68>
 80088c8:	3f490fd8 	.word	0x3f490fd8
 80088cc:	00000000 	.word	0x00000000

080088d0 <sqrt>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	ed2d 8b02 	vpush	{d8}
 80088d6:	ec55 4b10 	vmov	r4, r5, d0
 80088da:	f000 f82d 	bl	8008938 <__ieee754_sqrt>
 80088de:	4b15      	ldr	r3, [pc, #84]	; (8008934 <sqrt+0x64>)
 80088e0:	eeb0 8a40 	vmov.f32	s16, s0
 80088e4:	eef0 8a60 	vmov.f32	s17, s1
 80088e8:	f993 3000 	ldrsb.w	r3, [r3]
 80088ec:	3301      	adds	r3, #1
 80088ee:	d019      	beq.n	8008924 <sqrt+0x54>
 80088f0:	4622      	mov	r2, r4
 80088f2:	462b      	mov	r3, r5
 80088f4:	4620      	mov	r0, r4
 80088f6:	4629      	mov	r1, r5
 80088f8:	f7f8 f938 	bl	8000b6c <__aeabi_dcmpun>
 80088fc:	b990      	cbnz	r0, 8008924 <sqrt+0x54>
 80088fe:	2200      	movs	r2, #0
 8008900:	2300      	movs	r3, #0
 8008902:	4620      	mov	r0, r4
 8008904:	4629      	mov	r1, r5
 8008906:	f7f8 f909 	bl	8000b1c <__aeabi_dcmplt>
 800890a:	b158      	cbz	r0, 8008924 <sqrt+0x54>
 800890c:	f7fd fa5a 	bl	8005dc4 <__errno>
 8008910:	2321      	movs	r3, #33	; 0x21
 8008912:	6003      	str	r3, [r0, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	2300      	movs	r3, #0
 8008918:	4610      	mov	r0, r2
 800891a:	4619      	mov	r1, r3
 800891c:	f7f7 ffb6 	bl	800088c <__aeabi_ddiv>
 8008920:	ec41 0b18 	vmov	d8, r0, r1
 8008924:	eeb0 0a48 	vmov.f32	s0, s16
 8008928:	eef0 0a68 	vmov.f32	s1, s17
 800892c:	ecbd 8b02 	vpop	{d8}
 8008930:	bd38      	pop	{r3, r4, r5, pc}
 8008932:	bf00      	nop
 8008934:	200001e8 	.word	0x200001e8

08008938 <__ieee754_sqrt>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	ec55 4b10 	vmov	r4, r5, d0
 8008940:	4e56      	ldr	r6, [pc, #344]	; (8008a9c <__ieee754_sqrt+0x164>)
 8008942:	43ae      	bics	r6, r5
 8008944:	ee10 0a10 	vmov	r0, s0
 8008948:	ee10 3a10 	vmov	r3, s0
 800894c:	4629      	mov	r1, r5
 800894e:	462a      	mov	r2, r5
 8008950:	d110      	bne.n	8008974 <__ieee754_sqrt+0x3c>
 8008952:	ee10 2a10 	vmov	r2, s0
 8008956:	462b      	mov	r3, r5
 8008958:	f7f7 fe6e 	bl	8000638 <__aeabi_dmul>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4620      	mov	r0, r4
 8008962:	4629      	mov	r1, r5
 8008964:	f7f7 fcb2 	bl	80002cc <__adddf3>
 8008968:	4604      	mov	r4, r0
 800896a:	460d      	mov	r5, r1
 800896c:	ec45 4b10 	vmov	d0, r4, r5
 8008970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008974:	2d00      	cmp	r5, #0
 8008976:	dc10      	bgt.n	800899a <__ieee754_sqrt+0x62>
 8008978:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800897c:	4330      	orrs	r0, r6
 800897e:	d0f5      	beq.n	800896c <__ieee754_sqrt+0x34>
 8008980:	b15d      	cbz	r5, 800899a <__ieee754_sqrt+0x62>
 8008982:	ee10 2a10 	vmov	r2, s0
 8008986:	462b      	mov	r3, r5
 8008988:	ee10 0a10 	vmov	r0, s0
 800898c:	f7f7 fc9c 	bl	80002c8 <__aeabi_dsub>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	f7f7 ff7a 	bl	800088c <__aeabi_ddiv>
 8008998:	e7e6      	b.n	8008968 <__ieee754_sqrt+0x30>
 800899a:	1509      	asrs	r1, r1, #20
 800899c:	d076      	beq.n	8008a8c <__ieee754_sqrt+0x154>
 800899e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80089a2:	07ce      	lsls	r6, r1, #31
 80089a4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80089a8:	bf5e      	ittt	pl
 80089aa:	0fda      	lsrpl	r2, r3, #31
 80089ac:	005b      	lslpl	r3, r3, #1
 80089ae:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80089b2:	0fda      	lsrs	r2, r3, #31
 80089b4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80089b8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80089bc:	2000      	movs	r0, #0
 80089be:	106d      	asrs	r5, r5, #1
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	f04f 0e16 	mov.w	lr, #22
 80089c6:	4684      	mov	ip, r0
 80089c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089cc:	eb0c 0401 	add.w	r4, ip, r1
 80089d0:	4294      	cmp	r4, r2
 80089d2:	bfde      	ittt	le
 80089d4:	1b12      	suble	r2, r2, r4
 80089d6:	eb04 0c01 	addle.w	ip, r4, r1
 80089da:	1840      	addle	r0, r0, r1
 80089dc:	0052      	lsls	r2, r2, #1
 80089de:	f1be 0e01 	subs.w	lr, lr, #1
 80089e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80089e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80089ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089ee:	d1ed      	bne.n	80089cc <__ieee754_sqrt+0x94>
 80089f0:	4671      	mov	r1, lr
 80089f2:	2720      	movs	r7, #32
 80089f4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80089f8:	4562      	cmp	r2, ip
 80089fa:	eb04 060e 	add.w	r6, r4, lr
 80089fe:	dc02      	bgt.n	8008a06 <__ieee754_sqrt+0xce>
 8008a00:	d113      	bne.n	8008a2a <__ieee754_sqrt+0xf2>
 8008a02:	429e      	cmp	r6, r3
 8008a04:	d811      	bhi.n	8008a2a <__ieee754_sqrt+0xf2>
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	eb06 0e04 	add.w	lr, r6, r4
 8008a0c:	da43      	bge.n	8008a96 <__ieee754_sqrt+0x15e>
 8008a0e:	f1be 0f00 	cmp.w	lr, #0
 8008a12:	db40      	blt.n	8008a96 <__ieee754_sqrt+0x15e>
 8008a14:	f10c 0801 	add.w	r8, ip, #1
 8008a18:	eba2 020c 	sub.w	r2, r2, ip
 8008a1c:	429e      	cmp	r6, r3
 8008a1e:	bf88      	it	hi
 8008a20:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008a24:	1b9b      	subs	r3, r3, r6
 8008a26:	4421      	add	r1, r4
 8008a28:	46c4      	mov	ip, r8
 8008a2a:	0052      	lsls	r2, r2, #1
 8008a2c:	3f01      	subs	r7, #1
 8008a2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008a32:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008a36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a3a:	d1dd      	bne.n	80089f8 <__ieee754_sqrt+0xc0>
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	d006      	beq.n	8008a4e <__ieee754_sqrt+0x116>
 8008a40:	1c4c      	adds	r4, r1, #1
 8008a42:	bf13      	iteet	ne
 8008a44:	3101      	addne	r1, #1
 8008a46:	3001      	addeq	r0, #1
 8008a48:	4639      	moveq	r1, r7
 8008a4a:	f021 0101 	bicne.w	r1, r1, #1
 8008a4e:	1043      	asrs	r3, r0, #1
 8008a50:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008a54:	0849      	lsrs	r1, r1, #1
 8008a56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008a5a:	07c2      	lsls	r2, r0, #31
 8008a5c:	bf48      	it	mi
 8008a5e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008a62:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008a66:	460c      	mov	r4, r1
 8008a68:	463d      	mov	r5, r7
 8008a6a:	e77f      	b.n	800896c <__ieee754_sqrt+0x34>
 8008a6c:	0ada      	lsrs	r2, r3, #11
 8008a6e:	3815      	subs	r0, #21
 8008a70:	055b      	lsls	r3, r3, #21
 8008a72:	2a00      	cmp	r2, #0
 8008a74:	d0fa      	beq.n	8008a6c <__ieee754_sqrt+0x134>
 8008a76:	02d7      	lsls	r7, r2, #11
 8008a78:	d50a      	bpl.n	8008a90 <__ieee754_sqrt+0x158>
 8008a7a:	f1c1 0420 	rsb	r4, r1, #32
 8008a7e:	fa23 f404 	lsr.w	r4, r3, r4
 8008a82:	1e4d      	subs	r5, r1, #1
 8008a84:	408b      	lsls	r3, r1
 8008a86:	4322      	orrs	r2, r4
 8008a88:	1b41      	subs	r1, r0, r5
 8008a8a:	e788      	b.n	800899e <__ieee754_sqrt+0x66>
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	e7f0      	b.n	8008a72 <__ieee754_sqrt+0x13a>
 8008a90:	0052      	lsls	r2, r2, #1
 8008a92:	3101      	adds	r1, #1
 8008a94:	e7ef      	b.n	8008a76 <__ieee754_sqrt+0x13e>
 8008a96:	46e0      	mov	r8, ip
 8008a98:	e7be      	b.n	8008a18 <__ieee754_sqrt+0xe0>
 8008a9a:	bf00      	nop
 8008a9c:	7ff00000 	.word	0x7ff00000

08008aa0 <__ieee754_rem_pio2f>:
 8008aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa2:	ee10 6a10 	vmov	r6, s0
 8008aa6:	4b8e      	ldr	r3, [pc, #568]	; (8008ce0 <__ieee754_rem_pio2f+0x240>)
 8008aa8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008aac:	429d      	cmp	r5, r3
 8008aae:	b087      	sub	sp, #28
 8008ab0:	eef0 7a40 	vmov.f32	s15, s0
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	dc05      	bgt.n	8008ac4 <__ieee754_rem_pio2f+0x24>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	ed80 0a00 	vstr	s0, [r0]
 8008abe:	6043      	str	r3, [r0, #4]
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	e01a      	b.n	8008afa <__ieee754_rem_pio2f+0x5a>
 8008ac4:	4b87      	ldr	r3, [pc, #540]	; (8008ce4 <__ieee754_rem_pio2f+0x244>)
 8008ac6:	429d      	cmp	r5, r3
 8008ac8:	dc46      	bgt.n	8008b58 <__ieee754_rem_pio2f+0xb8>
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008ce8 <__ieee754_rem_pio2f+0x248>
 8008ad0:	4b86      	ldr	r3, [pc, #536]	; (8008cec <__ieee754_rem_pio2f+0x24c>)
 8008ad2:	f025 050f 	bic.w	r5, r5, #15
 8008ad6:	dd1f      	ble.n	8008b18 <__ieee754_rem_pio2f+0x78>
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008ade:	d00e      	beq.n	8008afe <__ieee754_rem_pio2f+0x5e>
 8008ae0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008cf0 <__ieee754_rem_pio2f+0x250>
 8008ae4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008ae8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008aec:	ed80 0a00 	vstr	s0, [r0]
 8008af0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008af4:	2001      	movs	r0, #1
 8008af6:	edc4 7a01 	vstr	s15, [r4, #4]
 8008afa:	b007      	add	sp, #28
 8008afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008afe:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008cf4 <__ieee754_rem_pio2f+0x254>
 8008b02:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008cf8 <__ieee754_rem_pio2f+0x258>
 8008b06:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008b0a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008b0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b12:	edc0 6a00 	vstr	s13, [r0]
 8008b16:	e7eb      	b.n	8008af0 <__ieee754_rem_pio2f+0x50>
 8008b18:	429d      	cmp	r5, r3
 8008b1a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b1e:	d00e      	beq.n	8008b3e <__ieee754_rem_pio2f+0x9e>
 8008b20:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008cf0 <__ieee754_rem_pio2f+0x250>
 8008b24:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008b28:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008b2c:	ed80 0a00 	vstr	s0, [r0]
 8008b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	edc4 7a01 	vstr	s15, [r4, #4]
 8008b3c:	e7dd      	b.n	8008afa <__ieee754_rem_pio2f+0x5a>
 8008b3e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008cf4 <__ieee754_rem_pio2f+0x254>
 8008b42:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008cf8 <__ieee754_rem_pio2f+0x258>
 8008b46:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b4a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008b4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b52:	edc0 6a00 	vstr	s13, [r0]
 8008b56:	e7eb      	b.n	8008b30 <__ieee754_rem_pio2f+0x90>
 8008b58:	4b68      	ldr	r3, [pc, #416]	; (8008cfc <__ieee754_rem_pio2f+0x25c>)
 8008b5a:	429d      	cmp	r5, r3
 8008b5c:	dc72      	bgt.n	8008c44 <__ieee754_rem_pio2f+0x1a4>
 8008b5e:	f000 fc0d 	bl	800937c <fabsf>
 8008b62:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008d00 <__ieee754_rem_pio2f+0x260>
 8008b66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008b6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b76:	ee17 0a90 	vmov	r0, s15
 8008b7a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008ce8 <__ieee754_rem_pio2f+0x248>
 8008b7e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008b82:	281f      	cmp	r0, #31
 8008b84:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008cf0 <__ieee754_rem_pio2f+0x250>
 8008b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8c:	eeb1 6a47 	vneg.f32	s12, s14
 8008b90:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008b94:	ee16 2a90 	vmov	r2, s13
 8008b98:	dc1c      	bgt.n	8008bd4 <__ieee754_rem_pio2f+0x134>
 8008b9a:	495a      	ldr	r1, [pc, #360]	; (8008d04 <__ieee754_rem_pio2f+0x264>)
 8008b9c:	1e47      	subs	r7, r0, #1
 8008b9e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008ba2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008ba6:	428b      	cmp	r3, r1
 8008ba8:	d014      	beq.n	8008bd4 <__ieee754_rem_pio2f+0x134>
 8008baa:	6022      	str	r2, [r4, #0]
 8008bac:	ed94 7a00 	vldr	s14, [r4]
 8008bb0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008bb4:	2e00      	cmp	r6, #0
 8008bb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008bba:	ed84 0a01 	vstr	s0, [r4, #4]
 8008bbe:	da9c      	bge.n	8008afa <__ieee754_rem_pio2f+0x5a>
 8008bc0:	eeb1 7a47 	vneg.f32	s14, s14
 8008bc4:	eeb1 0a40 	vneg.f32	s0, s0
 8008bc8:	ed84 7a00 	vstr	s14, [r4]
 8008bcc:	ed84 0a01 	vstr	s0, [r4, #4]
 8008bd0:	4240      	negs	r0, r0
 8008bd2:	e792      	b.n	8008afa <__ieee754_rem_pio2f+0x5a>
 8008bd4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008bd8:	15eb      	asrs	r3, r5, #23
 8008bda:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008bde:	2d08      	cmp	r5, #8
 8008be0:	dde3      	ble.n	8008baa <__ieee754_rem_pio2f+0x10a>
 8008be2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008cf4 <__ieee754_rem_pio2f+0x254>
 8008be6:	eef0 6a40 	vmov.f32	s13, s0
 8008bea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008bee:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008bf2:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008bf6:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008cf8 <__ieee754_rem_pio2f+0x258>
 8008bfa:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8008bfe:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008c02:	eef0 7a40 	vmov.f32	s15, s0
 8008c06:	ee15 2a90 	vmov	r2, s11
 8008c0a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008c0e:	1a5b      	subs	r3, r3, r1
 8008c10:	2b19      	cmp	r3, #25
 8008c12:	dc04      	bgt.n	8008c1e <__ieee754_rem_pio2f+0x17e>
 8008c14:	edc4 5a00 	vstr	s11, [r4]
 8008c18:	eeb0 0a66 	vmov.f32	s0, s13
 8008c1c:	e7c6      	b.n	8008bac <__ieee754_rem_pio2f+0x10c>
 8008c1e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008d08 <__ieee754_rem_pio2f+0x268>
 8008c22:	eeb0 0a66 	vmov.f32	s0, s13
 8008c26:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008c2a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008c2e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008d0c <__ieee754_rem_pio2f+0x26c>
 8008c32:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008c36:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008c3a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008c3e:	ed84 7a00 	vstr	s14, [r4]
 8008c42:	e7b3      	b.n	8008bac <__ieee754_rem_pio2f+0x10c>
 8008c44:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008c48:	db06      	blt.n	8008c58 <__ieee754_rem_pio2f+0x1b8>
 8008c4a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008c4e:	edc0 7a01 	vstr	s15, [r0, #4]
 8008c52:	edc0 7a00 	vstr	s15, [r0]
 8008c56:	e733      	b.n	8008ac0 <__ieee754_rem_pio2f+0x20>
 8008c58:	15ea      	asrs	r2, r5, #23
 8008c5a:	3a86      	subs	r2, #134	; 0x86
 8008c5c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008c60:	ee07 3a90 	vmov	s15, r3
 8008c64:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c68:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008d10 <__ieee754_rem_pio2f+0x270>
 8008c6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c74:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008c78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008c7c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c88:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008c8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008c90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c98:	edcd 7a05 	vstr	s15, [sp, #20]
 8008c9c:	d11e      	bne.n	8008cdc <__ieee754_rem_pio2f+0x23c>
 8008c9e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca6:	bf14      	ite	ne
 8008ca8:	2302      	movne	r3, #2
 8008caa:	2301      	moveq	r3, #1
 8008cac:	4919      	ldr	r1, [pc, #100]	; (8008d14 <__ieee754_rem_pio2f+0x274>)
 8008cae:	9101      	str	r1, [sp, #4]
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	9100      	str	r1, [sp, #0]
 8008cb4:	a803      	add	r0, sp, #12
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	f000 f88e 	bl	8008dd8 <__kernel_rem_pio2f>
 8008cbc:	2e00      	cmp	r6, #0
 8008cbe:	f6bf af1c 	bge.w	8008afa <__ieee754_rem_pio2f+0x5a>
 8008cc2:	edd4 7a00 	vldr	s15, [r4]
 8008cc6:	eef1 7a67 	vneg.f32	s15, s15
 8008cca:	edc4 7a00 	vstr	s15, [r4]
 8008cce:	edd4 7a01 	vldr	s15, [r4, #4]
 8008cd2:	eef1 7a67 	vneg.f32	s15, s15
 8008cd6:	edc4 7a01 	vstr	s15, [r4, #4]
 8008cda:	e779      	b.n	8008bd0 <__ieee754_rem_pio2f+0x130>
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e7e5      	b.n	8008cac <__ieee754_rem_pio2f+0x20c>
 8008ce0:	3f490fd8 	.word	0x3f490fd8
 8008ce4:	4016cbe3 	.word	0x4016cbe3
 8008ce8:	3fc90f80 	.word	0x3fc90f80
 8008cec:	3fc90fd0 	.word	0x3fc90fd0
 8008cf0:	37354443 	.word	0x37354443
 8008cf4:	37354400 	.word	0x37354400
 8008cf8:	2e85a308 	.word	0x2e85a308
 8008cfc:	43490f80 	.word	0x43490f80
 8008d00:	3f22f984 	.word	0x3f22f984
 8008d04:	08009914 	.word	0x08009914
 8008d08:	2e85a300 	.word	0x2e85a300
 8008d0c:	248d3132 	.word	0x248d3132
 8008d10:	43800000 	.word	0x43800000
 8008d14:	08009994 	.word	0x08009994

08008d18 <__kernel_cosf>:
 8008d18:	ee10 3a10 	vmov	r3, s0
 8008d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008d24:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008d28:	da05      	bge.n	8008d36 <__kernel_cosf+0x1e>
 8008d2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008d2e:	ee17 2a90 	vmov	r2, s15
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d03d      	beq.n	8008db2 <__kernel_cosf+0x9a>
 8008d36:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008d3a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008db8 <__kernel_cosf+0xa0>
 8008d3e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008dbc <__kernel_cosf+0xa4>
 8008d42:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008dc0 <__kernel_cosf+0xa8>
 8008d46:	4a1f      	ldr	r2, [pc, #124]	; (8008dc4 <__kernel_cosf+0xac>)
 8008d48:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008dc8 <__kernel_cosf+0xb0>
 8008d52:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008d56:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008dcc <__kernel_cosf+0xb4>
 8008d5a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008d5e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008dd0 <__kernel_cosf+0xb8>
 8008d62:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008d66:	eeb0 7a66 	vmov.f32	s14, s13
 8008d6a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008d6e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008d72:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008d76:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008d7a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008d7e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008d82:	dc04      	bgt.n	8008d8e <__kernel_cosf+0x76>
 8008d84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008d88:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008d8c:	4770      	bx	lr
 8008d8e:	4a11      	ldr	r2, [pc, #68]	; (8008dd4 <__kernel_cosf+0xbc>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bfda      	itte	le
 8008d94:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008d98:	ee06 3a90 	vmovle	s13, r3
 8008d9c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008da0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008da4:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008da8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008dac:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008db0:	4770      	bx	lr
 8008db2:	eeb0 0a46 	vmov.f32	s0, s12
 8008db6:	4770      	bx	lr
 8008db8:	ad47d74e 	.word	0xad47d74e
 8008dbc:	310f74f6 	.word	0x310f74f6
 8008dc0:	3d2aaaab 	.word	0x3d2aaaab
 8008dc4:	3e999999 	.word	0x3e999999
 8008dc8:	b493f27c 	.word	0xb493f27c
 8008dcc:	37d00d01 	.word	0x37d00d01
 8008dd0:	bab60b61 	.word	0xbab60b61
 8008dd4:	3f480000 	.word	0x3f480000

08008dd8 <__kernel_rem_pio2f>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ed2d 8b04 	vpush	{d8-d9}
 8008de0:	b0d7      	sub	sp, #348	; 0x15c
 8008de2:	4616      	mov	r6, r2
 8008de4:	4698      	mov	r8, r3
 8008de6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008de8:	4bbb      	ldr	r3, [pc, #748]	; (80090d8 <__kernel_rem_pio2f+0x300>)
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8008df0:	1d33      	adds	r3, r6, #4
 8008df2:	460d      	mov	r5, r1
 8008df4:	f108 39ff 	add.w	r9, r8, #4294967295
 8008df8:	db29      	blt.n	8008e4e <__kernel_rem_pio2f+0x76>
 8008dfa:	1ef1      	subs	r1, r6, #3
 8008dfc:	bf48      	it	mi
 8008dfe:	1d31      	addmi	r1, r6, #4
 8008e00:	10c9      	asrs	r1, r1, #3
 8008e02:	1c4c      	adds	r4, r1, #1
 8008e04:	00e3      	lsls	r3, r4, #3
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008e0a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80090e8 <__kernel_rem_pio2f+0x310>
 8008e0e:	eba1 0009 	sub.w	r0, r1, r9
 8008e12:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8008e16:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8008e1a:	eb07 0c09 	add.w	ip, r7, r9
 8008e1e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8008e22:	2300      	movs	r3, #0
 8008e24:	4563      	cmp	r3, ip
 8008e26:	dd14      	ble.n	8008e52 <__kernel_rem_pio2f+0x7a>
 8008e28:	ab1a      	add	r3, sp, #104	; 0x68
 8008e2a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8008e2e:	46cc      	mov	ip, r9
 8008e30:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8008e34:	f1c8 0b01 	rsb	fp, r8, #1
 8008e38:	eb0b 020c 	add.w	r2, fp, ip
 8008e3c:	4297      	cmp	r7, r2
 8008e3e:	db27      	blt.n	8008e90 <__kernel_rem_pio2f+0xb8>
 8008e40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008e44:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80090e8 <__kernel_rem_pio2f+0x310>
 8008e48:	4618      	mov	r0, r3
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	e016      	b.n	8008e7c <__kernel_rem_pio2f+0xa4>
 8008e4e:	2100      	movs	r1, #0
 8008e50:	e7d7      	b.n	8008e02 <__kernel_rem_pio2f+0x2a>
 8008e52:	42d8      	cmn	r0, r3
 8008e54:	bf5d      	ittte	pl
 8008e56:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8008e5a:	ee07 2a90 	vmovpl	s15, r2
 8008e5e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008e62:	eef0 7a47 	vmovmi.f32	s15, s14
 8008e66:	ecea 7a01 	vstmia	sl!, {s15}
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	e7da      	b.n	8008e24 <__kernel_rem_pio2f+0x4c>
 8008e6e:	ecfe 6a01 	vldmia	lr!, {s13}
 8008e72:	ed90 7a00 	vldr	s14, [r0]
 8008e76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008e7a:	3201      	adds	r2, #1
 8008e7c:	454a      	cmp	r2, r9
 8008e7e:	f1a0 0004 	sub.w	r0, r0, #4
 8008e82:	ddf4      	ble.n	8008e6e <__kernel_rem_pio2f+0x96>
 8008e84:	ecea 7a01 	vstmia	sl!, {s15}
 8008e88:	3304      	adds	r3, #4
 8008e8a:	f10c 0c01 	add.w	ip, ip, #1
 8008e8e:	e7d3      	b.n	8008e38 <__kernel_rem_pio2f+0x60>
 8008e90:	ab06      	add	r3, sp, #24
 8008e92:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008e9a:	eddf 8a92 	vldr	s17, [pc, #584]	; 80090e4 <__kernel_rem_pio2f+0x30c>
 8008e9e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80090e0 <__kernel_rem_pio2f+0x308>
 8008ea2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008ea6:	9303      	str	r3, [sp, #12]
 8008ea8:	46ba      	mov	sl, r7
 8008eaa:	ab56      	add	r3, sp, #344	; 0x158
 8008eac:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008eb0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008eb4:	ab06      	add	r3, sp, #24
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	4652      	mov	r2, sl
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	dc51      	bgt.n	8008f62 <__kernel_rem_pio2f+0x18a>
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	9305      	str	r3, [sp, #20]
 8008ec2:	f000 faa5 	bl	8009410 <scalbnf>
 8008ec6:	eeb0 8a40 	vmov.f32	s16, s0
 8008eca:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008ece:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008ed2:	f000 fa5b 	bl	800938c <floorf>
 8008ed6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008eda:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008ede:	2c00      	cmp	r4, #0
 8008ee0:	9b05      	ldr	r3, [sp, #20]
 8008ee2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008ee6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008eea:	edcd 7a00 	vstr	s15, [sp]
 8008eee:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008ef2:	dd4b      	ble.n	8008f8c <__kernel_rem_pio2f+0x1b4>
 8008ef4:	f10a 3cff 	add.w	ip, sl, #4294967295
 8008ef8:	aa06      	add	r2, sp, #24
 8008efa:	f1c4 0e08 	rsb	lr, r4, #8
 8008efe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008f02:	ee17 1a90 	vmov	r1, s15
 8008f06:	fa42 f00e 	asr.w	r0, r2, lr
 8008f0a:	4401      	add	r1, r0
 8008f0c:	9100      	str	r1, [sp, #0]
 8008f0e:	fa00 f00e 	lsl.w	r0, r0, lr
 8008f12:	a906      	add	r1, sp, #24
 8008f14:	1a12      	subs	r2, r2, r0
 8008f16:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8008f1a:	f1c4 0007 	rsb	r0, r4, #7
 8008f1e:	fa42 fb00 	asr.w	fp, r2, r0
 8008f22:	f1bb 0f00 	cmp.w	fp, #0
 8008f26:	dd43      	ble.n	8008fb0 <__kernel_rem_pio2f+0x1d8>
 8008f28:	9a00      	ldr	r2, [sp, #0]
 8008f2a:	f04f 0e00 	mov.w	lr, #0
 8008f2e:	3201      	adds	r2, #1
 8008f30:	9200      	str	r2, [sp, #0]
 8008f32:	4670      	mov	r0, lr
 8008f34:	45f2      	cmp	sl, lr
 8008f36:	dc6c      	bgt.n	8009012 <__kernel_rem_pio2f+0x23a>
 8008f38:	2c00      	cmp	r4, #0
 8008f3a:	dd04      	ble.n	8008f46 <__kernel_rem_pio2f+0x16e>
 8008f3c:	2c01      	cmp	r4, #1
 8008f3e:	d079      	beq.n	8009034 <__kernel_rem_pio2f+0x25c>
 8008f40:	2c02      	cmp	r4, #2
 8008f42:	f000 8082 	beq.w	800904a <__kernel_rem_pio2f+0x272>
 8008f46:	f1bb 0f02 	cmp.w	fp, #2
 8008f4a:	d131      	bne.n	8008fb0 <__kernel_rem_pio2f+0x1d8>
 8008f4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008f50:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008f54:	b360      	cbz	r0, 8008fb0 <__kernel_rem_pio2f+0x1d8>
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 fa5a 	bl	8009410 <scalbnf>
 8008f5c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008f60:	e026      	b.n	8008fb0 <__kernel_rem_pio2f+0x1d8>
 8008f62:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008f66:	3a01      	subs	r2, #1
 8008f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f6c:	a942      	add	r1, sp, #264	; 0x108
 8008f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f72:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8008f76:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008f7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008f7e:	eca0 0a01 	vstmia	r0!, {s0}
 8008f82:	ed9c 0a00 	vldr	s0, [ip]
 8008f86:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008f8a:	e796      	b.n	8008eba <__kernel_rem_pio2f+0xe2>
 8008f8c:	d107      	bne.n	8008f9e <__kernel_rem_pio2f+0x1c6>
 8008f8e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8008f92:	a906      	add	r1, sp, #24
 8008f94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008f98:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8008f9c:	e7c1      	b.n	8008f22 <__kernel_rem_pio2f+0x14a>
 8008f9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008fa2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008faa:	da2f      	bge.n	800900c <__kernel_rem_pio2f+0x234>
 8008fac:	f04f 0b00 	mov.w	fp, #0
 8008fb0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb8:	f040 8098 	bne.w	80090ec <__kernel_rem_pio2f+0x314>
 8008fbc:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fc0:	469c      	mov	ip, r3
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	45bc      	cmp	ip, r7
 8008fc6:	da48      	bge.n	800905a <__kernel_rem_pio2f+0x282>
 8008fc8:	2a00      	cmp	r2, #0
 8008fca:	d05f      	beq.n	800908c <__kernel_rem_pio2f+0x2b4>
 8008fcc:	aa06      	add	r2, sp, #24
 8008fce:	3c08      	subs	r4, #8
 8008fd0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fd4:	2900      	cmp	r1, #0
 8008fd6:	d07d      	beq.n	80090d4 <__kernel_rem_pio2f+0x2fc>
 8008fd8:	4620      	mov	r0, r4
 8008fda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	f000 fa16 	bl	8009410 <scalbnf>
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80090e4 <__kernel_rem_pio2f+0x30c>
 8008fea:	4619      	mov	r1, r3
 8008fec:	2900      	cmp	r1, #0
 8008fee:	f280 80af 	bge.w	8009150 <__kernel_rem_pio2f+0x378>
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	2400      	movs	r4, #0
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f2c0 80d0 	blt.w	800919c <__kernel_rem_pio2f+0x3c4>
 8008ffc:	a942      	add	r1, sp, #264	; 0x108
 8008ffe:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8009002:	4a36      	ldr	r2, [pc, #216]	; (80090dc <__kernel_rem_pio2f+0x304>)
 8009004:	eddf 7a38 	vldr	s15, [pc, #224]	; 80090e8 <__kernel_rem_pio2f+0x310>
 8009008:	2100      	movs	r1, #0
 800900a:	e0bb      	b.n	8009184 <__kernel_rem_pio2f+0x3ac>
 800900c:	f04f 0b02 	mov.w	fp, #2
 8009010:	e78a      	b.n	8008f28 <__kernel_rem_pio2f+0x150>
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	b948      	cbnz	r0, 800902a <__kernel_rem_pio2f+0x252>
 8009016:	b11a      	cbz	r2, 8009020 <__kernel_rem_pio2f+0x248>
 8009018:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	2201      	movs	r2, #1
 8009020:	f10e 0e01 	add.w	lr, lr, #1
 8009024:	3304      	adds	r3, #4
 8009026:	4610      	mov	r0, r2
 8009028:	e784      	b.n	8008f34 <__kernel_rem_pio2f+0x15c>
 800902a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	4602      	mov	r2, r0
 8009032:	e7f5      	b.n	8009020 <__kernel_rem_pio2f+0x248>
 8009034:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009038:	ab06      	add	r3, sp, #24
 800903a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800903e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009042:	aa06      	add	r2, sp, #24
 8009044:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8009048:	e77d      	b.n	8008f46 <__kernel_rem_pio2f+0x16e>
 800904a:	f10a 3cff 	add.w	ip, sl, #4294967295
 800904e:	ab06      	add	r3, sp, #24
 8009050:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009058:	e7f3      	b.n	8009042 <__kernel_rem_pio2f+0x26a>
 800905a:	a906      	add	r1, sp, #24
 800905c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8009060:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009064:	4302      	orrs	r2, r0
 8009066:	e7ad      	b.n	8008fc4 <__kernel_rem_pio2f+0x1ec>
 8009068:	3001      	adds	r0, #1
 800906a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800906e:	2a00      	cmp	r2, #0
 8009070:	d0fa      	beq.n	8009068 <__kernel_rem_pio2f+0x290>
 8009072:	a91a      	add	r1, sp, #104	; 0x68
 8009074:	eb0a 0208 	add.w	r2, sl, r8
 8009078:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800907c:	f10a 0301 	add.w	r3, sl, #1
 8009080:	eb0a 0100 	add.w	r1, sl, r0
 8009084:	4299      	cmp	r1, r3
 8009086:	da04      	bge.n	8009092 <__kernel_rem_pio2f+0x2ba>
 8009088:	468a      	mov	sl, r1
 800908a:	e70e      	b.n	8008eaa <__kernel_rem_pio2f+0xd2>
 800908c:	9b04      	ldr	r3, [sp, #16]
 800908e:	2001      	movs	r0, #1
 8009090:	e7eb      	b.n	800906a <__kernel_rem_pio2f+0x292>
 8009092:	9803      	ldr	r0, [sp, #12]
 8009094:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009098:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800909c:	9000      	str	r0, [sp, #0]
 800909e:	ee07 0a90 	vmov	s15, r0
 80090a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090a6:	2000      	movs	r0, #0
 80090a8:	ece2 7a01 	vstmia	r2!, {s15}
 80090ac:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80090e8 <__kernel_rem_pio2f+0x310>
 80090b0:	4696      	mov	lr, r2
 80090b2:	4548      	cmp	r0, r9
 80090b4:	dd06      	ble.n	80090c4 <__kernel_rem_pio2f+0x2ec>
 80090b6:	a842      	add	r0, sp, #264	; 0x108
 80090b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80090bc:	edc0 7a00 	vstr	s15, [r0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	e7df      	b.n	8009084 <__kernel_rem_pio2f+0x2ac>
 80090c4:	ecfc 6a01 	vldmia	ip!, {s13}
 80090c8:	ed3e 7a01 	vldmdb	lr!, {s14}
 80090cc:	3001      	adds	r0, #1
 80090ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80090d2:	e7ee      	b.n	80090b2 <__kernel_rem_pio2f+0x2da>
 80090d4:	3b01      	subs	r3, #1
 80090d6:	e779      	b.n	8008fcc <__kernel_rem_pio2f+0x1f4>
 80090d8:	08009cd8 	.word	0x08009cd8
 80090dc:	08009cac 	.word	0x08009cac
 80090e0:	43800000 	.word	0x43800000
 80090e4:	3b800000 	.word	0x3b800000
 80090e8:	00000000 	.word	0x00000000
 80090ec:	9b02      	ldr	r3, [sp, #8]
 80090ee:	eeb0 0a48 	vmov.f32	s0, s16
 80090f2:	1b98      	subs	r0, r3, r6
 80090f4:	f000 f98c 	bl	8009410 <scalbnf>
 80090f8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80090e0 <__kernel_rem_pio2f+0x308>
 80090fc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009104:	db1b      	blt.n	800913e <__kernel_rem_pio2f+0x366>
 8009106:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80090e4 <__kernel_rem_pio2f+0x30c>
 800910a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800910e:	aa06      	add	r2, sp, #24
 8009110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009114:	a906      	add	r1, sp, #24
 8009116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800911a:	3408      	adds	r4, #8
 800911c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009124:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009128:	ee10 3a10 	vmov	r3, s0
 800912c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8009130:	ee17 2a90 	vmov	r2, s15
 8009134:	f10a 0301 	add.w	r3, sl, #1
 8009138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800913c:	e74c      	b.n	8008fd8 <__kernel_rem_pio2f+0x200>
 800913e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009142:	aa06      	add	r2, sp, #24
 8009144:	ee10 3a10 	vmov	r3, s0
 8009148:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800914c:	4653      	mov	r3, sl
 800914e:	e743      	b.n	8008fd8 <__kernel_rem_pio2f+0x200>
 8009150:	aa42      	add	r2, sp, #264	; 0x108
 8009152:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8009156:	aa06      	add	r2, sp, #24
 8009158:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800915c:	9201      	str	r2, [sp, #4]
 800915e:	ee07 2a90 	vmov	s15, r2
 8009162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009166:	3901      	subs	r1, #1
 8009168:	ee67 7a80 	vmul.f32	s15, s15, s0
 800916c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009170:	edc0 7a00 	vstr	s15, [r0]
 8009174:	e73a      	b.n	8008fec <__kernel_rem_pio2f+0x214>
 8009176:	ecf2 6a01 	vldmia	r2!, {s13}
 800917a:	ecb6 7a01 	vldmia	r6!, {s14}
 800917e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009182:	3101      	adds	r1, #1
 8009184:	42b9      	cmp	r1, r7
 8009186:	dc01      	bgt.n	800918c <__kernel_rem_pio2f+0x3b4>
 8009188:	428c      	cmp	r4, r1
 800918a:	daf4      	bge.n	8009176 <__kernel_rem_pio2f+0x39e>
 800918c:	aa56      	add	r2, sp, #344	; 0x158
 800918e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8009192:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009196:	3801      	subs	r0, #1
 8009198:	3401      	adds	r4, #1
 800919a:	e72c      	b.n	8008ff6 <__kernel_rem_pio2f+0x21e>
 800919c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800919e:	2a02      	cmp	r2, #2
 80091a0:	dc0a      	bgt.n	80091b8 <__kernel_rem_pio2f+0x3e0>
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	dc61      	bgt.n	800926a <__kernel_rem_pio2f+0x492>
 80091a6:	d03c      	beq.n	8009222 <__kernel_rem_pio2f+0x44a>
 80091a8:	9b00      	ldr	r3, [sp, #0]
 80091aa:	f003 0007 	and.w	r0, r3, #7
 80091ae:	b057      	add	sp, #348	; 0x15c
 80091b0:	ecbd 8b04 	vpop	{d8-d9}
 80091b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80091ba:	2a03      	cmp	r2, #3
 80091bc:	d1f4      	bne.n	80091a8 <__kernel_rem_pio2f+0x3d0>
 80091be:	aa2e      	add	r2, sp, #184	; 0xb8
 80091c0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80091c4:	4608      	mov	r0, r1
 80091c6:	461c      	mov	r4, r3
 80091c8:	2c00      	cmp	r4, #0
 80091ca:	f1a0 0004 	sub.w	r0, r0, #4
 80091ce:	dc59      	bgt.n	8009284 <__kernel_rem_pio2f+0x4ac>
 80091d0:	4618      	mov	r0, r3
 80091d2:	2801      	cmp	r0, #1
 80091d4:	f1a1 0104 	sub.w	r1, r1, #4
 80091d8:	dc64      	bgt.n	80092a4 <__kernel_rem_pio2f+0x4cc>
 80091da:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80090e8 <__kernel_rem_pio2f+0x310>
 80091de:	2b01      	cmp	r3, #1
 80091e0:	dc70      	bgt.n	80092c4 <__kernel_rem_pio2f+0x4ec>
 80091e2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80091e6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80091ea:	f1bb 0f00 	cmp.w	fp, #0
 80091ee:	d172      	bne.n	80092d6 <__kernel_rem_pio2f+0x4fe>
 80091f0:	edc5 6a00 	vstr	s13, [r5]
 80091f4:	ed85 7a01 	vstr	s14, [r5, #4]
 80091f8:	edc5 7a02 	vstr	s15, [r5, #8]
 80091fc:	e7d4      	b.n	80091a8 <__kernel_rem_pio2f+0x3d0>
 80091fe:	aa2e      	add	r2, sp, #184	; 0xb8
 8009200:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009204:	ed91 7a00 	vldr	s14, [r1]
 8009208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800920c:	3b01      	subs	r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	daf5      	bge.n	80091fe <__kernel_rem_pio2f+0x426>
 8009212:	f1bb 0f00 	cmp.w	fp, #0
 8009216:	d001      	beq.n	800921c <__kernel_rem_pio2f+0x444>
 8009218:	eef1 7a67 	vneg.f32	s15, s15
 800921c:	edc5 7a00 	vstr	s15, [r5]
 8009220:	e7c2      	b.n	80091a8 <__kernel_rem_pio2f+0x3d0>
 8009222:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80090e8 <__kernel_rem_pio2f+0x310>
 8009226:	e7f2      	b.n	800920e <__kernel_rem_pio2f+0x436>
 8009228:	aa2e      	add	r2, sp, #184	; 0xb8
 800922a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800922e:	edd0 7a00 	vldr	s15, [r0]
 8009232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009236:	3901      	subs	r1, #1
 8009238:	2900      	cmp	r1, #0
 800923a:	daf5      	bge.n	8009228 <__kernel_rem_pio2f+0x450>
 800923c:	f1bb 0f00 	cmp.w	fp, #0
 8009240:	d017      	beq.n	8009272 <__kernel_rem_pio2f+0x49a>
 8009242:	eef1 7a47 	vneg.f32	s15, s14
 8009246:	edc5 7a00 	vstr	s15, [r5]
 800924a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800924e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009252:	a82f      	add	r0, sp, #188	; 0xbc
 8009254:	2101      	movs	r1, #1
 8009256:	428b      	cmp	r3, r1
 8009258:	da0e      	bge.n	8009278 <__kernel_rem_pio2f+0x4a0>
 800925a:	f1bb 0f00 	cmp.w	fp, #0
 800925e:	d001      	beq.n	8009264 <__kernel_rem_pio2f+0x48c>
 8009260:	eef1 7a67 	vneg.f32	s15, s15
 8009264:	edc5 7a01 	vstr	s15, [r5, #4]
 8009268:	e79e      	b.n	80091a8 <__kernel_rem_pio2f+0x3d0>
 800926a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80090e8 <__kernel_rem_pio2f+0x310>
 800926e:	4619      	mov	r1, r3
 8009270:	e7e2      	b.n	8009238 <__kernel_rem_pio2f+0x460>
 8009272:	eef0 7a47 	vmov.f32	s15, s14
 8009276:	e7e6      	b.n	8009246 <__kernel_rem_pio2f+0x46e>
 8009278:	ecb0 7a01 	vldmia	r0!, {s14}
 800927c:	3101      	adds	r1, #1
 800927e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009282:	e7e8      	b.n	8009256 <__kernel_rem_pio2f+0x47e>
 8009284:	edd0 7a00 	vldr	s15, [r0]
 8009288:	edd0 6a01 	vldr	s13, [r0, #4]
 800928c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009290:	3c01      	subs	r4, #1
 8009292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009296:	ed80 7a00 	vstr	s14, [r0]
 800929a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929e:	edc0 7a01 	vstr	s15, [r0, #4]
 80092a2:	e791      	b.n	80091c8 <__kernel_rem_pio2f+0x3f0>
 80092a4:	edd1 7a00 	vldr	s15, [r1]
 80092a8:	edd1 6a01 	vldr	s13, [r1, #4]
 80092ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80092b0:	3801      	subs	r0, #1
 80092b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092b6:	ed81 7a00 	vstr	s14, [r1]
 80092ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092be:	edc1 7a01 	vstr	s15, [r1, #4]
 80092c2:	e786      	b.n	80091d2 <__kernel_rem_pio2f+0x3fa>
 80092c4:	aa2e      	add	r2, sp, #184	; 0xb8
 80092c6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80092ca:	ed91 7a00 	vldr	s14, [r1]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092d4:	e783      	b.n	80091de <__kernel_rem_pio2f+0x406>
 80092d6:	eef1 6a66 	vneg.f32	s13, s13
 80092da:	eeb1 7a47 	vneg.f32	s14, s14
 80092de:	edc5 6a00 	vstr	s13, [r5]
 80092e2:	ed85 7a01 	vstr	s14, [r5, #4]
 80092e6:	eef1 7a67 	vneg.f32	s15, s15
 80092ea:	e785      	b.n	80091f8 <__kernel_rem_pio2f+0x420>

080092ec <__kernel_sinf>:
 80092ec:	ee10 3a10 	vmov	r3, s0
 80092f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80092f8:	da04      	bge.n	8009304 <__kernel_sinf+0x18>
 80092fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80092fe:	ee17 3a90 	vmov	r3, s15
 8009302:	b35b      	cbz	r3, 800935c <__kernel_sinf+0x70>
 8009304:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009308:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009360 <__kernel_sinf+0x74>
 800930c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009364 <__kernel_sinf+0x78>
 8009310:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009314:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009368 <__kernel_sinf+0x7c>
 8009318:	eee6 7a07 	vfma.f32	s15, s12, s14
 800931c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800936c <__kernel_sinf+0x80>
 8009320:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009324:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009370 <__kernel_sinf+0x84>
 8009328:	ee60 6a07 	vmul.f32	s13, s0, s14
 800932c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009330:	b930      	cbnz	r0, 8009340 <__kernel_sinf+0x54>
 8009332:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009374 <__kernel_sinf+0x88>
 8009336:	eea7 6a27 	vfma.f32	s12, s14, s15
 800933a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800933e:	4770      	bx	lr
 8009340:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009344:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009348:	eee0 7a86 	vfma.f32	s15, s1, s12
 800934c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009350:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009378 <__kernel_sinf+0x8c>
 8009354:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009358:	ee30 0a60 	vsub.f32	s0, s0, s1
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	2f2ec9d3 	.word	0x2f2ec9d3
 8009364:	b2d72f34 	.word	0xb2d72f34
 8009368:	3638ef1b 	.word	0x3638ef1b
 800936c:	b9500d01 	.word	0xb9500d01
 8009370:	3c088889 	.word	0x3c088889
 8009374:	be2aaaab 	.word	0xbe2aaaab
 8009378:	3e2aaaab 	.word	0x3e2aaaab

0800937c <fabsf>:
 800937c:	ee10 3a10 	vmov	r3, s0
 8009380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009384:	ee00 3a10 	vmov	s0, r3
 8009388:	4770      	bx	lr
	...

0800938c <floorf>:
 800938c:	ee10 3a10 	vmov	r3, s0
 8009390:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009394:	3a7f      	subs	r2, #127	; 0x7f
 8009396:	2a16      	cmp	r2, #22
 8009398:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800939c:	dc2a      	bgt.n	80093f4 <floorf+0x68>
 800939e:	2a00      	cmp	r2, #0
 80093a0:	da11      	bge.n	80093c6 <floorf+0x3a>
 80093a2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009404 <floorf+0x78>
 80093a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80093ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b2:	dd05      	ble.n	80093c0 <floorf+0x34>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	da23      	bge.n	8009400 <floorf+0x74>
 80093b8:	4a13      	ldr	r2, [pc, #76]	; (8009408 <floorf+0x7c>)
 80093ba:	2900      	cmp	r1, #0
 80093bc:	bf18      	it	ne
 80093be:	4613      	movne	r3, r2
 80093c0:	ee00 3a10 	vmov	s0, r3
 80093c4:	4770      	bx	lr
 80093c6:	4911      	ldr	r1, [pc, #68]	; (800940c <floorf+0x80>)
 80093c8:	4111      	asrs	r1, r2
 80093ca:	420b      	tst	r3, r1
 80093cc:	d0fa      	beq.n	80093c4 <floorf+0x38>
 80093ce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009404 <floorf+0x78>
 80093d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80093da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093de:	ddef      	ble.n	80093c0 <floorf+0x34>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bfbe      	ittt	lt
 80093e4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80093e8:	fa40 f202 	asrlt.w	r2, r0, r2
 80093ec:	189b      	addlt	r3, r3, r2
 80093ee:	ea23 0301 	bic.w	r3, r3, r1
 80093f2:	e7e5      	b.n	80093c0 <floorf+0x34>
 80093f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80093f8:	d3e4      	bcc.n	80093c4 <floorf+0x38>
 80093fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80093fe:	4770      	bx	lr
 8009400:	2300      	movs	r3, #0
 8009402:	e7dd      	b.n	80093c0 <floorf+0x34>
 8009404:	7149f2ca 	.word	0x7149f2ca
 8009408:	bf800000 	.word	0xbf800000
 800940c:	007fffff 	.word	0x007fffff

08009410 <scalbnf>:
 8009410:	ee10 3a10 	vmov	r3, s0
 8009414:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009418:	d025      	beq.n	8009466 <scalbnf+0x56>
 800941a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800941e:	d302      	bcc.n	8009426 <scalbnf+0x16>
 8009420:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009424:	4770      	bx	lr
 8009426:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800942a:	d122      	bne.n	8009472 <scalbnf+0x62>
 800942c:	4b2a      	ldr	r3, [pc, #168]	; (80094d8 <scalbnf+0xc8>)
 800942e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80094dc <scalbnf+0xcc>
 8009432:	4298      	cmp	r0, r3
 8009434:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009438:	db16      	blt.n	8009468 <scalbnf+0x58>
 800943a:	ee10 3a10 	vmov	r3, s0
 800943e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009442:	3a19      	subs	r2, #25
 8009444:	4402      	add	r2, r0
 8009446:	2afe      	cmp	r2, #254	; 0xfe
 8009448:	dd15      	ble.n	8009476 <scalbnf+0x66>
 800944a:	ee10 3a10 	vmov	r3, s0
 800944e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80094e0 <scalbnf+0xd0>
 8009452:	eddf 6a24 	vldr	s13, [pc, #144]	; 80094e4 <scalbnf+0xd4>
 8009456:	2b00      	cmp	r3, #0
 8009458:	eeb0 7a67 	vmov.f32	s14, s15
 800945c:	bfb8      	it	lt
 800945e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009462:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009466:	4770      	bx	lr
 8009468:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80094e8 <scalbnf+0xd8>
 800946c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009470:	4770      	bx	lr
 8009472:	0dd2      	lsrs	r2, r2, #23
 8009474:	e7e6      	b.n	8009444 <scalbnf+0x34>
 8009476:	2a00      	cmp	r2, #0
 8009478:	dd06      	ble.n	8009488 <scalbnf+0x78>
 800947a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800947e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009482:	ee00 3a10 	vmov	s0, r3
 8009486:	4770      	bx	lr
 8009488:	f112 0f16 	cmn.w	r2, #22
 800948c:	da1a      	bge.n	80094c4 <scalbnf+0xb4>
 800948e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009492:	4298      	cmp	r0, r3
 8009494:	ee10 3a10 	vmov	r3, s0
 8009498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800949c:	dd0a      	ble.n	80094b4 <scalbnf+0xa4>
 800949e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80094e0 <scalbnf+0xd0>
 80094a2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80094e4 <scalbnf+0xd4>
 80094a6:	eef0 7a40 	vmov.f32	s15, s0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	bf18      	it	ne
 80094ae:	eeb0 0a47 	vmovne.f32	s0, s14
 80094b2:	e7db      	b.n	800946c <scalbnf+0x5c>
 80094b4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80094e8 <scalbnf+0xd8>
 80094b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80094ec <scalbnf+0xdc>
 80094bc:	eef0 7a40 	vmov.f32	s15, s0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	e7f3      	b.n	80094ac <scalbnf+0x9c>
 80094c4:	3219      	adds	r2, #25
 80094c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80094ce:	eddf 7a08 	vldr	s15, [pc, #32]	; 80094f0 <scalbnf+0xe0>
 80094d2:	ee07 3a10 	vmov	s14, r3
 80094d6:	e7c4      	b.n	8009462 <scalbnf+0x52>
 80094d8:	ffff3cb0 	.word	0xffff3cb0
 80094dc:	4c000000 	.word	0x4c000000
 80094e0:	7149f2ca 	.word	0x7149f2ca
 80094e4:	f149f2ca 	.word	0xf149f2ca
 80094e8:	0da24260 	.word	0x0da24260
 80094ec:	8da24260 	.word	0x8da24260
 80094f0:	33000000 	.word	0x33000000

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
