
PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007fa8  08007fa8  00017fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b4  080083b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080083b4  080083b4  000183b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083bc  080083bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080083c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001dc  080085a0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  080085a0  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118a0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002779  00000000  00000000  00031aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00034228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  000351c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024966  00000000  00000000  00036070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001191d  00000000  00000000  0005a9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dff86  00000000  00000000  0006c2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c279  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000518c  00000000  00000000  0014c2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f8c 	.word	0x08007f8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007f8c 	.word	0x08007f8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b092      	sub	sp, #72	; 0x48
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Cope string into buffer (Buffer is integer buffer therefore (char*))
  uint8_t buf[30];
  strcpy((char*)buf, "Hello!\r\n");
 8000ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <main+0x44>)
 8000eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eee:	c303      	stmia	r3!, {r0, r1}
 8000ef0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f000 fdfd 	bl	8001af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f81b 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 fa05 	bl	8001308 <MX_GPIO_Init>
  MX_DMA_Init();
 8000efe:	f000 f9c5 	bl	800128c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f02:	f000 f999 	bl	8001238 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f06:	f000 f885 	bl	8001014 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000f0a:	f000 f94b 	bl	80011a4 <MX_TIM10_Init>
  MX_DAC_Init();
 8000f0e:	f000 f8d3 	bl	80010b8 <MX_DAC_Init>
  MX_TIM2_Init();
 8000f12:	f000 f8fb 	bl	800110c <MX_TIM2_Init>

  // DAC DMA
//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)&adcBuf[0], sizeof(adcReading0), DAC_ALIGN_12B_R);//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)testArray, sizeof(testArray)/sizeof(uint16_t), DAC_ALIGN_12B_R);

  // Timer interrupt start
  HAL_TIM_Base_Start_IT(&htim10);
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <main+0x48>)
 8000f18:	f002 ff78 	bl	8003e0c <HAL_TIM_Base_Start_IT>

 // Timer 2 start - DAC starts on every timer 2 update!
  HAL_TIM_Base_Start(&htim2);
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <main+0x4c>)
 8000f1e:	f002 ff0d 	bl	8003d3c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <main+0x42>
 8000f24:	08007fa8 	.word	0x08007fa8
 8000f28:	20000208 	.word	0x20000208
 8000f2c:	200003e0 	.word	0x200003e0

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	2234      	movs	r2, #52	; 0x34
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 fb4a 	bl	80055d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <SystemClock_Config+0xdc>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a2b      	ldr	r2, [pc, #172]	; (800100c <SystemClock_Config+0xdc>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <SystemClock_Config+0xdc>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <SystemClock_Config+0xe0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a25      	ldr	r2, [pc, #148]	; (8001010 <SystemClock_Config+0xe0>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <SystemClock_Config+0xe0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fa4:	23b4      	movs	r3, #180	; 0xb4
 8000fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fbd1 	bl	8003760 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fc4:	f000 fa5c 	bl	8001480 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc8:	f002 f904 	bl	80031d4 <HAL_PWREx_EnableOverDrive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fd2:	f000 fa55 	bl	8001480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 f93d 	bl	8003274 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001000:	f000 fa3e 	bl	8001480 <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3750      	adds	r7, #80	; 0x50
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_ADC1_Init+0x98>)
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <MX_ADC1_Init+0x9c>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <MX_ADC1_Init+0x98>)
 800102e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001032:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_ADC1_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_ADC1_Init+0x98>)
 8001042:	2201      	movs	r2, #1
 8001044:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_ADC1_Init+0x98>)
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <MX_ADC1_Init+0xa0>)
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_ADC1_Init+0x98>)
 8001062:	2201      	movs	r2, #1
 8001064:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_ADC1_Init+0x98>)
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_ADC1_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_ADC1_Init+0x98>)
 8001076:	f000 fdad 	bl	8001bd4 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 f9fe 	bl	8001480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_ADC1_Init+0x98>)
 8001096:	f000 ff4b 	bl	8001f30 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a0:	f000 f9ee 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200002c4 	.word	0x200002c4
 80010b0:	40012000 	.word	0x40012000
 80010b4:	0f000001 	.word	0x0f000001

080010b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_DAC_Init+0x4c>)
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <MX_DAC_Init+0x50>)
 80010ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_DAC_Init+0x4c>)
 80010ce:	f001 fa6e 	bl	80025ae <HAL_DAC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010d8:	f000 f9d2 	bl	8001480 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80010dc:	2324      	movs	r3, #36	; 0x24
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_DAC_Init+0x4c>)
 80010ec:	f001 faf8 	bl	80026e0 <HAL_DAC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010f6:	f000 f9c3 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000036c 	.word	0x2000036c
 8001108:	40007400 	.word	0x40007400

0800110c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_TIM2_Init+0x94>)
 800112a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_TIM2_Init+0x94>)
 8001132:	2259      	movs	r2, #89	; 0x59
 8001134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_TIM2_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_TIM2_Init+0x94>)
 800113e:	2209      	movs	r2, #9
 8001140:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_TIM2_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_TIM2_Init+0x94>)
 8001150:	f002 fda4 	bl	8003c9c <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800115a:	f000 f991 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	4619      	mov	r1, r3
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_TIM2_Init+0x94>)
 800116c:	f003 f878 	bl	8004260 <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001176:	f000 f983 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800117a:	2320      	movs	r3, #32
 800117c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_TIM2_Init+0x94>)
 8001188:	f003 fc40 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001192:	f000 f975 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200003e0 	.word	0x200003e0

080011a4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_TIM10_Init+0x8c>)
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <MX_TIM10_Init+0x90>)
 80011c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_TIM10_Init+0x8c>)
 80011c4:	2263      	movs	r2, #99	; 0x63
 80011c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_TIM10_Init+0x8c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 180-1;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_TIM10_Init+0x8c>)
 80011d0:	22b3      	movs	r2, #179	; 0xb3
 80011d2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_TIM10_Init+0x8c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM10_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <MX_TIM10_Init+0x8c>)
 80011e2:	f002 fd5b 	bl	8003c9c <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 f948 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80011f0:	480f      	ldr	r0, [pc, #60]	; (8001230 <MX_TIM10_Init+0x8c>)
 80011f2:	f002 fe7b 	bl	8003eec <HAL_TIM_OC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 f940 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_TIM10_Init+0x8c>)
 8001218:	f002 ffca 	bl	80041b0 <HAL_TIM_OC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001222:	f000 f92d 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000208 	.word	0x20000208
 8001234:	40014400 	.word	0x40014400

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_USART2_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART2_UART_Init+0x4c>)
 8001270:	f003 fc5c 	bl	8004b2c <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f901 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000428 	.word	0x20000428
 8001288:	40004400 	.word	0x40004400

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_DMA_Init+0x78>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <MX_DMA_Init+0x78>)
 800129c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_DMA_Init+0x78>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_DMA_Init+0x78>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MX_DMA_Init+0x78>)
 80012b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_DMA_Init+0x78>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2010      	movs	r0, #16
 80012d0:	f001 f937 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012d4:	2010      	movs	r0, #16
 80012d6:	f001 f950 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2011      	movs	r0, #17
 80012e0:	f001 f92f 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012e4:	2011      	movs	r0, #17
 80012e6:	f001 f948 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2038      	movs	r0, #56	; 0x38
 80012f0:	f001 f927 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f4:	2038      	movs	r0, #56	; 0x38
 80012f6:	f001 f940 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <MX_GPIO_Init+0xe8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <MX_GPIO_Init+0xe8>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <MX_GPIO_Init+0xe8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <MX_GPIO_Init+0xe8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <MX_GPIO_Init+0xe8>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <MX_GPIO_Init+0xe8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <MX_GPIO_Init+0xe8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a24      	ldr	r2, [pc, #144]	; (80013f0 <MX_GPIO_Init+0xe8>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_GPIO_Init+0xe8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2120      	movs	r1, #32
 8001376:	481f      	ldr	r0, [pc, #124]	; (80013f4 <MX_GPIO_Init+0xec>)
 8001378:	f001 ff12 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	481d      	ldr	r0, [pc, #116]	; (80013f8 <MX_GPIO_Init+0xf0>)
 8001382:	f001 ff0d 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800138c:	481b      	ldr	r0, [pc, #108]	; (80013fc <MX_GPIO_Init+0xf4>)
 800138e:	f001 ff07 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001392:	2320      	movs	r3, #32
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	4812      	ldr	r0, [pc, #72]	; (80013f4 <MX_GPIO_Init+0xec>)
 80013aa:	f001 fd65 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ae:	2301      	movs	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_GPIO_Init+0xf0>)
 80013c6:	f001 fd57 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80013ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_GPIO_Init+0xf4>)
 80013e4:	f001 fd48 	bl	8002e78 <HAL_GPIO_Init>

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800

08001400 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//}

// Timer 10 (TIM10) interrupt:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if (htim == &htim10)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d127      	bne.n	8001460 <HAL_TIM_PeriodElapsedCallback+0x60>
  {
	// Set pin: Start timer
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	4815      	ldr	r0, [pc, #84]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001416:	f001 fec3 	bl	80031a0 <HAL_GPIO_WritePin>

    static uint16_t var;

    // ADC
    HAL_ADC_Start(&hadc1);
 800141a:	4815      	ldr	r0, [pc, #84]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800141c:	f000 fc1e 	bl	8001c5c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	4812      	ldr	r0, [pc, #72]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001426:	f000 fceb 	bl	8001e00 <HAL_ADC_PollForConversion>
    adcValue = HAL_ADC_GetValue(&hadc1);
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800142c:	f000 fd73 	bl	8001f16 <HAL_ADC_GetValue>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001436:	801a      	strh	r2, [r3, #0]
//						(uint32_t)&huart2.Instance->DR, strlen(msg_2));



    // DAC
    var = adcValue;
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800143e:	801a      	strh	r2, [r3, #0]
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 8001440:	2100      	movs	r1, #0
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001444:	f001 f8d5 	bl	80025f2 <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var); // Set dac to digital value
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	480a      	ldr	r0, [pc, #40]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001452:	f001 f920 	bl	8002696 <HAL_DAC_SetValue>

	// Reset pin: Stop timer
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800145c:	f001 fea0 	bl	80031a0 <HAL_GPIO_WritePin>
  }
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000208 	.word	0x20000208
 800146c:	40020800 	.word	0x40020800
 8001470:	200002c4 	.word	0x200002c4
 8001474:	2000046c 	.word	0x2000046c
 8001478:	200001f8 	.word	0x200001f8
 800147c:	2000036c 	.word	0x2000036c

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <HAL_ADC_MspInit+0xd8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d156      	bne.n	80015ac <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_ADC_MspInit+0xdc>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a2c      	ldr	r2, [pc, #176]	; (80015b8 <HAL_ADC_MspInit+0xdc>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_ADC_MspInit+0xdc>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_ADC_MspInit+0xdc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <HAL_ADC_MspInit+0xdc>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_ADC_MspInit+0xdc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001536:	2301      	movs	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	481c      	ldr	r0, [pc, #112]	; (80015bc <HAL_ADC_MspInit+0xe0>)
 800154a:	f001 fc95 	bl	8002e78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 8001550:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <HAL_ADC_MspInit+0xe8>)
 8001552:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 800156e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001572:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 8001576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 800157e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001582:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001590:	480b      	ldr	r0, [pc, #44]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 8001592:	f001 f8f5 	bl	8002780 <HAL_DMA_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800159c:	f7ff ff70 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
 80015a6:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_ADC_MspInit+0xe4>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40012000 	.word	0x40012000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	20000380 	.word	0x20000380
 80015c4:	40026410 	.word	0x40026410

080015c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <HAL_DAC_MspInit+0xdc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d157      	bne.n	800169a <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_DAC_MspInit+0xe0>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_DAC_MspInit+0xe0>)
 80015f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_DAC_MspInit+0xe0>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_DAC_MspInit+0xe0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_DAC_MspInit+0xe0>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_DAC_MspInit+0xe0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001622:	2310      	movs	r3, #16
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001626:	2303      	movs	r3, #3
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	481d      	ldr	r0, [pc, #116]	; (80016ac <HAL_DAC_MspInit+0xe4>)
 8001636:	f001 fc1f 	bl	8002e78 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 800163c:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <HAL_DAC_MspInit+0xec>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 8001642:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001646:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_DISABLE;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 800165c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001660:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 8001664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001668:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 800166c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001670:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 8001680:	f001 f87e 	bl	8002780 <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 800168a:	f7ff fef9 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_DAC_MspInit+0xe8>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40007400 	.word	0x40007400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	20000264 	.word	0x20000264
 80016b4:	40026088 	.word	0x40026088

080016b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c8:	d10e      	bne.n	80016e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_TIM_Base_MspInit+0x70>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_TIM_Base_MspInit+0x70>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_TIM_Base_MspInit+0x70>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80016e6:	e01a      	b.n	800171e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_TIM_Base_MspInit+0x74>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d115      	bne.n	800171e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_TIM_Base_MspInit+0x70>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <HAL_TIM_Base_MspInit+0x70>)
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_TIM_Base_MspInit+0x70>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2019      	movs	r0, #25
 8001714:	f000 ff15 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001718:	2019      	movs	r0, #25
 800171a:	f000 ff2e 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40014400 	.word	0x40014400

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a34      	ldr	r2, [pc, #208]	; (8001820 <HAL_UART_MspInit+0xf0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d161      	bne.n	8001816 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <HAL_UART_MspInit+0xf4>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <HAL_UART_MspInit+0xf4>)
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_UART_MspInit+0xf4>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <HAL_UART_MspInit+0xf4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <HAL_UART_MspInit+0xf4>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_UART_MspInit+0xf4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800178a:	230c      	movs	r3, #12
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179a:	2307      	movs	r3, #7
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4820      	ldr	r0, [pc, #128]	; (8001828 <HAL_UART_MspInit+0xf8>)
 80017a6:	f001 fb67 	bl	8002e78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017ac:	4a20      	ldr	r2, [pc, #128]	; (8001830 <HAL_UART_MspInit+0x100>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017ea:	4810      	ldr	r0, [pc, #64]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017ec:	f000 ffc8 	bl	8002780 <HAL_DMA_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80017f6:	f7ff fe43 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_UART_MspInit+0xfc>)
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_UART_MspInit+0xfc>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2026      	movs	r0, #38	; 0x26
 800180c:	f000 fe99 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001810:	2026      	movs	r0, #38	; 0x26
 8001812:	f000 feb2 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40004400 	.word	0x40004400
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000
 800182c:	2000030c 	.word	0x2000030c
 8001830:	400260a0 	.word	0x400260a0

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 f988 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <DMA1_Stream5_IRQHandler+0x10>)
 800188e:	f001 f8b7 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000264 	.word	0x20000264

0800189c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <DMA1_Stream6_IRQHandler+0x10>)
 80018a2:	f001 f8ad 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000030c 	.word	0x2000030c

080018b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018b6:	f002 fb72 	bl	8003f9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000208 	.word	0x20000208

080018c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <USART2_IRQHandler+0x10>)
 80018ca:	f003 f97d 	bl	8004bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000428 	.word	0x20000428

080018d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <DMA2_Stream0_IRQHandler+0x10>)
 80018de:	f001 f88f 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000380 	.word	0x20000380

080018ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_kill>:

int _kill(int pid, int sig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001906:	f003 fe3d 	bl	8005584 <__errno>
 800190a:	4603      	mov	r3, r0
 800190c:	2216      	movs	r2, #22
 800190e:	601a      	str	r2, [r3, #0]
	return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_exit>:

void _exit (int status)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffe7 	bl	80018fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800192e:	e7fe      	b.n	800192e <_exit+0x12>

08001930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e00a      	b.n	8001958 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001942:	f3af 8000 	nop.w
 8001946:	4601      	mov	r1, r0
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	b2ca      	uxtb	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf0      	blt.n	8001942 <_read+0x12>
	}

return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e009      	b.n	8001990 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf1      	blt.n	800197c <_write+0x12>
	}
	return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_close>:

int _close(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ca:	605a      	str	r2, [r3, #4]
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_isatty>:

int _isatty(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f003 fda2 	bl	8005584 <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20020000 	.word	0x20020000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	200001fc 	.word	0x200001fc
 8001a74:	20000488 	.word	0x20000488

08001a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa0:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aa2:	490e      	ldr	r1, [pc, #56]	; (8001adc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab8:	4c0b      	ldr	r4, [pc, #44]	; (8001ae8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ac6:	f7ff ffd7 	bl	8001a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aca:	f003 fd61 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ace:	f7ff fa07 	bl	8000ee0 <main>
  bx  lr    
 8001ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ae0:	080083c4 	.word	0x080083c4
  ldr r2, =_sbss
 8001ae4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ae8:	20000484 	.word	0x20000484

08001aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC_IRQHandler>
	...

08001af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <HAL_Init+0x40>)
 8001afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <HAL_Init+0x40>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_Init+0x40>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 fd07 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f000 f808 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b24:	f7ff fcb2 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fd1f 	bl	8002596 <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 fce7 	bl	8002542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000470 	.word	0x20000470

08001bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000470 	.word	0x20000470

08001bd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e033      	b.n	8001c52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fc72 	bl	80014dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d118      	bne.n	8001c44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c1a:	f023 0302 	bic.w	r3, r3, #2
 8001c1e:	f043 0202 	orr.w	r2, r3, #2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fab4 	bl	8002194 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
 8001c42:	e001      	b.n	8001c48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Start+0x1a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e0b2      	b.n	8001ddc <HAL_ADC_Start+0x180>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d018      	beq.n	8001cbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9c:	4b52      	ldr	r3, [pc, #328]	; (8001de8 <HAL_ADC_Start+0x18c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_ADC_Start+0x190>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9a      	lsrs	r2, r3, #18
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f9      	bne.n	8001cb2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d17a      	bne.n	8001dc2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d0a:	d106      	bne.n	8001d1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	f023 0206 	bic.w	r2, r3, #6
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_ADC_Start+0x194>)
 8001d2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d12a      	bne.n	8001d98 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <HAL_ADC_Start+0x198>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d015      	beq.n	8001d78 <HAL_ADC_Start+0x11c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_ADC_Start+0x19c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d105      	bne.n	8001d62 <HAL_ADC_Start+0x106>
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <HAL_ADC_Start+0x194>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <HAL_ADC_Start+0x1a0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d136      	bne.n	8001dda <HAL_ADC_Start+0x17e>
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_ADC_Start+0x194>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d130      	bne.n	8001dda <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d129      	bne.n	8001dda <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	e020      	b.n	8001dda <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <HAL_ADC_Start+0x198>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d11b      	bne.n	8001dda <HAL_ADC_Start+0x17e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d114      	bne.n	8001dda <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e00b      	b.n	8001dda <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f043 0210 	orr.w	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f043 0201 	orr.w	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83
 8001df0:	40012300 	.word	0x40012300
 8001df4:	40012000 	.word	0x40012000
 8001df8:	40012100 	.word	0x40012100
 8001dfc:	40012200 	.word	0x40012200

08001e00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1c:	d113      	bne.n	8001e46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2c:	d10b      	bne.n	8001e46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f043 0220 	orr.w	r2, r3, #32
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e063      	b.n	8001f0e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e46:	f7ff feb9 	bl	8001bbc <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e4c:	e021      	b.n	8001e92 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d01d      	beq.n	8001e92 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_ADC_PollForConversion+0x6c>
 8001e5c:	f7ff feae 	bl	8001bbc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d212      	bcs.n	8001e92 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d00b      	beq.n	8001e92 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f043 0204 	orr.w	r2, r3, #4
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e03d      	b.n	8001f0e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d1d6      	bne.n	8001e4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0212 	mvn.w	r2, #18
 8001ea8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d123      	bne.n	8001f0c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11f      	bne.n	8001f0c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d111      	bne.n	8001f0c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1c>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e113      	b.n	8002174 <HAL_ADC_ConfigChannel+0x244>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	d925      	bls.n	8001fa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b1e      	subs	r3, #30
 8001f72:	2207      	movs	r2, #7
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	400a      	ands	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4403      	add	r3, r0
 8001f9a:	3b1e      	subs	r3, #30
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	e022      	b.n	8001fee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	400a      	ands	r2, r1
 8001fca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4403      	add	r3, r0
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d824      	bhi.n	8002040 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b05      	subs	r3, #5
 8002008:	221f      	movs	r2, #31
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	3b05      	subs	r3, #5
 8002032:	fa00 f203 	lsl.w	r2, r0, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
 800203e:	e04c      	b.n	80020da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	d824      	bhi.n	8002092 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b23      	subs	r3, #35	; 0x23
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43da      	mvns	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	400a      	ands	r2, r1
 8002068:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b23      	subs	r3, #35	; 0x23
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
 8002090:	e023      	b.n	80020da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b41      	subs	r3, #65	; 0x41
 80020a4:	221f      	movs	r2, #31
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3b41      	subs	r3, #65	; 0x41
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_ADC_ConfigChannel+0x250>)
 80020dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a28      	ldr	r2, [pc, #160]	; (8002184 <HAL_ADC_ConfigChannel+0x254>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d10f      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1d8>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b12      	cmp	r3, #18
 80020ee:	d10b      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_ADC_ConfigChannel+0x254>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12b      	bne.n	800216a <HAL_ADC_ConfigChannel+0x23a>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_ADC_ConfigChannel+0x258>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x1f4>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b11      	cmp	r3, #17
 8002122:	d122      	bne.n	800216a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a11      	ldr	r2, [pc, #68]	; (8002188 <HAL_ADC_ConfigChannel+0x258>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d111      	bne.n	800216a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_ADC_ConfigChannel+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_ADC_ConfigChannel+0x260>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9a      	lsrs	r2, r3, #18
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800215c:	e002      	b.n	8002164 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3b01      	subs	r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40012300 	.word	0x40012300
 8002184:	40012000 	.word	0x40012000
 8002188:	10000012 	.word	0x10000012
 800218c:	20000000 	.word	0x20000000
 8002190:	431bde83 	.word	0x431bde83

08002194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800219c:	4b79      	ldr	r3, [pc, #484]	; (8002384 <ADC_Init+0x1f0>)
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	021a      	lsls	r2, r3, #8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	4a58      	ldr	r2, [pc, #352]	; (8002388 <ADC_Init+0x1f4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d022      	beq.n	8002272 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800225c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	e00f      	b.n	8002292 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002290:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0202 	bic.w	r2, r2, #2
 80022a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6899      	ldr	r1, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e1b      	ldrb	r3, [r3, #24]
 80022ac:	005a      	lsls	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	3b01      	subs	r3, #1
 80022ec:	035a      	lsls	r2, r3, #13
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	e007      	b.n	8002308 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002306:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	3b01      	subs	r3, #1
 8002324:	051a      	lsls	r2, r3, #20
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800233c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6899      	ldr	r1, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800234a:	025a      	lsls	r2, r3, #9
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	029a      	lsls	r2, r3, #10
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40012300 	.word	0x40012300
 8002388:	0f000001 	.word	0x0f000001

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f7ff ff8e 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff29 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff3e 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff8e 	bl	8002480 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5d 	bl	800242c <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff31 	bl	80023f0 <__NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffa2 	bl	80024e8 <SysTick_Config>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e014      	b.n	80025ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7fe fff9 	bl	80015c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	795b      	ldrb	r3, [r3, #5]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_DAC_Start+0x16>
 8002604:	2302      	movs	r3, #2
 8002606:	e040      	b.n	800268a <HAL_DAC_Start+0x98>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2201      	movs	r2, #1
 8002622:	409a      	lsls	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800263c:	2b3c      	cmp	r3, #60	; 0x3c
 800263e:	d11d      	bne.n	800267c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	e014      	b.n	800267c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	213c      	movs	r1, #60	; 0x3c
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	429a      	cmp	r2, r3
 800266a:	d107      	bne.n	800267c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0202 	orr.w	r2, r2, #2
 800267a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002696:	b480      	push	{r7}
 8002698:	b087      	sub	sp, #28
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	3308      	adds	r3, #8
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e004      	b.n	80026ca <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	3314      	adds	r3, #20
 80026c8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	461a      	mov	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	795b      	ldrb	r3, [r3, #5]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_DAC_ConfigChannel+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e03c      	b.n	8002772 <HAL_DAC_ConfigChannel+0x92>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2202      	movs	r2, #2
 8002702:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4013      	ands	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	22c0      	movs	r2, #192	; 0xc0
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	400a      	ands	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff fa16 	bl	8001bbc <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e099      	b.n	80028d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027bc:	e00f      	b.n	80027de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027be:	f7ff f9fd 	bl	8001bbc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d908      	bls.n	80027de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e078      	b.n	80028d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e8      	bne.n	80027be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4b38      	ldr	r3, [pc, #224]	; (80028d8 <HAL_DMA_Init+0x158>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b04      	cmp	r3, #4
 8002836:	d107      	bne.n	8002848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4313      	orrs	r3, r2
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f023 0307 	bic.w	r3, r3, #7
 800285e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b04      	cmp	r3, #4
 8002870:	d117      	bne.n	80028a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00e      	beq.n	80028a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fa7b 	bl	8002d80 <DMA_CheckFifoParam>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800289e:	2301      	movs	r3, #1
 80028a0:	e016      	b.n	80028d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa32 	bl	8002d14 <DMA_CalcBaseAndBitshift>
 80028b0:	4603      	mov	r3, r0
 80028b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	223f      	movs	r2, #63	; 0x3f
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	f010803f 	.word	0xf010803f

080028dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028ea:	f7ff f967 	bl	8001bbc <HAL_GetTick>
 80028ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d008      	beq.n	800290e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e052      	b.n	80029b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0216 	bic.w	r2, r2, #22
 800291c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <HAL_DMA_Abort+0x62>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0208 	bic.w	r2, r2, #8
 800294c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295e:	e013      	b.n	8002988 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002960:	f7ff f92c 	bl	8001bbc <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b05      	cmp	r3, #5
 800296c:	d90c      	bls.n	8002988 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e015      	b.n	80029b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e4      	bne.n	8002960 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	223f      	movs	r2, #63	; 0x3f
 800299c:	409a      	lsls	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d004      	beq.n	80029da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00c      	b.n	80029f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2205      	movs	r2, #5
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a0c:	4b92      	ldr	r3, [pc, #584]	; (8002c58 <HAL_DMA_IRQHandler+0x258>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a92      	ldr	r2, [pc, #584]	; (8002c5c <HAL_DMA_IRQHandler+0x25c>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	0a9b      	lsrs	r3, r3, #10
 8002a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01a      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0204 	bic.w	r2, r2, #4
 8002a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2208      	movs	r2, #8
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	2201      	movs	r2, #1
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d012      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	2201      	movs	r2, #1
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f043 0204 	orr.w	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	2210      	movs	r2, #16
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d043      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d03c      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2210      	movs	r2, #16
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d024      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
 8002b2e:	e01f      	b.n	8002b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
 8002b40:	e016      	b.n	8002b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d107      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0208 	bic.w	r2, r2, #8
 8002b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	2220      	movs	r2, #32
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 808e 	beq.w	8002c9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8086 	beq.w	8002c9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2220      	movs	r2, #32
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d136      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0216 	bic.w	r2, r2, #22
 8002bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_DMA_IRQHandler+0x1da>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0208 	bic.w	r2, r2, #8
 8002be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	223f      	movs	r2, #63	; 0x3f
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d07d      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
        }
        return;
 8002c16:	e078      	b.n	8002d0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01c      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d108      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d030      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e02b      	b.n	8002c9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d027      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
 8002c56:	e022      	b.n	8002c9e <HAL_DMA_IRQHandler+0x29e>
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0210 	bic.w	r2, r2, #16
 8002c7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d032      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d022      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2205      	movs	r2, #5
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0201 	bic.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d307      	bcc.n	8002ce6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f2      	bne.n	8002cca <HAL_DMA_IRQHandler+0x2ca>
 8002ce4:	e000      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ce6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
 8002d08:	e000      	b.n	8002d0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d0a:	bf00      	nop
    }
  }
}
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop

08002d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	3b10      	subs	r3, #16
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <DMA_CalcBaseAndBitshift+0x64>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <DMA_CalcBaseAndBitshift+0x68>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d909      	bls.n	8002d56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	1d1a      	adds	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	659a      	str	r2, [r3, #88]	; 0x58
 8002d54:	e007      	b.n	8002d66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	aaaaaaab 	.word	0xaaaaaaab
 8002d7c:	08007fcc 	.word	0x08007fcc

08002d80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11f      	bne.n	8002dda <DMA_CheckFifoParam+0x5a>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d856      	bhi.n	8002e4e <DMA_CheckFifoParam+0xce>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <DMA_CheckFifoParam+0x28>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dcb 	.word	0x08002dcb
 8002db0:	08002db9 	.word	0x08002db9
 8002db4:	08002e4f 	.word	0x08002e4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d046      	beq.n	8002e52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc8:	e043      	b.n	8002e52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd2:	d140      	bne.n	8002e56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e03d      	b.n	8002e56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de2:	d121      	bne.n	8002e28 <DMA_CheckFifoParam+0xa8>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d837      	bhi.n	8002e5a <DMA_CheckFifoParam+0xda>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <DMA_CheckFifoParam+0x70>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e07 	.word	0x08002e07
 8002df8:	08002e01 	.word	0x08002e01
 8002dfc:	08002e19 	.word	0x08002e19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e030      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d025      	beq.n	8002e5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e16:	e022      	b.n	8002e5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e20:	d11f      	bne.n	8002e62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e26:	e01c      	b.n	8002e62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d903      	bls.n	8002e36 <DMA_CheckFifoParam+0xb6>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d003      	beq.n	8002e3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e34:	e018      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3a:	e015      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	e00b      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e00a      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e52:	bf00      	nop
 8002e54:	e008      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e56:	bf00      	nop
 8002e58:	e006      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e004      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <DMA_CheckFifoParam+0xe8>
      break;
 8002e66:	bf00      	nop
    }
  } 
  
  return status; 
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	e165      	b.n	8003160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	f040 8154 	bne.w	800315a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d005      	beq.n	8002eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d130      	bne.n	8002f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f00:	2201      	movs	r2, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 0201 	and.w	r2, r3, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d017      	beq.n	8002f68 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d123      	bne.n	8002fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80ae 	beq.w	800315a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <HAL_GPIO_Init+0x300>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <HAL_GPIO_Init+0x300>)
 8003008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <HAL_GPIO_Init+0x300>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800301a:	4a58      	ldr	r2, [pc, #352]	; (800317c <HAL_GPIO_Init+0x304>)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <HAL_GPIO_Init+0x308>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d025      	beq.n	8003092 <HAL_GPIO_Init+0x21a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4e      	ldr	r2, [pc, #312]	; (8003184 <HAL_GPIO_Init+0x30c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01f      	beq.n	800308e <HAL_GPIO_Init+0x216>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4d      	ldr	r2, [pc, #308]	; (8003188 <HAL_GPIO_Init+0x310>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d019      	beq.n	800308a <HAL_GPIO_Init+0x212>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4c      	ldr	r2, [pc, #304]	; (800318c <HAL_GPIO_Init+0x314>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_GPIO_Init+0x20e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <HAL_GPIO_Init+0x318>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00d      	beq.n	8003082 <HAL_GPIO_Init+0x20a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4a      	ldr	r2, [pc, #296]	; (8003194 <HAL_GPIO_Init+0x31c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <HAL_GPIO_Init+0x206>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_GPIO_Init+0x320>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_GPIO_Init+0x202>
 8003076:	2306      	movs	r3, #6
 8003078:	e00c      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 800307a:	2307      	movs	r3, #7
 800307c:	e00a      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 800307e:	2305      	movs	r3, #5
 8003080:	e008      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 8003082:	2304      	movs	r3, #4
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 8003086:	2303      	movs	r3, #3
 8003088:	e004      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 800308a:	2302      	movs	r3, #2
 800308c:	e002      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_GPIO_Init+0x21c>
 8003092:	2300      	movs	r3, #0
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f002 0203 	and.w	r2, r2, #3
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	4093      	lsls	r3, r2
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a4:	4935      	ldr	r1, [pc, #212]	; (800317c <HAL_GPIO_Init+0x304>)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	3302      	adds	r3, #2
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_GPIO_Init+0x324>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d6:	4a31      	ldr	r2, [pc, #196]	; (800319c <HAL_GPIO_Init+0x324>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030dc:	4b2f      	ldr	r3, [pc, #188]	; (800319c <HAL_GPIO_Init+0x324>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <HAL_GPIO_Init+0x324>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_GPIO_Init+0x324>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_GPIO_Init+0x324>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_GPIO_Init+0x324>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003154:	4a11      	ldr	r2, [pc, #68]	; (800319c <HAL_GPIO_Init+0x324>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	f67f ae96 	bls.w	8002e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	40013800 	.word	0x40013800
 8003180:	40020000 	.word	0x40020000
 8003184:	40020400 	.word	0x40020400
 8003188:	40020800 	.word	0x40020800
 800318c:	40020c00 	.word	0x40020c00
 8003190:	40021000 	.word	0x40021000
 8003194:	40021400 	.word	0x40021400
 8003198:	40021800 	.word	0x40021800
 800319c:	40013c00 	.word	0x40013c00

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031bc:	e003      	b.n	80031c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	619a      	str	r2, [r3, #24]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_PWREx_EnableOverDrive+0x90>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <HAL_PWREx_EnableOverDrive+0x90>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_PWREx_EnableOverDrive+0x90>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_PWREx_EnableOverDrive+0x94>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003200:	f7fe fcdc 	bl	8001bbc <HAL_GetTick>
 8003204:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003206:	e009      	b.n	800321c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003208:	f7fe fcd8 	bl	8001bbc <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003216:	d901      	bls.n	800321c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e01f      	b.n	800325c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_PWREx_EnableOverDrive+0x98>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d1ee      	bne.n	8003208 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_PWREx_EnableOverDrive+0x9c>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003230:	f7fe fcc4 	bl	8001bbc <HAL_GetTick>
 8003234:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003236:	e009      	b.n	800324c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003238:	f7fe fcc0 	bl	8001bbc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003246:	d901      	bls.n	800324c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e007      	b.n	800325c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_PWREx_EnableOverDrive+0x98>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003258:	d1ee      	bne.n	8003238 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40023800 	.word	0x40023800
 8003268:	420e0040 	.word	0x420e0040
 800326c:	40007000 	.word	0x40007000
 8003270:	420e0044 	.word	0x420e0044

08003274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0cc      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b68      	ldr	r3, [pc, #416]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d90c      	bls.n	80032b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b63      	ldr	r3, [pc, #396]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0b8      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d020      	beq.n	80032fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c8:	4b59      	ldr	r3, [pc, #356]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a58      	ldr	r2, [pc, #352]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e0:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a52      	ldr	r2, [pc, #328]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ec:	4b50      	ldr	r3, [pc, #320]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	494d      	ldr	r1, [pc, #308]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d044      	beq.n	8003394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d119      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e07f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d003      	beq.n	8003332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	2b03      	cmp	r3, #3
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e067      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4934      	ldr	r1, [pc, #208]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fe fc2a 	bl	8001bbc <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fe fc26 	bl	8001bbc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e04f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d20c      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e032      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4916      	ldr	r1, [pc, #88]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e6:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	490e      	ldr	r1, [pc, #56]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fa:	f000 f855 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	490a      	ldr	r1, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	5ccb      	ldrb	r3, [r1, r3]
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fb8a 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023c00 	.word	0x40023c00
 8003430:	40023800 	.word	0x40023800
 8003434:	08007fb4 	.word	0x08007fb4
 8003438:	20000000 	.word	0x20000000
 800343c:	20000004 	.word	0x20000004

08003440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_RCC_GetHCLKFreq+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800345c:	f7ff fff0 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0a9b      	lsrs	r3, r3, #10
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4903      	ldr	r1, [pc, #12]	; (800347c <HAL_RCC_GetPCLK1Freq+0x24>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	08007fc4 	.word	0x08007fc4

08003480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003484:	f7ff ffdc 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0b5b      	lsrs	r3, r3, #13
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	08007fc4 	.word	0x08007fc4

080034a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034ac:	b087      	sub	sp, #28
 80034ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034b0:	2600      	movs	r6, #0
 80034b2:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80034b4:	2600      	movs	r6, #0
 80034b6:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80034b8:	2600      	movs	r6, #0
 80034ba:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80034bc:	2600      	movs	r6, #0
 80034be:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034c0:	2600      	movs	r6, #0
 80034c2:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c4:	4ea3      	ldr	r6, [pc, #652]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80034c6:	68b6      	ldr	r6, [r6, #8]
 80034c8:	f006 060c 	and.w	r6, r6, #12
 80034cc:	2e0c      	cmp	r6, #12
 80034ce:	f200 8137 	bhi.w	8003740 <HAL_RCC_GetSysClockFreq+0x298>
 80034d2:	f20f 0c08 	addw	ip, pc, #8
 80034d6:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003511 	.word	0x08003511
 80034e0:	08003741 	.word	0x08003741
 80034e4:	08003741 	.word	0x08003741
 80034e8:	08003741 	.word	0x08003741
 80034ec:	08003517 	.word	0x08003517
 80034f0:	08003741 	.word	0x08003741
 80034f4:	08003741 	.word	0x08003741
 80034f8:	08003741 	.word	0x08003741
 80034fc:	0800351d 	.word	0x0800351d
 8003500:	08003741 	.word	0x08003741
 8003504:	08003741 	.word	0x08003741
 8003508:	08003741 	.word	0x08003741
 800350c:	08003633 	.word	0x08003633
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b91      	ldr	r3, [pc, #580]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003512:	613b      	str	r3, [r7, #16]
       break;
 8003514:	e117      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003518:	613b      	str	r3, [r7, #16]
      break;
 800351a:	e114      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351c:	4b8d      	ldr	r3, [pc, #564]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003524:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003526:	4b8b      	ldr	r3, [pc, #556]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d024      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	461a      	mov	r2, r3
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003542:	f04f 0500 	mov.w	r5, #0
 8003546:	ea02 0004 	and.w	r0, r2, r4
 800354a:	ea03 0105 	and.w	r1, r3, r5
 800354e:	4b83      	ldr	r3, [pc, #524]	; (800375c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003550:	fb03 f201 	mul.w	r2, r3, r1
 8003554:	2300      	movs	r3, #0
 8003556:	fb03 f300 	mul.w	r3, r3, r0
 800355a:	4413      	add	r3, r2
 800355c:	4a7f      	ldr	r2, [pc, #508]	; (800375c <HAL_RCC_GetSysClockFreq+0x2b4>)
 800355e:	fba0 0102 	umull	r0, r1, r0, r2
 8003562:	440b      	add	r3, r1
 8003564:	4619      	mov	r1, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	461a      	mov	r2, r3
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	f7fd fb3b 	bl	8000be8 <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4613      	mov	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e04c      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357c:	4b75      	ldr	r3, [pc, #468]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	461a      	mov	r2, r3
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	f240 10ff 	movw	r0, #511	; 0x1ff
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	ea02 0800 	and.w	r8, r2, r0
 8003594:	ea03 0901 	and.w	r9, r3, r1
 8003598:	4640      	mov	r0, r8
 800359a:	4649      	mov	r1, r9
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	014b      	lsls	r3, r1, #5
 80035a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035aa:	0142      	lsls	r2, r0, #5
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	ebb0 0008 	subs.w	r0, r0, r8
 80035b4:	eb61 0109 	sbc.w	r1, r1, r9
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	018b      	lsls	r3, r1, #6
 80035c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035c6:	0182      	lsls	r2, r0, #6
 80035c8:	1a12      	subs	r2, r2, r0
 80035ca:	eb63 0301 	sbc.w	r3, r3, r1
 80035ce:	f04f 0000 	mov.w	r0, #0
 80035d2:	f04f 0100 	mov.w	r1, #0
 80035d6:	00d9      	lsls	r1, r3, #3
 80035d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035dc:	00d0      	lsls	r0, r2, #3
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	eb12 0208 	adds.w	r2, r2, r8
 80035e6:	eb43 0309 	adc.w	r3, r3, r9
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0299      	lsls	r1, r3, #10
 80035f4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035f8:	0290      	lsls	r0, r2, #10
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	461a      	mov	r2, r3
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	f7fd faed 	bl	8000be8 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4613      	mov	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003616:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	3301      	adds	r3, #1
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	613b      	str	r3, [r7, #16]
      break;
 8003630:	e089      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003632:	4948      	ldr	r1, [pc, #288]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003634:	6849      	ldr	r1, [r1, #4]
 8003636:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800363a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363c:	4945      	ldr	r1, [pc, #276]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800363e:	6849      	ldr	r1, [r1, #4]
 8003640:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003644:	2900      	cmp	r1, #0
 8003646:	d024      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003648:	4942      	ldr	r1, [pc, #264]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800364a:	6849      	ldr	r1, [r1, #4]
 800364c:	0989      	lsrs	r1, r1, #6
 800364e:	4608      	mov	r0, r1
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003658:	f04f 0500 	mov.w	r5, #0
 800365c:	ea00 0204 	and.w	r2, r0, r4
 8003660:	ea01 0305 	and.w	r3, r1, r5
 8003664:	493d      	ldr	r1, [pc, #244]	; (800375c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003666:	fb01 f003 	mul.w	r0, r1, r3
 800366a:	2100      	movs	r1, #0
 800366c:	fb01 f102 	mul.w	r1, r1, r2
 8003670:	1844      	adds	r4, r0, r1
 8003672:	493a      	ldr	r1, [pc, #232]	; (800375c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003674:	fba2 0101 	umull	r0, r1, r2, r1
 8003678:	1863      	adds	r3, r4, r1
 800367a:	4619      	mov	r1, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	461a      	mov	r2, r3
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	f7fd fab0 	bl	8000be8 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e04a      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	461a      	mov	r2, r3
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	ea02 0400 	and.w	r4, r2, r0
 80036aa:	ea03 0501 	and.w	r5, r3, r1
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	014b      	lsls	r3, r1, #5
 80036bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036c0:	0142      	lsls	r2, r0, #5
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	1b00      	subs	r0, r0, r4
 80036c8:	eb61 0105 	sbc.w	r1, r1, r5
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	018b      	lsls	r3, r1, #6
 80036d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036da:	0182      	lsls	r2, r0, #6
 80036dc:	1a12      	subs	r2, r2, r0
 80036de:	eb63 0301 	sbc.w	r3, r3, r1
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	00d9      	lsls	r1, r3, #3
 80036ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036f0:	00d0      	lsls	r0, r2, #3
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	1912      	adds	r2, r2, r4
 80036f8:	eb45 0303 	adc.w	r3, r5, r3
 80036fc:	f04f 0000 	mov.w	r0, #0
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	0299      	lsls	r1, r3, #10
 8003706:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800370a:	0290      	lsls	r0, r2, #10
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	f7fd fa64 	bl	8000be8 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0f1b      	lsrs	r3, r3, #28
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	613b      	str	r3, [r7, #16]
      break;
 800373e:	e002      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003742:	613b      	str	r3, [r7, #16]
      break;
 8003744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003746:	693b      	ldr	r3, [r7, #16]
}
 8003748:	4618      	mov	r0, r3
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	00f42400 	.word	0x00f42400
 800375c:	017d7840 	.word	0x017d7840

08003760 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e28d      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8083 	beq.w	8003886 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003780:	4b94      	ldr	r3, [pc, #592]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b04      	cmp	r3, #4
 800378a:	d019      	beq.n	80037c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800378c:	4b91      	ldr	r3, [pc, #580]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003794:	2b08      	cmp	r3, #8
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003798:	4b8e      	ldr	r3, [pc, #568]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a4:	d00c      	beq.n	80037c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a6:	4b8b      	ldr	r3, [pc, #556]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d112      	bne.n	80037d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037be:	d10b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b84      	ldr	r3, [pc, #528]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05b      	beq.n	8003884 <HAL_RCC_OscConfig+0x124>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d157      	bne.n	8003884 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e25a      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x90>
 80037e2:	4b7c      	ldr	r3, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7b      	ldr	r2, [pc, #492]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0xcc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0xb4>
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a72      	ldr	r2, [pc, #456]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xcc>
 8003814:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6b      	ldr	r2, [pc, #428]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe f9c2 	bl	8001bbc <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe f9be 	bl	8001bbc <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e21f      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xdc>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f9ae 	bl	8001bbc <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003864:	f7fe f9aa 	bl	8001bbc <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e20b      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	4b57      	ldr	r3, [pc, #348]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x104>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d06f      	beq.n	8003972 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003892:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b00      	cmp	r3, #0
 800389c:	d017      	beq.n	80038ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800389e:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d105      	bne.n	80038b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x186>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1d3      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4937      	ldr	r1, [pc, #220]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fe f957 	bl	8001bbc <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003912:	f7fe f953 	bl	8001bbc <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1b4      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4925      	ldr	r1, [pc, #148]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe f936 	bl	8001bbc <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003954:	f7fe f932 	bl	8001bbc <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e193      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d036      	beq.n	80039ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fe f916 	bl	8001bbc <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003994:	f7fe f912 	bl	8001bbc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e173      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_OscConfig+0x274>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x234>
 80039b2:	e01b      	b.n	80039ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_OscConfig+0x27c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fe f8ff 	bl	8001bbc <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	e00e      	b.n	80039e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c2:	f7fe f8fb 	bl	8001bbc <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d907      	bls.n	80039e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e15c      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470000 	.word	0x42470000
 80039dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b8a      	ldr	r3, [pc, #552]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ea      	bne.n	80039c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8097 	beq.w	8003b28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b83      	ldr	r3, [pc, #524]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4b7f      	ldr	r3, [pc, #508]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a7e      	ldr	r2, [pc, #504]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	4b7c      	ldr	r3, [pc, #496]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b79      	ldr	r3, [pc, #484]	; (8003c10 <HAL_RCC_OscConfig+0x4b0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_RCC_OscConfig+0x4b0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a75      	ldr	r2, [pc, #468]	; (8003c10 <HAL_RCC_OscConfig+0x4b0>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fe f8bb 	bl	8001bbc <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fe f8b7 	bl	8001bbc <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e118      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	4b6c      	ldr	r3, [pc, #432]	; (8003c10 <HAL_RCC_OscConfig+0x4b0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x31e>
 8003a70:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x358>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x340>
 8003a86:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a60      	ldr	r2, [pc, #384]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	4b5e      	ldr	r3, [pc, #376]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a5d      	ldr	r2, [pc, #372]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x358>
 8003aa0:	4b5a      	ldr	r3, [pc, #360]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a59      	ldr	r2, [pc, #356]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003aac:	4b57      	ldr	r3, [pc, #348]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	4a56      	ldr	r2, [pc, #344]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fe f87c 	bl	8001bbc <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fe f878 	bl	8001bbc <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0d7      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x368>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe f866 	bl	8001bbc <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fe f862 	bl	8001bbc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0c1      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ee      	bne.n	8003af4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	4a3a      	ldr	r2, [pc, #232]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80ad 	beq.w	8003c8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b32:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d060      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d145      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <HAL_RCC_OscConfig+0x4b4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fe f836 	bl	8001bbc <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fe f832 	bl	8001bbc <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e093      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	071b      	lsls	r3, r3, #28
 8003b9e:	491b      	ldr	r1, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <HAL_RCC_OscConfig+0x4b4>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe f807 	bl	8001bbc <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe f803 	bl	8001bbc <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e064      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x452>
 8003bd0:	e05c      	b.n	8003c8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <HAL_RCC_OscConfig+0x4b4>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fff0 	bl	8001bbc <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd ffec 	bl	8001bbc <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e04d      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x480>
 8003bfe:	e045      	b.n	8003c8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e040      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40007000 	.word	0x40007000
 8003c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c18:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <HAL_RCC_OscConfig+0x538>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d030      	beq.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d129      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d122      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d119      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	3b01      	subs	r3, #1
 8003c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d10f      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800

08003c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e041      	b.n	8003d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fcf8 	bl	80016b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 fbac 	bl	8004438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d001      	beq.n	8003d54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e046      	b.n	8003de2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <HAL_TIM_Base_Start+0xb4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d022      	beq.n	8003dac <HAL_TIM_Base_Start+0x70>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d01d      	beq.n	8003dac <HAL_TIM_Base_Start+0x70>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <HAL_TIM_Base_Start+0xb8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d018      	beq.n	8003dac <HAL_TIM_Base_Start+0x70>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <HAL_TIM_Base_Start+0xbc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_TIM_Base_Start+0x70>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <HAL_TIM_Base_Start+0xc0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00e      	beq.n	8003dac <HAL_TIM_Base_Start+0x70>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <HAL_TIM_Base_Start+0xc4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_TIM_Base_Start+0x70>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_TIM_Base_Start+0xc8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_TIM_Base_Start+0x70>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <HAL_TIM_Base_Start+0xcc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d010      	beq.n	8003de0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dce:	e007      	b.n	8003de0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40000c00 	.word	0x40000c00
 8003e00:	40010400 	.word	0x40010400
 8003e04:	40014000 	.word	0x40014000
 8003e08:	40001800 	.word	0x40001800

08003e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d001      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e04e      	b.n	8003ec2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x80>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4e:	d01d      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x80>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x80>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x80>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_TIM_Base_Start_IT+0xd0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x80>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x80>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x80>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d111      	bne.n	8003eb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d010      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eae:	e007      	b.n	8003ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40000c00 	.word	0x40000c00
 8003ee0:	40010400 	.word	0x40010400
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40001800 	.word	0x40001800

08003eec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e041      	b.n	8003f82 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f839 	bl	8003f8a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 fa84 	bl	8004438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d122      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d11b      	bne.n	8003ffa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f06f 0202 	mvn.w	r2, #2
 8003fca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa0b 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 8003fe6:	e005      	b.n	8003ff4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f9fd 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa0e 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d122      	bne.n	800404e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b04      	cmp	r3, #4
 8004014:	d11b      	bne.n	800404e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f06f 0204 	mvn.w	r2, #4
 800401e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f9e1 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 800403a:	e005      	b.n	8004048 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f9d3 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9e4 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d122      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b08      	cmp	r3, #8
 8004068:	d11b      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f06f 0208 	mvn.w	r2, #8
 8004072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2204      	movs	r2, #4
 8004078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f9b7 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 800408e:	e005      	b.n	800409c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f9a9 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9ba 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d122      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d11b      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0210 	mvn.w	r2, #16
 80040c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2208      	movs	r2, #8
 80040cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f98d 	bl	80043fc <HAL_TIM_IC_CaptureCallback>
 80040e2:	e005      	b.n	80040f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f97f 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f990 	bl	8004410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d10e      	bne.n	8004122 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f06f 0201 	mvn.w	r2, #1
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fd f96f 	bl	8001400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d10e      	bne.n	800414e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b80      	cmp	r3, #128	; 0x80
 800413c:	d107      	bne.n	800414e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fce5 	bl	8004b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d10e      	bne.n	800417a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d107      	bne.n	800417a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f955 	bl	8004424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b20      	cmp	r3, #32
 8004186:	d10e      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b20      	cmp	r3, #32
 8004194:	d107      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f06f 0220 	mvn.w	r2, #32
 800419e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fcaf 	bl	8004b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_TIM_OC_ConfigChannel+0x1a>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e046      	b.n	8004258 <HAL_TIM_OC_ConfigChannel+0xa8>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b0c      	cmp	r3, #12
 80041d6:	d839      	bhi.n	800424c <HAL_TIM_OC_ConfigChannel+0x9c>
 80041d8:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	08004215 	.word	0x08004215
 80041e4:	0800424d 	.word	0x0800424d
 80041e8:	0800424d 	.word	0x0800424d
 80041ec:	0800424d 	.word	0x0800424d
 80041f0:	08004223 	.word	0x08004223
 80041f4:	0800424d 	.word	0x0800424d
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	08004231 	.word	0x08004231
 8004204:	0800424d 	.word	0x0800424d
 8004208:	0800424d 	.word	0x0800424d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800423f 	.word	0x0800423f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f9ac 	bl	8004578 <TIM_OC1_SetConfig>
      break;
 8004220:	e015      	b.n	800424e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fa15 	bl	8004658 <TIM_OC2_SetConfig>
      break;
 800422e:	e00e      	b.n	800424e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fa84 	bl	8004744 <TIM_OC3_SetConfig>
      break;
 800423c:	e007      	b.n	800424e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 faf1 	bl	800482c <TIM_OC4_SetConfig>
      break;
 800424a:	e000      	b.n	800424e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800424c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_TIM_ConfigClockSource+0x18>
 8004274:	2302      	movs	r3, #2
 8004276:	e0b3      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x180>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004296:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d03e      	beq.n	8004330 <HAL_TIM_ConfigClockSource+0xd0>
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b6:	f200 8087 	bhi.w	80043c8 <HAL_TIM_ConfigClockSource+0x168>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	f000 8085 	beq.w	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d87f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x168>
 80042c8:	2b70      	cmp	r3, #112	; 0x70
 80042ca:	d01a      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0xa2>
 80042cc:	2b70      	cmp	r3, #112	; 0x70
 80042ce:	d87b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x168>
 80042d0:	2b60      	cmp	r3, #96	; 0x60
 80042d2:	d050      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x116>
 80042d4:	2b60      	cmp	r3, #96	; 0x60
 80042d6:	d877      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x168>
 80042d8:	2b50      	cmp	r3, #80	; 0x50
 80042da:	d03c      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xf6>
 80042dc:	2b50      	cmp	r3, #80	; 0x50
 80042de:	d873      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x168>
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d058      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x136>
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d86f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x168>
 80042e8:	2b30      	cmp	r3, #48	; 0x30
 80042ea:	d064      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x156>
 80042ec:	2b30      	cmp	r3, #48	; 0x30
 80042ee:	d86b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x168>
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d060      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x156>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d867      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x168>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d05c      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x156>
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d05a      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004300:	e062      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f000 fb5b 	bl	80049cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004324:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	609a      	str	r2, [r3, #8]
      break;
 800432e:	e04e      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f000 fb44 	bl	80049cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004352:	609a      	str	r2, [r3, #8]
      break;
 8004354:	e03b      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	461a      	mov	r2, r3
 8004364:	f000 fab8 	bl	80048d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2150      	movs	r1, #80	; 0x50
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fb11 	bl	8004996 <TIM_ITRx_SetConfig>
      break;
 8004374:	e02b      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	461a      	mov	r2, r3
 8004384:	f000 fad7 	bl	8004936 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2160      	movs	r1, #96	; 0x60
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fb01 	bl	8004996 <TIM_ITRx_SetConfig>
      break;
 8004394:	e01b      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f000 fa98 	bl	80048d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2140      	movs	r1, #64	; 0x40
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 faf1 	bl	8004996 <TIM_ITRx_SetConfig>
      break;
 80043b4:	e00b      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fae8 	bl	8004996 <TIM_ITRx_SetConfig>
        break;
 80043c6:	e002      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a40      	ldr	r2, [pc, #256]	; (800454c <TIM_Base_SetConfig+0x114>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004456:	d00f      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a3d      	ldr	r2, [pc, #244]	; (8004550 <TIM_Base_SetConfig+0x118>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a3c      	ldr	r2, [pc, #240]	; (8004554 <TIM_Base_SetConfig+0x11c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3b      	ldr	r2, [pc, #236]	; (8004558 <TIM_Base_SetConfig+0x120>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3a      	ldr	r2, [pc, #232]	; (800455c <TIM_Base_SetConfig+0x124>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2f      	ldr	r2, [pc, #188]	; (800454c <TIM_Base_SetConfig+0x114>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02b      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d027      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <TIM_Base_SetConfig+0x118>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d023      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <TIM_Base_SetConfig+0x11c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01f      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <TIM_Base_SetConfig+0x120>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01b      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a29      	ldr	r2, [pc, #164]	; (800455c <TIM_Base_SetConfig+0x124>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d017      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a28      	ldr	r2, [pc, #160]	; (8004560 <TIM_Base_SetConfig+0x128>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a27      	ldr	r2, [pc, #156]	; (8004564 <TIM_Base_SetConfig+0x12c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <TIM_Base_SetConfig+0x130>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a25      	ldr	r2, [pc, #148]	; (800456c <TIM_Base_SetConfig+0x134>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a24      	ldr	r2, [pc, #144]	; (8004570 <TIM_Base_SetConfig+0x138>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a23      	ldr	r2, [pc, #140]	; (8004574 <TIM_Base_SetConfig+0x13c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <TIM_Base_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_Base_SetConfig+0xf8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <TIM_Base_SetConfig+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d103      	bne.n	8004538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	615a      	str	r2, [r3, #20]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40010000 	.word	0x40010000
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40000c00 	.word	0x40000c00
 800455c:	40010400 	.word	0x40010400
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800
 800456c:	40001800 	.word	0x40001800
 8004570:	40001c00 	.word	0x40001c00
 8004574:	40002000 	.word	0x40002000

08004578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0201 	bic.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 0302 	bic.w	r3, r3, #2
 80045c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a20      	ldr	r2, [pc, #128]	; (8004650 <TIM_OC1_SetConfig+0xd8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_OC1_SetConfig+0x64>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <TIM_OC1_SetConfig+0xdc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d10c      	bne.n	80045f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0308 	bic.w	r3, r3, #8
 80045e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 0304 	bic.w	r3, r3, #4
 80045f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a15      	ldr	r2, [pc, #84]	; (8004650 <TIM_OC1_SetConfig+0xd8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_OC1_SetConfig+0x8e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a14      	ldr	r2, [pc, #80]	; (8004654 <TIM_OC1_SetConfig+0xdc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d111      	bne.n	800462a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800460c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40010000 	.word	0x40010000
 8004654:	40010400 	.word	0x40010400

08004658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 0210 	bic.w	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0320 	bic.w	r3, r3, #32
 80046a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a22      	ldr	r2, [pc, #136]	; (800473c <TIM_OC2_SetConfig+0xe4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_OC2_SetConfig+0x68>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a21      	ldr	r2, [pc, #132]	; (8004740 <TIM_OC2_SetConfig+0xe8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10d      	bne.n	80046dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <TIM_OC2_SetConfig+0xe4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_OC2_SetConfig+0x94>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a16      	ldr	r2, [pc, #88]	; (8004740 <TIM_OC2_SetConfig+0xe8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d113      	bne.n	8004714 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40010400 	.word	0x40010400

08004744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800478c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a21      	ldr	r2, [pc, #132]	; (8004824 <TIM_OC3_SetConfig+0xe0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_OC3_SetConfig+0x66>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a20      	ldr	r2, [pc, #128]	; (8004828 <TIM_OC3_SetConfig+0xe4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10d      	bne.n	80047c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a16      	ldr	r2, [pc, #88]	; (8004824 <TIM_OC3_SetConfig+0xe0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_OC3_SetConfig+0x92>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a15      	ldr	r2, [pc, #84]	; (8004828 <TIM_OC3_SetConfig+0xe4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d113      	bne.n	80047fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40010000 	.word	0x40010000
 8004828:	40010400 	.word	0x40010400

0800482c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	031b      	lsls	r3, r3, #12
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a12      	ldr	r2, [pc, #72]	; (80048d0 <TIM_OC4_SetConfig+0xa4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_OC4_SetConfig+0x68>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a11      	ldr	r2, [pc, #68]	; (80048d4 <TIM_OC4_SetConfig+0xa8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d109      	bne.n	80048a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40010400 	.word	0x40010400

080048d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 030a 	bic.w	r3, r3, #10
 8004914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004936:	b480      	push	{r7}
 8004938:	b087      	sub	sp, #28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0210 	bic.w	r2, r3, #16
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004960:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	031b      	lsls	r3, r3, #12
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004972:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f043 0307 	orr.w	r3, r3, #7
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	609a      	str	r2, [r3, #8]
}
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	021a      	lsls	r2, r3, #8
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e05a      	b.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d022      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a70:	d01d      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d018      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1b      	ldr	r2, [pc, #108]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1a      	ldr	r2, [pc, #104]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d10c      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40010400 	.word	0x40010400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40001800 	.word	0x40001800

08004b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e03f      	b.n	8004bbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc fdec 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb3f 	bl	80051f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10d      	bne.n	8004c1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_UART_IRQHandler+0x52>
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa57 	bl	80050c6 <UART_Receive_IT>
      return;
 8004c18:	e17c      	b.n	8004f14 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80b1 	beq.w	8004d84 <HAL_UART_IRQHandler+0x1bc>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_UART_IRQHandler+0x70>
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 80a6 	beq.w	8004d84 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_UART_IRQHandler+0x90>
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f043 0201 	orr.w	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_UART_IRQHandler+0xb0>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0202 	orr.w	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_UART_IRQHandler+0xd0>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00f      	beq.n	8004cc2 <HAL_UART_IRQHandler+0xfa>
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <HAL_UART_IRQHandler+0xee>
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f043 0208 	orr.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 811f 	beq.w	8004f0a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x11e>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f9f0 	bl	80050c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <HAL_UART_IRQHandler+0x146>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d031      	beq.n	8004d72 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f930 	bl	8004f74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d123      	bne.n	8004d6a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d013      	beq.n	8004d62 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	4a77      	ldr	r2, [pc, #476]	; (8004f1c <HAL_UART_IRQHandler+0x354>)
 8004d40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd fe38 	bl	80029bc <HAL_DMA_Abort_IT>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	e00e      	b.n	8004d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8f0 	bl	8004f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	e00a      	b.n	8004d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8ec 	bl	8004f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	e006      	b.n	8004d80 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8e8 	bl	8004f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d7e:	e0c4      	b.n	8004f0a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	bf00      	nop
    return;
 8004d82:	e0c2      	b.n	8004f0a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	f040 80a2 	bne.w	8004ed2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 809c 	beq.w	8004ed2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 8096 	beq.w	8004ed2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d14f      	bne.n	8004e6a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004dd4:	8a3b      	ldrh	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8099 	beq.w	8004f0e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004de0:	8a3a      	ldrh	r2, [r7, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	f080 8093 	bcs.w	8004f0e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8a3a      	ldrh	r2, [r7, #16]
 8004dec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df8:	d02b      	beq.n	8004e52 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e08:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e28:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0210 	bic.w	r2, r2, #16
 8004e46:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fd fd45 	bl	80028dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f87a 	bl	8004f5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e68:	e051      	b.n	8004f0e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d047      	beq.n	8004f12 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004e82:	8a7b      	ldrh	r3, [r7, #18]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d044      	beq.n	8004f12 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e96:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0210 	bic.w	r2, r2, #16
 8004ec4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ec6:	8a7b      	ldrh	r3, [r7, #18]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f846 	bl	8004f5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ed0:	e01f      	b.n	8004f12 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_UART_IRQHandler+0x326>
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f885 	bl	8004ff6 <UART_Transmit_IT>
    return;
 8004eec:	e012      	b.n	8004f14 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <HAL_UART_IRQHandler+0x34c>
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8c7 	bl	8005096 <UART_EndTransmit_IT>
    return;
 8004f08:	e004      	b.n	8004f14 <HAL_UART_IRQHandler+0x34c>
    return;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <HAL_UART_IRQHandler+0x34c>
      return;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <HAL_UART_IRQHandler+0x34c>
      return;
 8004f12:	bf00      	nop
  }
}
 8004f14:	3728      	adds	r7, #40	; 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	08004fcf 	.word	0x08004fcf

08004f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d107      	bne.n	8004fb4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0210 	bic.w	r2, r2, #16
 8004fb2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff ffad 	bl	8004f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b21      	cmp	r3, #33	; 0x21
 8005008:	d13e      	bne.n	8005088 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005012:	d114      	bne.n	800503e <UART_Transmit_IT+0x48>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d110      	bne.n	800503e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005030:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]
 800503c:	e008      	b.n	8005050 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6211      	str	r1, [r2, #32]
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4619      	mov	r1, r3
 800505e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10f      	bne.n	8005084 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005072:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005082:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff ff32 	bl	8004f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b22      	cmp	r3, #34	; 0x22
 80050d8:	f040 8087 	bne.w	80051ea <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e4:	d117      	bne.n	8005116 <UART_Receive_IT+0x50>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d113      	bne.n	8005116 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005104:	b29a      	uxth	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	1c9a      	adds	r2, r3, #2
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
 8005114:	e026      	b.n	8005164 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d007      	beq.n	800513a <UART_Receive_IT+0x74>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <UART_Receive_IT+0x82>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e008      	b.n	800515a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29b      	uxth	r3, r3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4619      	mov	r1, r3
 8005172:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005174:	2b00      	cmp	r3, #0
 8005176:	d136      	bne.n	80051e6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0220 	bic.w	r2, r2, #32
 8005186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d10e      	bne.n	80051d6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0210 	bic.w	r2, r2, #16
 80051c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fec4 	bl	8004f5c <HAL_UARTEx_RxEventCallback>
 80051d4:	e002      	b.n	80051dc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff feac 	bl	8004f34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e002      	b.n	80051ec <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e000      	b.n	80051ec <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f8:	b09f      	sub	sp, #124	; 0x7c
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520a:	68d9      	ldr	r1, [r3, #12]
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	ea40 0301 	orr.w	r3, r0, r1
 8005214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	431a      	orrs	r2, r3
 8005220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	431a      	orrs	r2, r3
 8005226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800522e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005238:	f021 010c 	bic.w	r1, r1, #12
 800523c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005242:	430b      	orrs	r3, r1
 8005244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005252:	6999      	ldr	r1, [r3, #24]
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	ea40 0301 	orr.w	r3, r0, r1
 800525c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800525e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4bc5      	ldr	r3, [pc, #788]	; (8005578 <UART_SetConfig+0x384>)
 8005264:	429a      	cmp	r2, r3
 8005266:	d004      	beq.n	8005272 <UART_SetConfig+0x7e>
 8005268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4bc3      	ldr	r3, [pc, #780]	; (800557c <UART_SetConfig+0x388>)
 800526e:	429a      	cmp	r2, r3
 8005270:	d103      	bne.n	800527a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005272:	f7fe f905 	bl	8003480 <HAL_RCC_GetPCLK2Freq>
 8005276:	6778      	str	r0, [r7, #116]	; 0x74
 8005278:	e002      	b.n	8005280 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800527a:	f7fe f8ed 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 800527e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005288:	f040 80b6 	bne.w	80053f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800528c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800528e:	461c      	mov	r4, r3
 8005290:	f04f 0500 	mov.w	r5, #0
 8005294:	4622      	mov	r2, r4
 8005296:	462b      	mov	r3, r5
 8005298:	1891      	adds	r1, r2, r2
 800529a:	6439      	str	r1, [r7, #64]	; 0x40
 800529c:	415b      	adcs	r3, r3
 800529e:	647b      	str	r3, [r7, #68]	; 0x44
 80052a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052a4:	1912      	adds	r2, r2, r4
 80052a6:	eb45 0303 	adc.w	r3, r5, r3
 80052aa:	f04f 0000 	mov.w	r0, #0
 80052ae:	f04f 0100 	mov.w	r1, #0
 80052b2:	00d9      	lsls	r1, r3, #3
 80052b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052b8:	00d0      	lsls	r0, r2, #3
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	1911      	adds	r1, r2, r4
 80052c0:	6639      	str	r1, [r7, #96]	; 0x60
 80052c2:	416b      	adcs	r3, r5
 80052c4:	667b      	str	r3, [r7, #100]	; 0x64
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	1891      	adds	r1, r2, r2
 80052d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80052d4:	415b      	adcs	r3, r3
 80052d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052e0:	f7fb fc82 	bl	8000be8 <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4ba5      	ldr	r3, [pc, #660]	; (8005580 <UART_SetConfig+0x38c>)
 80052ea:	fba3 2302 	umull	r2, r3, r3, r2
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	011e      	lsls	r6, r3, #4
 80052f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f4:	461c      	mov	r4, r3
 80052f6:	f04f 0500 	mov.w	r5, #0
 80052fa:	4622      	mov	r2, r4
 80052fc:	462b      	mov	r3, r5
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	6339      	str	r1, [r7, #48]	; 0x30
 8005302:	415b      	adcs	r3, r3
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
 8005306:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800530a:	1912      	adds	r2, r2, r4
 800530c:	eb45 0303 	adc.w	r3, r5, r3
 8005310:	f04f 0000 	mov.w	r0, #0
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	00d9      	lsls	r1, r3, #3
 800531a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800531e:	00d0      	lsls	r0, r2, #3
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	1911      	adds	r1, r2, r4
 8005326:	65b9      	str	r1, [r7, #88]	; 0x58
 8005328:	416b      	adcs	r3, r5
 800532a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	461a      	mov	r2, r3
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	1891      	adds	r1, r2, r2
 8005338:	62b9      	str	r1, [r7, #40]	; 0x28
 800533a:	415b      	adcs	r3, r3
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800533e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005342:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005346:	f7fb fc4f 	bl	8000be8 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4b8c      	ldr	r3, [pc, #560]	; (8005580 <UART_SetConfig+0x38c>)
 8005350:	fba3 1302 	umull	r1, r3, r3, r2
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	2164      	movs	r1, #100	; 0x64
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	3332      	adds	r3, #50	; 0x32
 8005362:	4a87      	ldr	r2, [pc, #540]	; (8005580 <UART_SetConfig+0x38c>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005370:	441e      	add	r6, r3
 8005372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005374:	4618      	mov	r0, r3
 8005376:	f04f 0100 	mov.w	r1, #0
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	1894      	adds	r4, r2, r2
 8005380:	623c      	str	r4, [r7, #32]
 8005382:	415b      	adcs	r3, r3
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
 8005386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800538a:	1812      	adds	r2, r2, r0
 800538c:	eb41 0303 	adc.w	r3, r1, r3
 8005390:	f04f 0400 	mov.w	r4, #0
 8005394:	f04f 0500 	mov.w	r5, #0
 8005398:	00dd      	lsls	r5, r3, #3
 800539a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800539e:	00d4      	lsls	r4, r2, #3
 80053a0:	4622      	mov	r2, r4
 80053a2:	462b      	mov	r3, r5
 80053a4:	1814      	adds	r4, r2, r0
 80053a6:	653c      	str	r4, [r7, #80]	; 0x50
 80053a8:	414b      	adcs	r3, r1
 80053aa:	657b      	str	r3, [r7, #84]	; 0x54
 80053ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	461a      	mov	r2, r3
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	1891      	adds	r1, r2, r2
 80053b8:	61b9      	str	r1, [r7, #24]
 80053ba:	415b      	adcs	r3, r3
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053c6:	f7fb fc0f 	bl	8000be8 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4b6c      	ldr	r3, [pc, #432]	; (8005580 <UART_SetConfig+0x38c>)
 80053d0:	fba3 1302 	umull	r1, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	2164      	movs	r1, #100	; 0x64
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3332      	adds	r3, #50	; 0x32
 80053e2:	4a67      	ldr	r2, [pc, #412]	; (8005580 <UART_SetConfig+0x38c>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f003 0207 	and.w	r2, r3, #7
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4432      	add	r2, r6
 80053f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053f6:	e0b9      	b.n	800556c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053fa:	461c      	mov	r4, r3
 80053fc:	f04f 0500 	mov.w	r5, #0
 8005400:	4622      	mov	r2, r4
 8005402:	462b      	mov	r3, r5
 8005404:	1891      	adds	r1, r2, r2
 8005406:	6139      	str	r1, [r7, #16]
 8005408:	415b      	adcs	r3, r3
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005410:	1912      	adds	r2, r2, r4
 8005412:	eb45 0303 	adc.w	r3, r5, r3
 8005416:	f04f 0000 	mov.w	r0, #0
 800541a:	f04f 0100 	mov.w	r1, #0
 800541e:	00d9      	lsls	r1, r3, #3
 8005420:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005424:	00d0      	lsls	r0, r2, #3
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	eb12 0804 	adds.w	r8, r2, r4
 800542e:	eb43 0905 	adc.w	r9, r3, r5
 8005432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4618      	mov	r0, r3
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	008b      	lsls	r3, r1, #2
 8005446:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800544a:	0082      	lsls	r2, r0, #2
 800544c:	4640      	mov	r0, r8
 800544e:	4649      	mov	r1, r9
 8005450:	f7fb fbca 	bl	8000be8 <__aeabi_uldivmod>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4b49      	ldr	r3, [pc, #292]	; (8005580 <UART_SetConfig+0x38c>)
 800545a:	fba3 2302 	umull	r2, r3, r3, r2
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	011e      	lsls	r6, r3, #4
 8005462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005464:	4618      	mov	r0, r3
 8005466:	f04f 0100 	mov.w	r1, #0
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	1894      	adds	r4, r2, r2
 8005470:	60bc      	str	r4, [r7, #8]
 8005472:	415b      	adcs	r3, r3
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800547a:	1812      	adds	r2, r2, r0
 800547c:	eb41 0303 	adc.w	r3, r1, r3
 8005480:	f04f 0400 	mov.w	r4, #0
 8005484:	f04f 0500 	mov.w	r5, #0
 8005488:	00dd      	lsls	r5, r3, #3
 800548a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800548e:	00d4      	lsls	r4, r2, #3
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	1814      	adds	r4, r2, r0
 8005496:	64bc      	str	r4, [r7, #72]	; 0x48
 8005498:	414b      	adcs	r3, r1
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800549c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f04f 0100 	mov.w	r1, #0
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	008b      	lsls	r3, r1, #2
 80054b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054b4:	0082      	lsls	r2, r0, #2
 80054b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054ba:	f7fb fb95 	bl	8000be8 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4b2f      	ldr	r3, [pc, #188]	; (8005580 <UART_SetConfig+0x38c>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	; 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <UART_SetConfig+0x38c>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054e2:	441e      	add	r6, r3
 80054e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e6:	4618      	mov	r0, r3
 80054e8:	f04f 0100 	mov.w	r1, #0
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	1894      	adds	r4, r2, r2
 80054f2:	603c      	str	r4, [r7, #0]
 80054f4:	415b      	adcs	r3, r3
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054fc:	1812      	adds	r2, r2, r0
 80054fe:	eb41 0303 	adc.w	r3, r1, r3
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	f04f 0500 	mov.w	r5, #0
 800550a:	00dd      	lsls	r5, r3, #3
 800550c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005510:	00d4      	lsls	r4, r2, #3
 8005512:	4622      	mov	r2, r4
 8005514:	462b      	mov	r3, r5
 8005516:	eb12 0a00 	adds.w	sl, r2, r0
 800551a:	eb43 0b01 	adc.w	fp, r3, r1
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4618      	mov	r0, r3
 8005524:	f04f 0100 	mov.w	r1, #0
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	008b      	lsls	r3, r1, #2
 8005532:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005536:	0082      	lsls	r2, r0, #2
 8005538:	4650      	mov	r0, sl
 800553a:	4659      	mov	r1, fp
 800553c:	f7fb fb54 	bl	8000be8 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <UART_SetConfig+0x38c>)
 8005546:	fba3 1302 	umull	r1, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	2164      	movs	r1, #100	; 0x64
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	3332      	adds	r3, #50	; 0x32
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <UART_SetConfig+0x38c>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4432      	add	r2, r6
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	377c      	adds	r7, #124	; 0x7c
 8005570:	46bd      	mov	sp, r7
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	bf00      	nop
 8005578:	40011000 	.word	0x40011000
 800557c:	40011400 	.word	0x40011400
 8005580:	51eb851f 	.word	0x51eb851f

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	2000000c 	.word	0x2000000c

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4d0d      	ldr	r5, [pc, #52]	; (80055c8 <__libc_init_array+0x38>)
 8005594:	4c0d      	ldr	r4, [pc, #52]	; (80055cc <__libc_init_array+0x3c>)
 8005596:	1b64      	subs	r4, r4, r5
 8005598:	10a4      	asrs	r4, r4, #2
 800559a:	2600      	movs	r6, #0
 800559c:	42a6      	cmp	r6, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	4d0b      	ldr	r5, [pc, #44]	; (80055d0 <__libc_init_array+0x40>)
 80055a2:	4c0c      	ldr	r4, [pc, #48]	; (80055d4 <__libc_init_array+0x44>)
 80055a4:	f002 fcf2 	bl	8007f8c <_init>
 80055a8:	1b64      	subs	r4, r4, r5
 80055aa:	10a4      	asrs	r4, r4, #2
 80055ac:	2600      	movs	r6, #0
 80055ae:	42a6      	cmp	r6, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b8:	4798      	blx	r3
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c2:	4798      	blx	r3
 80055c4:	3601      	adds	r6, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	080083bc 	.word	0x080083bc
 80055cc:	080083bc 	.word	0x080083bc
 80055d0:	080083bc 	.word	0x080083bc
 80055d4:	080083c0 	.word	0x080083c0

080055d8 <memset>:
 80055d8:	4402      	add	r2, r0
 80055da:	4603      	mov	r3, r0
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	f803 1b01 	strb.w	r1, [r3], #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <__cvt>:
 80055e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	ec55 4b10 	vmov	r4, r5, d0
 80055f0:	2d00      	cmp	r5, #0
 80055f2:	460e      	mov	r6, r1
 80055f4:	4619      	mov	r1, r3
 80055f6:	462b      	mov	r3, r5
 80055f8:	bfbb      	ittet	lt
 80055fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055fe:	461d      	movlt	r5, r3
 8005600:	2300      	movge	r3, #0
 8005602:	232d      	movlt	r3, #45	; 0x2d
 8005604:	700b      	strb	r3, [r1, #0]
 8005606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005608:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800560c:	4691      	mov	r9, r2
 800560e:	f023 0820 	bic.w	r8, r3, #32
 8005612:	bfbc      	itt	lt
 8005614:	4622      	movlt	r2, r4
 8005616:	4614      	movlt	r4, r2
 8005618:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800561c:	d005      	beq.n	800562a <__cvt+0x42>
 800561e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005622:	d100      	bne.n	8005626 <__cvt+0x3e>
 8005624:	3601      	adds	r6, #1
 8005626:	2102      	movs	r1, #2
 8005628:	e000      	b.n	800562c <__cvt+0x44>
 800562a:	2103      	movs	r1, #3
 800562c:	ab03      	add	r3, sp, #12
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	ab02      	add	r3, sp, #8
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	ec45 4b10 	vmov	d0, r4, r5
 8005638:	4653      	mov	r3, sl
 800563a:	4632      	mov	r2, r6
 800563c:	f000 fccc 	bl	8005fd8 <_dtoa_r>
 8005640:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005644:	4607      	mov	r7, r0
 8005646:	d102      	bne.n	800564e <__cvt+0x66>
 8005648:	f019 0f01 	tst.w	r9, #1
 800564c:	d022      	beq.n	8005694 <__cvt+0xac>
 800564e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005652:	eb07 0906 	add.w	r9, r7, r6
 8005656:	d110      	bne.n	800567a <__cvt+0x92>
 8005658:	783b      	ldrb	r3, [r7, #0]
 800565a:	2b30      	cmp	r3, #48	; 0x30
 800565c:	d10a      	bne.n	8005674 <__cvt+0x8c>
 800565e:	2200      	movs	r2, #0
 8005660:	2300      	movs	r3, #0
 8005662:	4620      	mov	r0, r4
 8005664:	4629      	mov	r1, r5
 8005666:	f7fb fa4f 	bl	8000b08 <__aeabi_dcmpeq>
 800566a:	b918      	cbnz	r0, 8005674 <__cvt+0x8c>
 800566c:	f1c6 0601 	rsb	r6, r6, #1
 8005670:	f8ca 6000 	str.w	r6, [sl]
 8005674:	f8da 3000 	ldr.w	r3, [sl]
 8005678:	4499      	add	r9, r3
 800567a:	2200      	movs	r2, #0
 800567c:	2300      	movs	r3, #0
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	f7fb fa41 	bl	8000b08 <__aeabi_dcmpeq>
 8005686:	b108      	cbz	r0, 800568c <__cvt+0xa4>
 8005688:	f8cd 900c 	str.w	r9, [sp, #12]
 800568c:	2230      	movs	r2, #48	; 0x30
 800568e:	9b03      	ldr	r3, [sp, #12]
 8005690:	454b      	cmp	r3, r9
 8005692:	d307      	bcc.n	80056a4 <__cvt+0xbc>
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005698:	1bdb      	subs	r3, r3, r7
 800569a:	4638      	mov	r0, r7
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	b004      	add	sp, #16
 80056a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a4:	1c59      	adds	r1, r3, #1
 80056a6:	9103      	str	r1, [sp, #12]
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e7f0      	b.n	800568e <__cvt+0xa6>

080056ac <__exponent>:
 80056ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ae:	4603      	mov	r3, r0
 80056b0:	2900      	cmp	r1, #0
 80056b2:	bfb8      	it	lt
 80056b4:	4249      	neglt	r1, r1
 80056b6:	f803 2b02 	strb.w	r2, [r3], #2
 80056ba:	bfb4      	ite	lt
 80056bc:	222d      	movlt	r2, #45	; 0x2d
 80056be:	222b      	movge	r2, #43	; 0x2b
 80056c0:	2909      	cmp	r1, #9
 80056c2:	7042      	strb	r2, [r0, #1]
 80056c4:	dd2a      	ble.n	800571c <__exponent+0x70>
 80056c6:	f10d 0407 	add.w	r4, sp, #7
 80056ca:	46a4      	mov	ip, r4
 80056cc:	270a      	movs	r7, #10
 80056ce:	46a6      	mov	lr, r4
 80056d0:	460a      	mov	r2, r1
 80056d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80056d6:	fb07 1516 	mls	r5, r7, r6, r1
 80056da:	3530      	adds	r5, #48	; 0x30
 80056dc:	2a63      	cmp	r2, #99	; 0x63
 80056de:	f104 34ff 	add.w	r4, r4, #4294967295
 80056e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056e6:	4631      	mov	r1, r6
 80056e8:	dcf1      	bgt.n	80056ce <__exponent+0x22>
 80056ea:	3130      	adds	r1, #48	; 0x30
 80056ec:	f1ae 0502 	sub.w	r5, lr, #2
 80056f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056f4:	1c44      	adds	r4, r0, #1
 80056f6:	4629      	mov	r1, r5
 80056f8:	4561      	cmp	r1, ip
 80056fa:	d30a      	bcc.n	8005712 <__exponent+0x66>
 80056fc:	f10d 0209 	add.w	r2, sp, #9
 8005700:	eba2 020e 	sub.w	r2, r2, lr
 8005704:	4565      	cmp	r5, ip
 8005706:	bf88      	it	hi
 8005708:	2200      	movhi	r2, #0
 800570a:	4413      	add	r3, r2
 800570c:	1a18      	subs	r0, r3, r0
 800570e:	b003      	add	sp, #12
 8005710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005716:	f804 2f01 	strb.w	r2, [r4, #1]!
 800571a:	e7ed      	b.n	80056f8 <__exponent+0x4c>
 800571c:	2330      	movs	r3, #48	; 0x30
 800571e:	3130      	adds	r1, #48	; 0x30
 8005720:	7083      	strb	r3, [r0, #2]
 8005722:	70c1      	strb	r1, [r0, #3]
 8005724:	1d03      	adds	r3, r0, #4
 8005726:	e7f1      	b.n	800570c <__exponent+0x60>

08005728 <_printf_float>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	ed2d 8b02 	vpush	{d8}
 8005730:	b08d      	sub	sp, #52	; 0x34
 8005732:	460c      	mov	r4, r1
 8005734:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005738:	4616      	mov	r6, r2
 800573a:	461f      	mov	r7, r3
 800573c:	4605      	mov	r5, r0
 800573e:	f001 fa37 	bl	8006bb0 <_localeconv_r>
 8005742:	f8d0 a000 	ldr.w	sl, [r0]
 8005746:	4650      	mov	r0, sl
 8005748:	f7fa fd62 	bl	8000210 <strlen>
 800574c:	2300      	movs	r3, #0
 800574e:	930a      	str	r3, [sp, #40]	; 0x28
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	f8d8 3000 	ldr.w	r3, [r8]
 8005758:	f894 b018 	ldrb.w	fp, [r4, #24]
 800575c:	3307      	adds	r3, #7
 800575e:	f023 0307 	bic.w	r3, r3, #7
 8005762:	f103 0208 	add.w	r2, r3, #8
 8005766:	f8c8 2000 	str.w	r2, [r8]
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005772:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005776:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800577a:	9307      	str	r3, [sp, #28]
 800577c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005780:	ee08 0a10 	vmov	s16, r0
 8005784:	4b9f      	ldr	r3, [pc, #636]	; (8005a04 <_printf_float+0x2dc>)
 8005786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800578a:	f04f 32ff 	mov.w	r2, #4294967295
 800578e:	f7fb f9ed 	bl	8000b6c <__aeabi_dcmpun>
 8005792:	bb88      	cbnz	r0, 80057f8 <_printf_float+0xd0>
 8005794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005798:	4b9a      	ldr	r3, [pc, #616]	; (8005a04 <_printf_float+0x2dc>)
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	f7fb f9c7 	bl	8000b30 <__aeabi_dcmple>
 80057a2:	bb48      	cbnz	r0, 80057f8 <_printf_float+0xd0>
 80057a4:	2200      	movs	r2, #0
 80057a6:	2300      	movs	r3, #0
 80057a8:	4640      	mov	r0, r8
 80057aa:	4649      	mov	r1, r9
 80057ac:	f7fb f9b6 	bl	8000b1c <__aeabi_dcmplt>
 80057b0:	b110      	cbz	r0, 80057b8 <_printf_float+0x90>
 80057b2:	232d      	movs	r3, #45	; 0x2d
 80057b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b8:	4b93      	ldr	r3, [pc, #588]	; (8005a08 <_printf_float+0x2e0>)
 80057ba:	4894      	ldr	r0, [pc, #592]	; (8005a0c <_printf_float+0x2e4>)
 80057bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057c0:	bf94      	ite	ls
 80057c2:	4698      	movls	r8, r3
 80057c4:	4680      	movhi	r8, r0
 80057c6:	2303      	movs	r3, #3
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	9b05      	ldr	r3, [sp, #20]
 80057cc:	f023 0204 	bic.w	r2, r3, #4
 80057d0:	6022      	str	r2, [r4, #0]
 80057d2:	f04f 0900 	mov.w	r9, #0
 80057d6:	9700      	str	r7, [sp, #0]
 80057d8:	4633      	mov	r3, r6
 80057da:	aa0b      	add	r2, sp, #44	; 0x2c
 80057dc:	4621      	mov	r1, r4
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 f9d8 	bl	8005b94 <_printf_common>
 80057e4:	3001      	adds	r0, #1
 80057e6:	f040 8090 	bne.w	800590a <_printf_float+0x1e2>
 80057ea:	f04f 30ff 	mov.w	r0, #4294967295
 80057ee:	b00d      	add	sp, #52	; 0x34
 80057f0:	ecbd 8b02 	vpop	{d8}
 80057f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	4649      	mov	r1, r9
 8005800:	f7fb f9b4 	bl	8000b6c <__aeabi_dcmpun>
 8005804:	b140      	cbz	r0, 8005818 <_printf_float+0xf0>
 8005806:	464b      	mov	r3, r9
 8005808:	2b00      	cmp	r3, #0
 800580a:	bfbc      	itt	lt
 800580c:	232d      	movlt	r3, #45	; 0x2d
 800580e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005812:	487f      	ldr	r0, [pc, #508]	; (8005a10 <_printf_float+0x2e8>)
 8005814:	4b7f      	ldr	r3, [pc, #508]	; (8005a14 <_printf_float+0x2ec>)
 8005816:	e7d1      	b.n	80057bc <_printf_float+0x94>
 8005818:	6863      	ldr	r3, [r4, #4]
 800581a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800581e:	9206      	str	r2, [sp, #24]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	d13f      	bne.n	80058a4 <_printf_float+0x17c>
 8005824:	2306      	movs	r3, #6
 8005826:	6063      	str	r3, [r4, #4]
 8005828:	9b05      	ldr	r3, [sp, #20]
 800582a:	6861      	ldr	r1, [r4, #4]
 800582c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005830:	2300      	movs	r3, #0
 8005832:	9303      	str	r3, [sp, #12]
 8005834:	ab0a      	add	r3, sp, #40	; 0x28
 8005836:	e9cd b301 	strd	fp, r3, [sp, #4]
 800583a:	ab09      	add	r3, sp, #36	; 0x24
 800583c:	ec49 8b10 	vmov	d0, r8, r9
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	6022      	str	r2, [r4, #0]
 8005844:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005848:	4628      	mov	r0, r5
 800584a:	f7ff fecd 	bl	80055e8 <__cvt>
 800584e:	9b06      	ldr	r3, [sp, #24]
 8005850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005852:	2b47      	cmp	r3, #71	; 0x47
 8005854:	4680      	mov	r8, r0
 8005856:	d108      	bne.n	800586a <_printf_float+0x142>
 8005858:	1cc8      	adds	r0, r1, #3
 800585a:	db02      	blt.n	8005862 <_printf_float+0x13a>
 800585c:	6863      	ldr	r3, [r4, #4]
 800585e:	4299      	cmp	r1, r3
 8005860:	dd41      	ble.n	80058e6 <_printf_float+0x1be>
 8005862:	f1ab 0b02 	sub.w	fp, fp, #2
 8005866:	fa5f fb8b 	uxtb.w	fp, fp
 800586a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800586e:	d820      	bhi.n	80058b2 <_printf_float+0x18a>
 8005870:	3901      	subs	r1, #1
 8005872:	465a      	mov	r2, fp
 8005874:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005878:	9109      	str	r1, [sp, #36]	; 0x24
 800587a:	f7ff ff17 	bl	80056ac <__exponent>
 800587e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005880:	1813      	adds	r3, r2, r0
 8005882:	2a01      	cmp	r2, #1
 8005884:	4681      	mov	r9, r0
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	dc02      	bgt.n	8005890 <_printf_float+0x168>
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	07d2      	lsls	r2, r2, #31
 800588e:	d501      	bpl.n	8005894 <_printf_float+0x16c>
 8005890:	3301      	adds	r3, #1
 8005892:	6123      	str	r3, [r4, #16]
 8005894:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005898:	2b00      	cmp	r3, #0
 800589a:	d09c      	beq.n	80057d6 <_printf_float+0xae>
 800589c:	232d      	movs	r3, #45	; 0x2d
 800589e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a2:	e798      	b.n	80057d6 <_printf_float+0xae>
 80058a4:	9a06      	ldr	r2, [sp, #24]
 80058a6:	2a47      	cmp	r2, #71	; 0x47
 80058a8:	d1be      	bne.n	8005828 <_printf_float+0x100>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1bc      	bne.n	8005828 <_printf_float+0x100>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e7b9      	b.n	8005826 <_printf_float+0xfe>
 80058b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058b6:	d118      	bne.n	80058ea <_printf_float+0x1c2>
 80058b8:	2900      	cmp	r1, #0
 80058ba:	6863      	ldr	r3, [r4, #4]
 80058bc:	dd0b      	ble.n	80058d6 <_printf_float+0x1ae>
 80058be:	6121      	str	r1, [r4, #16]
 80058c0:	b913      	cbnz	r3, 80058c8 <_printf_float+0x1a0>
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	07d0      	lsls	r0, r2, #31
 80058c6:	d502      	bpl.n	80058ce <_printf_float+0x1a6>
 80058c8:	3301      	adds	r3, #1
 80058ca:	440b      	add	r3, r1
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80058d0:	f04f 0900 	mov.w	r9, #0
 80058d4:	e7de      	b.n	8005894 <_printf_float+0x16c>
 80058d6:	b913      	cbnz	r3, 80058de <_printf_float+0x1b6>
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	07d2      	lsls	r2, r2, #31
 80058dc:	d501      	bpl.n	80058e2 <_printf_float+0x1ba>
 80058de:	3302      	adds	r3, #2
 80058e0:	e7f4      	b.n	80058cc <_printf_float+0x1a4>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e7f2      	b.n	80058cc <_printf_float+0x1a4>
 80058e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ec:	4299      	cmp	r1, r3
 80058ee:	db05      	blt.n	80058fc <_printf_float+0x1d4>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	6121      	str	r1, [r4, #16]
 80058f4:	07d8      	lsls	r0, r3, #31
 80058f6:	d5ea      	bpl.n	80058ce <_printf_float+0x1a6>
 80058f8:	1c4b      	adds	r3, r1, #1
 80058fa:	e7e7      	b.n	80058cc <_printf_float+0x1a4>
 80058fc:	2900      	cmp	r1, #0
 80058fe:	bfd4      	ite	le
 8005900:	f1c1 0202 	rsble	r2, r1, #2
 8005904:	2201      	movgt	r2, #1
 8005906:	4413      	add	r3, r2
 8005908:	e7e0      	b.n	80058cc <_printf_float+0x1a4>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	055a      	lsls	r2, r3, #21
 800590e:	d407      	bmi.n	8005920 <_printf_float+0x1f8>
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	4642      	mov	r2, r8
 8005914:	4631      	mov	r1, r6
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	d12c      	bne.n	8005978 <_printf_float+0x250>
 800591e:	e764      	b.n	80057ea <_printf_float+0xc2>
 8005920:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005924:	f240 80e0 	bls.w	8005ae8 <_printf_float+0x3c0>
 8005928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800592c:	2200      	movs	r2, #0
 800592e:	2300      	movs	r3, #0
 8005930:	f7fb f8ea 	bl	8000b08 <__aeabi_dcmpeq>
 8005934:	2800      	cmp	r0, #0
 8005936:	d034      	beq.n	80059a2 <_printf_float+0x27a>
 8005938:	4a37      	ldr	r2, [pc, #220]	; (8005a18 <_printf_float+0x2f0>)
 800593a:	2301      	movs	r3, #1
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f af51 	beq.w	80057ea <_printf_float+0xc2>
 8005948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800594c:	429a      	cmp	r2, r3
 800594e:	db02      	blt.n	8005956 <_printf_float+0x22e>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	07d8      	lsls	r0, r3, #31
 8005954:	d510      	bpl.n	8005978 <_printf_float+0x250>
 8005956:	ee18 3a10 	vmov	r3, s16
 800595a:	4652      	mov	r2, sl
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	f43f af41 	beq.w	80057ea <_printf_float+0xc2>
 8005968:	f04f 0800 	mov.w	r8, #0
 800596c:	f104 091a 	add.w	r9, r4, #26
 8005970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005972:	3b01      	subs	r3, #1
 8005974:	4543      	cmp	r3, r8
 8005976:	dc09      	bgt.n	800598c <_printf_float+0x264>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	079b      	lsls	r3, r3, #30
 800597c:	f100 8105 	bmi.w	8005b8a <_printf_float+0x462>
 8005980:	68e0      	ldr	r0, [r4, #12]
 8005982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005984:	4298      	cmp	r0, r3
 8005986:	bfb8      	it	lt
 8005988:	4618      	movlt	r0, r3
 800598a:	e730      	b.n	80057ee <_printf_float+0xc6>
 800598c:	2301      	movs	r3, #1
 800598e:	464a      	mov	r2, r9
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f af27 	beq.w	80057ea <_printf_float+0xc2>
 800599c:	f108 0801 	add.w	r8, r8, #1
 80059a0:	e7e6      	b.n	8005970 <_printf_float+0x248>
 80059a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dc39      	bgt.n	8005a1c <_printf_float+0x2f4>
 80059a8:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <_printf_float+0x2f0>)
 80059aa:	2301      	movs	r3, #1
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f af19 	beq.w	80057ea <_printf_float+0xc2>
 80059b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059bc:	4313      	orrs	r3, r2
 80059be:	d102      	bne.n	80059c6 <_printf_float+0x29e>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	07d9      	lsls	r1, r3, #31
 80059c4:	d5d8      	bpl.n	8005978 <_printf_float+0x250>
 80059c6:	ee18 3a10 	vmov	r3, s16
 80059ca:	4652      	mov	r2, sl
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f af09 	beq.w	80057ea <_printf_float+0xc2>
 80059d8:	f04f 0900 	mov.w	r9, #0
 80059dc:	f104 0a1a 	add.w	sl, r4, #26
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	425b      	negs	r3, r3
 80059e4:	454b      	cmp	r3, r9
 80059e6:	dc01      	bgt.n	80059ec <_printf_float+0x2c4>
 80059e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ea:	e792      	b.n	8005912 <_printf_float+0x1ea>
 80059ec:	2301      	movs	r3, #1
 80059ee:	4652      	mov	r2, sl
 80059f0:	4631      	mov	r1, r6
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b8      	blx	r7
 80059f6:	3001      	adds	r0, #1
 80059f8:	f43f aef7 	beq.w	80057ea <_printf_float+0xc2>
 80059fc:	f109 0901 	add.w	r9, r9, #1
 8005a00:	e7ee      	b.n	80059e0 <_printf_float+0x2b8>
 8005a02:	bf00      	nop
 8005a04:	7fefffff 	.word	0x7fefffff
 8005a08:	08007fd8 	.word	0x08007fd8
 8005a0c:	08007fdc 	.word	0x08007fdc
 8005a10:	08007fe4 	.word	0x08007fe4
 8005a14:	08007fe0 	.word	0x08007fe0
 8005a18:	08007fe8 	.word	0x08007fe8
 8005a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a20:	429a      	cmp	r2, r3
 8005a22:	bfa8      	it	ge
 8005a24:	461a      	movge	r2, r3
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	4691      	mov	r9, r2
 8005a2a:	dc37      	bgt.n	8005a9c <_printf_float+0x374>
 8005a2c:	f04f 0b00 	mov.w	fp, #0
 8005a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a34:	f104 021a 	add.w	r2, r4, #26
 8005a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	eba3 0309 	sub.w	r3, r3, r9
 8005a40:	455b      	cmp	r3, fp
 8005a42:	dc33      	bgt.n	8005aac <_printf_float+0x384>
 8005a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	db3b      	blt.n	8005ac4 <_printf_float+0x39c>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	07da      	lsls	r2, r3, #31
 8005a50:	d438      	bmi.n	8005ac4 <_printf_float+0x39c>
 8005a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a54:	9b05      	ldr	r3, [sp, #20]
 8005a56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	eba2 0901 	sub.w	r9, r2, r1
 8005a5e:	4599      	cmp	r9, r3
 8005a60:	bfa8      	it	ge
 8005a62:	4699      	movge	r9, r3
 8005a64:	f1b9 0f00 	cmp.w	r9, #0
 8005a68:	dc35      	bgt.n	8005ad6 <_printf_float+0x3ae>
 8005a6a:	f04f 0800 	mov.w	r8, #0
 8005a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a72:	f104 0a1a 	add.w	sl, r4, #26
 8005a76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	eba3 0309 	sub.w	r3, r3, r9
 8005a80:	4543      	cmp	r3, r8
 8005a82:	f77f af79 	ble.w	8005978 <_printf_float+0x250>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f aeaa 	beq.w	80057ea <_printf_float+0xc2>
 8005a96:	f108 0801 	add.w	r8, r8, #1
 8005a9a:	e7ec      	b.n	8005a76 <_printf_float+0x34e>
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b8      	blx	r7
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d1c0      	bne.n	8005a2c <_printf_float+0x304>
 8005aaa:	e69e      	b.n	80057ea <_printf_float+0xc2>
 8005aac:	2301      	movs	r3, #1
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	9205      	str	r2, [sp, #20]
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f ae97 	beq.w	80057ea <_printf_float+0xc2>
 8005abc:	9a05      	ldr	r2, [sp, #20]
 8005abe:	f10b 0b01 	add.w	fp, fp, #1
 8005ac2:	e7b9      	b.n	8005a38 <_printf_float+0x310>
 8005ac4:	ee18 3a10 	vmov	r3, s16
 8005ac8:	4652      	mov	r2, sl
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d1be      	bne.n	8005a52 <_printf_float+0x32a>
 8005ad4:	e689      	b.n	80057ea <_printf_float+0xc2>
 8005ad6:	9a05      	ldr	r2, [sp, #20]
 8005ad8:	464b      	mov	r3, r9
 8005ada:	4442      	add	r2, r8
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d1c1      	bne.n	8005a6a <_printf_float+0x342>
 8005ae6:	e680      	b.n	80057ea <_printf_float+0xc2>
 8005ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aea:	2a01      	cmp	r2, #1
 8005aec:	dc01      	bgt.n	8005af2 <_printf_float+0x3ca>
 8005aee:	07db      	lsls	r3, r3, #31
 8005af0:	d538      	bpl.n	8005b64 <_printf_float+0x43c>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4642      	mov	r2, r8
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b8      	blx	r7
 8005afc:	3001      	adds	r0, #1
 8005afe:	f43f ae74 	beq.w	80057ea <_printf_float+0xc2>
 8005b02:	ee18 3a10 	vmov	r3, s16
 8005b06:	4652      	mov	r2, sl
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	f43f ae6b 	beq.w	80057ea <_printf_float+0xc2>
 8005b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f7fa fff4 	bl	8000b08 <__aeabi_dcmpeq>
 8005b20:	b9d8      	cbnz	r0, 8005b5a <_printf_float+0x432>
 8005b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b24:	f108 0201 	add.w	r2, r8, #1
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	d10e      	bne.n	8005b52 <_printf_float+0x42a>
 8005b34:	e659      	b.n	80057ea <_printf_float+0xc2>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4652      	mov	r2, sl
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	f43f ae52 	beq.w	80057ea <_printf_float+0xc2>
 8005b46:	f108 0801 	add.w	r8, r8, #1
 8005b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	4543      	cmp	r3, r8
 8005b50:	dcf1      	bgt.n	8005b36 <_printf_float+0x40e>
 8005b52:	464b      	mov	r3, r9
 8005b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b58:	e6dc      	b.n	8005914 <_printf_float+0x1ec>
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	f104 0a1a 	add.w	sl, r4, #26
 8005b62:	e7f2      	b.n	8005b4a <_printf_float+0x422>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4642      	mov	r2, r8
 8005b68:	e7df      	b.n	8005b2a <_printf_float+0x402>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	464a      	mov	r2, r9
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f ae38 	beq.w	80057ea <_printf_float+0xc2>
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b82:	1a5b      	subs	r3, r3, r1
 8005b84:	4543      	cmp	r3, r8
 8005b86:	dcf0      	bgt.n	8005b6a <_printf_float+0x442>
 8005b88:	e6fa      	b.n	8005980 <_printf_float+0x258>
 8005b8a:	f04f 0800 	mov.w	r8, #0
 8005b8e:	f104 0919 	add.w	r9, r4, #25
 8005b92:	e7f4      	b.n	8005b7e <_printf_float+0x456>

08005b94 <_printf_common>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	4616      	mov	r6, r2
 8005b9a:	4699      	mov	r9, r3
 8005b9c:	688a      	ldr	r2, [r1, #8]
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	bfb8      	it	lt
 8005ba8:	4613      	movlt	r3, r2
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b10a      	cbz	r2, 8005bba <_printf_common+0x26>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	6833      	ldrmi	r3, [r6, #0]
 8005bc2:	3302      	addmi	r3, #2
 8005bc4:	6033      	strmi	r3, [r6, #0]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d106      	bne.n	8005bdc <_printf_common+0x48>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	6832      	ldr	r2, [r6, #0]
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dc26      	bgt.n	8005c2a <_printf_common+0x96>
 8005bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005be0:	1e13      	subs	r3, r2, #0
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	bf18      	it	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d42b      	bmi.n	8005c44 <_printf_common+0xb0>
 8005bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c0      	blx	r8
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d01e      	beq.n	8005c38 <_printf_common+0xa4>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	68e5      	ldr	r5, [r4, #12]
 8005bfe:	6832      	ldr	r2, [r6, #0]
 8005c00:	f003 0306 	and.w	r3, r3, #6
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	bf08      	it	eq
 8005c08:	1aad      	subeq	r5, r5, r2
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	6922      	ldr	r2, [r4, #16]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	2600      	movs	r6, #0
 8005c20:	341a      	adds	r4, #26
 8005c22:	42b5      	cmp	r5, r6
 8005c24:	d11a      	bne.n	8005c5c <_printf_common+0xc8>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e008      	b.n	8005c3c <_printf_common+0xa8>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4649      	mov	r1, r9
 8005c30:	4638      	mov	r0, r7
 8005c32:	47c0      	blx	r8
 8005c34:	3001      	adds	r0, #1
 8005c36:	d103      	bne.n	8005c40 <_printf_common+0xac>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7c6      	b.n	8005bd2 <_printf_common+0x3e>
 8005c44:	18e1      	adds	r1, r4, r3
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	2030      	movs	r0, #48	; 0x30
 8005c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c4e:	4422      	add	r2, r4
 8005c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c58:	3302      	adds	r3, #2
 8005c5a:	e7c7      	b.n	8005bec <_printf_common+0x58>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4649      	mov	r1, r9
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d0e6      	beq.n	8005c38 <_printf_common+0xa4>
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7d9      	b.n	8005c22 <_printf_common+0x8e>
	...

08005c70 <_printf_i>:
 8005c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	460c      	mov	r4, r1
 8005c76:	4691      	mov	r9, r2
 8005c78:	7e27      	ldrb	r7, [r4, #24]
 8005c7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c7c:	2f78      	cmp	r7, #120	; 0x78
 8005c7e:	4680      	mov	r8, r0
 8005c80:	469a      	mov	sl, r3
 8005c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c86:	d807      	bhi.n	8005c98 <_printf_i+0x28>
 8005c88:	2f62      	cmp	r7, #98	; 0x62
 8005c8a:	d80a      	bhi.n	8005ca2 <_printf_i+0x32>
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	f000 80d8 	beq.w	8005e42 <_printf_i+0x1d2>
 8005c92:	2f58      	cmp	r7, #88	; 0x58
 8005c94:	f000 80a3 	beq.w	8005dde <_printf_i+0x16e>
 8005c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ca0:	e03a      	b.n	8005d18 <_printf_i+0xa8>
 8005ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ca6:	2b15      	cmp	r3, #21
 8005ca8:	d8f6      	bhi.n	8005c98 <_printf_i+0x28>
 8005caa:	a001      	add	r0, pc, #4	; (adr r0, 8005cb0 <_printf_i+0x40>)
 8005cac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005c99 	.word	0x08005c99
 8005cbc:	08005c99 	.word	0x08005c99
 8005cc0:	08005c99 	.word	0x08005c99
 8005cc4:	08005c99 	.word	0x08005c99
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c99 	.word	0x08005c99
 8005cd0:	08005c99 	.word	0x08005c99
 8005cd4:	08005c99 	.word	0x08005c99
 8005cd8:	08005c99 	.word	0x08005c99
 8005cdc:	08005e29 	.word	0x08005e29
 8005ce0:	08005d4d 	.word	0x08005d4d
 8005ce4:	08005e0b 	.word	0x08005e0b
 8005ce8:	08005c99 	.word	0x08005c99
 8005cec:	08005c99 	.word	0x08005c99
 8005cf0:	08005e4b 	.word	0x08005e4b
 8005cf4:	08005c99 	.word	0x08005c99
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08005c99 	.word	0x08005c99
 8005d00:	08005c99 	.word	0x08005c99
 8005d04:	08005e13 	.word	0x08005e13
 8005d08:	680b      	ldr	r3, [r1, #0]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	600a      	str	r2, [r1, #0]
 8005d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0a3      	b.n	8005e64 <_printf_i+0x1f4>
 8005d1c:	6825      	ldr	r5, [r4, #0]
 8005d1e:	6808      	ldr	r0, [r1, #0]
 8005d20:	062e      	lsls	r6, r5, #24
 8005d22:	f100 0304 	add.w	r3, r0, #4
 8005d26:	d50a      	bpl.n	8005d3e <_printf_i+0xce>
 8005d28:	6805      	ldr	r5, [r0, #0]
 8005d2a:	600b      	str	r3, [r1, #0]
 8005d2c:	2d00      	cmp	r5, #0
 8005d2e:	da03      	bge.n	8005d38 <_printf_i+0xc8>
 8005d30:	232d      	movs	r3, #45	; 0x2d
 8005d32:	426d      	negs	r5, r5
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d38:	485e      	ldr	r0, [pc, #376]	; (8005eb4 <_printf_i+0x244>)
 8005d3a:	230a      	movs	r3, #10
 8005d3c:	e019      	b.n	8005d72 <_printf_i+0x102>
 8005d3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d42:	6805      	ldr	r5, [r0, #0]
 8005d44:	600b      	str	r3, [r1, #0]
 8005d46:	bf18      	it	ne
 8005d48:	b22d      	sxthne	r5, r5
 8005d4a:	e7ef      	b.n	8005d2c <_printf_i+0xbc>
 8005d4c:	680b      	ldr	r3, [r1, #0]
 8005d4e:	6825      	ldr	r5, [r4, #0]
 8005d50:	1d18      	adds	r0, r3, #4
 8005d52:	6008      	str	r0, [r1, #0]
 8005d54:	0628      	lsls	r0, r5, #24
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0xec>
 8005d58:	681d      	ldr	r5, [r3, #0]
 8005d5a:	e002      	b.n	8005d62 <_printf_i+0xf2>
 8005d5c:	0669      	lsls	r1, r5, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0xe8>
 8005d60:	881d      	ldrh	r5, [r3, #0]
 8005d62:	4854      	ldr	r0, [pc, #336]	; (8005eb4 <_printf_i+0x244>)
 8005d64:	2f6f      	cmp	r7, #111	; 0x6f
 8005d66:	bf0c      	ite	eq
 8005d68:	2308      	moveq	r3, #8
 8005d6a:	230a      	movne	r3, #10
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d72:	6866      	ldr	r6, [r4, #4]
 8005d74:	60a6      	str	r6, [r4, #8]
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	bfa2      	ittt	ge
 8005d7a:	6821      	ldrge	r1, [r4, #0]
 8005d7c:	f021 0104 	bicge.w	r1, r1, #4
 8005d80:	6021      	strge	r1, [r4, #0]
 8005d82:	b90d      	cbnz	r5, 8005d88 <_printf_i+0x118>
 8005d84:	2e00      	cmp	r6, #0
 8005d86:	d04d      	beq.n	8005e24 <_printf_i+0x1b4>
 8005d88:	4616      	mov	r6, r2
 8005d8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005d92:	5dc7      	ldrb	r7, [r0, r7]
 8005d94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d98:	462f      	mov	r7, r5
 8005d9a:	42bb      	cmp	r3, r7
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	d9f4      	bls.n	8005d8a <_printf_i+0x11a>
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d10b      	bne.n	8005dbc <_printf_i+0x14c>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	07df      	lsls	r7, r3, #31
 8005da8:	d508      	bpl.n	8005dbc <_printf_i+0x14c>
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6861      	ldr	r1, [r4, #4]
 8005dae:	4299      	cmp	r1, r3
 8005db0:	bfde      	ittt	le
 8005db2:	2330      	movle	r3, #48	; 0x30
 8005db4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005db8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dbc:	1b92      	subs	r2, r2, r6
 8005dbe:	6122      	str	r2, [r4, #16]
 8005dc0:	f8cd a000 	str.w	sl, [sp]
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	aa03      	add	r2, sp, #12
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4640      	mov	r0, r8
 8005dcc:	f7ff fee2 	bl	8005b94 <_printf_common>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d14c      	bne.n	8005e6e <_printf_i+0x1fe>
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd8:	b004      	add	sp, #16
 8005dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dde:	4835      	ldr	r0, [pc, #212]	; (8005eb4 <_printf_i+0x244>)
 8005de0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	680e      	ldr	r6, [r1, #0]
 8005de8:	061f      	lsls	r7, r3, #24
 8005dea:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dee:	600e      	str	r6, [r1, #0]
 8005df0:	d514      	bpl.n	8005e1c <_printf_i+0x1ac>
 8005df2:	07d9      	lsls	r1, r3, #31
 8005df4:	bf44      	itt	mi
 8005df6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dfa:	6023      	strmi	r3, [r4, #0]
 8005dfc:	b91d      	cbnz	r5, 8005e06 <_printf_i+0x196>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f023 0320 	bic.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2310      	movs	r3, #16
 8005e08:	e7b0      	b.n	8005d6c <_printf_i+0xfc>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f043 0320 	orr.w	r3, r3, #32
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	2378      	movs	r3, #120	; 0x78
 8005e14:	4828      	ldr	r0, [pc, #160]	; (8005eb8 <_printf_i+0x248>)
 8005e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e1a:	e7e3      	b.n	8005de4 <_printf_i+0x174>
 8005e1c:	065e      	lsls	r6, r3, #25
 8005e1e:	bf48      	it	mi
 8005e20:	b2ad      	uxthmi	r5, r5
 8005e22:	e7e6      	b.n	8005df2 <_printf_i+0x182>
 8005e24:	4616      	mov	r6, r2
 8005e26:	e7bb      	b.n	8005da0 <_printf_i+0x130>
 8005e28:	680b      	ldr	r3, [r1, #0]
 8005e2a:	6826      	ldr	r6, [r4, #0]
 8005e2c:	6960      	ldr	r0, [r4, #20]
 8005e2e:	1d1d      	adds	r5, r3, #4
 8005e30:	600d      	str	r5, [r1, #0]
 8005e32:	0635      	lsls	r5, r6, #24
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	d501      	bpl.n	8005e3c <_printf_i+0x1cc>
 8005e38:	6018      	str	r0, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <_printf_i+0x1d2>
 8005e3c:	0671      	lsls	r1, r6, #25
 8005e3e:	d5fb      	bpl.n	8005e38 <_printf_i+0x1c8>
 8005e40:	8018      	strh	r0, [r3, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	4616      	mov	r6, r2
 8005e48:	e7ba      	b.n	8005dc0 <_printf_i+0x150>
 8005e4a:	680b      	ldr	r3, [r1, #0]
 8005e4c:	1d1a      	adds	r2, r3, #4
 8005e4e:	600a      	str	r2, [r1, #0]
 8005e50:	681e      	ldr	r6, [r3, #0]
 8005e52:	6862      	ldr	r2, [r4, #4]
 8005e54:	2100      	movs	r1, #0
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7fa f9e2 	bl	8000220 <memchr>
 8005e5c:	b108      	cbz	r0, 8005e62 <_printf_i+0x1f2>
 8005e5e:	1b80      	subs	r0, r0, r6
 8005e60:	6060      	str	r0, [r4, #4]
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	6123      	str	r3, [r4, #16]
 8005e66:	2300      	movs	r3, #0
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e6c:	e7a8      	b.n	8005dc0 <_printf_i+0x150>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	4632      	mov	r2, r6
 8005e72:	4649      	mov	r1, r9
 8005e74:	4640      	mov	r0, r8
 8005e76:	47d0      	blx	sl
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d0ab      	beq.n	8005dd4 <_printf_i+0x164>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	079b      	lsls	r3, r3, #30
 8005e80:	d413      	bmi.n	8005eaa <_printf_i+0x23a>
 8005e82:	68e0      	ldr	r0, [r4, #12]
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	4298      	cmp	r0, r3
 8005e88:	bfb8      	it	lt
 8005e8a:	4618      	movlt	r0, r3
 8005e8c:	e7a4      	b.n	8005dd8 <_printf_i+0x168>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4632      	mov	r2, r6
 8005e92:	4649      	mov	r1, r9
 8005e94:	4640      	mov	r0, r8
 8005e96:	47d0      	blx	sl
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d09b      	beq.n	8005dd4 <_printf_i+0x164>
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	9903      	ldr	r1, [sp, #12]
 8005ea2:	1a5b      	subs	r3, r3, r1
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dcf2      	bgt.n	8005e8e <_printf_i+0x21e>
 8005ea8:	e7eb      	b.n	8005e82 <_printf_i+0x212>
 8005eaa:	2500      	movs	r5, #0
 8005eac:	f104 0619 	add.w	r6, r4, #25
 8005eb0:	e7f5      	b.n	8005e9e <_printf_i+0x22e>
 8005eb2:	bf00      	nop
 8005eb4:	08007fea 	.word	0x08007fea
 8005eb8:	08007ffb 	.word	0x08007ffb

08005ebc <quorem>:
 8005ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec0:	6903      	ldr	r3, [r0, #16]
 8005ec2:	690c      	ldr	r4, [r1, #16]
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	f2c0 8081 	blt.w	8005fce <quorem+0x112>
 8005ecc:	3c01      	subs	r4, #1
 8005ece:	f101 0814 	add.w	r8, r1, #20
 8005ed2:	f100 0514 	add.w	r5, r0, #20
 8005ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005eec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ef0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ef4:	d331      	bcc.n	8005f5a <quorem+0x9e>
 8005ef6:	f04f 0e00 	mov.w	lr, #0
 8005efa:	4640      	mov	r0, r8
 8005efc:	46ac      	mov	ip, r5
 8005efe:	46f2      	mov	sl, lr
 8005f00:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f04:	b293      	uxth	r3, r2
 8005f06:	fb06 e303 	mla	r3, r6, r3, lr
 8005f0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	ebaa 0303 	sub.w	r3, sl, r3
 8005f14:	0c12      	lsrs	r2, r2, #16
 8005f16:	f8dc a000 	ldr.w	sl, [ip]
 8005f1a:	fb06 e202 	mla	r2, r6, r2, lr
 8005f1e:	fa13 f38a 	uxtah	r3, r3, sl
 8005f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f26:	fa1f fa82 	uxth.w	sl, r2
 8005f2a:	f8dc 2000 	ldr.w	r2, [ip]
 8005f2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005f32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f3c:	4581      	cmp	r9, r0
 8005f3e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f46:	d2db      	bcs.n	8005f00 <quorem+0x44>
 8005f48:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f4c:	b92b      	cbnz	r3, 8005f5a <quorem+0x9e>
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	3b04      	subs	r3, #4
 8005f52:	429d      	cmp	r5, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	d32e      	bcc.n	8005fb6 <quorem+0xfa>
 8005f58:	613c      	str	r4, [r7, #16]
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	f001 f8c0 	bl	80070e0 <__mcmp>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	db24      	blt.n	8005fae <quorem+0xf2>
 8005f64:	3601      	adds	r6, #1
 8005f66:	4628      	mov	r0, r5
 8005f68:	f04f 0c00 	mov.w	ip, #0
 8005f6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f70:	f8d0 e000 	ldr.w	lr, [r0]
 8005f74:	b293      	uxth	r3, r2
 8005f76:	ebac 0303 	sub.w	r3, ip, r3
 8005f7a:	0c12      	lsrs	r2, r2, #16
 8005f7c:	fa13 f38e 	uxtah	r3, r3, lr
 8005f80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f8e:	45c1      	cmp	r9, r8
 8005f90:	f840 3b04 	str.w	r3, [r0], #4
 8005f94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f98:	d2e8      	bcs.n	8005f6c <quorem+0xb0>
 8005f9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fa2:	b922      	cbnz	r2, 8005fae <quorem+0xf2>
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	429d      	cmp	r5, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	d30a      	bcc.n	8005fc2 <quorem+0x106>
 8005fac:	613c      	str	r4, [r7, #16]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	b003      	add	sp, #12
 8005fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	3b04      	subs	r3, #4
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	d1cc      	bne.n	8005f58 <quorem+0x9c>
 8005fbe:	3c01      	subs	r4, #1
 8005fc0:	e7c7      	b.n	8005f52 <quorem+0x96>
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	3b04      	subs	r3, #4
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	d1f0      	bne.n	8005fac <quorem+0xf0>
 8005fca:	3c01      	subs	r4, #1
 8005fcc:	e7eb      	b.n	8005fa6 <quorem+0xea>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e7ee      	b.n	8005fb0 <quorem+0xf4>
 8005fd2:	0000      	movs	r0, r0
 8005fd4:	0000      	movs	r0, r0
	...

08005fd8 <_dtoa_r>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	ed2d 8b02 	vpush	{d8}
 8005fe0:	ec57 6b10 	vmov	r6, r7, d0
 8005fe4:	b095      	sub	sp, #84	; 0x54
 8005fe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fec:	9105      	str	r1, [sp, #20]
 8005fee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ff8:	b975      	cbnz	r5, 8006018 <_dtoa_r+0x40>
 8005ffa:	2010      	movs	r0, #16
 8005ffc:	f000 fddc 	bl	8006bb8 <malloc>
 8006000:	4602      	mov	r2, r0
 8006002:	6260      	str	r0, [r4, #36]	; 0x24
 8006004:	b920      	cbnz	r0, 8006010 <_dtoa_r+0x38>
 8006006:	4bb2      	ldr	r3, [pc, #712]	; (80062d0 <_dtoa_r+0x2f8>)
 8006008:	21ea      	movs	r1, #234	; 0xea
 800600a:	48b2      	ldr	r0, [pc, #712]	; (80062d4 <_dtoa_r+0x2fc>)
 800600c:	f001 fa32 	bl	8007474 <__assert_func>
 8006010:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006014:	6005      	str	r5, [r0, #0]
 8006016:	60c5      	str	r5, [r0, #12]
 8006018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601a:	6819      	ldr	r1, [r3, #0]
 800601c:	b151      	cbz	r1, 8006034 <_dtoa_r+0x5c>
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	604a      	str	r2, [r1, #4]
 8006022:	2301      	movs	r3, #1
 8006024:	4093      	lsls	r3, r2
 8006026:	608b      	str	r3, [r1, #8]
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fe1b 	bl	8006c64 <_Bfree>
 800602e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	1e3b      	subs	r3, r7, #0
 8006036:	bfb9      	ittee	lt
 8006038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800603c:	9303      	strlt	r3, [sp, #12]
 800603e:	2300      	movge	r3, #0
 8006040:	f8c8 3000 	strge.w	r3, [r8]
 8006044:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006048:	4ba3      	ldr	r3, [pc, #652]	; (80062d8 <_dtoa_r+0x300>)
 800604a:	bfbc      	itt	lt
 800604c:	2201      	movlt	r2, #1
 800604e:	f8c8 2000 	strlt.w	r2, [r8]
 8006052:	ea33 0309 	bics.w	r3, r3, r9
 8006056:	d11b      	bne.n	8006090 <_dtoa_r+0xb8>
 8006058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800605a:	f242 730f 	movw	r3, #9999	; 0x270f
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006064:	4333      	orrs	r3, r6
 8006066:	f000 857a 	beq.w	8006b5e <_dtoa_r+0xb86>
 800606a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800606c:	b963      	cbnz	r3, 8006088 <_dtoa_r+0xb0>
 800606e:	4b9b      	ldr	r3, [pc, #620]	; (80062dc <_dtoa_r+0x304>)
 8006070:	e024      	b.n	80060bc <_dtoa_r+0xe4>
 8006072:	4b9b      	ldr	r3, [pc, #620]	; (80062e0 <_dtoa_r+0x308>)
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	9800      	ldr	r0, [sp, #0]
 800607e:	b015      	add	sp, #84	; 0x54
 8006080:	ecbd 8b02 	vpop	{d8}
 8006084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006088:	4b94      	ldr	r3, [pc, #592]	; (80062dc <_dtoa_r+0x304>)
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	3303      	adds	r3, #3
 800608e:	e7f3      	b.n	8006078 <_dtoa_r+0xa0>
 8006090:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006094:	2200      	movs	r2, #0
 8006096:	ec51 0b17 	vmov	r0, r1, d7
 800609a:	2300      	movs	r3, #0
 800609c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80060a0:	f7fa fd32 	bl	8000b08 <__aeabi_dcmpeq>
 80060a4:	4680      	mov	r8, r0
 80060a6:	b158      	cbz	r0, 80060c0 <_dtoa_r+0xe8>
 80060a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060aa:	2301      	movs	r3, #1
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8551 	beq.w	8006b58 <_dtoa_r+0xb80>
 80060b6:	488b      	ldr	r0, [pc, #556]	; (80062e4 <_dtoa_r+0x30c>)
 80060b8:	6018      	str	r0, [r3, #0]
 80060ba:	1e43      	subs	r3, r0, #1
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	e7dd      	b.n	800607c <_dtoa_r+0xa4>
 80060c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80060c4:	aa12      	add	r2, sp, #72	; 0x48
 80060c6:	a913      	add	r1, sp, #76	; 0x4c
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 f8ad 	bl	8007228 <__d2b>
 80060ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80060d2:	4683      	mov	fp, r0
 80060d4:	2d00      	cmp	r5, #0
 80060d6:	d07c      	beq.n	80061d2 <_dtoa_r+0x1fa>
 80060d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80060de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80060e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80060ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80060ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060f2:	4b7d      	ldr	r3, [pc, #500]	; (80062e8 <_dtoa_r+0x310>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	4630      	mov	r0, r6
 80060f8:	4639      	mov	r1, r7
 80060fa:	f7fa f8e5 	bl	80002c8 <__aeabi_dsub>
 80060fe:	a36e      	add	r3, pc, #440	; (adr r3, 80062b8 <_dtoa_r+0x2e0>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f7fa fa98 	bl	8000638 <__aeabi_dmul>
 8006108:	a36d      	add	r3, pc, #436	; (adr r3, 80062c0 <_dtoa_r+0x2e8>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fa f8dd 	bl	80002cc <__adddf3>
 8006112:	4606      	mov	r6, r0
 8006114:	4628      	mov	r0, r5
 8006116:	460f      	mov	r7, r1
 8006118:	f7fa fa24 	bl	8000564 <__aeabi_i2d>
 800611c:	a36a      	add	r3, pc, #424	; (adr r3, 80062c8 <_dtoa_r+0x2f0>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa fa89 	bl	8000638 <__aeabi_dmul>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4630      	mov	r0, r6
 800612c:	4639      	mov	r1, r7
 800612e:	f7fa f8cd 	bl	80002cc <__adddf3>
 8006132:	4606      	mov	r6, r0
 8006134:	460f      	mov	r7, r1
 8006136:	f7fa fd2f 	bl	8000b98 <__aeabi_d2iz>
 800613a:	2200      	movs	r2, #0
 800613c:	4682      	mov	sl, r0
 800613e:	2300      	movs	r3, #0
 8006140:	4630      	mov	r0, r6
 8006142:	4639      	mov	r1, r7
 8006144:	f7fa fcea 	bl	8000b1c <__aeabi_dcmplt>
 8006148:	b148      	cbz	r0, 800615e <_dtoa_r+0x186>
 800614a:	4650      	mov	r0, sl
 800614c:	f7fa fa0a 	bl	8000564 <__aeabi_i2d>
 8006150:	4632      	mov	r2, r6
 8006152:	463b      	mov	r3, r7
 8006154:	f7fa fcd8 	bl	8000b08 <__aeabi_dcmpeq>
 8006158:	b908      	cbnz	r0, 800615e <_dtoa_r+0x186>
 800615a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800615e:	f1ba 0f16 	cmp.w	sl, #22
 8006162:	d854      	bhi.n	800620e <_dtoa_r+0x236>
 8006164:	4b61      	ldr	r3, [pc, #388]	; (80062ec <_dtoa_r+0x314>)
 8006166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006172:	f7fa fcd3 	bl	8000b1c <__aeabi_dcmplt>
 8006176:	2800      	cmp	r0, #0
 8006178:	d04b      	beq.n	8006212 <_dtoa_r+0x23a>
 800617a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800617e:	2300      	movs	r3, #0
 8006180:	930e      	str	r3, [sp, #56]	; 0x38
 8006182:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006184:	1b5d      	subs	r5, r3, r5
 8006186:	1e6b      	subs	r3, r5, #1
 8006188:	9304      	str	r3, [sp, #16]
 800618a:	bf43      	ittte	mi
 800618c:	2300      	movmi	r3, #0
 800618e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006192:	9304      	strmi	r3, [sp, #16]
 8006194:	f04f 0800 	movpl.w	r8, #0
 8006198:	f1ba 0f00 	cmp.w	sl, #0
 800619c:	db3b      	blt.n	8006216 <_dtoa_r+0x23e>
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80061a4:	4453      	add	r3, sl
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	2300      	movs	r3, #0
 80061aa:	9306      	str	r3, [sp, #24]
 80061ac:	9b05      	ldr	r3, [sp, #20]
 80061ae:	2b09      	cmp	r3, #9
 80061b0:	d869      	bhi.n	8006286 <_dtoa_r+0x2ae>
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	bfc4      	itt	gt
 80061b6:	3b04      	subgt	r3, #4
 80061b8:	9305      	strgt	r3, [sp, #20]
 80061ba:	9b05      	ldr	r3, [sp, #20]
 80061bc:	f1a3 0302 	sub.w	r3, r3, #2
 80061c0:	bfcc      	ite	gt
 80061c2:	2500      	movgt	r5, #0
 80061c4:	2501      	movle	r5, #1
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d869      	bhi.n	800629e <_dtoa_r+0x2c6>
 80061ca:	e8df f003 	tbb	[pc, r3]
 80061ce:	4e2c      	.short	0x4e2c
 80061d0:	5a4c      	.short	0x5a4c
 80061d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80061d6:	441d      	add	r5, r3
 80061d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061dc:	2b20      	cmp	r3, #32
 80061de:	bfc1      	itttt	gt
 80061e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80061e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80061ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061f0:	bfda      	itte	le
 80061f2:	f1c3 0320 	rsble	r3, r3, #32
 80061f6:	fa06 f003 	lslle.w	r0, r6, r3
 80061fa:	4318      	orrgt	r0, r3
 80061fc:	f7fa f9a2 	bl	8000544 <__aeabi_ui2d>
 8006200:	2301      	movs	r3, #1
 8006202:	4606      	mov	r6, r0
 8006204:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006208:	3d01      	subs	r5, #1
 800620a:	9310      	str	r3, [sp, #64]	; 0x40
 800620c:	e771      	b.n	80060f2 <_dtoa_r+0x11a>
 800620e:	2301      	movs	r3, #1
 8006210:	e7b6      	b.n	8006180 <_dtoa_r+0x1a8>
 8006212:	900e      	str	r0, [sp, #56]	; 0x38
 8006214:	e7b5      	b.n	8006182 <_dtoa_r+0x1aa>
 8006216:	f1ca 0300 	rsb	r3, sl, #0
 800621a:	9306      	str	r3, [sp, #24]
 800621c:	2300      	movs	r3, #0
 800621e:	eba8 080a 	sub.w	r8, r8, sl
 8006222:	930d      	str	r3, [sp, #52]	; 0x34
 8006224:	e7c2      	b.n	80061ac <_dtoa_r+0x1d4>
 8006226:	2300      	movs	r3, #0
 8006228:	9308      	str	r3, [sp, #32]
 800622a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	dc39      	bgt.n	80062a4 <_dtoa_r+0x2cc>
 8006230:	f04f 0901 	mov.w	r9, #1
 8006234:	f8cd 9004 	str.w	r9, [sp, #4]
 8006238:	464b      	mov	r3, r9
 800623a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800623e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006240:	2200      	movs	r2, #0
 8006242:	6042      	str	r2, [r0, #4]
 8006244:	2204      	movs	r2, #4
 8006246:	f102 0614 	add.w	r6, r2, #20
 800624a:	429e      	cmp	r6, r3
 800624c:	6841      	ldr	r1, [r0, #4]
 800624e:	d92f      	bls.n	80062b0 <_dtoa_r+0x2d8>
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fcc7 	bl	8006be4 <_Balloc>
 8006256:	9000      	str	r0, [sp, #0]
 8006258:	2800      	cmp	r0, #0
 800625a:	d14b      	bne.n	80062f4 <_dtoa_r+0x31c>
 800625c:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <_dtoa_r+0x318>)
 800625e:	4602      	mov	r2, r0
 8006260:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006264:	e6d1      	b.n	800600a <_dtoa_r+0x32>
 8006266:	2301      	movs	r3, #1
 8006268:	e7de      	b.n	8006228 <_dtoa_r+0x250>
 800626a:	2300      	movs	r3, #0
 800626c:	9308      	str	r3, [sp, #32]
 800626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006270:	eb0a 0903 	add.w	r9, sl, r3
 8006274:	f109 0301 	add.w	r3, r9, #1
 8006278:	2b01      	cmp	r3, #1
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	bfb8      	it	lt
 800627e:	2301      	movlt	r3, #1
 8006280:	e7dd      	b.n	800623e <_dtoa_r+0x266>
 8006282:	2301      	movs	r3, #1
 8006284:	e7f2      	b.n	800626c <_dtoa_r+0x294>
 8006286:	2501      	movs	r5, #1
 8006288:	2300      	movs	r3, #0
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	9508      	str	r5, [sp, #32]
 800628e:	f04f 39ff 	mov.w	r9, #4294967295
 8006292:	2200      	movs	r2, #0
 8006294:	f8cd 9004 	str.w	r9, [sp, #4]
 8006298:	2312      	movs	r3, #18
 800629a:	9209      	str	r2, [sp, #36]	; 0x24
 800629c:	e7cf      	b.n	800623e <_dtoa_r+0x266>
 800629e:	2301      	movs	r3, #1
 80062a0:	9308      	str	r3, [sp, #32]
 80062a2:	e7f4      	b.n	800628e <_dtoa_r+0x2b6>
 80062a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80062a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80062ac:	464b      	mov	r3, r9
 80062ae:	e7c6      	b.n	800623e <_dtoa_r+0x266>
 80062b0:	3101      	adds	r1, #1
 80062b2:	6041      	str	r1, [r0, #4]
 80062b4:	0052      	lsls	r2, r2, #1
 80062b6:	e7c6      	b.n	8006246 <_dtoa_r+0x26e>
 80062b8:	636f4361 	.word	0x636f4361
 80062bc:	3fd287a7 	.word	0x3fd287a7
 80062c0:	8b60c8b3 	.word	0x8b60c8b3
 80062c4:	3fc68a28 	.word	0x3fc68a28
 80062c8:	509f79fb 	.word	0x509f79fb
 80062cc:	3fd34413 	.word	0x3fd34413
 80062d0:	08008019 	.word	0x08008019
 80062d4:	08008030 	.word	0x08008030
 80062d8:	7ff00000 	.word	0x7ff00000
 80062dc:	08008015 	.word	0x08008015
 80062e0:	0800800c 	.word	0x0800800c
 80062e4:	08007fe9 	.word	0x08007fe9
 80062e8:	3ff80000 	.word	0x3ff80000
 80062ec:	08008128 	.word	0x08008128
 80062f0:	0800808f 	.word	0x0800808f
 80062f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f6:	9a00      	ldr	r2, [sp, #0]
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	9b01      	ldr	r3, [sp, #4]
 80062fc:	2b0e      	cmp	r3, #14
 80062fe:	f200 80ad 	bhi.w	800645c <_dtoa_r+0x484>
 8006302:	2d00      	cmp	r5, #0
 8006304:	f000 80aa 	beq.w	800645c <_dtoa_r+0x484>
 8006308:	f1ba 0f00 	cmp.w	sl, #0
 800630c:	dd36      	ble.n	800637c <_dtoa_r+0x3a4>
 800630e:	4ac3      	ldr	r2, [pc, #780]	; (800661c <_dtoa_r+0x644>)
 8006310:	f00a 030f 	and.w	r3, sl, #15
 8006314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006318:	ed93 7b00 	vldr	d7, [r3]
 800631c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006320:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006324:	eeb0 8a47 	vmov.f32	s16, s14
 8006328:	eef0 8a67 	vmov.f32	s17, s15
 800632c:	d016      	beq.n	800635c <_dtoa_r+0x384>
 800632e:	4bbc      	ldr	r3, [pc, #752]	; (8006620 <_dtoa_r+0x648>)
 8006330:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006338:	f7fa faa8 	bl	800088c <__aeabi_ddiv>
 800633c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006340:	f007 070f 	and.w	r7, r7, #15
 8006344:	2503      	movs	r5, #3
 8006346:	4eb6      	ldr	r6, [pc, #728]	; (8006620 <_dtoa_r+0x648>)
 8006348:	b957      	cbnz	r7, 8006360 <_dtoa_r+0x388>
 800634a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800634e:	ec53 2b18 	vmov	r2, r3, d8
 8006352:	f7fa fa9b 	bl	800088c <__aeabi_ddiv>
 8006356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800635a:	e029      	b.n	80063b0 <_dtoa_r+0x3d8>
 800635c:	2502      	movs	r5, #2
 800635e:	e7f2      	b.n	8006346 <_dtoa_r+0x36e>
 8006360:	07f9      	lsls	r1, r7, #31
 8006362:	d508      	bpl.n	8006376 <_dtoa_r+0x39e>
 8006364:	ec51 0b18 	vmov	r0, r1, d8
 8006368:	e9d6 2300 	ldrd	r2, r3, [r6]
 800636c:	f7fa f964 	bl	8000638 <__aeabi_dmul>
 8006370:	ec41 0b18 	vmov	d8, r0, r1
 8006374:	3501      	adds	r5, #1
 8006376:	107f      	asrs	r7, r7, #1
 8006378:	3608      	adds	r6, #8
 800637a:	e7e5      	b.n	8006348 <_dtoa_r+0x370>
 800637c:	f000 80a6 	beq.w	80064cc <_dtoa_r+0x4f4>
 8006380:	f1ca 0600 	rsb	r6, sl, #0
 8006384:	4ba5      	ldr	r3, [pc, #660]	; (800661c <_dtoa_r+0x644>)
 8006386:	4fa6      	ldr	r7, [pc, #664]	; (8006620 <_dtoa_r+0x648>)
 8006388:	f006 020f 	and.w	r2, r6, #15
 800638c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006398:	f7fa f94e 	bl	8000638 <__aeabi_dmul>
 800639c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a0:	1136      	asrs	r6, r6, #4
 80063a2:	2300      	movs	r3, #0
 80063a4:	2502      	movs	r5, #2
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	f040 8085 	bne.w	80064b6 <_dtoa_r+0x4de>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1d2      	bne.n	8006356 <_dtoa_r+0x37e>
 80063b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 808c 	beq.w	80064d0 <_dtoa_r+0x4f8>
 80063b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063bc:	4b99      	ldr	r3, [pc, #612]	; (8006624 <_dtoa_r+0x64c>)
 80063be:	2200      	movs	r2, #0
 80063c0:	4630      	mov	r0, r6
 80063c2:	4639      	mov	r1, r7
 80063c4:	f7fa fbaa 	bl	8000b1c <__aeabi_dcmplt>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	f000 8081 	beq.w	80064d0 <_dtoa_r+0x4f8>
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d07d      	beq.n	80064d0 <_dtoa_r+0x4f8>
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	dd3c      	ble.n	8006454 <_dtoa_r+0x47c>
 80063da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80063de:	9307      	str	r3, [sp, #28]
 80063e0:	2200      	movs	r2, #0
 80063e2:	4b91      	ldr	r3, [pc, #580]	; (8006628 <_dtoa_r+0x650>)
 80063e4:	4630      	mov	r0, r6
 80063e6:	4639      	mov	r1, r7
 80063e8:	f7fa f926 	bl	8000638 <__aeabi_dmul>
 80063ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063f0:	3501      	adds	r5, #1
 80063f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80063f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063fa:	4628      	mov	r0, r5
 80063fc:	f7fa f8b2 	bl	8000564 <__aeabi_i2d>
 8006400:	4632      	mov	r2, r6
 8006402:	463b      	mov	r3, r7
 8006404:	f7fa f918 	bl	8000638 <__aeabi_dmul>
 8006408:	4b88      	ldr	r3, [pc, #544]	; (800662c <_dtoa_r+0x654>)
 800640a:	2200      	movs	r2, #0
 800640c:	f7f9 ff5e 	bl	80002cc <__adddf3>
 8006410:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006418:	9303      	str	r3, [sp, #12]
 800641a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800641c:	2b00      	cmp	r3, #0
 800641e:	d15c      	bne.n	80064da <_dtoa_r+0x502>
 8006420:	4b83      	ldr	r3, [pc, #524]	; (8006630 <_dtoa_r+0x658>)
 8006422:	2200      	movs	r2, #0
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7f9 ff4e 	bl	80002c8 <__aeabi_dsub>
 800642c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006430:	4606      	mov	r6, r0
 8006432:	460f      	mov	r7, r1
 8006434:	f7fa fb90 	bl	8000b58 <__aeabi_dcmpgt>
 8006438:	2800      	cmp	r0, #0
 800643a:	f040 8296 	bne.w	800696a <_dtoa_r+0x992>
 800643e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006442:	4630      	mov	r0, r6
 8006444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006448:	4639      	mov	r1, r7
 800644a:	f7fa fb67 	bl	8000b1c <__aeabi_dcmplt>
 800644e:	2800      	cmp	r0, #0
 8006450:	f040 8288 	bne.w	8006964 <_dtoa_r+0x98c>
 8006454:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006458:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800645c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800645e:	2b00      	cmp	r3, #0
 8006460:	f2c0 8158 	blt.w	8006714 <_dtoa_r+0x73c>
 8006464:	f1ba 0f0e 	cmp.w	sl, #14
 8006468:	f300 8154 	bgt.w	8006714 <_dtoa_r+0x73c>
 800646c:	4b6b      	ldr	r3, [pc, #428]	; (800661c <_dtoa_r+0x644>)
 800646e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006472:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	f280 80e3 	bge.w	8006644 <_dtoa_r+0x66c>
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f300 80df 	bgt.w	8006644 <_dtoa_r+0x66c>
 8006486:	f040 826d 	bne.w	8006964 <_dtoa_r+0x98c>
 800648a:	4b69      	ldr	r3, [pc, #420]	; (8006630 <_dtoa_r+0x658>)
 800648c:	2200      	movs	r2, #0
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	f7fa f8d1 	bl	8000638 <__aeabi_dmul>
 8006496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800649a:	f7fa fb53 	bl	8000b44 <__aeabi_dcmpge>
 800649e:	9e01      	ldr	r6, [sp, #4]
 80064a0:	4637      	mov	r7, r6
 80064a2:	2800      	cmp	r0, #0
 80064a4:	f040 8243 	bne.w	800692e <_dtoa_r+0x956>
 80064a8:	9d00      	ldr	r5, [sp, #0]
 80064aa:	2331      	movs	r3, #49	; 0x31
 80064ac:	f805 3b01 	strb.w	r3, [r5], #1
 80064b0:	f10a 0a01 	add.w	sl, sl, #1
 80064b4:	e23f      	b.n	8006936 <_dtoa_r+0x95e>
 80064b6:	07f2      	lsls	r2, r6, #31
 80064b8:	d505      	bpl.n	80064c6 <_dtoa_r+0x4ee>
 80064ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064be:	f7fa f8bb 	bl	8000638 <__aeabi_dmul>
 80064c2:	3501      	adds	r5, #1
 80064c4:	2301      	movs	r3, #1
 80064c6:	1076      	asrs	r6, r6, #1
 80064c8:	3708      	adds	r7, #8
 80064ca:	e76c      	b.n	80063a6 <_dtoa_r+0x3ce>
 80064cc:	2502      	movs	r5, #2
 80064ce:	e76f      	b.n	80063b0 <_dtoa_r+0x3d8>
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80064d6:	930c      	str	r3, [sp, #48]	; 0x30
 80064d8:	e78d      	b.n	80063f6 <_dtoa_r+0x41e>
 80064da:	9900      	ldr	r1, [sp, #0]
 80064dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80064de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064e0:	4b4e      	ldr	r3, [pc, #312]	; (800661c <_dtoa_r+0x644>)
 80064e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064e6:	4401      	add	r1, r0
 80064e8:	9102      	str	r1, [sp, #8]
 80064ea:	9908      	ldr	r1, [sp, #32]
 80064ec:	eeb0 8a47 	vmov.f32	s16, s14
 80064f0:	eef0 8a67 	vmov.f32	s17, s15
 80064f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d045      	beq.n	800658c <_dtoa_r+0x5b4>
 8006500:	494c      	ldr	r1, [pc, #304]	; (8006634 <_dtoa_r+0x65c>)
 8006502:	2000      	movs	r0, #0
 8006504:	f7fa f9c2 	bl	800088c <__aeabi_ddiv>
 8006508:	ec53 2b18 	vmov	r2, r3, d8
 800650c:	f7f9 fedc 	bl	80002c8 <__aeabi_dsub>
 8006510:	9d00      	ldr	r5, [sp, #0]
 8006512:	ec41 0b18 	vmov	d8, r0, r1
 8006516:	4639      	mov	r1, r7
 8006518:	4630      	mov	r0, r6
 800651a:	f7fa fb3d 	bl	8000b98 <__aeabi_d2iz>
 800651e:	900c      	str	r0, [sp, #48]	; 0x30
 8006520:	f7fa f820 	bl	8000564 <__aeabi_i2d>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7f9 fecc 	bl	80002c8 <__aeabi_dsub>
 8006530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006532:	3330      	adds	r3, #48	; 0x30
 8006534:	f805 3b01 	strb.w	r3, [r5], #1
 8006538:	ec53 2b18 	vmov	r2, r3, d8
 800653c:	4606      	mov	r6, r0
 800653e:	460f      	mov	r7, r1
 8006540:	f7fa faec 	bl	8000b1c <__aeabi_dcmplt>
 8006544:	2800      	cmp	r0, #0
 8006546:	d165      	bne.n	8006614 <_dtoa_r+0x63c>
 8006548:	4632      	mov	r2, r6
 800654a:	463b      	mov	r3, r7
 800654c:	4935      	ldr	r1, [pc, #212]	; (8006624 <_dtoa_r+0x64c>)
 800654e:	2000      	movs	r0, #0
 8006550:	f7f9 feba 	bl	80002c8 <__aeabi_dsub>
 8006554:	ec53 2b18 	vmov	r2, r3, d8
 8006558:	f7fa fae0 	bl	8000b1c <__aeabi_dcmplt>
 800655c:	2800      	cmp	r0, #0
 800655e:	f040 80b9 	bne.w	80066d4 <_dtoa_r+0x6fc>
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	429d      	cmp	r5, r3
 8006566:	f43f af75 	beq.w	8006454 <_dtoa_r+0x47c>
 800656a:	4b2f      	ldr	r3, [pc, #188]	; (8006628 <_dtoa_r+0x650>)
 800656c:	ec51 0b18 	vmov	r0, r1, d8
 8006570:	2200      	movs	r2, #0
 8006572:	f7fa f861 	bl	8000638 <__aeabi_dmul>
 8006576:	4b2c      	ldr	r3, [pc, #176]	; (8006628 <_dtoa_r+0x650>)
 8006578:	ec41 0b18 	vmov	d8, r0, r1
 800657c:	2200      	movs	r2, #0
 800657e:	4630      	mov	r0, r6
 8006580:	4639      	mov	r1, r7
 8006582:	f7fa f859 	bl	8000638 <__aeabi_dmul>
 8006586:	4606      	mov	r6, r0
 8006588:	460f      	mov	r7, r1
 800658a:	e7c4      	b.n	8006516 <_dtoa_r+0x53e>
 800658c:	ec51 0b17 	vmov	r0, r1, d7
 8006590:	f7fa f852 	bl	8000638 <__aeabi_dmul>
 8006594:	9b02      	ldr	r3, [sp, #8]
 8006596:	9d00      	ldr	r5, [sp, #0]
 8006598:	930c      	str	r3, [sp, #48]	; 0x30
 800659a:	ec41 0b18 	vmov	d8, r0, r1
 800659e:	4639      	mov	r1, r7
 80065a0:	4630      	mov	r0, r6
 80065a2:	f7fa faf9 	bl	8000b98 <__aeabi_d2iz>
 80065a6:	9011      	str	r0, [sp, #68]	; 0x44
 80065a8:	f7f9 ffdc 	bl	8000564 <__aeabi_i2d>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7f9 fe88 	bl	80002c8 <__aeabi_dsub>
 80065b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065ba:	3330      	adds	r3, #48	; 0x30
 80065bc:	f805 3b01 	strb.w	r3, [r5], #1
 80065c0:	9b02      	ldr	r3, [sp, #8]
 80065c2:	429d      	cmp	r5, r3
 80065c4:	4606      	mov	r6, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	d134      	bne.n	8006638 <_dtoa_r+0x660>
 80065ce:	4b19      	ldr	r3, [pc, #100]	; (8006634 <_dtoa_r+0x65c>)
 80065d0:	ec51 0b18 	vmov	r0, r1, d8
 80065d4:	f7f9 fe7a 	bl	80002cc <__adddf3>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4630      	mov	r0, r6
 80065de:	4639      	mov	r1, r7
 80065e0:	f7fa faba 	bl	8000b58 <__aeabi_dcmpgt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d175      	bne.n	80066d4 <_dtoa_r+0x6fc>
 80065e8:	ec53 2b18 	vmov	r2, r3, d8
 80065ec:	4911      	ldr	r1, [pc, #68]	; (8006634 <_dtoa_r+0x65c>)
 80065ee:	2000      	movs	r0, #0
 80065f0:	f7f9 fe6a 	bl	80002c8 <__aeabi_dsub>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa fa8e 	bl	8000b1c <__aeabi_dcmplt>
 8006600:	2800      	cmp	r0, #0
 8006602:	f43f af27 	beq.w	8006454 <_dtoa_r+0x47c>
 8006606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006608:	1e6b      	subs	r3, r5, #1
 800660a:	930c      	str	r3, [sp, #48]	; 0x30
 800660c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006610:	2b30      	cmp	r3, #48	; 0x30
 8006612:	d0f8      	beq.n	8006606 <_dtoa_r+0x62e>
 8006614:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006618:	e04a      	b.n	80066b0 <_dtoa_r+0x6d8>
 800661a:	bf00      	nop
 800661c:	08008128 	.word	0x08008128
 8006620:	08008100 	.word	0x08008100
 8006624:	3ff00000 	.word	0x3ff00000
 8006628:	40240000 	.word	0x40240000
 800662c:	401c0000 	.word	0x401c0000
 8006630:	40140000 	.word	0x40140000
 8006634:	3fe00000 	.word	0x3fe00000
 8006638:	4baf      	ldr	r3, [pc, #700]	; (80068f8 <_dtoa_r+0x920>)
 800663a:	f7f9 fffd 	bl	8000638 <__aeabi_dmul>
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	e7ac      	b.n	800659e <_dtoa_r+0x5c6>
 8006644:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006648:	9d00      	ldr	r5, [sp, #0]
 800664a:	4642      	mov	r2, r8
 800664c:	464b      	mov	r3, r9
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	f7fa f91b 	bl	800088c <__aeabi_ddiv>
 8006656:	f7fa fa9f 	bl	8000b98 <__aeabi_d2iz>
 800665a:	9002      	str	r0, [sp, #8]
 800665c:	f7f9 ff82 	bl	8000564 <__aeabi_i2d>
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	f7f9 ffe8 	bl	8000638 <__aeabi_dmul>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4630      	mov	r0, r6
 800666e:	4639      	mov	r1, r7
 8006670:	f7f9 fe2a 	bl	80002c8 <__aeabi_dsub>
 8006674:	9e02      	ldr	r6, [sp, #8]
 8006676:	9f01      	ldr	r7, [sp, #4]
 8006678:	3630      	adds	r6, #48	; 0x30
 800667a:	f805 6b01 	strb.w	r6, [r5], #1
 800667e:	9e00      	ldr	r6, [sp, #0]
 8006680:	1bae      	subs	r6, r5, r6
 8006682:	42b7      	cmp	r7, r6
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	d137      	bne.n	80066fa <_dtoa_r+0x722>
 800668a:	f7f9 fe1f 	bl	80002cc <__adddf3>
 800668e:	4642      	mov	r2, r8
 8006690:	464b      	mov	r3, r9
 8006692:	4606      	mov	r6, r0
 8006694:	460f      	mov	r7, r1
 8006696:	f7fa fa5f 	bl	8000b58 <__aeabi_dcmpgt>
 800669a:	b9c8      	cbnz	r0, 80066d0 <_dtoa_r+0x6f8>
 800669c:	4642      	mov	r2, r8
 800669e:	464b      	mov	r3, r9
 80066a0:	4630      	mov	r0, r6
 80066a2:	4639      	mov	r1, r7
 80066a4:	f7fa fa30 	bl	8000b08 <__aeabi_dcmpeq>
 80066a8:	b110      	cbz	r0, 80066b0 <_dtoa_r+0x6d8>
 80066aa:	9b02      	ldr	r3, [sp, #8]
 80066ac:	07d9      	lsls	r1, r3, #31
 80066ae:	d40f      	bmi.n	80066d0 <_dtoa_r+0x6f8>
 80066b0:	4620      	mov	r0, r4
 80066b2:	4659      	mov	r1, fp
 80066b4:	f000 fad6 	bl	8006c64 <_Bfree>
 80066b8:	2300      	movs	r3, #0
 80066ba:	702b      	strb	r3, [r5, #0]
 80066bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066be:	f10a 0001 	add.w	r0, sl, #1
 80066c2:	6018      	str	r0, [r3, #0]
 80066c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f43f acd8 	beq.w	800607c <_dtoa_r+0xa4>
 80066cc:	601d      	str	r5, [r3, #0]
 80066ce:	e4d5      	b.n	800607c <_dtoa_r+0xa4>
 80066d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80066d4:	462b      	mov	r3, r5
 80066d6:	461d      	mov	r5, r3
 80066d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066dc:	2a39      	cmp	r2, #57	; 0x39
 80066de:	d108      	bne.n	80066f2 <_dtoa_r+0x71a>
 80066e0:	9a00      	ldr	r2, [sp, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d1f7      	bne.n	80066d6 <_dtoa_r+0x6fe>
 80066e6:	9a07      	ldr	r2, [sp, #28]
 80066e8:	9900      	ldr	r1, [sp, #0]
 80066ea:	3201      	adds	r2, #1
 80066ec:	9207      	str	r2, [sp, #28]
 80066ee:	2230      	movs	r2, #48	; 0x30
 80066f0:	700a      	strb	r2, [r1, #0]
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	3201      	adds	r2, #1
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	e78c      	b.n	8006614 <_dtoa_r+0x63c>
 80066fa:	4b7f      	ldr	r3, [pc, #508]	; (80068f8 <_dtoa_r+0x920>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	f7f9 ff9b 	bl	8000638 <__aeabi_dmul>
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	4606      	mov	r6, r0
 8006708:	460f      	mov	r7, r1
 800670a:	f7fa f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 800670e:	2800      	cmp	r0, #0
 8006710:	d09b      	beq.n	800664a <_dtoa_r+0x672>
 8006712:	e7cd      	b.n	80066b0 <_dtoa_r+0x6d8>
 8006714:	9a08      	ldr	r2, [sp, #32]
 8006716:	2a00      	cmp	r2, #0
 8006718:	f000 80c4 	beq.w	80068a4 <_dtoa_r+0x8cc>
 800671c:	9a05      	ldr	r2, [sp, #20]
 800671e:	2a01      	cmp	r2, #1
 8006720:	f300 80a8 	bgt.w	8006874 <_dtoa_r+0x89c>
 8006724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006726:	2a00      	cmp	r2, #0
 8006728:	f000 80a0 	beq.w	800686c <_dtoa_r+0x894>
 800672c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006730:	9e06      	ldr	r6, [sp, #24]
 8006732:	4645      	mov	r5, r8
 8006734:	9a04      	ldr	r2, [sp, #16]
 8006736:	2101      	movs	r1, #1
 8006738:	441a      	add	r2, r3
 800673a:	4620      	mov	r0, r4
 800673c:	4498      	add	r8, r3
 800673e:	9204      	str	r2, [sp, #16]
 8006740:	f000 fb4c 	bl	8006ddc <__i2b>
 8006744:	4607      	mov	r7, r0
 8006746:	2d00      	cmp	r5, #0
 8006748:	dd0b      	ble.n	8006762 <_dtoa_r+0x78a>
 800674a:	9b04      	ldr	r3, [sp, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	dd08      	ble.n	8006762 <_dtoa_r+0x78a>
 8006750:	42ab      	cmp	r3, r5
 8006752:	9a04      	ldr	r2, [sp, #16]
 8006754:	bfa8      	it	ge
 8006756:	462b      	movge	r3, r5
 8006758:	eba8 0803 	sub.w	r8, r8, r3
 800675c:	1aed      	subs	r5, r5, r3
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	9304      	str	r3, [sp, #16]
 8006762:	9b06      	ldr	r3, [sp, #24]
 8006764:	b1fb      	cbz	r3, 80067a6 <_dtoa_r+0x7ce>
 8006766:	9b08      	ldr	r3, [sp, #32]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 809f 	beq.w	80068ac <_dtoa_r+0x8d4>
 800676e:	2e00      	cmp	r6, #0
 8006770:	dd11      	ble.n	8006796 <_dtoa_r+0x7be>
 8006772:	4639      	mov	r1, r7
 8006774:	4632      	mov	r2, r6
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fbec 	bl	8006f54 <__pow5mult>
 800677c:	465a      	mov	r2, fp
 800677e:	4601      	mov	r1, r0
 8006780:	4607      	mov	r7, r0
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fb40 	bl	8006e08 <__multiply>
 8006788:	4659      	mov	r1, fp
 800678a:	9007      	str	r0, [sp, #28]
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fa69 	bl	8006c64 <_Bfree>
 8006792:	9b07      	ldr	r3, [sp, #28]
 8006794:	469b      	mov	fp, r3
 8006796:	9b06      	ldr	r3, [sp, #24]
 8006798:	1b9a      	subs	r2, r3, r6
 800679a:	d004      	beq.n	80067a6 <_dtoa_r+0x7ce>
 800679c:	4659      	mov	r1, fp
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 fbd8 	bl	8006f54 <__pow5mult>
 80067a4:	4683      	mov	fp, r0
 80067a6:	2101      	movs	r1, #1
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 fb17 	bl	8006ddc <__i2b>
 80067ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	4606      	mov	r6, r0
 80067b4:	dd7c      	ble.n	80068b0 <_dtoa_r+0x8d8>
 80067b6:	461a      	mov	r2, r3
 80067b8:	4601      	mov	r1, r0
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fbca 	bl	8006f54 <__pow5mult>
 80067c0:	9b05      	ldr	r3, [sp, #20]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	4606      	mov	r6, r0
 80067c6:	dd76      	ble.n	80068b6 <_dtoa_r+0x8de>
 80067c8:	2300      	movs	r3, #0
 80067ca:	9306      	str	r3, [sp, #24]
 80067cc:	6933      	ldr	r3, [r6, #16]
 80067ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067d2:	6918      	ldr	r0, [r3, #16]
 80067d4:	f000 fab2 	bl	8006d3c <__hi0bits>
 80067d8:	f1c0 0020 	rsb	r0, r0, #32
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	4418      	add	r0, r3
 80067e0:	f010 001f 	ands.w	r0, r0, #31
 80067e4:	f000 8086 	beq.w	80068f4 <_dtoa_r+0x91c>
 80067e8:	f1c0 0320 	rsb	r3, r0, #32
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	dd7f      	ble.n	80068f0 <_dtoa_r+0x918>
 80067f0:	f1c0 001c 	rsb	r0, r0, #28
 80067f4:	9b04      	ldr	r3, [sp, #16]
 80067f6:	4403      	add	r3, r0
 80067f8:	4480      	add	r8, r0
 80067fa:	4405      	add	r5, r0
 80067fc:	9304      	str	r3, [sp, #16]
 80067fe:	f1b8 0f00 	cmp.w	r8, #0
 8006802:	dd05      	ble.n	8006810 <_dtoa_r+0x838>
 8006804:	4659      	mov	r1, fp
 8006806:	4642      	mov	r2, r8
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fbfd 	bl	8007008 <__lshift>
 800680e:	4683      	mov	fp, r0
 8006810:	9b04      	ldr	r3, [sp, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	dd05      	ble.n	8006822 <_dtoa_r+0x84a>
 8006816:	4631      	mov	r1, r6
 8006818:	461a      	mov	r2, r3
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fbf4 	bl	8007008 <__lshift>
 8006820:	4606      	mov	r6, r0
 8006822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	d069      	beq.n	80068fc <_dtoa_r+0x924>
 8006828:	4631      	mov	r1, r6
 800682a:	4658      	mov	r0, fp
 800682c:	f000 fc58 	bl	80070e0 <__mcmp>
 8006830:	2800      	cmp	r0, #0
 8006832:	da63      	bge.n	80068fc <_dtoa_r+0x924>
 8006834:	2300      	movs	r3, #0
 8006836:	4659      	mov	r1, fp
 8006838:	220a      	movs	r2, #10
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fa34 	bl	8006ca8 <__multadd>
 8006840:	9b08      	ldr	r3, [sp, #32]
 8006842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006846:	4683      	mov	fp, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 818f 	beq.w	8006b6c <_dtoa_r+0xb94>
 800684e:	4639      	mov	r1, r7
 8006850:	2300      	movs	r3, #0
 8006852:	220a      	movs	r2, #10
 8006854:	4620      	mov	r0, r4
 8006856:	f000 fa27 	bl	8006ca8 <__multadd>
 800685a:	f1b9 0f00 	cmp.w	r9, #0
 800685e:	4607      	mov	r7, r0
 8006860:	f300 808e 	bgt.w	8006980 <_dtoa_r+0x9a8>
 8006864:	9b05      	ldr	r3, [sp, #20]
 8006866:	2b02      	cmp	r3, #2
 8006868:	dc50      	bgt.n	800690c <_dtoa_r+0x934>
 800686a:	e089      	b.n	8006980 <_dtoa_r+0x9a8>
 800686c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800686e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006872:	e75d      	b.n	8006730 <_dtoa_r+0x758>
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	1e5e      	subs	r6, r3, #1
 8006878:	9b06      	ldr	r3, [sp, #24]
 800687a:	42b3      	cmp	r3, r6
 800687c:	bfbf      	itttt	lt
 800687e:	9b06      	ldrlt	r3, [sp, #24]
 8006880:	9606      	strlt	r6, [sp, #24]
 8006882:	1af2      	sublt	r2, r6, r3
 8006884:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006886:	bfb6      	itet	lt
 8006888:	189b      	addlt	r3, r3, r2
 800688a:	1b9e      	subge	r6, r3, r6
 800688c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800688e:	9b01      	ldr	r3, [sp, #4]
 8006890:	bfb8      	it	lt
 8006892:	2600      	movlt	r6, #0
 8006894:	2b00      	cmp	r3, #0
 8006896:	bfb5      	itete	lt
 8006898:	eba8 0503 	sublt.w	r5, r8, r3
 800689c:	9b01      	ldrge	r3, [sp, #4]
 800689e:	2300      	movlt	r3, #0
 80068a0:	4645      	movge	r5, r8
 80068a2:	e747      	b.n	8006734 <_dtoa_r+0x75c>
 80068a4:	9e06      	ldr	r6, [sp, #24]
 80068a6:	9f08      	ldr	r7, [sp, #32]
 80068a8:	4645      	mov	r5, r8
 80068aa:	e74c      	b.n	8006746 <_dtoa_r+0x76e>
 80068ac:	9a06      	ldr	r2, [sp, #24]
 80068ae:	e775      	b.n	800679c <_dtoa_r+0x7c4>
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	dc18      	bgt.n	80068e8 <_dtoa_r+0x910>
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	b9b3      	cbnz	r3, 80068e8 <_dtoa_r+0x910>
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c0:	b9a3      	cbnz	r3, 80068ec <_dtoa_r+0x914>
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068c8:	0d1b      	lsrs	r3, r3, #20
 80068ca:	051b      	lsls	r3, r3, #20
 80068cc:	b12b      	cbz	r3, 80068da <_dtoa_r+0x902>
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	3301      	adds	r3, #1
 80068d2:	9304      	str	r3, [sp, #16]
 80068d4:	f108 0801 	add.w	r8, r8, #1
 80068d8:	2301      	movs	r3, #1
 80068da:	9306      	str	r3, [sp, #24]
 80068dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f47f af74 	bne.w	80067cc <_dtoa_r+0x7f4>
 80068e4:	2001      	movs	r0, #1
 80068e6:	e779      	b.n	80067dc <_dtoa_r+0x804>
 80068e8:	2300      	movs	r3, #0
 80068ea:	e7f6      	b.n	80068da <_dtoa_r+0x902>
 80068ec:	9b02      	ldr	r3, [sp, #8]
 80068ee:	e7f4      	b.n	80068da <_dtoa_r+0x902>
 80068f0:	d085      	beq.n	80067fe <_dtoa_r+0x826>
 80068f2:	4618      	mov	r0, r3
 80068f4:	301c      	adds	r0, #28
 80068f6:	e77d      	b.n	80067f4 <_dtoa_r+0x81c>
 80068f8:	40240000 	.word	0x40240000
 80068fc:	9b01      	ldr	r3, [sp, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dc38      	bgt.n	8006974 <_dtoa_r+0x99c>
 8006902:	9b05      	ldr	r3, [sp, #20]
 8006904:	2b02      	cmp	r3, #2
 8006906:	dd35      	ble.n	8006974 <_dtoa_r+0x99c>
 8006908:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800690c:	f1b9 0f00 	cmp.w	r9, #0
 8006910:	d10d      	bne.n	800692e <_dtoa_r+0x956>
 8006912:	4631      	mov	r1, r6
 8006914:	464b      	mov	r3, r9
 8006916:	2205      	movs	r2, #5
 8006918:	4620      	mov	r0, r4
 800691a:	f000 f9c5 	bl	8006ca8 <__multadd>
 800691e:	4601      	mov	r1, r0
 8006920:	4606      	mov	r6, r0
 8006922:	4658      	mov	r0, fp
 8006924:	f000 fbdc 	bl	80070e0 <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	f73f adbd 	bgt.w	80064a8 <_dtoa_r+0x4d0>
 800692e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006930:	9d00      	ldr	r5, [sp, #0]
 8006932:	ea6f 0a03 	mvn.w	sl, r3
 8006936:	f04f 0800 	mov.w	r8, #0
 800693a:	4631      	mov	r1, r6
 800693c:	4620      	mov	r0, r4
 800693e:	f000 f991 	bl	8006c64 <_Bfree>
 8006942:	2f00      	cmp	r7, #0
 8006944:	f43f aeb4 	beq.w	80066b0 <_dtoa_r+0x6d8>
 8006948:	f1b8 0f00 	cmp.w	r8, #0
 800694c:	d005      	beq.n	800695a <_dtoa_r+0x982>
 800694e:	45b8      	cmp	r8, r7
 8006950:	d003      	beq.n	800695a <_dtoa_r+0x982>
 8006952:	4641      	mov	r1, r8
 8006954:	4620      	mov	r0, r4
 8006956:	f000 f985 	bl	8006c64 <_Bfree>
 800695a:	4639      	mov	r1, r7
 800695c:	4620      	mov	r0, r4
 800695e:	f000 f981 	bl	8006c64 <_Bfree>
 8006962:	e6a5      	b.n	80066b0 <_dtoa_r+0x6d8>
 8006964:	2600      	movs	r6, #0
 8006966:	4637      	mov	r7, r6
 8006968:	e7e1      	b.n	800692e <_dtoa_r+0x956>
 800696a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800696c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006970:	4637      	mov	r7, r6
 8006972:	e599      	b.n	80064a8 <_dtoa_r+0x4d0>
 8006974:	9b08      	ldr	r3, [sp, #32]
 8006976:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80fd 	beq.w	8006b7a <_dtoa_r+0xba2>
 8006980:	2d00      	cmp	r5, #0
 8006982:	dd05      	ble.n	8006990 <_dtoa_r+0x9b8>
 8006984:	4639      	mov	r1, r7
 8006986:	462a      	mov	r2, r5
 8006988:	4620      	mov	r0, r4
 800698a:	f000 fb3d 	bl	8007008 <__lshift>
 800698e:	4607      	mov	r7, r0
 8006990:	9b06      	ldr	r3, [sp, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d05c      	beq.n	8006a50 <_dtoa_r+0xa78>
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	4620      	mov	r0, r4
 800699a:	f000 f923 	bl	8006be4 <_Balloc>
 800699e:	4605      	mov	r5, r0
 80069a0:	b928      	cbnz	r0, 80069ae <_dtoa_r+0x9d6>
 80069a2:	4b80      	ldr	r3, [pc, #512]	; (8006ba4 <_dtoa_r+0xbcc>)
 80069a4:	4602      	mov	r2, r0
 80069a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069aa:	f7ff bb2e 	b.w	800600a <_dtoa_r+0x32>
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	3202      	adds	r2, #2
 80069b2:	0092      	lsls	r2, r2, #2
 80069b4:	f107 010c 	add.w	r1, r7, #12
 80069b8:	300c      	adds	r0, #12
 80069ba:	f000 f905 	bl	8006bc8 <memcpy>
 80069be:	2201      	movs	r2, #1
 80069c0:	4629      	mov	r1, r5
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 fb20 	bl	8007008 <__lshift>
 80069c8:	9b00      	ldr	r3, [sp, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	9b00      	ldr	r3, [sp, #0]
 80069d0:	444b      	add	r3, r9
 80069d2:	9307      	str	r3, [sp, #28]
 80069d4:	9b02      	ldr	r3, [sp, #8]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	46b8      	mov	r8, r7
 80069dc:	9306      	str	r3, [sp, #24]
 80069de:	4607      	mov	r7, r0
 80069e0:	9b01      	ldr	r3, [sp, #4]
 80069e2:	4631      	mov	r1, r6
 80069e4:	3b01      	subs	r3, #1
 80069e6:	4658      	mov	r0, fp
 80069e8:	9302      	str	r3, [sp, #8]
 80069ea:	f7ff fa67 	bl	8005ebc <quorem>
 80069ee:	4603      	mov	r3, r0
 80069f0:	3330      	adds	r3, #48	; 0x30
 80069f2:	9004      	str	r0, [sp, #16]
 80069f4:	4641      	mov	r1, r8
 80069f6:	4658      	mov	r0, fp
 80069f8:	9308      	str	r3, [sp, #32]
 80069fa:	f000 fb71 	bl	80070e0 <__mcmp>
 80069fe:	463a      	mov	r2, r7
 8006a00:	4681      	mov	r9, r0
 8006a02:	4631      	mov	r1, r6
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 fb87 	bl	8007118 <__mdiff>
 8006a0a:	68c2      	ldr	r2, [r0, #12]
 8006a0c:	9b08      	ldr	r3, [sp, #32]
 8006a0e:	4605      	mov	r5, r0
 8006a10:	bb02      	cbnz	r2, 8006a54 <_dtoa_r+0xa7c>
 8006a12:	4601      	mov	r1, r0
 8006a14:	4658      	mov	r0, fp
 8006a16:	f000 fb63 	bl	80070e0 <__mcmp>
 8006a1a:	9b08      	ldr	r3, [sp, #32]
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4620      	mov	r0, r4
 8006a22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006a26:	f000 f91d 	bl	8006c64 <_Bfree>
 8006a2a:	9b05      	ldr	r3, [sp, #20]
 8006a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a2e:	9d01      	ldr	r5, [sp, #4]
 8006a30:	ea43 0102 	orr.w	r1, r3, r2
 8006a34:	9b06      	ldr	r3, [sp, #24]
 8006a36:	430b      	orrs	r3, r1
 8006a38:	9b08      	ldr	r3, [sp, #32]
 8006a3a:	d10d      	bne.n	8006a58 <_dtoa_r+0xa80>
 8006a3c:	2b39      	cmp	r3, #57	; 0x39
 8006a3e:	d029      	beq.n	8006a94 <_dtoa_r+0xabc>
 8006a40:	f1b9 0f00 	cmp.w	r9, #0
 8006a44:	dd01      	ble.n	8006a4a <_dtoa_r+0xa72>
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	3331      	adds	r3, #49	; 0x31
 8006a4a:	9a02      	ldr	r2, [sp, #8]
 8006a4c:	7013      	strb	r3, [r2, #0]
 8006a4e:	e774      	b.n	800693a <_dtoa_r+0x962>
 8006a50:	4638      	mov	r0, r7
 8006a52:	e7b9      	b.n	80069c8 <_dtoa_r+0x9f0>
 8006a54:	2201      	movs	r2, #1
 8006a56:	e7e2      	b.n	8006a1e <_dtoa_r+0xa46>
 8006a58:	f1b9 0f00 	cmp.w	r9, #0
 8006a5c:	db06      	blt.n	8006a6c <_dtoa_r+0xa94>
 8006a5e:	9905      	ldr	r1, [sp, #20]
 8006a60:	ea41 0909 	orr.w	r9, r1, r9
 8006a64:	9906      	ldr	r1, [sp, #24]
 8006a66:	ea59 0101 	orrs.w	r1, r9, r1
 8006a6a:	d120      	bne.n	8006aae <_dtoa_r+0xad6>
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	ddec      	ble.n	8006a4a <_dtoa_r+0xa72>
 8006a70:	4659      	mov	r1, fp
 8006a72:	2201      	movs	r2, #1
 8006a74:	4620      	mov	r0, r4
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	f000 fac6 	bl	8007008 <__lshift>
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4683      	mov	fp, r0
 8006a80:	f000 fb2e 	bl	80070e0 <__mcmp>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	9b01      	ldr	r3, [sp, #4]
 8006a88:	dc02      	bgt.n	8006a90 <_dtoa_r+0xab8>
 8006a8a:	d1de      	bne.n	8006a4a <_dtoa_r+0xa72>
 8006a8c:	07da      	lsls	r2, r3, #31
 8006a8e:	d5dc      	bpl.n	8006a4a <_dtoa_r+0xa72>
 8006a90:	2b39      	cmp	r3, #57	; 0x39
 8006a92:	d1d8      	bne.n	8006a46 <_dtoa_r+0xa6e>
 8006a94:	9a02      	ldr	r2, [sp, #8]
 8006a96:	2339      	movs	r3, #57	; 0x39
 8006a98:	7013      	strb	r3, [r2, #0]
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	461d      	mov	r5, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006aa4:	2a39      	cmp	r2, #57	; 0x39
 8006aa6:	d050      	beq.n	8006b4a <_dtoa_r+0xb72>
 8006aa8:	3201      	adds	r2, #1
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	e745      	b.n	800693a <_dtoa_r+0x962>
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	dd03      	ble.n	8006aba <_dtoa_r+0xae2>
 8006ab2:	2b39      	cmp	r3, #57	; 0x39
 8006ab4:	d0ee      	beq.n	8006a94 <_dtoa_r+0xabc>
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	e7c7      	b.n	8006a4a <_dtoa_r+0xa72>
 8006aba:	9a01      	ldr	r2, [sp, #4]
 8006abc:	9907      	ldr	r1, [sp, #28]
 8006abe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ac2:	428a      	cmp	r2, r1
 8006ac4:	d02a      	beq.n	8006b1c <_dtoa_r+0xb44>
 8006ac6:	4659      	mov	r1, fp
 8006ac8:	2300      	movs	r3, #0
 8006aca:	220a      	movs	r2, #10
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 f8eb 	bl	8006ca8 <__multadd>
 8006ad2:	45b8      	cmp	r8, r7
 8006ad4:	4683      	mov	fp, r0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	f04f 020a 	mov.w	r2, #10
 8006ade:	4641      	mov	r1, r8
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	d107      	bne.n	8006af4 <_dtoa_r+0xb1c>
 8006ae4:	f000 f8e0 	bl	8006ca8 <__multadd>
 8006ae8:	4680      	mov	r8, r0
 8006aea:	4607      	mov	r7, r0
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	3301      	adds	r3, #1
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	e775      	b.n	80069e0 <_dtoa_r+0xa08>
 8006af4:	f000 f8d8 	bl	8006ca8 <__multadd>
 8006af8:	4639      	mov	r1, r7
 8006afa:	4680      	mov	r8, r0
 8006afc:	2300      	movs	r3, #0
 8006afe:	220a      	movs	r2, #10
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 f8d1 	bl	8006ca8 <__multadd>
 8006b06:	4607      	mov	r7, r0
 8006b08:	e7f0      	b.n	8006aec <_dtoa_r+0xb14>
 8006b0a:	f1b9 0f00 	cmp.w	r9, #0
 8006b0e:	9a00      	ldr	r2, [sp, #0]
 8006b10:	bfcc      	ite	gt
 8006b12:	464d      	movgt	r5, r9
 8006b14:	2501      	movle	r5, #1
 8006b16:	4415      	add	r5, r2
 8006b18:	f04f 0800 	mov.w	r8, #0
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	2201      	movs	r2, #1
 8006b20:	4620      	mov	r0, r4
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	f000 fa70 	bl	8007008 <__lshift>
 8006b28:	4631      	mov	r1, r6
 8006b2a:	4683      	mov	fp, r0
 8006b2c:	f000 fad8 	bl	80070e0 <__mcmp>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	dcb2      	bgt.n	8006a9a <_dtoa_r+0xac2>
 8006b34:	d102      	bne.n	8006b3c <_dtoa_r+0xb64>
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	07db      	lsls	r3, r3, #31
 8006b3a:	d4ae      	bmi.n	8006a9a <_dtoa_r+0xac2>
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	461d      	mov	r5, r3
 8006b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b44:	2a30      	cmp	r2, #48	; 0x30
 8006b46:	d0fa      	beq.n	8006b3e <_dtoa_r+0xb66>
 8006b48:	e6f7      	b.n	800693a <_dtoa_r+0x962>
 8006b4a:	9a00      	ldr	r2, [sp, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d1a5      	bne.n	8006a9c <_dtoa_r+0xac4>
 8006b50:	f10a 0a01 	add.w	sl, sl, #1
 8006b54:	2331      	movs	r3, #49	; 0x31
 8006b56:	e779      	b.n	8006a4c <_dtoa_r+0xa74>
 8006b58:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <_dtoa_r+0xbd0>)
 8006b5a:	f7ff baaf 	b.w	80060bc <_dtoa_r+0xe4>
 8006b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f47f aa86 	bne.w	8006072 <_dtoa_r+0x9a>
 8006b66:	4b11      	ldr	r3, [pc, #68]	; (8006bac <_dtoa_r+0xbd4>)
 8006b68:	f7ff baa8 	b.w	80060bc <_dtoa_r+0xe4>
 8006b6c:	f1b9 0f00 	cmp.w	r9, #0
 8006b70:	dc03      	bgt.n	8006b7a <_dtoa_r+0xba2>
 8006b72:	9b05      	ldr	r3, [sp, #20]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	f73f aec9 	bgt.w	800690c <_dtoa_r+0x934>
 8006b7a:	9d00      	ldr	r5, [sp, #0]
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4658      	mov	r0, fp
 8006b80:	f7ff f99c 	bl	8005ebc <quorem>
 8006b84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b88:	f805 3b01 	strb.w	r3, [r5], #1
 8006b8c:	9a00      	ldr	r2, [sp, #0]
 8006b8e:	1aaa      	subs	r2, r5, r2
 8006b90:	4591      	cmp	r9, r2
 8006b92:	ddba      	ble.n	8006b0a <_dtoa_r+0xb32>
 8006b94:	4659      	mov	r1, fp
 8006b96:	2300      	movs	r3, #0
 8006b98:	220a      	movs	r2, #10
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 f884 	bl	8006ca8 <__multadd>
 8006ba0:	4683      	mov	fp, r0
 8006ba2:	e7eb      	b.n	8006b7c <_dtoa_r+0xba4>
 8006ba4:	0800808f 	.word	0x0800808f
 8006ba8:	08007fe8 	.word	0x08007fe8
 8006bac:	0800800c 	.word	0x0800800c

08006bb0 <_localeconv_r>:
 8006bb0:	4800      	ldr	r0, [pc, #0]	; (8006bb4 <_localeconv_r+0x4>)
 8006bb2:	4770      	bx	lr
 8006bb4:	20000160 	.word	0x20000160

08006bb8 <malloc>:
 8006bb8:	4b02      	ldr	r3, [pc, #8]	; (8006bc4 <malloc+0xc>)
 8006bba:	4601      	mov	r1, r0
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	f000 bbef 	b.w	80073a0 <_malloc_r>
 8006bc2:	bf00      	nop
 8006bc4:	2000000c 	.word	0x2000000c

08006bc8 <memcpy>:
 8006bc8:	440a      	add	r2, r1
 8006bca:	4291      	cmp	r1, r2
 8006bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bd0:	d100      	bne.n	8006bd4 <memcpy+0xc>
 8006bd2:	4770      	bx	lr
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bde:	4291      	cmp	r1, r2
 8006be0:	d1f9      	bne.n	8006bd6 <memcpy+0xe>
 8006be2:	bd10      	pop	{r4, pc}

08006be4 <_Balloc>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006be8:	4604      	mov	r4, r0
 8006bea:	460d      	mov	r5, r1
 8006bec:	b976      	cbnz	r6, 8006c0c <_Balloc+0x28>
 8006bee:	2010      	movs	r0, #16
 8006bf0:	f7ff ffe2 	bl	8006bb8 <malloc>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6260      	str	r0, [r4, #36]	; 0x24
 8006bf8:	b920      	cbnz	r0, 8006c04 <_Balloc+0x20>
 8006bfa:	4b18      	ldr	r3, [pc, #96]	; (8006c5c <_Balloc+0x78>)
 8006bfc:	4818      	ldr	r0, [pc, #96]	; (8006c60 <_Balloc+0x7c>)
 8006bfe:	2166      	movs	r1, #102	; 0x66
 8006c00:	f000 fc38 	bl	8007474 <__assert_func>
 8006c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c08:	6006      	str	r6, [r0, #0]
 8006c0a:	60c6      	str	r6, [r0, #12]
 8006c0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c0e:	68f3      	ldr	r3, [r6, #12]
 8006c10:	b183      	cbz	r3, 8006c34 <_Balloc+0x50>
 8006c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c1a:	b9b8      	cbnz	r0, 8006c4c <_Balloc+0x68>
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c22:	1d72      	adds	r2, r6, #5
 8006c24:	0092      	lsls	r2, r2, #2
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fb5a 	bl	80072e0 <_calloc_r>
 8006c2c:	b160      	cbz	r0, 8006c48 <_Balloc+0x64>
 8006c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c32:	e00e      	b.n	8006c52 <_Balloc+0x6e>
 8006c34:	2221      	movs	r2, #33	; 0x21
 8006c36:	2104      	movs	r1, #4
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 fb51 	bl	80072e0 <_calloc_r>
 8006c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c40:	60f0      	str	r0, [r6, #12]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e4      	bne.n	8006c12 <_Balloc+0x2e>
 8006c48:	2000      	movs	r0, #0
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	6802      	ldr	r2, [r0, #0]
 8006c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c52:	2300      	movs	r3, #0
 8006c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c58:	e7f7      	b.n	8006c4a <_Balloc+0x66>
 8006c5a:	bf00      	nop
 8006c5c:	08008019 	.word	0x08008019
 8006c60:	080080a0 	.word	0x080080a0

08006c64 <_Bfree>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c68:	4605      	mov	r5, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	b976      	cbnz	r6, 8006c8c <_Bfree+0x28>
 8006c6e:	2010      	movs	r0, #16
 8006c70:	f7ff ffa2 	bl	8006bb8 <malloc>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6268      	str	r0, [r5, #36]	; 0x24
 8006c78:	b920      	cbnz	r0, 8006c84 <_Bfree+0x20>
 8006c7a:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <_Bfree+0x3c>)
 8006c7c:	4809      	ldr	r0, [pc, #36]	; (8006ca4 <_Bfree+0x40>)
 8006c7e:	218a      	movs	r1, #138	; 0x8a
 8006c80:	f000 fbf8 	bl	8007474 <__assert_func>
 8006c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c88:	6006      	str	r6, [r0, #0]
 8006c8a:	60c6      	str	r6, [r0, #12]
 8006c8c:	b13c      	cbz	r4, 8006c9e <_Bfree+0x3a>
 8006c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c90:	6862      	ldr	r2, [r4, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c98:	6021      	str	r1, [r4, #0]
 8006c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	08008019 	.word	0x08008019
 8006ca4:	080080a0 	.word	0x080080a0

08006ca8 <__multadd>:
 8006ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cac:	690e      	ldr	r6, [r1, #16]
 8006cae:	4607      	mov	r7, r0
 8006cb0:	4698      	mov	r8, r3
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	f101 0014 	add.w	r0, r1, #20
 8006cb8:	2300      	movs	r3, #0
 8006cba:	6805      	ldr	r5, [r0, #0]
 8006cbc:	b2a9      	uxth	r1, r5
 8006cbe:	fb02 8101 	mla	r1, r2, r1, r8
 8006cc2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006cc6:	0c2d      	lsrs	r5, r5, #16
 8006cc8:	fb02 c505 	mla	r5, r2, r5, ip
 8006ccc:	b289      	uxth	r1, r1
 8006cce:	3301      	adds	r3, #1
 8006cd0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006cd4:	429e      	cmp	r6, r3
 8006cd6:	f840 1b04 	str.w	r1, [r0], #4
 8006cda:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006cde:	dcec      	bgt.n	8006cba <__multadd+0x12>
 8006ce0:	f1b8 0f00 	cmp.w	r8, #0
 8006ce4:	d022      	beq.n	8006d2c <__multadd+0x84>
 8006ce6:	68a3      	ldr	r3, [r4, #8]
 8006ce8:	42b3      	cmp	r3, r6
 8006cea:	dc19      	bgt.n	8006d20 <__multadd+0x78>
 8006cec:	6861      	ldr	r1, [r4, #4]
 8006cee:	4638      	mov	r0, r7
 8006cf0:	3101      	adds	r1, #1
 8006cf2:	f7ff ff77 	bl	8006be4 <_Balloc>
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	b928      	cbnz	r0, 8006d06 <__multadd+0x5e>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <__multadd+0x8c>)
 8006cfe:	480e      	ldr	r0, [pc, #56]	; (8006d38 <__multadd+0x90>)
 8006d00:	21b5      	movs	r1, #181	; 0xb5
 8006d02:	f000 fbb7 	bl	8007474 <__assert_func>
 8006d06:	6922      	ldr	r2, [r4, #16]
 8006d08:	3202      	adds	r2, #2
 8006d0a:	f104 010c 	add.w	r1, r4, #12
 8006d0e:	0092      	lsls	r2, r2, #2
 8006d10:	300c      	adds	r0, #12
 8006d12:	f7ff ff59 	bl	8006bc8 <memcpy>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f7ff ffa3 	bl	8006c64 <_Bfree>
 8006d1e:	462c      	mov	r4, r5
 8006d20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006d24:	3601      	adds	r6, #1
 8006d26:	f8c3 8014 	str.w	r8, [r3, #20]
 8006d2a:	6126      	str	r6, [r4, #16]
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d32:	bf00      	nop
 8006d34:	0800808f 	.word	0x0800808f
 8006d38:	080080a0 	.word	0x080080a0

08006d3c <__hi0bits>:
 8006d3c:	0c03      	lsrs	r3, r0, #16
 8006d3e:	041b      	lsls	r3, r3, #16
 8006d40:	b9d3      	cbnz	r3, 8006d78 <__hi0bits+0x3c>
 8006d42:	0400      	lsls	r0, r0, #16
 8006d44:	2310      	movs	r3, #16
 8006d46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d4a:	bf04      	itt	eq
 8006d4c:	0200      	lsleq	r0, r0, #8
 8006d4e:	3308      	addeq	r3, #8
 8006d50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d54:	bf04      	itt	eq
 8006d56:	0100      	lsleq	r0, r0, #4
 8006d58:	3304      	addeq	r3, #4
 8006d5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d5e:	bf04      	itt	eq
 8006d60:	0080      	lsleq	r0, r0, #2
 8006d62:	3302      	addeq	r3, #2
 8006d64:	2800      	cmp	r0, #0
 8006d66:	db05      	blt.n	8006d74 <__hi0bits+0x38>
 8006d68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d6c:	f103 0301 	add.w	r3, r3, #1
 8006d70:	bf08      	it	eq
 8006d72:	2320      	moveq	r3, #32
 8006d74:	4618      	mov	r0, r3
 8006d76:	4770      	bx	lr
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e7e4      	b.n	8006d46 <__hi0bits+0xa>

08006d7c <__lo0bits>:
 8006d7c:	6803      	ldr	r3, [r0, #0]
 8006d7e:	f013 0207 	ands.w	r2, r3, #7
 8006d82:	4601      	mov	r1, r0
 8006d84:	d00b      	beq.n	8006d9e <__lo0bits+0x22>
 8006d86:	07da      	lsls	r2, r3, #31
 8006d88:	d424      	bmi.n	8006dd4 <__lo0bits+0x58>
 8006d8a:	0798      	lsls	r0, r3, #30
 8006d8c:	bf49      	itett	mi
 8006d8e:	085b      	lsrmi	r3, r3, #1
 8006d90:	089b      	lsrpl	r3, r3, #2
 8006d92:	2001      	movmi	r0, #1
 8006d94:	600b      	strmi	r3, [r1, #0]
 8006d96:	bf5c      	itt	pl
 8006d98:	600b      	strpl	r3, [r1, #0]
 8006d9a:	2002      	movpl	r0, #2
 8006d9c:	4770      	bx	lr
 8006d9e:	b298      	uxth	r0, r3
 8006da0:	b9b0      	cbnz	r0, 8006dd0 <__lo0bits+0x54>
 8006da2:	0c1b      	lsrs	r3, r3, #16
 8006da4:	2010      	movs	r0, #16
 8006da6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006daa:	bf04      	itt	eq
 8006dac:	0a1b      	lsreq	r3, r3, #8
 8006dae:	3008      	addeq	r0, #8
 8006db0:	071a      	lsls	r2, r3, #28
 8006db2:	bf04      	itt	eq
 8006db4:	091b      	lsreq	r3, r3, #4
 8006db6:	3004      	addeq	r0, #4
 8006db8:	079a      	lsls	r2, r3, #30
 8006dba:	bf04      	itt	eq
 8006dbc:	089b      	lsreq	r3, r3, #2
 8006dbe:	3002      	addeq	r0, #2
 8006dc0:	07da      	lsls	r2, r3, #31
 8006dc2:	d403      	bmi.n	8006dcc <__lo0bits+0x50>
 8006dc4:	085b      	lsrs	r3, r3, #1
 8006dc6:	f100 0001 	add.w	r0, r0, #1
 8006dca:	d005      	beq.n	8006dd8 <__lo0bits+0x5c>
 8006dcc:	600b      	str	r3, [r1, #0]
 8006dce:	4770      	bx	lr
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	e7e8      	b.n	8006da6 <__lo0bits+0x2a>
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	4770      	bx	lr
 8006dd8:	2020      	movs	r0, #32
 8006dda:	4770      	bx	lr

08006ddc <__i2b>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	460c      	mov	r4, r1
 8006de0:	2101      	movs	r1, #1
 8006de2:	f7ff feff 	bl	8006be4 <_Balloc>
 8006de6:	4602      	mov	r2, r0
 8006de8:	b928      	cbnz	r0, 8006df6 <__i2b+0x1a>
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <__i2b+0x24>)
 8006dec:	4805      	ldr	r0, [pc, #20]	; (8006e04 <__i2b+0x28>)
 8006dee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006df2:	f000 fb3f 	bl	8007474 <__assert_func>
 8006df6:	2301      	movs	r3, #1
 8006df8:	6144      	str	r4, [r0, #20]
 8006dfa:	6103      	str	r3, [r0, #16]
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	bf00      	nop
 8006e00:	0800808f 	.word	0x0800808f
 8006e04:	080080a0 	.word	0x080080a0

08006e08 <__multiply>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	4614      	mov	r4, r2
 8006e0e:	690a      	ldr	r2, [r1, #16]
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	bfb8      	it	lt
 8006e16:	460b      	movlt	r3, r1
 8006e18:	460d      	mov	r5, r1
 8006e1a:	bfbc      	itt	lt
 8006e1c:	4625      	movlt	r5, r4
 8006e1e:	461c      	movlt	r4, r3
 8006e20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006e24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e28:	68ab      	ldr	r3, [r5, #8]
 8006e2a:	6869      	ldr	r1, [r5, #4]
 8006e2c:	eb0a 0709 	add.w	r7, sl, r9
 8006e30:	42bb      	cmp	r3, r7
 8006e32:	b085      	sub	sp, #20
 8006e34:	bfb8      	it	lt
 8006e36:	3101      	addlt	r1, #1
 8006e38:	f7ff fed4 	bl	8006be4 <_Balloc>
 8006e3c:	b930      	cbnz	r0, 8006e4c <__multiply+0x44>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4b42      	ldr	r3, [pc, #264]	; (8006f4c <__multiply+0x144>)
 8006e42:	4843      	ldr	r0, [pc, #268]	; (8006f50 <__multiply+0x148>)
 8006e44:	f240 115d 	movw	r1, #349	; 0x15d
 8006e48:	f000 fb14 	bl	8007474 <__assert_func>
 8006e4c:	f100 0614 	add.w	r6, r0, #20
 8006e50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006e54:	4633      	mov	r3, r6
 8006e56:	2200      	movs	r2, #0
 8006e58:	4543      	cmp	r3, r8
 8006e5a:	d31e      	bcc.n	8006e9a <__multiply+0x92>
 8006e5c:	f105 0c14 	add.w	ip, r5, #20
 8006e60:	f104 0314 	add.w	r3, r4, #20
 8006e64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006e68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006e6c:	9202      	str	r2, [sp, #8]
 8006e6e:	ebac 0205 	sub.w	r2, ip, r5
 8006e72:	3a15      	subs	r2, #21
 8006e74:	f022 0203 	bic.w	r2, r2, #3
 8006e78:	3204      	adds	r2, #4
 8006e7a:	f105 0115 	add.w	r1, r5, #21
 8006e7e:	458c      	cmp	ip, r1
 8006e80:	bf38      	it	cc
 8006e82:	2204      	movcc	r2, #4
 8006e84:	9201      	str	r2, [sp, #4]
 8006e86:	9a02      	ldr	r2, [sp, #8]
 8006e88:	9303      	str	r3, [sp, #12]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d808      	bhi.n	8006ea0 <__multiply+0x98>
 8006e8e:	2f00      	cmp	r7, #0
 8006e90:	dc55      	bgt.n	8006f3e <__multiply+0x136>
 8006e92:	6107      	str	r7, [r0, #16]
 8006e94:	b005      	add	sp, #20
 8006e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9a:	f843 2b04 	str.w	r2, [r3], #4
 8006e9e:	e7db      	b.n	8006e58 <__multiply+0x50>
 8006ea0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ea4:	f1ba 0f00 	cmp.w	sl, #0
 8006ea8:	d020      	beq.n	8006eec <__multiply+0xe4>
 8006eaa:	f105 0e14 	add.w	lr, r5, #20
 8006eae:	46b1      	mov	r9, r6
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006eb6:	f8d9 b000 	ldr.w	fp, [r9]
 8006eba:	b2a1      	uxth	r1, r4
 8006ebc:	fa1f fb8b 	uxth.w	fp, fp
 8006ec0:	fb0a b101 	mla	r1, sl, r1, fp
 8006ec4:	4411      	add	r1, r2
 8006ec6:	f8d9 2000 	ldr.w	r2, [r9]
 8006eca:	0c24      	lsrs	r4, r4, #16
 8006ecc:	0c12      	lsrs	r2, r2, #16
 8006ece:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ed2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ed6:	b289      	uxth	r1, r1
 8006ed8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006edc:	45f4      	cmp	ip, lr
 8006ede:	f849 1b04 	str.w	r1, [r9], #4
 8006ee2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006ee6:	d8e4      	bhi.n	8006eb2 <__multiply+0xaa>
 8006ee8:	9901      	ldr	r1, [sp, #4]
 8006eea:	5072      	str	r2, [r6, r1]
 8006eec:	9a03      	ldr	r2, [sp, #12]
 8006eee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	f1b9 0f00 	cmp.w	r9, #0
 8006ef8:	d01f      	beq.n	8006f3a <__multiply+0x132>
 8006efa:	6834      	ldr	r4, [r6, #0]
 8006efc:	f105 0114 	add.w	r1, r5, #20
 8006f00:	46b6      	mov	lr, r6
 8006f02:	f04f 0a00 	mov.w	sl, #0
 8006f06:	880a      	ldrh	r2, [r1, #0]
 8006f08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006f0c:	fb09 b202 	mla	r2, r9, r2, fp
 8006f10:	4492      	add	sl, r2
 8006f12:	b2a4      	uxth	r4, r4
 8006f14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006f18:	f84e 4b04 	str.w	r4, [lr], #4
 8006f1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006f20:	f8be 2000 	ldrh.w	r2, [lr]
 8006f24:	0c24      	lsrs	r4, r4, #16
 8006f26:	fb09 2404 	mla	r4, r9, r4, r2
 8006f2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006f2e:	458c      	cmp	ip, r1
 8006f30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f34:	d8e7      	bhi.n	8006f06 <__multiply+0xfe>
 8006f36:	9a01      	ldr	r2, [sp, #4]
 8006f38:	50b4      	str	r4, [r6, r2]
 8006f3a:	3604      	adds	r6, #4
 8006f3c:	e7a3      	b.n	8006e86 <__multiply+0x7e>
 8006f3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1a5      	bne.n	8006e92 <__multiply+0x8a>
 8006f46:	3f01      	subs	r7, #1
 8006f48:	e7a1      	b.n	8006e8e <__multiply+0x86>
 8006f4a:	bf00      	nop
 8006f4c:	0800808f 	.word	0x0800808f
 8006f50:	080080a0 	.word	0x080080a0

08006f54 <__pow5mult>:
 8006f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f58:	4615      	mov	r5, r2
 8006f5a:	f012 0203 	ands.w	r2, r2, #3
 8006f5e:	4606      	mov	r6, r0
 8006f60:	460f      	mov	r7, r1
 8006f62:	d007      	beq.n	8006f74 <__pow5mult+0x20>
 8006f64:	4c25      	ldr	r4, [pc, #148]	; (8006ffc <__pow5mult+0xa8>)
 8006f66:	3a01      	subs	r2, #1
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f6e:	f7ff fe9b 	bl	8006ca8 <__multadd>
 8006f72:	4607      	mov	r7, r0
 8006f74:	10ad      	asrs	r5, r5, #2
 8006f76:	d03d      	beq.n	8006ff4 <__pow5mult+0xa0>
 8006f78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f7a:	b97c      	cbnz	r4, 8006f9c <__pow5mult+0x48>
 8006f7c:	2010      	movs	r0, #16
 8006f7e:	f7ff fe1b 	bl	8006bb8 <malloc>
 8006f82:	4602      	mov	r2, r0
 8006f84:	6270      	str	r0, [r6, #36]	; 0x24
 8006f86:	b928      	cbnz	r0, 8006f94 <__pow5mult+0x40>
 8006f88:	4b1d      	ldr	r3, [pc, #116]	; (8007000 <__pow5mult+0xac>)
 8006f8a:	481e      	ldr	r0, [pc, #120]	; (8007004 <__pow5mult+0xb0>)
 8006f8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f90:	f000 fa70 	bl	8007474 <__assert_func>
 8006f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f98:	6004      	str	r4, [r0, #0]
 8006f9a:	60c4      	str	r4, [r0, #12]
 8006f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fa4:	b94c      	cbnz	r4, 8006fba <__pow5mult+0x66>
 8006fa6:	f240 2171 	movw	r1, #625	; 0x271
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7ff ff16 	bl	8006ddc <__i2b>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	6003      	str	r3, [r0, #0]
 8006fba:	f04f 0900 	mov.w	r9, #0
 8006fbe:	07eb      	lsls	r3, r5, #31
 8006fc0:	d50a      	bpl.n	8006fd8 <__pow5mult+0x84>
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f7ff ff1e 	bl	8006e08 <__multiply>
 8006fcc:	4639      	mov	r1, r7
 8006fce:	4680      	mov	r8, r0
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f7ff fe47 	bl	8006c64 <_Bfree>
 8006fd6:	4647      	mov	r7, r8
 8006fd8:	106d      	asrs	r5, r5, #1
 8006fda:	d00b      	beq.n	8006ff4 <__pow5mult+0xa0>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	b938      	cbnz	r0, 8006ff0 <__pow5mult+0x9c>
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7ff ff0f 	bl	8006e08 <__multiply>
 8006fea:	6020      	str	r0, [r4, #0]
 8006fec:	f8c0 9000 	str.w	r9, [r0]
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	e7e4      	b.n	8006fbe <__pow5mult+0x6a>
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080081f0 	.word	0x080081f0
 8007000:	08008019 	.word	0x08008019
 8007004:	080080a0 	.word	0x080080a0

08007008 <__lshift>:
 8007008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	460c      	mov	r4, r1
 800700e:	6849      	ldr	r1, [r1, #4]
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007016:	68a3      	ldr	r3, [r4, #8]
 8007018:	4607      	mov	r7, r0
 800701a:	4691      	mov	r9, r2
 800701c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007020:	f108 0601 	add.w	r6, r8, #1
 8007024:	42b3      	cmp	r3, r6
 8007026:	db0b      	blt.n	8007040 <__lshift+0x38>
 8007028:	4638      	mov	r0, r7
 800702a:	f7ff fddb 	bl	8006be4 <_Balloc>
 800702e:	4605      	mov	r5, r0
 8007030:	b948      	cbnz	r0, 8007046 <__lshift+0x3e>
 8007032:	4602      	mov	r2, r0
 8007034:	4b28      	ldr	r3, [pc, #160]	; (80070d8 <__lshift+0xd0>)
 8007036:	4829      	ldr	r0, [pc, #164]	; (80070dc <__lshift+0xd4>)
 8007038:	f240 11d9 	movw	r1, #473	; 0x1d9
 800703c:	f000 fa1a 	bl	8007474 <__assert_func>
 8007040:	3101      	adds	r1, #1
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	e7ee      	b.n	8007024 <__lshift+0x1c>
 8007046:	2300      	movs	r3, #0
 8007048:	f100 0114 	add.w	r1, r0, #20
 800704c:	f100 0210 	add.w	r2, r0, #16
 8007050:	4618      	mov	r0, r3
 8007052:	4553      	cmp	r3, sl
 8007054:	db33      	blt.n	80070be <__lshift+0xb6>
 8007056:	6920      	ldr	r0, [r4, #16]
 8007058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800705c:	f104 0314 	add.w	r3, r4, #20
 8007060:	f019 091f 	ands.w	r9, r9, #31
 8007064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007068:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800706c:	d02b      	beq.n	80070c6 <__lshift+0xbe>
 800706e:	f1c9 0e20 	rsb	lr, r9, #32
 8007072:	468a      	mov	sl, r1
 8007074:	2200      	movs	r2, #0
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	fa00 f009 	lsl.w	r0, r0, r9
 800707c:	4302      	orrs	r2, r0
 800707e:	f84a 2b04 	str.w	r2, [sl], #4
 8007082:	f853 2b04 	ldr.w	r2, [r3], #4
 8007086:	459c      	cmp	ip, r3
 8007088:	fa22 f20e 	lsr.w	r2, r2, lr
 800708c:	d8f3      	bhi.n	8007076 <__lshift+0x6e>
 800708e:	ebac 0304 	sub.w	r3, ip, r4
 8007092:	3b15      	subs	r3, #21
 8007094:	f023 0303 	bic.w	r3, r3, #3
 8007098:	3304      	adds	r3, #4
 800709a:	f104 0015 	add.w	r0, r4, #21
 800709e:	4584      	cmp	ip, r0
 80070a0:	bf38      	it	cc
 80070a2:	2304      	movcc	r3, #4
 80070a4:	50ca      	str	r2, [r1, r3]
 80070a6:	b10a      	cbz	r2, 80070ac <__lshift+0xa4>
 80070a8:	f108 0602 	add.w	r6, r8, #2
 80070ac:	3e01      	subs	r6, #1
 80070ae:	4638      	mov	r0, r7
 80070b0:	612e      	str	r6, [r5, #16]
 80070b2:	4621      	mov	r1, r4
 80070b4:	f7ff fdd6 	bl	8006c64 <_Bfree>
 80070b8:	4628      	mov	r0, r5
 80070ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070be:	f842 0f04 	str.w	r0, [r2, #4]!
 80070c2:	3301      	adds	r3, #1
 80070c4:	e7c5      	b.n	8007052 <__lshift+0x4a>
 80070c6:	3904      	subs	r1, #4
 80070c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80070d0:	459c      	cmp	ip, r3
 80070d2:	d8f9      	bhi.n	80070c8 <__lshift+0xc0>
 80070d4:	e7ea      	b.n	80070ac <__lshift+0xa4>
 80070d6:	bf00      	nop
 80070d8:	0800808f 	.word	0x0800808f
 80070dc:	080080a0 	.word	0x080080a0

080070e0 <__mcmp>:
 80070e0:	b530      	push	{r4, r5, lr}
 80070e2:	6902      	ldr	r2, [r0, #16]
 80070e4:	690c      	ldr	r4, [r1, #16]
 80070e6:	1b12      	subs	r2, r2, r4
 80070e8:	d10e      	bne.n	8007108 <__mcmp+0x28>
 80070ea:	f100 0314 	add.w	r3, r0, #20
 80070ee:	3114      	adds	r1, #20
 80070f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007100:	42a5      	cmp	r5, r4
 8007102:	d003      	beq.n	800710c <__mcmp+0x2c>
 8007104:	d305      	bcc.n	8007112 <__mcmp+0x32>
 8007106:	2201      	movs	r2, #1
 8007108:	4610      	mov	r0, r2
 800710a:	bd30      	pop	{r4, r5, pc}
 800710c:	4283      	cmp	r3, r0
 800710e:	d3f3      	bcc.n	80070f8 <__mcmp+0x18>
 8007110:	e7fa      	b.n	8007108 <__mcmp+0x28>
 8007112:	f04f 32ff 	mov.w	r2, #4294967295
 8007116:	e7f7      	b.n	8007108 <__mcmp+0x28>

08007118 <__mdiff>:
 8007118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	460c      	mov	r4, r1
 800711e:	4606      	mov	r6, r0
 8007120:	4611      	mov	r1, r2
 8007122:	4620      	mov	r0, r4
 8007124:	4617      	mov	r7, r2
 8007126:	f7ff ffdb 	bl	80070e0 <__mcmp>
 800712a:	1e05      	subs	r5, r0, #0
 800712c:	d110      	bne.n	8007150 <__mdiff+0x38>
 800712e:	4629      	mov	r1, r5
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff fd57 	bl	8006be4 <_Balloc>
 8007136:	b930      	cbnz	r0, 8007146 <__mdiff+0x2e>
 8007138:	4b39      	ldr	r3, [pc, #228]	; (8007220 <__mdiff+0x108>)
 800713a:	4602      	mov	r2, r0
 800713c:	f240 2132 	movw	r1, #562	; 0x232
 8007140:	4838      	ldr	r0, [pc, #224]	; (8007224 <__mdiff+0x10c>)
 8007142:	f000 f997 	bl	8007474 <__assert_func>
 8007146:	2301      	movs	r3, #1
 8007148:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800714c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007150:	bfa4      	itt	ge
 8007152:	463b      	movge	r3, r7
 8007154:	4627      	movge	r7, r4
 8007156:	4630      	mov	r0, r6
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	bfa6      	itte	ge
 800715c:	461c      	movge	r4, r3
 800715e:	2500      	movge	r5, #0
 8007160:	2501      	movlt	r5, #1
 8007162:	f7ff fd3f 	bl	8006be4 <_Balloc>
 8007166:	b920      	cbnz	r0, 8007172 <__mdiff+0x5a>
 8007168:	4b2d      	ldr	r3, [pc, #180]	; (8007220 <__mdiff+0x108>)
 800716a:	4602      	mov	r2, r0
 800716c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007170:	e7e6      	b.n	8007140 <__mdiff+0x28>
 8007172:	693e      	ldr	r6, [r7, #16]
 8007174:	60c5      	str	r5, [r0, #12]
 8007176:	6925      	ldr	r5, [r4, #16]
 8007178:	f107 0114 	add.w	r1, r7, #20
 800717c:	f104 0914 	add.w	r9, r4, #20
 8007180:	f100 0e14 	add.w	lr, r0, #20
 8007184:	f107 0210 	add.w	r2, r7, #16
 8007188:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800718c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007190:	46f2      	mov	sl, lr
 8007192:	2700      	movs	r7, #0
 8007194:	f859 3b04 	ldr.w	r3, [r9], #4
 8007198:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800719c:	fa1f f883 	uxth.w	r8, r3
 80071a0:	fa17 f78b 	uxtah	r7, r7, fp
 80071a4:	0c1b      	lsrs	r3, r3, #16
 80071a6:	eba7 0808 	sub.w	r8, r7, r8
 80071aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071b2:	fa1f f888 	uxth.w	r8, r8
 80071b6:	141f      	asrs	r7, r3, #16
 80071b8:	454d      	cmp	r5, r9
 80071ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071be:	f84a 3b04 	str.w	r3, [sl], #4
 80071c2:	d8e7      	bhi.n	8007194 <__mdiff+0x7c>
 80071c4:	1b2b      	subs	r3, r5, r4
 80071c6:	3b15      	subs	r3, #21
 80071c8:	f023 0303 	bic.w	r3, r3, #3
 80071cc:	3304      	adds	r3, #4
 80071ce:	3415      	adds	r4, #21
 80071d0:	42a5      	cmp	r5, r4
 80071d2:	bf38      	it	cc
 80071d4:	2304      	movcc	r3, #4
 80071d6:	4419      	add	r1, r3
 80071d8:	4473      	add	r3, lr
 80071da:	469e      	mov	lr, r3
 80071dc:	460d      	mov	r5, r1
 80071de:	4565      	cmp	r5, ip
 80071e0:	d30e      	bcc.n	8007200 <__mdiff+0xe8>
 80071e2:	f10c 0203 	add.w	r2, ip, #3
 80071e6:	1a52      	subs	r2, r2, r1
 80071e8:	f022 0203 	bic.w	r2, r2, #3
 80071ec:	3903      	subs	r1, #3
 80071ee:	458c      	cmp	ip, r1
 80071f0:	bf38      	it	cc
 80071f2:	2200      	movcc	r2, #0
 80071f4:	441a      	add	r2, r3
 80071f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071fa:	b17b      	cbz	r3, 800721c <__mdiff+0x104>
 80071fc:	6106      	str	r6, [r0, #16]
 80071fe:	e7a5      	b.n	800714c <__mdiff+0x34>
 8007200:	f855 8b04 	ldr.w	r8, [r5], #4
 8007204:	fa17 f488 	uxtah	r4, r7, r8
 8007208:	1422      	asrs	r2, r4, #16
 800720a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800720e:	b2a4      	uxth	r4, r4
 8007210:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007214:	f84e 4b04 	str.w	r4, [lr], #4
 8007218:	1417      	asrs	r7, r2, #16
 800721a:	e7e0      	b.n	80071de <__mdiff+0xc6>
 800721c:	3e01      	subs	r6, #1
 800721e:	e7ea      	b.n	80071f6 <__mdiff+0xde>
 8007220:	0800808f 	.word	0x0800808f
 8007224:	080080a0 	.word	0x080080a0

08007228 <__d2b>:
 8007228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800722c:	4689      	mov	r9, r1
 800722e:	2101      	movs	r1, #1
 8007230:	ec57 6b10 	vmov	r6, r7, d0
 8007234:	4690      	mov	r8, r2
 8007236:	f7ff fcd5 	bl	8006be4 <_Balloc>
 800723a:	4604      	mov	r4, r0
 800723c:	b930      	cbnz	r0, 800724c <__d2b+0x24>
 800723e:	4602      	mov	r2, r0
 8007240:	4b25      	ldr	r3, [pc, #148]	; (80072d8 <__d2b+0xb0>)
 8007242:	4826      	ldr	r0, [pc, #152]	; (80072dc <__d2b+0xb4>)
 8007244:	f240 310a 	movw	r1, #778	; 0x30a
 8007248:	f000 f914 	bl	8007474 <__assert_func>
 800724c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007254:	bb35      	cbnz	r5, 80072a4 <__d2b+0x7c>
 8007256:	2e00      	cmp	r6, #0
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	d028      	beq.n	80072ae <__d2b+0x86>
 800725c:	4668      	mov	r0, sp
 800725e:	9600      	str	r6, [sp, #0]
 8007260:	f7ff fd8c 	bl	8006d7c <__lo0bits>
 8007264:	9900      	ldr	r1, [sp, #0]
 8007266:	b300      	cbz	r0, 80072aa <__d2b+0x82>
 8007268:	9a01      	ldr	r2, [sp, #4]
 800726a:	f1c0 0320 	rsb	r3, r0, #32
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	430b      	orrs	r3, r1
 8007274:	40c2      	lsrs	r2, r0
 8007276:	6163      	str	r3, [r4, #20]
 8007278:	9201      	str	r2, [sp, #4]
 800727a:	9b01      	ldr	r3, [sp, #4]
 800727c:	61a3      	str	r3, [r4, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	bf14      	ite	ne
 8007282:	2202      	movne	r2, #2
 8007284:	2201      	moveq	r2, #1
 8007286:	6122      	str	r2, [r4, #16]
 8007288:	b1d5      	cbz	r5, 80072c0 <__d2b+0x98>
 800728a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800728e:	4405      	add	r5, r0
 8007290:	f8c9 5000 	str.w	r5, [r9]
 8007294:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007298:	f8c8 0000 	str.w	r0, [r8]
 800729c:	4620      	mov	r0, r4
 800729e:	b003      	add	sp, #12
 80072a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072a8:	e7d5      	b.n	8007256 <__d2b+0x2e>
 80072aa:	6161      	str	r1, [r4, #20]
 80072ac:	e7e5      	b.n	800727a <__d2b+0x52>
 80072ae:	a801      	add	r0, sp, #4
 80072b0:	f7ff fd64 	bl	8006d7c <__lo0bits>
 80072b4:	9b01      	ldr	r3, [sp, #4]
 80072b6:	6163      	str	r3, [r4, #20]
 80072b8:	2201      	movs	r2, #1
 80072ba:	6122      	str	r2, [r4, #16]
 80072bc:	3020      	adds	r0, #32
 80072be:	e7e3      	b.n	8007288 <__d2b+0x60>
 80072c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072c8:	f8c9 0000 	str.w	r0, [r9]
 80072cc:	6918      	ldr	r0, [r3, #16]
 80072ce:	f7ff fd35 	bl	8006d3c <__hi0bits>
 80072d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072d6:	e7df      	b.n	8007298 <__d2b+0x70>
 80072d8:	0800808f 	.word	0x0800808f
 80072dc:	080080a0 	.word	0x080080a0

080072e0 <_calloc_r>:
 80072e0:	b513      	push	{r0, r1, r4, lr}
 80072e2:	434a      	muls	r2, r1
 80072e4:	4611      	mov	r1, r2
 80072e6:	9201      	str	r2, [sp, #4]
 80072e8:	f000 f85a 	bl	80073a0 <_malloc_r>
 80072ec:	4604      	mov	r4, r0
 80072ee:	b118      	cbz	r0, 80072f8 <_calloc_r+0x18>
 80072f0:	9a01      	ldr	r2, [sp, #4]
 80072f2:	2100      	movs	r1, #0
 80072f4:	f7fe f970 	bl	80055d8 <memset>
 80072f8:	4620      	mov	r0, r4
 80072fa:	b002      	add	sp, #8
 80072fc:	bd10      	pop	{r4, pc}
	...

08007300 <_free_r>:
 8007300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007302:	2900      	cmp	r1, #0
 8007304:	d048      	beq.n	8007398 <_free_r+0x98>
 8007306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730a:	9001      	str	r0, [sp, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f1a1 0404 	sub.w	r4, r1, #4
 8007312:	bfb8      	it	lt
 8007314:	18e4      	addlt	r4, r4, r3
 8007316:	f000 f8ef 	bl	80074f8 <__malloc_lock>
 800731a:	4a20      	ldr	r2, [pc, #128]	; (800739c <_free_r+0x9c>)
 800731c:	9801      	ldr	r0, [sp, #4]
 800731e:	6813      	ldr	r3, [r2, #0]
 8007320:	4615      	mov	r5, r2
 8007322:	b933      	cbnz	r3, 8007332 <_free_r+0x32>
 8007324:	6063      	str	r3, [r4, #4]
 8007326:	6014      	str	r4, [r2, #0]
 8007328:	b003      	add	sp, #12
 800732a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800732e:	f000 b8e9 	b.w	8007504 <__malloc_unlock>
 8007332:	42a3      	cmp	r3, r4
 8007334:	d90b      	bls.n	800734e <_free_r+0x4e>
 8007336:	6821      	ldr	r1, [r4, #0]
 8007338:	1862      	adds	r2, r4, r1
 800733a:	4293      	cmp	r3, r2
 800733c:	bf04      	itt	eq
 800733e:	681a      	ldreq	r2, [r3, #0]
 8007340:	685b      	ldreq	r3, [r3, #4]
 8007342:	6063      	str	r3, [r4, #4]
 8007344:	bf04      	itt	eq
 8007346:	1852      	addeq	r2, r2, r1
 8007348:	6022      	streq	r2, [r4, #0]
 800734a:	602c      	str	r4, [r5, #0]
 800734c:	e7ec      	b.n	8007328 <_free_r+0x28>
 800734e:	461a      	mov	r2, r3
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	b10b      	cbz	r3, 8007358 <_free_r+0x58>
 8007354:	42a3      	cmp	r3, r4
 8007356:	d9fa      	bls.n	800734e <_free_r+0x4e>
 8007358:	6811      	ldr	r1, [r2, #0]
 800735a:	1855      	adds	r5, r2, r1
 800735c:	42a5      	cmp	r5, r4
 800735e:	d10b      	bne.n	8007378 <_free_r+0x78>
 8007360:	6824      	ldr	r4, [r4, #0]
 8007362:	4421      	add	r1, r4
 8007364:	1854      	adds	r4, r2, r1
 8007366:	42a3      	cmp	r3, r4
 8007368:	6011      	str	r1, [r2, #0]
 800736a:	d1dd      	bne.n	8007328 <_free_r+0x28>
 800736c:	681c      	ldr	r4, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	6053      	str	r3, [r2, #4]
 8007372:	4421      	add	r1, r4
 8007374:	6011      	str	r1, [r2, #0]
 8007376:	e7d7      	b.n	8007328 <_free_r+0x28>
 8007378:	d902      	bls.n	8007380 <_free_r+0x80>
 800737a:	230c      	movs	r3, #12
 800737c:	6003      	str	r3, [r0, #0]
 800737e:	e7d3      	b.n	8007328 <_free_r+0x28>
 8007380:	6825      	ldr	r5, [r4, #0]
 8007382:	1961      	adds	r1, r4, r5
 8007384:	428b      	cmp	r3, r1
 8007386:	bf04      	itt	eq
 8007388:	6819      	ldreq	r1, [r3, #0]
 800738a:	685b      	ldreq	r3, [r3, #4]
 800738c:	6063      	str	r3, [r4, #4]
 800738e:	bf04      	itt	eq
 8007390:	1949      	addeq	r1, r1, r5
 8007392:	6021      	streq	r1, [r4, #0]
 8007394:	6054      	str	r4, [r2, #4]
 8007396:	e7c7      	b.n	8007328 <_free_r+0x28>
 8007398:	b003      	add	sp, #12
 800739a:	bd30      	pop	{r4, r5, pc}
 800739c:	20000200 	.word	0x20000200

080073a0 <_malloc_r>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	1ccd      	adds	r5, r1, #3
 80073a4:	f025 0503 	bic.w	r5, r5, #3
 80073a8:	3508      	adds	r5, #8
 80073aa:	2d0c      	cmp	r5, #12
 80073ac:	bf38      	it	cc
 80073ae:	250c      	movcc	r5, #12
 80073b0:	2d00      	cmp	r5, #0
 80073b2:	4606      	mov	r6, r0
 80073b4:	db01      	blt.n	80073ba <_malloc_r+0x1a>
 80073b6:	42a9      	cmp	r1, r5
 80073b8:	d903      	bls.n	80073c2 <_malloc_r+0x22>
 80073ba:	230c      	movs	r3, #12
 80073bc:	6033      	str	r3, [r6, #0]
 80073be:	2000      	movs	r0, #0
 80073c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073c2:	f000 f899 	bl	80074f8 <__malloc_lock>
 80073c6:	4921      	ldr	r1, [pc, #132]	; (800744c <_malloc_r+0xac>)
 80073c8:	680a      	ldr	r2, [r1, #0]
 80073ca:	4614      	mov	r4, r2
 80073cc:	b99c      	cbnz	r4, 80073f6 <_malloc_r+0x56>
 80073ce:	4f20      	ldr	r7, [pc, #128]	; (8007450 <_malloc_r+0xb0>)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	b923      	cbnz	r3, 80073de <_malloc_r+0x3e>
 80073d4:	4621      	mov	r1, r4
 80073d6:	4630      	mov	r0, r6
 80073d8:	f000 f83c 	bl	8007454 <_sbrk_r>
 80073dc:	6038      	str	r0, [r7, #0]
 80073de:	4629      	mov	r1, r5
 80073e0:	4630      	mov	r0, r6
 80073e2:	f000 f837 	bl	8007454 <_sbrk_r>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d123      	bne.n	8007432 <_malloc_r+0x92>
 80073ea:	230c      	movs	r3, #12
 80073ec:	6033      	str	r3, [r6, #0]
 80073ee:	4630      	mov	r0, r6
 80073f0:	f000 f888 	bl	8007504 <__malloc_unlock>
 80073f4:	e7e3      	b.n	80073be <_malloc_r+0x1e>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	1b5b      	subs	r3, r3, r5
 80073fa:	d417      	bmi.n	800742c <_malloc_r+0x8c>
 80073fc:	2b0b      	cmp	r3, #11
 80073fe:	d903      	bls.n	8007408 <_malloc_r+0x68>
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	441c      	add	r4, r3
 8007404:	6025      	str	r5, [r4, #0]
 8007406:	e004      	b.n	8007412 <_malloc_r+0x72>
 8007408:	6863      	ldr	r3, [r4, #4]
 800740a:	42a2      	cmp	r2, r4
 800740c:	bf0c      	ite	eq
 800740e:	600b      	streq	r3, [r1, #0]
 8007410:	6053      	strne	r3, [r2, #4]
 8007412:	4630      	mov	r0, r6
 8007414:	f000 f876 	bl	8007504 <__malloc_unlock>
 8007418:	f104 000b 	add.w	r0, r4, #11
 800741c:	1d23      	adds	r3, r4, #4
 800741e:	f020 0007 	bic.w	r0, r0, #7
 8007422:	1ac2      	subs	r2, r0, r3
 8007424:	d0cc      	beq.n	80073c0 <_malloc_r+0x20>
 8007426:	1a1b      	subs	r3, r3, r0
 8007428:	50a3      	str	r3, [r4, r2]
 800742a:	e7c9      	b.n	80073c0 <_malloc_r+0x20>
 800742c:	4622      	mov	r2, r4
 800742e:	6864      	ldr	r4, [r4, #4]
 8007430:	e7cc      	b.n	80073cc <_malloc_r+0x2c>
 8007432:	1cc4      	adds	r4, r0, #3
 8007434:	f024 0403 	bic.w	r4, r4, #3
 8007438:	42a0      	cmp	r0, r4
 800743a:	d0e3      	beq.n	8007404 <_malloc_r+0x64>
 800743c:	1a21      	subs	r1, r4, r0
 800743e:	4630      	mov	r0, r6
 8007440:	f000 f808 	bl	8007454 <_sbrk_r>
 8007444:	3001      	adds	r0, #1
 8007446:	d1dd      	bne.n	8007404 <_malloc_r+0x64>
 8007448:	e7cf      	b.n	80073ea <_malloc_r+0x4a>
 800744a:	bf00      	nop
 800744c:	20000200 	.word	0x20000200
 8007450:	20000204 	.word	0x20000204

08007454 <_sbrk_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d06      	ldr	r5, [pc, #24]	; (8007470 <_sbrk_r+0x1c>)
 8007458:	2300      	movs	r3, #0
 800745a:	4604      	mov	r4, r0
 800745c:	4608      	mov	r0, r1
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	f7fa fad4 	bl	8001a0c <_sbrk>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_sbrk_r+0x1a>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_sbrk_r+0x1a>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	20000474 	.word	0x20000474

08007474 <__assert_func>:
 8007474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007476:	4614      	mov	r4, r2
 8007478:	461a      	mov	r2, r3
 800747a:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <__assert_func+0x2c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4605      	mov	r5, r0
 8007480:	68d8      	ldr	r0, [r3, #12]
 8007482:	b14c      	cbz	r4, 8007498 <__assert_func+0x24>
 8007484:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <__assert_func+0x30>)
 8007486:	9100      	str	r1, [sp, #0]
 8007488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800748c:	4906      	ldr	r1, [pc, #24]	; (80074a8 <__assert_func+0x34>)
 800748e:	462b      	mov	r3, r5
 8007490:	f000 f80e 	bl	80074b0 <fiprintf>
 8007494:	f000 fa64 	bl	8007960 <abort>
 8007498:	4b04      	ldr	r3, [pc, #16]	; (80074ac <__assert_func+0x38>)
 800749a:	461c      	mov	r4, r3
 800749c:	e7f3      	b.n	8007486 <__assert_func+0x12>
 800749e:	bf00      	nop
 80074a0:	2000000c 	.word	0x2000000c
 80074a4:	080081fc 	.word	0x080081fc
 80074a8:	08008209 	.word	0x08008209
 80074ac:	08008237 	.word	0x08008237

080074b0 <fiprintf>:
 80074b0:	b40e      	push	{r1, r2, r3}
 80074b2:	b503      	push	{r0, r1, lr}
 80074b4:	4601      	mov	r1, r0
 80074b6:	ab03      	add	r3, sp, #12
 80074b8:	4805      	ldr	r0, [pc, #20]	; (80074d0 <fiprintf+0x20>)
 80074ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80074be:	6800      	ldr	r0, [r0, #0]
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	f000 f84f 	bl	8007564 <_vfiprintf_r>
 80074c6:	b002      	add	sp, #8
 80074c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074cc:	b003      	add	sp, #12
 80074ce:	4770      	bx	lr
 80074d0:	2000000c 	.word	0x2000000c

080074d4 <__ascii_mbtowc>:
 80074d4:	b082      	sub	sp, #8
 80074d6:	b901      	cbnz	r1, 80074da <__ascii_mbtowc+0x6>
 80074d8:	a901      	add	r1, sp, #4
 80074da:	b142      	cbz	r2, 80074ee <__ascii_mbtowc+0x1a>
 80074dc:	b14b      	cbz	r3, 80074f2 <__ascii_mbtowc+0x1e>
 80074de:	7813      	ldrb	r3, [r2, #0]
 80074e0:	600b      	str	r3, [r1, #0]
 80074e2:	7812      	ldrb	r2, [r2, #0]
 80074e4:	1e10      	subs	r0, r2, #0
 80074e6:	bf18      	it	ne
 80074e8:	2001      	movne	r0, #1
 80074ea:	b002      	add	sp, #8
 80074ec:	4770      	bx	lr
 80074ee:	4610      	mov	r0, r2
 80074f0:	e7fb      	b.n	80074ea <__ascii_mbtowc+0x16>
 80074f2:	f06f 0001 	mvn.w	r0, #1
 80074f6:	e7f8      	b.n	80074ea <__ascii_mbtowc+0x16>

080074f8 <__malloc_lock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__malloc_lock+0x8>)
 80074fa:	f000 bbf1 	b.w	8007ce0 <__retarget_lock_acquire_recursive>
 80074fe:	bf00      	nop
 8007500:	2000047c 	.word	0x2000047c

08007504 <__malloc_unlock>:
 8007504:	4801      	ldr	r0, [pc, #4]	; (800750c <__malloc_unlock+0x8>)
 8007506:	f000 bbec 	b.w	8007ce2 <__retarget_lock_release_recursive>
 800750a:	bf00      	nop
 800750c:	2000047c 	.word	0x2000047c

08007510 <__sfputc_r>:
 8007510:	6893      	ldr	r3, [r2, #8]
 8007512:	3b01      	subs	r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	b410      	push	{r4}
 8007518:	6093      	str	r3, [r2, #8]
 800751a:	da08      	bge.n	800752e <__sfputc_r+0x1e>
 800751c:	6994      	ldr	r4, [r2, #24]
 800751e:	42a3      	cmp	r3, r4
 8007520:	db01      	blt.n	8007526 <__sfputc_r+0x16>
 8007522:	290a      	cmp	r1, #10
 8007524:	d103      	bne.n	800752e <__sfputc_r+0x1e>
 8007526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800752a:	f000 b94b 	b.w	80077c4 <__swbuf_r>
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	1c58      	adds	r0, r3, #1
 8007532:	6010      	str	r0, [r2, #0]
 8007534:	7019      	strb	r1, [r3, #0]
 8007536:	4608      	mov	r0, r1
 8007538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800753c:	4770      	bx	lr

0800753e <__sfputs_r>:
 800753e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007540:	4606      	mov	r6, r0
 8007542:	460f      	mov	r7, r1
 8007544:	4614      	mov	r4, r2
 8007546:	18d5      	adds	r5, r2, r3
 8007548:	42ac      	cmp	r4, r5
 800754a:	d101      	bne.n	8007550 <__sfputs_r+0x12>
 800754c:	2000      	movs	r0, #0
 800754e:	e007      	b.n	8007560 <__sfputs_r+0x22>
 8007550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007554:	463a      	mov	r2, r7
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff ffda 	bl	8007510 <__sfputc_r>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d1f3      	bne.n	8007548 <__sfputs_r+0xa>
 8007560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007564 <_vfiprintf_r>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	460d      	mov	r5, r1
 800756a:	b09d      	sub	sp, #116	; 0x74
 800756c:	4614      	mov	r4, r2
 800756e:	4698      	mov	r8, r3
 8007570:	4606      	mov	r6, r0
 8007572:	b118      	cbz	r0, 800757c <_vfiprintf_r+0x18>
 8007574:	6983      	ldr	r3, [r0, #24]
 8007576:	b90b      	cbnz	r3, 800757c <_vfiprintf_r+0x18>
 8007578:	f000 fb14 	bl	8007ba4 <__sinit>
 800757c:	4b89      	ldr	r3, [pc, #548]	; (80077a4 <_vfiprintf_r+0x240>)
 800757e:	429d      	cmp	r5, r3
 8007580:	d11b      	bne.n	80075ba <_vfiprintf_r+0x56>
 8007582:	6875      	ldr	r5, [r6, #4]
 8007584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d405      	bmi.n	8007596 <_vfiprintf_r+0x32>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	059a      	lsls	r2, r3, #22
 800758e:	d402      	bmi.n	8007596 <_vfiprintf_r+0x32>
 8007590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007592:	f000 fba5 	bl	8007ce0 <__retarget_lock_acquire_recursive>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	071b      	lsls	r3, r3, #28
 800759a:	d501      	bpl.n	80075a0 <_vfiprintf_r+0x3c>
 800759c:	692b      	ldr	r3, [r5, #16]
 800759e:	b9eb      	cbnz	r3, 80075dc <_vfiprintf_r+0x78>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 f96e 	bl	8007884 <__swsetup_r>
 80075a8:	b1c0      	cbz	r0, 80075dc <_vfiprintf_r+0x78>
 80075aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ac:	07dc      	lsls	r4, r3, #31
 80075ae:	d50e      	bpl.n	80075ce <_vfiprintf_r+0x6a>
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	b01d      	add	sp, #116	; 0x74
 80075b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ba:	4b7b      	ldr	r3, [pc, #492]	; (80077a8 <_vfiprintf_r+0x244>)
 80075bc:	429d      	cmp	r5, r3
 80075be:	d101      	bne.n	80075c4 <_vfiprintf_r+0x60>
 80075c0:	68b5      	ldr	r5, [r6, #8]
 80075c2:	e7df      	b.n	8007584 <_vfiprintf_r+0x20>
 80075c4:	4b79      	ldr	r3, [pc, #484]	; (80077ac <_vfiprintf_r+0x248>)
 80075c6:	429d      	cmp	r5, r3
 80075c8:	bf08      	it	eq
 80075ca:	68f5      	ldreq	r5, [r6, #12]
 80075cc:	e7da      	b.n	8007584 <_vfiprintf_r+0x20>
 80075ce:	89ab      	ldrh	r3, [r5, #12]
 80075d0:	0598      	lsls	r0, r3, #22
 80075d2:	d4ed      	bmi.n	80075b0 <_vfiprintf_r+0x4c>
 80075d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075d6:	f000 fb84 	bl	8007ce2 <__retarget_lock_release_recursive>
 80075da:	e7e9      	b.n	80075b0 <_vfiprintf_r+0x4c>
 80075dc:	2300      	movs	r3, #0
 80075de:	9309      	str	r3, [sp, #36]	; 0x24
 80075e0:	2320      	movs	r3, #32
 80075e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ea:	2330      	movs	r3, #48	; 0x30
 80075ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077b0 <_vfiprintf_r+0x24c>
 80075f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075f4:	f04f 0901 	mov.w	r9, #1
 80075f8:	4623      	mov	r3, r4
 80075fa:	469a      	mov	sl, r3
 80075fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007600:	b10a      	cbz	r2, 8007606 <_vfiprintf_r+0xa2>
 8007602:	2a25      	cmp	r2, #37	; 0x25
 8007604:	d1f9      	bne.n	80075fa <_vfiprintf_r+0x96>
 8007606:	ebba 0b04 	subs.w	fp, sl, r4
 800760a:	d00b      	beq.n	8007624 <_vfiprintf_r+0xc0>
 800760c:	465b      	mov	r3, fp
 800760e:	4622      	mov	r2, r4
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ff93 	bl	800753e <__sfputs_r>
 8007618:	3001      	adds	r0, #1
 800761a:	f000 80aa 	beq.w	8007772 <_vfiprintf_r+0x20e>
 800761e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007620:	445a      	add	r2, fp
 8007622:	9209      	str	r2, [sp, #36]	; 0x24
 8007624:	f89a 3000 	ldrb.w	r3, [sl]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 80a2 	beq.w	8007772 <_vfiprintf_r+0x20e>
 800762e:	2300      	movs	r3, #0
 8007630:	f04f 32ff 	mov.w	r2, #4294967295
 8007634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007638:	f10a 0a01 	add.w	sl, sl, #1
 800763c:	9304      	str	r3, [sp, #16]
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007644:	931a      	str	r3, [sp, #104]	; 0x68
 8007646:	4654      	mov	r4, sl
 8007648:	2205      	movs	r2, #5
 800764a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764e:	4858      	ldr	r0, [pc, #352]	; (80077b0 <_vfiprintf_r+0x24c>)
 8007650:	f7f8 fde6 	bl	8000220 <memchr>
 8007654:	9a04      	ldr	r2, [sp, #16]
 8007656:	b9d8      	cbnz	r0, 8007690 <_vfiprintf_r+0x12c>
 8007658:	06d1      	lsls	r1, r2, #27
 800765a:	bf44      	itt	mi
 800765c:	2320      	movmi	r3, #32
 800765e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007662:	0713      	lsls	r3, r2, #28
 8007664:	bf44      	itt	mi
 8007666:	232b      	movmi	r3, #43	; 0x2b
 8007668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800766c:	f89a 3000 	ldrb.w	r3, [sl]
 8007670:	2b2a      	cmp	r3, #42	; 0x2a
 8007672:	d015      	beq.n	80076a0 <_vfiprintf_r+0x13c>
 8007674:	9a07      	ldr	r2, [sp, #28]
 8007676:	4654      	mov	r4, sl
 8007678:	2000      	movs	r0, #0
 800767a:	f04f 0c0a 	mov.w	ip, #10
 800767e:	4621      	mov	r1, r4
 8007680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007684:	3b30      	subs	r3, #48	; 0x30
 8007686:	2b09      	cmp	r3, #9
 8007688:	d94e      	bls.n	8007728 <_vfiprintf_r+0x1c4>
 800768a:	b1b0      	cbz	r0, 80076ba <_vfiprintf_r+0x156>
 800768c:	9207      	str	r2, [sp, #28]
 800768e:	e014      	b.n	80076ba <_vfiprintf_r+0x156>
 8007690:	eba0 0308 	sub.w	r3, r0, r8
 8007694:	fa09 f303 	lsl.w	r3, r9, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	46a2      	mov	sl, r4
 800769e:	e7d2      	b.n	8007646 <_vfiprintf_r+0xe2>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	1d19      	adds	r1, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	9103      	str	r1, [sp, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bfbb      	ittet	lt
 80076ac:	425b      	neglt	r3, r3
 80076ae:	f042 0202 	orrlt.w	r2, r2, #2
 80076b2:	9307      	strge	r3, [sp, #28]
 80076b4:	9307      	strlt	r3, [sp, #28]
 80076b6:	bfb8      	it	lt
 80076b8:	9204      	strlt	r2, [sp, #16]
 80076ba:	7823      	ldrb	r3, [r4, #0]
 80076bc:	2b2e      	cmp	r3, #46	; 0x2e
 80076be:	d10c      	bne.n	80076da <_vfiprintf_r+0x176>
 80076c0:	7863      	ldrb	r3, [r4, #1]
 80076c2:	2b2a      	cmp	r3, #42	; 0x2a
 80076c4:	d135      	bne.n	8007732 <_vfiprintf_r+0x1ce>
 80076c6:	9b03      	ldr	r3, [sp, #12]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	9203      	str	r2, [sp, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bfb8      	it	lt
 80076d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80076d6:	3402      	adds	r4, #2
 80076d8:	9305      	str	r3, [sp, #20]
 80076da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077c0 <_vfiprintf_r+0x25c>
 80076de:	7821      	ldrb	r1, [r4, #0]
 80076e0:	2203      	movs	r2, #3
 80076e2:	4650      	mov	r0, sl
 80076e4:	f7f8 fd9c 	bl	8000220 <memchr>
 80076e8:	b140      	cbz	r0, 80076fc <_vfiprintf_r+0x198>
 80076ea:	2340      	movs	r3, #64	; 0x40
 80076ec:	eba0 000a 	sub.w	r0, r0, sl
 80076f0:	fa03 f000 	lsl.w	r0, r3, r0
 80076f4:	9b04      	ldr	r3, [sp, #16]
 80076f6:	4303      	orrs	r3, r0
 80076f8:	3401      	adds	r4, #1
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007700:	482c      	ldr	r0, [pc, #176]	; (80077b4 <_vfiprintf_r+0x250>)
 8007702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007706:	2206      	movs	r2, #6
 8007708:	f7f8 fd8a 	bl	8000220 <memchr>
 800770c:	2800      	cmp	r0, #0
 800770e:	d03f      	beq.n	8007790 <_vfiprintf_r+0x22c>
 8007710:	4b29      	ldr	r3, [pc, #164]	; (80077b8 <_vfiprintf_r+0x254>)
 8007712:	bb1b      	cbnz	r3, 800775c <_vfiprintf_r+0x1f8>
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	3307      	adds	r3, #7
 8007718:	f023 0307 	bic.w	r3, r3, #7
 800771c:	3308      	adds	r3, #8
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	443b      	add	r3, r7
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	e767      	b.n	80075f8 <_vfiprintf_r+0x94>
 8007728:	fb0c 3202 	mla	r2, ip, r2, r3
 800772c:	460c      	mov	r4, r1
 800772e:	2001      	movs	r0, #1
 8007730:	e7a5      	b.n	800767e <_vfiprintf_r+0x11a>
 8007732:	2300      	movs	r3, #0
 8007734:	3401      	adds	r4, #1
 8007736:	9305      	str	r3, [sp, #20]
 8007738:	4619      	mov	r1, r3
 800773a:	f04f 0c0a 	mov.w	ip, #10
 800773e:	4620      	mov	r0, r4
 8007740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007744:	3a30      	subs	r2, #48	; 0x30
 8007746:	2a09      	cmp	r2, #9
 8007748:	d903      	bls.n	8007752 <_vfiprintf_r+0x1ee>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0c5      	beq.n	80076da <_vfiprintf_r+0x176>
 800774e:	9105      	str	r1, [sp, #20]
 8007750:	e7c3      	b.n	80076da <_vfiprintf_r+0x176>
 8007752:	fb0c 2101 	mla	r1, ip, r1, r2
 8007756:	4604      	mov	r4, r0
 8007758:	2301      	movs	r3, #1
 800775a:	e7f0      	b.n	800773e <_vfiprintf_r+0x1da>
 800775c:	ab03      	add	r3, sp, #12
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	462a      	mov	r2, r5
 8007762:	4b16      	ldr	r3, [pc, #88]	; (80077bc <_vfiprintf_r+0x258>)
 8007764:	a904      	add	r1, sp, #16
 8007766:	4630      	mov	r0, r6
 8007768:	f7fd ffde 	bl	8005728 <_printf_float>
 800776c:	4607      	mov	r7, r0
 800776e:	1c78      	adds	r0, r7, #1
 8007770:	d1d6      	bne.n	8007720 <_vfiprintf_r+0x1bc>
 8007772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007774:	07d9      	lsls	r1, r3, #31
 8007776:	d405      	bmi.n	8007784 <_vfiprintf_r+0x220>
 8007778:	89ab      	ldrh	r3, [r5, #12]
 800777a:	059a      	lsls	r2, r3, #22
 800777c:	d402      	bmi.n	8007784 <_vfiprintf_r+0x220>
 800777e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007780:	f000 faaf 	bl	8007ce2 <__retarget_lock_release_recursive>
 8007784:	89ab      	ldrh	r3, [r5, #12]
 8007786:	065b      	lsls	r3, r3, #25
 8007788:	f53f af12 	bmi.w	80075b0 <_vfiprintf_r+0x4c>
 800778c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800778e:	e711      	b.n	80075b4 <_vfiprintf_r+0x50>
 8007790:	ab03      	add	r3, sp, #12
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	462a      	mov	r2, r5
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <_vfiprintf_r+0x258>)
 8007798:	a904      	add	r1, sp, #16
 800779a:	4630      	mov	r0, r6
 800779c:	f7fe fa68 	bl	8005c70 <_printf_i>
 80077a0:	e7e4      	b.n	800776c <_vfiprintf_r+0x208>
 80077a2:	bf00      	nop
 80077a4:	08008374 	.word	0x08008374
 80077a8:	08008394 	.word	0x08008394
 80077ac:	08008354 	.word	0x08008354
 80077b0:	08008242 	.word	0x08008242
 80077b4:	0800824c 	.word	0x0800824c
 80077b8:	08005729 	.word	0x08005729
 80077bc:	0800753f 	.word	0x0800753f
 80077c0:	08008248 	.word	0x08008248

080077c4 <__swbuf_r>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	460e      	mov	r6, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	4605      	mov	r5, r0
 80077cc:	b118      	cbz	r0, 80077d6 <__swbuf_r+0x12>
 80077ce:	6983      	ldr	r3, [r0, #24]
 80077d0:	b90b      	cbnz	r3, 80077d6 <__swbuf_r+0x12>
 80077d2:	f000 f9e7 	bl	8007ba4 <__sinit>
 80077d6:	4b21      	ldr	r3, [pc, #132]	; (800785c <__swbuf_r+0x98>)
 80077d8:	429c      	cmp	r4, r3
 80077da:	d12b      	bne.n	8007834 <__swbuf_r+0x70>
 80077dc:	686c      	ldr	r4, [r5, #4]
 80077de:	69a3      	ldr	r3, [r4, #24]
 80077e0:	60a3      	str	r3, [r4, #8]
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	071a      	lsls	r2, r3, #28
 80077e6:	d52f      	bpl.n	8007848 <__swbuf_r+0x84>
 80077e8:	6923      	ldr	r3, [r4, #16]
 80077ea:	b36b      	cbz	r3, 8007848 <__swbuf_r+0x84>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	1ac0      	subs	r0, r0, r3
 80077f2:	6963      	ldr	r3, [r4, #20]
 80077f4:	b2f6      	uxtb	r6, r6
 80077f6:	4283      	cmp	r3, r0
 80077f8:	4637      	mov	r7, r6
 80077fa:	dc04      	bgt.n	8007806 <__swbuf_r+0x42>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f93c 	bl	8007a7c <_fflush_r>
 8007804:	bb30      	cbnz	r0, 8007854 <__swbuf_r+0x90>
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	3b01      	subs	r3, #1
 800780a:	60a3      	str	r3, [r4, #8]
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	6022      	str	r2, [r4, #0]
 8007812:	701e      	strb	r6, [r3, #0]
 8007814:	6963      	ldr	r3, [r4, #20]
 8007816:	3001      	adds	r0, #1
 8007818:	4283      	cmp	r3, r0
 800781a:	d004      	beq.n	8007826 <__swbuf_r+0x62>
 800781c:	89a3      	ldrh	r3, [r4, #12]
 800781e:	07db      	lsls	r3, r3, #31
 8007820:	d506      	bpl.n	8007830 <__swbuf_r+0x6c>
 8007822:	2e0a      	cmp	r6, #10
 8007824:	d104      	bne.n	8007830 <__swbuf_r+0x6c>
 8007826:	4621      	mov	r1, r4
 8007828:	4628      	mov	r0, r5
 800782a:	f000 f927 	bl	8007a7c <_fflush_r>
 800782e:	b988      	cbnz	r0, 8007854 <__swbuf_r+0x90>
 8007830:	4638      	mov	r0, r7
 8007832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <__swbuf_r+0x9c>)
 8007836:	429c      	cmp	r4, r3
 8007838:	d101      	bne.n	800783e <__swbuf_r+0x7a>
 800783a:	68ac      	ldr	r4, [r5, #8]
 800783c:	e7cf      	b.n	80077de <__swbuf_r+0x1a>
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <__swbuf_r+0xa0>)
 8007840:	429c      	cmp	r4, r3
 8007842:	bf08      	it	eq
 8007844:	68ec      	ldreq	r4, [r5, #12]
 8007846:	e7ca      	b.n	80077de <__swbuf_r+0x1a>
 8007848:	4621      	mov	r1, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f81a 	bl	8007884 <__swsetup_r>
 8007850:	2800      	cmp	r0, #0
 8007852:	d0cb      	beq.n	80077ec <__swbuf_r+0x28>
 8007854:	f04f 37ff 	mov.w	r7, #4294967295
 8007858:	e7ea      	b.n	8007830 <__swbuf_r+0x6c>
 800785a:	bf00      	nop
 800785c:	08008374 	.word	0x08008374
 8007860:	08008394 	.word	0x08008394
 8007864:	08008354 	.word	0x08008354

08007868 <__ascii_wctomb>:
 8007868:	b149      	cbz	r1, 800787e <__ascii_wctomb+0x16>
 800786a:	2aff      	cmp	r2, #255	; 0xff
 800786c:	bf85      	ittet	hi
 800786e:	238a      	movhi	r3, #138	; 0x8a
 8007870:	6003      	strhi	r3, [r0, #0]
 8007872:	700a      	strbls	r2, [r1, #0]
 8007874:	f04f 30ff 	movhi.w	r0, #4294967295
 8007878:	bf98      	it	ls
 800787a:	2001      	movls	r0, #1
 800787c:	4770      	bx	lr
 800787e:	4608      	mov	r0, r1
 8007880:	4770      	bx	lr
	...

08007884 <__swsetup_r>:
 8007884:	4b32      	ldr	r3, [pc, #200]	; (8007950 <__swsetup_r+0xcc>)
 8007886:	b570      	push	{r4, r5, r6, lr}
 8007888:	681d      	ldr	r5, [r3, #0]
 800788a:	4606      	mov	r6, r0
 800788c:	460c      	mov	r4, r1
 800788e:	b125      	cbz	r5, 800789a <__swsetup_r+0x16>
 8007890:	69ab      	ldr	r3, [r5, #24]
 8007892:	b913      	cbnz	r3, 800789a <__swsetup_r+0x16>
 8007894:	4628      	mov	r0, r5
 8007896:	f000 f985 	bl	8007ba4 <__sinit>
 800789a:	4b2e      	ldr	r3, [pc, #184]	; (8007954 <__swsetup_r+0xd0>)
 800789c:	429c      	cmp	r4, r3
 800789e:	d10f      	bne.n	80078c0 <__swsetup_r+0x3c>
 80078a0:	686c      	ldr	r4, [r5, #4]
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078a8:	0719      	lsls	r1, r3, #28
 80078aa:	d42c      	bmi.n	8007906 <__swsetup_r+0x82>
 80078ac:	06dd      	lsls	r5, r3, #27
 80078ae:	d411      	bmi.n	80078d4 <__swsetup_r+0x50>
 80078b0:	2309      	movs	r3, #9
 80078b2:	6033      	str	r3, [r6, #0]
 80078b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	e03e      	b.n	800793e <__swsetup_r+0xba>
 80078c0:	4b25      	ldr	r3, [pc, #148]	; (8007958 <__swsetup_r+0xd4>)
 80078c2:	429c      	cmp	r4, r3
 80078c4:	d101      	bne.n	80078ca <__swsetup_r+0x46>
 80078c6:	68ac      	ldr	r4, [r5, #8]
 80078c8:	e7eb      	b.n	80078a2 <__swsetup_r+0x1e>
 80078ca:	4b24      	ldr	r3, [pc, #144]	; (800795c <__swsetup_r+0xd8>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	bf08      	it	eq
 80078d0:	68ec      	ldreq	r4, [r5, #12]
 80078d2:	e7e6      	b.n	80078a2 <__swsetup_r+0x1e>
 80078d4:	0758      	lsls	r0, r3, #29
 80078d6:	d512      	bpl.n	80078fe <__swsetup_r+0x7a>
 80078d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078da:	b141      	cbz	r1, 80078ee <__swsetup_r+0x6a>
 80078dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078e0:	4299      	cmp	r1, r3
 80078e2:	d002      	beq.n	80078ea <__swsetup_r+0x66>
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7ff fd0b 	bl	8007300 <_free_r>
 80078ea:	2300      	movs	r3, #0
 80078ec:	6363      	str	r3, [r4, #52]	; 0x34
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078f4:	81a3      	strh	r3, [r4, #12]
 80078f6:	2300      	movs	r3, #0
 80078f8:	6063      	str	r3, [r4, #4]
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	f043 0308 	orr.w	r3, r3, #8
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	b94b      	cbnz	r3, 800791e <__swsetup_r+0x9a>
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007914:	d003      	beq.n	800791e <__swsetup_r+0x9a>
 8007916:	4621      	mov	r1, r4
 8007918:	4630      	mov	r0, r6
 800791a:	f000 fa07 	bl	8007d2c <__smakebuf_r>
 800791e:	89a0      	ldrh	r0, [r4, #12]
 8007920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007924:	f010 0301 	ands.w	r3, r0, #1
 8007928:	d00a      	beq.n	8007940 <__swsetup_r+0xbc>
 800792a:	2300      	movs	r3, #0
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	6963      	ldr	r3, [r4, #20]
 8007930:	425b      	negs	r3, r3
 8007932:	61a3      	str	r3, [r4, #24]
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	b943      	cbnz	r3, 800794a <__swsetup_r+0xc6>
 8007938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800793c:	d1ba      	bne.n	80078b4 <__swsetup_r+0x30>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	0781      	lsls	r1, r0, #30
 8007942:	bf58      	it	pl
 8007944:	6963      	ldrpl	r3, [r4, #20]
 8007946:	60a3      	str	r3, [r4, #8]
 8007948:	e7f4      	b.n	8007934 <__swsetup_r+0xb0>
 800794a:	2000      	movs	r0, #0
 800794c:	e7f7      	b.n	800793e <__swsetup_r+0xba>
 800794e:	bf00      	nop
 8007950:	2000000c 	.word	0x2000000c
 8007954:	08008374 	.word	0x08008374
 8007958:	08008394 	.word	0x08008394
 800795c:	08008354 	.word	0x08008354

08007960 <abort>:
 8007960:	b508      	push	{r3, lr}
 8007962:	2006      	movs	r0, #6
 8007964:	f000 fa4a 	bl	8007dfc <raise>
 8007968:	2001      	movs	r0, #1
 800796a:	f7f9 ffd7 	bl	800191c <_exit>
	...

08007970 <__sflush_r>:
 8007970:	898a      	ldrh	r2, [r1, #12]
 8007972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	4605      	mov	r5, r0
 8007978:	0710      	lsls	r0, r2, #28
 800797a:	460c      	mov	r4, r1
 800797c:	d458      	bmi.n	8007a30 <__sflush_r+0xc0>
 800797e:	684b      	ldr	r3, [r1, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	dc05      	bgt.n	8007990 <__sflush_r+0x20>
 8007984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	dc02      	bgt.n	8007990 <__sflush_r+0x20>
 800798a:	2000      	movs	r0, #0
 800798c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007992:	2e00      	cmp	r6, #0
 8007994:	d0f9      	beq.n	800798a <__sflush_r+0x1a>
 8007996:	2300      	movs	r3, #0
 8007998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800799c:	682f      	ldr	r7, [r5, #0]
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	d032      	beq.n	8007a08 <__sflush_r+0x98>
 80079a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	075a      	lsls	r2, r3, #29
 80079a8:	d505      	bpl.n	80079b6 <__sflush_r+0x46>
 80079aa:	6863      	ldr	r3, [r4, #4]
 80079ac:	1ac0      	subs	r0, r0, r3
 80079ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079b0:	b10b      	cbz	r3, 80079b6 <__sflush_r+0x46>
 80079b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b4:	1ac0      	subs	r0, r0, r3
 80079b6:	2300      	movs	r3, #0
 80079b8:	4602      	mov	r2, r0
 80079ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079bc:	6a21      	ldr	r1, [r4, #32]
 80079be:	4628      	mov	r0, r5
 80079c0:	47b0      	blx	r6
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	d106      	bne.n	80079d6 <__sflush_r+0x66>
 80079c8:	6829      	ldr	r1, [r5, #0]
 80079ca:	291d      	cmp	r1, #29
 80079cc:	d82c      	bhi.n	8007a28 <__sflush_r+0xb8>
 80079ce:	4a2a      	ldr	r2, [pc, #168]	; (8007a78 <__sflush_r+0x108>)
 80079d0:	40ca      	lsrs	r2, r1
 80079d2:	07d6      	lsls	r6, r2, #31
 80079d4:	d528      	bpl.n	8007a28 <__sflush_r+0xb8>
 80079d6:	2200      	movs	r2, #0
 80079d8:	6062      	str	r2, [r4, #4]
 80079da:	04d9      	lsls	r1, r3, #19
 80079dc:	6922      	ldr	r2, [r4, #16]
 80079de:	6022      	str	r2, [r4, #0]
 80079e0:	d504      	bpl.n	80079ec <__sflush_r+0x7c>
 80079e2:	1c42      	adds	r2, r0, #1
 80079e4:	d101      	bne.n	80079ea <__sflush_r+0x7a>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	b903      	cbnz	r3, 80079ec <__sflush_r+0x7c>
 80079ea:	6560      	str	r0, [r4, #84]	; 0x54
 80079ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ee:	602f      	str	r7, [r5, #0]
 80079f0:	2900      	cmp	r1, #0
 80079f2:	d0ca      	beq.n	800798a <__sflush_r+0x1a>
 80079f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f8:	4299      	cmp	r1, r3
 80079fa:	d002      	beq.n	8007a02 <__sflush_r+0x92>
 80079fc:	4628      	mov	r0, r5
 80079fe:	f7ff fc7f 	bl	8007300 <_free_r>
 8007a02:	2000      	movs	r0, #0
 8007a04:	6360      	str	r0, [r4, #52]	; 0x34
 8007a06:	e7c1      	b.n	800798c <__sflush_r+0x1c>
 8007a08:	6a21      	ldr	r1, [r4, #32]
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b0      	blx	r6
 8007a10:	1c41      	adds	r1, r0, #1
 8007a12:	d1c7      	bne.n	80079a4 <__sflush_r+0x34>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0c4      	beq.n	80079a4 <__sflush_r+0x34>
 8007a1a:	2b1d      	cmp	r3, #29
 8007a1c:	d001      	beq.n	8007a22 <__sflush_r+0xb2>
 8007a1e:	2b16      	cmp	r3, #22
 8007a20:	d101      	bne.n	8007a26 <__sflush_r+0xb6>
 8007a22:	602f      	str	r7, [r5, #0]
 8007a24:	e7b1      	b.n	800798a <__sflush_r+0x1a>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a2c:	81a3      	strh	r3, [r4, #12]
 8007a2e:	e7ad      	b.n	800798c <__sflush_r+0x1c>
 8007a30:	690f      	ldr	r7, [r1, #16]
 8007a32:	2f00      	cmp	r7, #0
 8007a34:	d0a9      	beq.n	800798a <__sflush_r+0x1a>
 8007a36:	0793      	lsls	r3, r2, #30
 8007a38:	680e      	ldr	r6, [r1, #0]
 8007a3a:	bf08      	it	eq
 8007a3c:	694b      	ldreq	r3, [r1, #20]
 8007a3e:	600f      	str	r7, [r1, #0]
 8007a40:	bf18      	it	ne
 8007a42:	2300      	movne	r3, #0
 8007a44:	eba6 0807 	sub.w	r8, r6, r7
 8007a48:	608b      	str	r3, [r1, #8]
 8007a4a:	f1b8 0f00 	cmp.w	r8, #0
 8007a4e:	dd9c      	ble.n	800798a <__sflush_r+0x1a>
 8007a50:	6a21      	ldr	r1, [r4, #32]
 8007a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a54:	4643      	mov	r3, r8
 8007a56:	463a      	mov	r2, r7
 8007a58:	4628      	mov	r0, r5
 8007a5a:	47b0      	blx	r6
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	dc06      	bgt.n	8007a6e <__sflush_r+0xfe>
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	e78e      	b.n	800798c <__sflush_r+0x1c>
 8007a6e:	4407      	add	r7, r0
 8007a70:	eba8 0800 	sub.w	r8, r8, r0
 8007a74:	e7e9      	b.n	8007a4a <__sflush_r+0xda>
 8007a76:	bf00      	nop
 8007a78:	20400001 	.word	0x20400001

08007a7c <_fflush_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	690b      	ldr	r3, [r1, #16]
 8007a80:	4605      	mov	r5, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	b913      	cbnz	r3, 8007a8c <_fflush_r+0x10>
 8007a86:	2500      	movs	r5, #0
 8007a88:	4628      	mov	r0, r5
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	b118      	cbz	r0, 8007a96 <_fflush_r+0x1a>
 8007a8e:	6983      	ldr	r3, [r0, #24]
 8007a90:	b90b      	cbnz	r3, 8007a96 <_fflush_r+0x1a>
 8007a92:	f000 f887 	bl	8007ba4 <__sinit>
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <_fflush_r+0x6c>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	d11b      	bne.n	8007ad4 <_fflush_r+0x58>
 8007a9c:	686c      	ldr	r4, [r5, #4]
 8007a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0ef      	beq.n	8007a86 <_fflush_r+0xa>
 8007aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aa8:	07d0      	lsls	r0, r2, #31
 8007aaa:	d404      	bmi.n	8007ab6 <_fflush_r+0x3a>
 8007aac:	0599      	lsls	r1, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_fflush_r+0x3a>
 8007ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ab2:	f000 f915 	bl	8007ce0 <__retarget_lock_acquire_recursive>
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	4621      	mov	r1, r4
 8007aba:	f7ff ff59 	bl	8007970 <__sflush_r>
 8007abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ac0:	07da      	lsls	r2, r3, #31
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	d4e0      	bmi.n	8007a88 <_fflush_r+0xc>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	059b      	lsls	r3, r3, #22
 8007aca:	d4dd      	bmi.n	8007a88 <_fflush_r+0xc>
 8007acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ace:	f000 f908 	bl	8007ce2 <__retarget_lock_release_recursive>
 8007ad2:	e7d9      	b.n	8007a88 <_fflush_r+0xc>
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <_fflush_r+0x70>)
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d101      	bne.n	8007ade <_fflush_r+0x62>
 8007ada:	68ac      	ldr	r4, [r5, #8]
 8007adc:	e7df      	b.n	8007a9e <_fflush_r+0x22>
 8007ade:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <_fflush_r+0x74>)
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	bf08      	it	eq
 8007ae4:	68ec      	ldreq	r4, [r5, #12]
 8007ae6:	e7da      	b.n	8007a9e <_fflush_r+0x22>
 8007ae8:	08008374 	.word	0x08008374
 8007aec:	08008394 	.word	0x08008394
 8007af0:	08008354 	.word	0x08008354

08007af4 <std>:
 8007af4:	2300      	movs	r3, #0
 8007af6:	b510      	push	{r4, lr}
 8007af8:	4604      	mov	r4, r0
 8007afa:	e9c0 3300 	strd	r3, r3, [r0]
 8007afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b02:	6083      	str	r3, [r0, #8]
 8007b04:	8181      	strh	r1, [r0, #12]
 8007b06:	6643      	str	r3, [r0, #100]	; 0x64
 8007b08:	81c2      	strh	r2, [r0, #14]
 8007b0a:	6183      	str	r3, [r0, #24]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	2208      	movs	r2, #8
 8007b10:	305c      	adds	r0, #92	; 0x5c
 8007b12:	f7fd fd61 	bl	80055d8 <memset>
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <std+0x38>)
 8007b18:	6263      	str	r3, [r4, #36]	; 0x24
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <std+0x3c>)
 8007b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <std+0x40>)
 8007b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <std+0x44>)
 8007b24:	6224      	str	r4, [r4, #32]
 8007b26:	6323      	str	r3, [r4, #48]	; 0x30
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	bf00      	nop
 8007b2c:	08007e35 	.word	0x08007e35
 8007b30:	08007e57 	.word	0x08007e57
 8007b34:	08007e8f 	.word	0x08007e8f
 8007b38:	08007eb3 	.word	0x08007eb3

08007b3c <_cleanup_r>:
 8007b3c:	4901      	ldr	r1, [pc, #4]	; (8007b44 <_cleanup_r+0x8>)
 8007b3e:	f000 b8af 	b.w	8007ca0 <_fwalk_reent>
 8007b42:	bf00      	nop
 8007b44:	08007a7d 	.word	0x08007a7d

08007b48 <__sfmoreglue>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	1e4a      	subs	r2, r1, #1
 8007b4c:	2568      	movs	r5, #104	; 0x68
 8007b4e:	4355      	muls	r5, r2
 8007b50:	460e      	mov	r6, r1
 8007b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b56:	f7ff fc23 	bl	80073a0 <_malloc_r>
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	b140      	cbz	r0, 8007b70 <__sfmoreglue+0x28>
 8007b5e:	2100      	movs	r1, #0
 8007b60:	e9c0 1600 	strd	r1, r6, [r0]
 8007b64:	300c      	adds	r0, #12
 8007b66:	60a0      	str	r0, [r4, #8]
 8007b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b6c:	f7fd fd34 	bl	80055d8 <memset>
 8007b70:	4620      	mov	r0, r4
 8007b72:	bd70      	pop	{r4, r5, r6, pc}

08007b74 <__sfp_lock_acquire>:
 8007b74:	4801      	ldr	r0, [pc, #4]	; (8007b7c <__sfp_lock_acquire+0x8>)
 8007b76:	f000 b8b3 	b.w	8007ce0 <__retarget_lock_acquire_recursive>
 8007b7a:	bf00      	nop
 8007b7c:	20000480 	.word	0x20000480

08007b80 <__sfp_lock_release>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__sfp_lock_release+0x8>)
 8007b82:	f000 b8ae 	b.w	8007ce2 <__retarget_lock_release_recursive>
 8007b86:	bf00      	nop
 8007b88:	20000480 	.word	0x20000480

08007b8c <__sinit_lock_acquire>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__sinit_lock_acquire+0x8>)
 8007b8e:	f000 b8a7 	b.w	8007ce0 <__retarget_lock_acquire_recursive>
 8007b92:	bf00      	nop
 8007b94:	2000047b 	.word	0x2000047b

08007b98 <__sinit_lock_release>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__sinit_lock_release+0x8>)
 8007b9a:	f000 b8a2 	b.w	8007ce2 <__retarget_lock_release_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	2000047b 	.word	0x2000047b

08007ba4 <__sinit>:
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	f7ff fff0 	bl	8007b8c <__sinit_lock_acquire>
 8007bac:	69a3      	ldr	r3, [r4, #24]
 8007bae:	b11b      	cbz	r3, 8007bb8 <__sinit+0x14>
 8007bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb4:	f7ff bff0 	b.w	8007b98 <__sinit_lock_release>
 8007bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <__sinit+0x68>)
 8007bc0:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <__sinit+0x6c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	bf04      	itt	eq
 8007bca:	2301      	moveq	r3, #1
 8007bcc:	61a3      	streq	r3, [r4, #24]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 f820 	bl	8007c14 <__sfp>
 8007bd4:	6060      	str	r0, [r4, #4]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 f81c 	bl	8007c14 <__sfp>
 8007bdc:	60a0      	str	r0, [r4, #8]
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 f818 	bl	8007c14 <__sfp>
 8007be4:	2200      	movs	r2, #0
 8007be6:	60e0      	str	r0, [r4, #12]
 8007be8:	2104      	movs	r1, #4
 8007bea:	6860      	ldr	r0, [r4, #4]
 8007bec:	f7ff ff82 	bl	8007af4 <std>
 8007bf0:	68a0      	ldr	r0, [r4, #8]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	2109      	movs	r1, #9
 8007bf6:	f7ff ff7d 	bl	8007af4 <std>
 8007bfa:	68e0      	ldr	r0, [r4, #12]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	2112      	movs	r1, #18
 8007c00:	f7ff ff78 	bl	8007af4 <std>
 8007c04:	2301      	movs	r3, #1
 8007c06:	61a3      	str	r3, [r4, #24]
 8007c08:	e7d2      	b.n	8007bb0 <__sinit+0xc>
 8007c0a:	bf00      	nop
 8007c0c:	08007fd4 	.word	0x08007fd4
 8007c10:	08007b3d 	.word	0x08007b3d

08007c14 <__sfp>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	4607      	mov	r7, r0
 8007c18:	f7ff ffac 	bl	8007b74 <__sfp_lock_acquire>
 8007c1c:	4b1e      	ldr	r3, [pc, #120]	; (8007c98 <__sfp+0x84>)
 8007c1e:	681e      	ldr	r6, [r3, #0]
 8007c20:	69b3      	ldr	r3, [r6, #24]
 8007c22:	b913      	cbnz	r3, 8007c2a <__sfp+0x16>
 8007c24:	4630      	mov	r0, r6
 8007c26:	f7ff ffbd 	bl	8007ba4 <__sinit>
 8007c2a:	3648      	adds	r6, #72	; 0x48
 8007c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	d503      	bpl.n	8007c3c <__sfp+0x28>
 8007c34:	6833      	ldr	r3, [r6, #0]
 8007c36:	b30b      	cbz	r3, 8007c7c <__sfp+0x68>
 8007c38:	6836      	ldr	r6, [r6, #0]
 8007c3a:	e7f7      	b.n	8007c2c <__sfp+0x18>
 8007c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c40:	b9d5      	cbnz	r5, 8007c78 <__sfp+0x64>
 8007c42:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <__sfp+0x88>)
 8007c44:	60e3      	str	r3, [r4, #12]
 8007c46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8007c4c:	f000 f847 	bl	8007cde <__retarget_lock_init_recursive>
 8007c50:	f7ff ff96 	bl	8007b80 <__sfp_lock_release>
 8007c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c5c:	6025      	str	r5, [r4, #0]
 8007c5e:	61a5      	str	r5, [r4, #24]
 8007c60:	2208      	movs	r2, #8
 8007c62:	4629      	mov	r1, r5
 8007c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c68:	f7fd fcb6 	bl	80055d8 <memset>
 8007c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c74:	4620      	mov	r0, r4
 8007c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c78:	3468      	adds	r4, #104	; 0x68
 8007c7a:	e7d9      	b.n	8007c30 <__sfp+0x1c>
 8007c7c:	2104      	movs	r1, #4
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f7ff ff62 	bl	8007b48 <__sfmoreglue>
 8007c84:	4604      	mov	r4, r0
 8007c86:	6030      	str	r0, [r6, #0]
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d1d5      	bne.n	8007c38 <__sfp+0x24>
 8007c8c:	f7ff ff78 	bl	8007b80 <__sfp_lock_release>
 8007c90:	230c      	movs	r3, #12
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	e7ee      	b.n	8007c74 <__sfp+0x60>
 8007c96:	bf00      	nop
 8007c98:	08007fd4 	.word	0x08007fd4
 8007c9c:	ffff0001 	.word	0xffff0001

08007ca0 <_fwalk_reent>:
 8007ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	4688      	mov	r8, r1
 8007ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cac:	2700      	movs	r7, #0
 8007cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8007cb6:	d505      	bpl.n	8007cc4 <_fwalk_reent+0x24>
 8007cb8:	6824      	ldr	r4, [r4, #0]
 8007cba:	2c00      	cmp	r4, #0
 8007cbc:	d1f7      	bne.n	8007cae <_fwalk_reent+0xe>
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc4:	89ab      	ldrh	r3, [r5, #12]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d907      	bls.n	8007cda <_fwalk_reent+0x3a>
 8007cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	d003      	beq.n	8007cda <_fwalk_reent+0x3a>
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	47c0      	blx	r8
 8007cd8:	4307      	orrs	r7, r0
 8007cda:	3568      	adds	r5, #104	; 0x68
 8007cdc:	e7e9      	b.n	8007cb2 <_fwalk_reent+0x12>

08007cde <__retarget_lock_init_recursive>:
 8007cde:	4770      	bx	lr

08007ce0 <__retarget_lock_acquire_recursive>:
 8007ce0:	4770      	bx	lr

08007ce2 <__retarget_lock_release_recursive>:
 8007ce2:	4770      	bx	lr

08007ce4 <__swhatbuf_r>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	460e      	mov	r6, r1
 8007ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cec:	2900      	cmp	r1, #0
 8007cee:	b096      	sub	sp, #88	; 0x58
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	461d      	mov	r5, r3
 8007cf4:	da07      	bge.n	8007d06 <__swhatbuf_r+0x22>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	602b      	str	r3, [r5, #0]
 8007cfa:	89b3      	ldrh	r3, [r6, #12]
 8007cfc:	061a      	lsls	r2, r3, #24
 8007cfe:	d410      	bmi.n	8007d22 <__swhatbuf_r+0x3e>
 8007d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d04:	e00e      	b.n	8007d24 <__swhatbuf_r+0x40>
 8007d06:	466a      	mov	r2, sp
 8007d08:	f000 f8fa 	bl	8007f00 <_fstat_r>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	dbf2      	blt.n	8007cf6 <__swhatbuf_r+0x12>
 8007d10:	9a01      	ldr	r2, [sp, #4]
 8007d12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d1a:	425a      	negs	r2, r3
 8007d1c:	415a      	adcs	r2, r3
 8007d1e:	602a      	str	r2, [r5, #0]
 8007d20:	e7ee      	b.n	8007d00 <__swhatbuf_r+0x1c>
 8007d22:	2340      	movs	r3, #64	; 0x40
 8007d24:	2000      	movs	r0, #0
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	b016      	add	sp, #88	; 0x58
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}

08007d2c <__smakebuf_r>:
 8007d2c:	898b      	ldrh	r3, [r1, #12]
 8007d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d30:	079d      	lsls	r5, r3, #30
 8007d32:	4606      	mov	r6, r0
 8007d34:	460c      	mov	r4, r1
 8007d36:	d507      	bpl.n	8007d48 <__smakebuf_r+0x1c>
 8007d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	2301      	movs	r3, #1
 8007d42:	6163      	str	r3, [r4, #20]
 8007d44:	b002      	add	sp, #8
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	ab01      	add	r3, sp, #4
 8007d4a:	466a      	mov	r2, sp
 8007d4c:	f7ff ffca 	bl	8007ce4 <__swhatbuf_r>
 8007d50:	9900      	ldr	r1, [sp, #0]
 8007d52:	4605      	mov	r5, r0
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff fb23 	bl	80073a0 <_malloc_r>
 8007d5a:	b948      	cbnz	r0, 8007d70 <__smakebuf_r+0x44>
 8007d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d60:	059a      	lsls	r2, r3, #22
 8007d62:	d4ef      	bmi.n	8007d44 <__smakebuf_r+0x18>
 8007d64:	f023 0303 	bic.w	r3, r3, #3
 8007d68:	f043 0302 	orr.w	r3, r3, #2
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	e7e3      	b.n	8007d38 <__smakebuf_r+0xc>
 8007d70:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <__smakebuf_r+0x7c>)
 8007d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	6020      	str	r0, [r4, #0]
 8007d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	6163      	str	r3, [r4, #20]
 8007d82:	9b01      	ldr	r3, [sp, #4]
 8007d84:	6120      	str	r0, [r4, #16]
 8007d86:	b15b      	cbz	r3, 8007da0 <__smakebuf_r+0x74>
 8007d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f000 f8c9 	bl	8007f24 <_isatty_r>
 8007d92:	b128      	cbz	r0, 8007da0 <__smakebuf_r+0x74>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	f023 0303 	bic.w	r3, r3, #3
 8007d9a:	f043 0301 	orr.w	r3, r3, #1
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	89a0      	ldrh	r0, [r4, #12]
 8007da2:	4305      	orrs	r5, r0
 8007da4:	81a5      	strh	r5, [r4, #12]
 8007da6:	e7cd      	b.n	8007d44 <__smakebuf_r+0x18>
 8007da8:	08007b3d 	.word	0x08007b3d

08007dac <_raise_r>:
 8007dac:	291f      	cmp	r1, #31
 8007dae:	b538      	push	{r3, r4, r5, lr}
 8007db0:	4604      	mov	r4, r0
 8007db2:	460d      	mov	r5, r1
 8007db4:	d904      	bls.n	8007dc0 <_raise_r+0x14>
 8007db6:	2316      	movs	r3, #22
 8007db8:	6003      	str	r3, [r0, #0]
 8007dba:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007dc2:	b112      	cbz	r2, 8007dca <_raise_r+0x1e>
 8007dc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dc8:	b94b      	cbnz	r3, 8007dde <_raise_r+0x32>
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 f830 	bl	8007e30 <_getpid_r>
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dda:	f000 b817 	b.w	8007e0c <_kill_r>
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d00a      	beq.n	8007df8 <_raise_r+0x4c>
 8007de2:	1c59      	adds	r1, r3, #1
 8007de4:	d103      	bne.n	8007dee <_raise_r+0x42>
 8007de6:	2316      	movs	r3, #22
 8007de8:	6003      	str	r3, [r0, #0]
 8007dea:	2001      	movs	r0, #1
 8007dec:	e7e7      	b.n	8007dbe <_raise_r+0x12>
 8007dee:	2400      	movs	r4, #0
 8007df0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007df4:	4628      	mov	r0, r5
 8007df6:	4798      	blx	r3
 8007df8:	2000      	movs	r0, #0
 8007dfa:	e7e0      	b.n	8007dbe <_raise_r+0x12>

08007dfc <raise>:
 8007dfc:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <raise+0xc>)
 8007dfe:	4601      	mov	r1, r0
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	f7ff bfd3 	b.w	8007dac <_raise_r>
 8007e06:	bf00      	nop
 8007e08:	2000000c 	.word	0x2000000c

08007e0c <_kill_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	; (8007e2c <_kill_r+0x20>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	f7f9 fd6f 	bl	80018fc <_kill>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d102      	bne.n	8007e28 <_kill_r+0x1c>
 8007e22:	682b      	ldr	r3, [r5, #0]
 8007e24:	b103      	cbz	r3, 8007e28 <_kill_r+0x1c>
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	bd38      	pop	{r3, r4, r5, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000474 	.word	0x20000474

08007e30 <_getpid_r>:
 8007e30:	f7f9 bd5c 	b.w	80018ec <_getpid>

08007e34 <__sread>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	460c      	mov	r4, r1
 8007e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e3c:	f000 f894 	bl	8007f68 <_read_r>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	bfab      	itete	ge
 8007e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e46:	89a3      	ldrhlt	r3, [r4, #12]
 8007e48:	181b      	addge	r3, r3, r0
 8007e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e4e:	bfac      	ite	ge
 8007e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e52:	81a3      	strhlt	r3, [r4, #12]
 8007e54:	bd10      	pop	{r4, pc}

08007e56 <__swrite>:
 8007e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5a:	461f      	mov	r7, r3
 8007e5c:	898b      	ldrh	r3, [r1, #12]
 8007e5e:	05db      	lsls	r3, r3, #23
 8007e60:	4605      	mov	r5, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	4616      	mov	r6, r2
 8007e66:	d505      	bpl.n	8007e74 <__swrite+0x1e>
 8007e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f000 f868 	bl	8007f44 <_lseek_r>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	4628      	mov	r0, r5
 8007e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8a:	f000 b817 	b.w	8007ebc <_write_r>

08007e8e <__sseek>:
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	460c      	mov	r4, r1
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 f855 	bl	8007f44 <_lseek_r>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	bf15      	itete	ne
 8007ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eaa:	81a3      	strheq	r3, [r4, #12]
 8007eac:	bf18      	it	ne
 8007eae:	81a3      	strhne	r3, [r4, #12]
 8007eb0:	bd10      	pop	{r4, pc}

08007eb2 <__sclose>:
 8007eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb6:	f000 b813 	b.w	8007ee0 <_close_r>
	...

08007ebc <_write_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	; (8007edc <_write_r+0x20>)
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	602a      	str	r2, [r5, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7f9 fd4d 	bl	800196a <_write>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_write_r+0x1e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_write_r+0x1e>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000474 	.word	0x20000474

08007ee0 <_close_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d06      	ldr	r5, [pc, #24]	; (8007efc <_close_r+0x1c>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	602b      	str	r3, [r5, #0]
 8007eec:	f7f9 fd59 	bl	80019a2 <_close>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_close_r+0x1a>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_close_r+0x1a>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20000474 	.word	0x20000474

08007f00 <_fstat_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	; (8007f20 <_fstat_r+0x20>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	f7f9 fd54 	bl	80019ba <_fstat>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	d102      	bne.n	8007f1c <_fstat_r+0x1c>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	b103      	cbz	r3, 8007f1c <_fstat_r+0x1c>
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000474 	.word	0x20000474

08007f24 <_isatty_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	; (8007f40 <_isatty_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7f9 fd53 	bl	80019da <_isatty>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_isatty_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_isatty_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20000474 	.word	0x20000474

08007f44 <_lseek_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d07      	ldr	r5, [pc, #28]	; (8007f64 <_lseek_r+0x20>)
 8007f48:	4604      	mov	r4, r0
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	602a      	str	r2, [r5, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7f9 fd4c 	bl	80019f0 <_lseek>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_lseek_r+0x1e>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_lseek_r+0x1e>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	20000474 	.word	0x20000474

08007f68 <_read_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4d07      	ldr	r5, [pc, #28]	; (8007f88 <_read_r+0x20>)
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	4608      	mov	r0, r1
 8007f70:	4611      	mov	r1, r2
 8007f72:	2200      	movs	r2, #0
 8007f74:	602a      	str	r2, [r5, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	f7f9 fcda 	bl	8001930 <_read>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	d102      	bne.n	8007f86 <_read_r+0x1e>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	b103      	cbz	r3, 8007f86 <_read_r+0x1e>
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	20000474 	.word	0x20000474

08007f8c <_init>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	bf00      	nop
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr

08007f98 <_fini>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr
