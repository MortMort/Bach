
PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080dc  080080dc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080e4  080080e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080080ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010ddc  20000080  0800816c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010e5c  0800816c  00020e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012683  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029de  00000000  00000000  00032733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00035118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000360d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243db  00000000  00000000  00036f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012536  00000000  00000000  0005b34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df83c  00000000  00000000  0006d881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d0bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004990  00000000  00000000  0014d110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007bcc 	.word	0x08007bcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007bcc 	.word	0x08007bcc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f001 f9fe 	bl	8002334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f830 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 fa18 	bl	8001370 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f40:	f000 f9e0 	bl	8001304 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f44:	f000 f9b4 	bl	80012b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f48:	f000 f89a 	bl	8001080 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000f4c:	f000 f966 	bl	800121c <MX_TIM10_Init>
  MX_DAC_Init();
 8000f50:	f000 f93a 	bl	80011c8 <MX_DAC_Init>
  MX_ADC2_Init();
 8000f54:	f000 f8e6 	bl	8001124 <MX_ADC2_Init>

  // DAC DMA
//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)&adcBuf[0], sizeof(adcReading0), DAC_ALIGN_12B_R);//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)testArray, sizeof(testArray)/sizeof(uint16_t), DAC_ALIGN_12B_R);

  // Timer interrupt start
  HAL_TIM_Base_Start_IT(&htim10);
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <main+0x58>)
 8000f5a:	f003 fb67 	bl	800462c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if (ringBufFlag && !ringBufPrintDone) {
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <main+0x5c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0fb      	beq.n	8000f5e <main+0x2e>
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <main+0x60>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f7      	bne.n	8000f5e <main+0x2e>
		ringBufPrintDone = printRingBuf(RING_BUF_LEN, ringBuf, readStart);
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <main+0x64>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4908      	ldr	r1, [pc, #32]	; (8000f98 <main+0x68>)
 8000f76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f7a:	f000 fe05 	bl	8001b88 <printRingBuf>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <main+0x60>)
 8000f84:	701a      	strb	r2, [r3, #0]
	if (ringBufFlag && !ringBufPrintDone) {
 8000f86:	e7ea      	b.n	8000f5e <main+0x2e>
 8000f88:	20000280 	.word	0x20000280
 8000f8c:	2000009d 	.word	0x2000009d
 8000f90:	2000009e 	.word	0x2000009e
 8000f94:	20010e40 	.word	0x20010e40
 8000f98:	200003b4 	.word	0x200003b4

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2234      	movs	r2, #52	; 0x34
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 fb44 	bl	8006638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <SystemClock_Config+0xdc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a2b      	ldr	r2, [pc, #172]	; (8001078 <SystemClock_Config+0xdc>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <SystemClock_Config+0xdc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <SystemClock_Config+0xe0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a25      	ldr	r2, [pc, #148]	; (800107c <SystemClock_Config+0xe0>)
 8000fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <SystemClock_Config+0xe0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001000:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001010:	23b4      	movs	r3, #180	; 0xb4
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f813 	bl	8004050 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001030:	f000 fefa 	bl	8001e28 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001034:	f002 fcf0 	bl	8003a18 <HAL_PWREx_EnableOverDrive>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800103e:	f000 fef3 	bl	8001e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	230f      	movs	r3, #15
 8001044:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001046:	2302      	movs	r3, #2
 8001048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001052:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001058:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2105      	movs	r1, #5
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fd29 	bl	8003ab8 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800106c:	f000 fedc 	bl	8001e28 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	; 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	; (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_ADC1_Init+0x98>)
 800109a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800109e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_ADC1_Init+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_ADC1_Init+0x98>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <MX_ADC1_Init+0xa0>)
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_ADC1_Init+0x98>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_ADC1_Init+0x98>)
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_ADC1_Init+0x98>)
 80010e2:	f001 f999 	bl	8002418 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 fe9c 	bl	8001e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_ADC1_Init+0x98>)
 8001102:	f001 fb37 	bl	8002774 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 fe8c 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200002f4 	.word	0x200002f4
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_ADC2_Init+0x98>)
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <MX_ADC2_Init+0x9c>)
 800113a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_ADC2_Init+0x98>)
 800113e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001142:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_ADC2_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_ADC2_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_ADC2_Init+0x98>)
 8001152:	2201      	movs	r2, #1
 8001154:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_ADC2_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_ADC2_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_ADC2_Init+0x98>)
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <MX_ADC2_Init+0xa0>)
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_ADC2_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_ADC2_Init+0x98>)
 8001172:	2201      	movs	r2, #1
 8001174:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_ADC2_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_ADC2_Init+0x98>)
 8001180:	2201      	movs	r2, #1
 8001182:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_ADC2_Init+0x98>)
 8001186:	f001 f947 	bl	8002418 <HAL_ADC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001190:	f000 fe4a 	bl	8001e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001194:	2301      	movs	r3, #1
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_ADC2_Init+0x98>)
 80011a6:	f001 fae5 	bl	8002774 <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011b0:	f000 fe3a 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000234 	.word	0x20000234
 80011c0:	40012100 	.word	0x40012100
 80011c4:	0f000001 	.word	0x0f000001

080011c8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ce:	463b      	mov	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_DAC_Init+0x4c>)
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <MX_DAC_Init+0x50>)
 80011da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_DAC_Init+0x4c>)
 80011de:	f001 fe08 	bl	8002df2 <HAL_DAC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011e8:	f000 fe1e 	bl	8001e28 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_DAC_Init+0x4c>)
 80011fc:	f001 fe92 	bl	8002f24 <HAL_DAC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001206:	f000 fe0f 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200003a0 	.word	0x200003a0
 8001218:	40007400 	.word	0x40007400

0800121c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_TIM10_Init+0x8c>)
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <MX_TIM10_Init+0x90>)
 8001238:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 180-1;
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_TIM10_Init+0x8c>)
 800123c:	22b3      	movs	r2, #179	; 0xb3
 800123e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_TIM10_Init+0x8c>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_TIM10_Init+0x8c>)
 8001248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_TIM10_Init+0x8c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_TIM10_Init+0x8c>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800125a:	4813      	ldr	r0, [pc, #76]	; (80012a8 <MX_TIM10_Init+0x8c>)
 800125c:	f003 f996 	bl	800458c <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001266:	f000 fddf 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800126a:	480f      	ldr	r0, [pc, #60]	; (80012a8 <MX_TIM10_Init+0x8c>)
 800126c:	f003 fa4e 	bl	800470c <HAL_TIM_OC_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001276:	f000 fdd7 	bl	8001e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_TIM10_Init+0x8c>)
 8001292:	f003 fb9d 	bl	80049d0 <HAL_TIM_OC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800129c:	f000 fdc4 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000280 	.word	0x20000280
 80012ac:	40014400 	.word	0x40014400

080012b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_USART2_UART_Init+0x50>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART2_UART_Init+0x4c>)
 80012e8:	f003 fe56 	bl	8004f98 <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012f2:	f000 fd99 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20010dfc 	.word	0x20010dfc
 8001300:	40004400 	.word	0x40004400

08001304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_DMA_Init+0x68>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <MX_DMA_Init+0x68>)
 8001314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_DMA_Init+0x68>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_DMA_Init+0x68>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a0f      	ldr	r2, [pc, #60]	; (800136c <MX_DMA_Init+0x68>)
 8001330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_DMA_Init+0x68>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2011      	movs	r0, #17
 8001348:	f001 fd1d 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800134c:	2011      	movs	r0, #17
 800134e:	f001 fd36 	bl	8002dbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2038      	movs	r0, #56	; 0x38
 8001358:	f001 fd15 	bl	8002d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800135c:	2038      	movs	r0, #56	; 0x38
 800135e:	f001 fd2e 	bl	8002dbe <HAL_NVIC_EnableIRQ>

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_GPIO_Init+0x104>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a39      	ldr	r2, [pc, #228]	; (8001474 <MX_GPIO_Init+0x104>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_GPIO_Init+0x104>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_GPIO_Init+0x104>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <MX_GPIO_Init+0x104>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <MX_GPIO_Init+0x104>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_GPIO_Init+0x104>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <MX_GPIO_Init+0x104>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <MX_GPIO_Init+0x104>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <MX_GPIO_Init+0x104>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <MX_GPIO_Init+0x104>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_GPIO_Init+0x104>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2120      	movs	r1, #32
 80013fa:	481f      	ldr	r0, [pc, #124]	; (8001478 <MX_GPIO_Init+0x108>)
 80013fc:	f002 faf2 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2101      	movs	r1, #1
 8001404:	481d      	ldr	r0, [pc, #116]	; (800147c <MX_GPIO_Init+0x10c>)
 8001406:	f002 faed 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001410:	481b      	ldr	r0, [pc, #108]	; (8001480 <MX_GPIO_Init+0x110>)
 8001412:	f002 fae7 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001416:	2320      	movs	r3, #32
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <MX_GPIO_Init+0x108>)
 800142e:	f002 f945 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001432:	2301      	movs	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_GPIO_Init+0x10c>)
 800144a:	f002 f937 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800144e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_GPIO_Init+0x110>)
 8001468:	f002 f928 	bl	80036bc <HAL_GPIO_Init>

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800
 8001484:	00000000 	.word	0x00000000

08001488 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//}

// Timer 10 (TIM10) interrupt:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af02      	add	r7, sp, #8
 800148e:	6078      	str	r0, [r7, #4]
  if (htim == &htim10)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4ad1      	ldr	r2, [pc, #836]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f040 832e 	bne.w	8001af6 <HAL_TIM_PeriodElapsedCallback+0x66e>
    // Variables declared globally for easier debugging.
    //    static float angleDq, alpha1, beta1, Vq, Vd, alpha2, beta2, cosGrid, sinGrid;
    // PLL variables end

	// Set pin: Start timer
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	48cf      	ldr	r0, [pc, #828]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80014a0:	f002 faa0 	bl	80039e4 <HAL_GPIO_WritePin>

    // ADC 1
    HAL_ADC_Start(&hadc1);
 80014a4:	48ce      	ldr	r0, [pc, #824]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014a6:	f000 fffb 	bl	80024a0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014aa:	f04f 31ff 	mov.w	r1, #4294967295
 80014ae:	48cc      	ldr	r0, [pc, #816]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014b0:	f001 f8c8 	bl	8002644 <HAL_ADC_PollForConversion>
    adcValue1 = HAL_ADC_GetValue(&hadc1);
 80014b4:	48ca      	ldr	r0, [pc, #808]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014b6:	f001 f950 	bl	800275a <HAL_ADC_GetValue>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4bc9      	ldr	r3, [pc, #804]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80014c0:	801a      	strh	r2, [r3, #0]

    // ADC 2
    HAL_ADC_Start(&hadc2);
 80014c2:	48c9      	ldr	r0, [pc, #804]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80014c4:	f000 ffec 	bl	80024a0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	48c6      	ldr	r0, [pc, #792]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80014ce:	f001 f8b9 	bl	8002644 <HAL_ADC_PollForConversion>
    adcValue2 = HAL_ADC_GetValue(&hadc2);
 80014d2:	48c5      	ldr	r0, [pc, #788]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80014d4:	f001 f941 	bl	800275a <HAL_ADC_GetValue>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4bc3      	ldr	r3, [pc, #780]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x364>)
 80014de:	801a      	strh	r2, [r3, #0]
//	sprintf(msg_2, "Adc reading: %u\r\n", adcReading0);	// Update message for usart print
//	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg_2,
//						(uint32_t)&huart2.Instance->DR, strlen(msg_2));

    // Ring buffer trigger test
    if (count == 450) {
 80014e0:	4bc3      	ldr	r3, [pc, #780]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80014e8:	d102      	bne.n	80014f0 <HAL_TIM_PeriodElapsedCallback+0x68>
    	ringBufTrigger = 1;
 80014ea:	4bc2      	ldr	r3, [pc, #776]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
    }

    // PLL StartT_SAMPLE
    //--------------------------------------------------------------------------------------------
    angleDq = angleDq + T_SAMPLE*F_RAD;
 80014f0:	4bc1      	ldr	r3, [pc, #772]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 80017fc <HAL_TIM_PeriodElapsedCallback+0x374>
 80014fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fe:	4bbe      	ldr	r3, [pc, #760]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
    if (angleDq > TWO_PI)
 8001504:	4bbc      	ldr	r3, [pc, #752]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f83d 	bl	8000588 <__aeabi_f2d>
 800150e:	a3b0      	add	r3, pc, #704	; (adr r3, 80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff fb20 	bl	8000b58 <__aeabi_dcmpgt>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <HAL_TIM_PeriodElapsedCallback+0xbc>
    {
    	angleDq = angleDq - TWO_PI;
 800151e:	4bb6      	ldr	r3, [pc, #728]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f830 	bl	8000588 <__aeabi_f2d>
 8001528:	a3a9      	add	r3, pc, #676	; (adr r3, 80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7fe fecb 	bl	80002c8 <__aeabi_dsub>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb2d 	bl	8000b98 <__aeabi_d2f>
 800153e:	4603      	mov	r3, r0
 8001540:	4aad      	ldr	r2, [pc, #692]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001542:	6013      	str	r3, [r2, #0]
    }

    phaseA = sinf(angleDq);
 8001544:	4bac      	ldr	r3, [pc, #688]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	eeb0 0a67 	vmov.f32	s0, s15
 800154e:	f005 fce9 	bl	8006f24 <sinf>
 8001552:	eef0 7a40 	vmov.f32	s15, s0
 8001556:	4baa      	ldr	r3, [pc, #680]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001558:	edc3 7a00 	vstr	s15, [r3]
	phaseB = sinf(angleDq-RAD_120);
 800155c:	4ba6      	ldr	r3, [pc, #664]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001804 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8001566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f005 fcd9 	bl	8006f24 <sinf>
 8001572:	eef0 7a40 	vmov.f32	s15, s0
 8001576:	4ba4      	ldr	r3, [pc, #656]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001578:	edc3 7a00 	vstr	s15, [r3]
//	phaseC = two_to_three_phase(&phaseA, &phaseB);
	phaseC = sinf(angleDq+RAD_120);
 800157c:	4b9e      	ldr	r3, [pc, #632]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001804 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8001586:	ee77 7a87 	vadd.f32	s15, s15, s14
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	f005 fcc9 	bl	8006f24 <sinf>
 8001592:	eef0 7a40 	vmov.f32	s15, s0
 8001596:	4b9d      	ldr	r3, [pc, #628]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001598:	edc3 7a00 	vstr	s15, [r3]

    alpha1 = abc_to_alpha(phaseA, phaseB, phaseC);
 800159c:	4b98      	ldr	r3, [pc, #608]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	4b99      	ldr	r3, [pc, #612]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	4b98      	ldr	r3, [pc, #608]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80015aa:	edd3 6a00 	vldr	s13, [r3]
 80015ae:	eeb0 1a66 	vmov.f32	s2, s13
 80015b2:	eef0 0a47 	vmov.f32	s1, s14
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	f004 fb85 	bl	8005cc8 <abc_to_alpha>
 80015be:	eef0 7a40 	vmov.f32	s15, s0
 80015c2:	4b93      	ldr	r3, [pc, #588]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80015c4:	edc3 7a00 	vstr	s15, [r3]
    beta1 = abc_to_beta(phaseA, phaseB, phaseC);
 80015c8:	4b8d      	ldr	r3, [pc, #564]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80015d0:	ed93 7a00 	vldr	s14, [r3]
 80015d4:	4b8d      	ldr	r3, [pc, #564]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80015d6:	edd3 6a00 	vldr	s13, [r3]
 80015da:	eeb0 1a66 	vmov.f32	s2, s13
 80015de:	eef0 0a47 	vmov.f32	s1, s14
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	f004 fbbf 	bl	8005d68 <abc_to_beta>
 80015ea:	eef0 7a40 	vmov.f32	s15, s0
 80015ee:	4b89      	ldr	r3, [pc, #548]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80015f0:	edc3 7a00 	vstr	s15, [r3]

    Vd = alphabeta_to_d(alpha1, beta1, angleDq);
 80015f4:	4b86      	ldr	r3, [pc, #536]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	4b86      	ldr	r3, [pc, #536]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	4b7d      	ldr	r3, [pc, #500]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001602:	edd3 6a00 	vldr	s13, [r3]
 8001606:	eeb0 1a66 	vmov.f32	s2, s13
 800160a:	eef0 0a47 	vmov.f32	s1, s14
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	f004 fbed 	bl	8005df0 <alphabeta_to_d>
 8001616:	eef0 7a40 	vmov.f32	s15, s0
 800161a:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800161c:	edc3 7a00 	vstr	s15, [r3]
    Vq = alphabeta_to_q(alpha1, beta1, angleDq);
 8001620:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001628:	ed93 7a00 	vldr	s14, [r3]
 800162c:	4b72      	ldr	r3, [pc, #456]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800162e:	edd3 6a00 	vldr	s13, [r3]
 8001632:	eeb0 1a66 	vmov.f32	s2, s13
 8001636:	eef0 0a47 	vmov.f32	s1, s14
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	f004 fc04 	bl	8005e4a <alphabeta_to_q>
 8001642:	eef0 7a40 	vmov.f32	s15, s0
 8001646:	4b75      	ldr	r3, [pc, #468]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001648:	edc3 7a00 	vstr	s15, [r3]

    VdMaf = maf1(Vd);
 800164c:	4b72      	ldr	r3, [pc, #456]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f004 faa7 	bl	8005ba8 <maf1>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001660:	edc3 7a00 	vstr	s15, [r3]
	VqMaf = maf2(Vq);
 8001664:	4b6d      	ldr	r3, [pc, #436]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	f004 fae3 	bl	8005c38 <maf2>
 8001672:	eef0 7a40 	vmov.f32	s15, s0
 8001676:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001678:	edc3 7a00 	vstr	s15, [r3]

	alpha2 = dq_to_alpha(VdMaf, VqMaf, angleDq);
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800168a:	edd3 6a00 	vldr	s13, [r3]
 800168e:	eeb0 1a66 	vmov.f32	s2, s13
 8001692:	eef0 0a47 	vmov.f32	s1, s14
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	f004 fc05 	bl	8005ea8 <dq_to_alpha>
 800169e:	eef0 7a40 	vmov.f32	s15, s0
 80016a2:	4b61      	ldr	r3, [pc, #388]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80016a4:	edc3 7a00 	vstr	s15, [r3]
	beta2 = dq_to_beta(VdMaf, VqMaf, angleDq);
 80016a8:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80016b6:	edd3 6a00 	vldr	s13, [r3]
 80016ba:	eeb0 1a66 	vmov.f32	s2, s13
 80016be:	eef0 0a47 	vmov.f32	s1, s14
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	f004 fc1c 	bl	8005f02 <dq_to_beta>
 80016ca:	eef0 7a40 	vmov.f32	s15, s0
 80016ce:	4b57      	ldr	r3, [pc, #348]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
//    alpha2 = dq_to_alpha(Vd, Vq, angleDq);
//    beta2 = dq_to_beta(Vd, Vq, angleDq);

    cosGrid = cos_grid(alpha2, beta2);
 80016d4:	4b54      	ldr	r3, [pc, #336]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	4b54      	ldr	r3, [pc, #336]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80016dc:	ed93 7a00 	vldr	s14, [r3]
 80016e0:	eef0 0a47 	vmov.f32	s1, s14
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	f004 fc38 	bl	8005f5c <cos_grid>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]
    sinGrid = sin_grid(alpha2, beta2);
 80016f6:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	eef0 0a47 	vmov.f32	s1, s14
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	f004 fc5d 	bl	8005fc8 <sin_grid>
 800170e:	eef0 7a40 	vmov.f32	s15, s0
 8001712:	4b48      	ldr	r3, [pc, #288]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001714:	edc3 7a00 	vstr	s15, [r3]

    phaseError = phase_detector(cosGrid, sinGrid, anglePllComp);
 8001718:	4b45      	ldr	r3, [pc, #276]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	4b44      	ldr	r3, [pc, #272]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001726:	edd3 6a00 	vldr	s13, [r3]
 800172a:	eeb0 1a66 	vmov.f32	s2, s13
 800172e:	eef0 0a47 	vmov.f32	s1, s14
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	f004 fe6d 	bl	8006414 <phase_detector>
 800173a:	eef0 7a40 	vmov.f32	s15, s0
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001740:	edc3 7a00 	vstr	s15, [r3]

    anglePll = pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001752:	edd3 6a00 	vldr	s13, [r3]
 8001756:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001758:	ed93 6a00 	vldr	s12, [r3]
 800175c:	eddf 2a3b 	vldr	s5, [pc, #236]	; 800184c <HAL_TIM_PeriodElapsedCallback+0x3c4>
 8001760:	eeb0 2a46 	vmov.f32	s4, s12
 8001764:	eef0 1a66 	vmov.f32	s3, s13
 8001768:	eeb0 1a47 	vmov.f32	s2, s14
 800176c:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001850 <HAL_TIM_PeriodElapsedCallback+0x3c8>
 8001770:	eeb0 0a67 	vmov.f32	s0, s15
 8001774:	f004 fc60 	bl	8006038 <pi_regulator>
 8001778:	eef0 7a40 	vmov.f32	s15, s0
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 800177e:	edc3 7a00 	vstr	s15, [r3]
    anglePllComp = pi_regulator_comp(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001790:	edd3 6a00 	vldr	s13, [r3]
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001796:	ed93 6a00 	vldr	s12, [r3]
 800179a:	eddf 2a2c 	vldr	s5, [pc, #176]	; 800184c <HAL_TIM_PeriodElapsedCallback+0x3c4>
 800179e:	eeb0 2a46 	vmov.f32	s4, s12
 80017a2:	eef0 1a66 	vmov.f32	s3, s13
 80017a6:	eeb0 1a47 	vmov.f32	s2, s14
 80017aa:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001850 <HAL_TIM_PeriodElapsedCallback+0x3c8>
 80017ae:	eeb0 0a67 	vmov.f32	s0, s15
 80017b2:	f004 fd2d 	bl	8006210 <pi_regulator_comp>
 80017b6:	eef0 7a40 	vmov.f32	s15, s0
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80017bc:	edc3 7a00 	vstr	s15, [r3]
    //--------------------------------------------------------------------------------------------
    // PLL End

    // DAC
    dac_temp = (Vd + 1.05) * 4096.0/3.3;	// +1 for offset for negative values, /3.3 for scaling
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fedf 	bl	8000588 <__aeabi_f2d>
 80017ca:	e045      	b.n	8001858 <HAL_TIM_PeriodElapsedCallback+0x3d0>
 80017cc:	f3af 8000 	nop.w
 80017d0:	54442c46 	.word	0x54442c46
 80017d4:	401921fb 	.word	0x401921fb
 80017d8:	20000280 	.word	0x20000280
 80017dc:	40020800 	.word	0x40020800
 80017e0:	200002f4 	.word	0x200002f4
 80017e4:	20010dc0 	.word	0x20010dc0
 80017e8:	20000234 	.word	0x20000234
 80017ec:	200002f0 	.word	0x200002f0
 80017f0:	200000a0 	.word	0x200000a0
 80017f4:	2000009c 	.word	0x2000009c
 80017f8:	20010e44 	.word	0x20010e44
 80017fc:	3ea0d97c 	.word	0x3ea0d97c
 8001800:	200002c8 	.word	0x200002c8
 8001804:	40060a92 	.word	0x40060a92
 8001808:	20010df4 	.word	0x20010df4
 800180c:	20010d54 	.word	0x20010d54
 8001810:	200002d4 	.word	0x200002d4
 8001814:	20010dcc 	.word	0x20010dcc
 8001818:	200002cc 	.word	0x200002cc
 800181c:	200002d8 	.word	0x200002d8
 8001820:	2000027c 	.word	0x2000027c
 8001824:	20010db8 	.word	0x20010db8
 8001828:	2000033c 	.word	0x2000033c
 800182c:	20000230 	.word	0x20000230
 8001830:	20010dc4 	.word	0x20010dc4
 8001834:	20010dbc 	.word	0x20010dbc
 8001838:	20010dc8 	.word	0x20010dc8
 800183c:	200002d0 	.word	0x200002d0
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004
 8001848:	20000008 	.word	0x20000008
 800184c:	3a83126f 	.word	0x3a83126f
 8001850:	439d1463 	.word	0x439d1463
 8001854:	20010df8 	.word	0x20010df8
 8001858:	a3c9      	add	r3, pc, #804	; (adr r3, 8001b80 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fd35 	bl	80002cc <__adddf3>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4ba6      	ldr	r3, [pc, #664]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001870:	f7fe fee2 	bl	8000638 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	a3a0      	add	r3, pc, #640	; (adr r3, 8001b00 <HAL_TIM_PeriodElapsedCallback+0x678>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7ff f803 	bl	800088c <__aeabi_ddiv>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f983 	bl	8000b98 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	4a9d      	ldr	r2, [pc, #628]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001896:	6013      	str	r3, [r2, #0]
    var_dac = (uint16_t)dac_temp; 			// Convert from float to uint16_t
 8001898:	4b9c      	ldr	r3, [pc, #624]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x684>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a2:	ee17 3a90 	vmov	r3, s15
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b99      	ldr	r3, [pc, #612]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80018aa:	801a      	strh	r2, [r3, #0]
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 80018ac:	2100      	movs	r1, #0
 80018ae:	4899      	ldr	r0, [pc, #612]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80018b0:	f001 fac1 	bl	8002e36 <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var_dac); // Set dac to digital value
 80018b4:	4b96      	ldr	r3, [pc, #600]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x688>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	4895      	ldr	r0, [pc, #596]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80018be:	f001 fb0c 	bl	8002eda <HAL_DAC_SetValue>
    // Ring buffer
//    ringBufData[0] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
//    ringBufData[1] = ((float)	anglePllComp	* (float)RING_BUF_SCALING);
//    ringBufData[2] = ((float)	angleDq 		* (float)RING_BUF_SCALING);
//    ringBufData[3] = ((float)	beta1 			* (float)RING_BUF_SCALING);
    ringBufData[0] 	= ((float)	phaseA 			* (float)RING_BUF_SCALING);
 80018c2:	4b95      	ldr	r3, [pc, #596]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 80018cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	b21a      	sxth	r2, r3
 80018da:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80018dc:	801a      	strh	r2, [r3, #0]
    ringBufData[1] 	= ((float)	phaseB			* (float)RING_BUF_SCALING);
 80018de:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 80018e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f0:	ee17 3a90 	vmov	r3, s15
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	4b8a      	ldr	r3, [pc, #552]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80018f8:	805a      	strh	r2, [r3, #2]
    ringBufData[2] 	= ((float)	phaseC 			* (float)RING_BUF_SCALING);
 80018fa:	4b8b      	ldr	r3, [pc, #556]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001914:	809a      	strh	r2, [r3, #4]
    ringBufData[3] 	= ((float)	alpha1 			* (float)RING_BUF_SCALING);
 8001916:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001928:	ee17 3a90 	vmov	r3, s15
 800192c:	b21a      	sxth	r2, r3
 800192e:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001930:	80da      	strh	r2, [r3, #6]
    ringBufData[4] 	= ((float)	beta1 			* (float)RING_BUF_SCALING);
 8001932:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 800193c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001944:	ee17 3a90 	vmov	r3, s15
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 800194c:	811a      	strh	r2, [r3, #8]
    ringBufData[5] 	= ((float)	Vd 				* (float)RING_BUF_SCALING);
 800194e:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001960:	ee17 3a90 	vmov	r3, s15
 8001964:	b21a      	sxth	r2, r3
 8001966:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001968:	815a      	strh	r2, [r3, #10]
    ringBufData[6] 	= ((float)	Vq				* (float)RING_BUF_SCALING);
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197c:	ee17 3a90 	vmov	r3, s15
 8001980:	b21a      	sxth	r2, r3
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001984:	819a      	strh	r2, [r3, #12]
    ringBufData[7] 	= ((float)	VdMaf 			* (float)RING_BUF_SCALING);
 8001986:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001998:	ee17 3a90 	vmov	r3, s15
 800199c:	b21a      	sxth	r2, r3
 800199e:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80019a0:	81da      	strh	r2, [r3, #14]
    ringBufData[8] 	= ((float)	VqMaf 			* (float)RING_BUF_SCALING);
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b4:	ee17 3a90 	vmov	r3, s15
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80019bc:	821a      	strh	r2, [r3, #16]
    ringBufData[9] 	= ((float)	alpha2 			* (float)RING_BUF_SCALING);
 80019be:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 80019c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d0:	ee17 3a90 	vmov	r3, s15
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80019d8:	825a      	strh	r2, [r3, #18]
    ringBufData[10] = ((float)	beta2			* (float)RING_BUF_SCALING);
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 80019e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ec:	ee17 3a90 	vmov	r3, s15
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 80019f4:	829a      	strh	r2, [r3, #20]
    ringBufData[11] = ((float)	cosGrid			* (float)RING_BUF_SCALING);
 80019f6:	4b55      	ldr	r3, [pc, #340]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a08:	ee17 3a90 	vmov	r3, s15
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001a10:	82da      	strh	r2, [r3, #22]
    ringBufData[12] = ((float)	sinGrid 		* (float)RING_BUF_SCALING);
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001a2c:	831a      	strh	r2, [r3, #24]
    ringBufData[13] = ((float)	phaseError 		* (float)RING_BUF_SCALING);
 8001a2e:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a40:	ee17 3a90 	vmov	r3, s15
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001a48:	835a      	strh	r2, [r3, #26]
    ringBufData[14] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5c:	ee17 3a90 	vmov	r3, s15
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001a64:	839a      	strh	r2, [r3, #28]
    ringBufData[15] = ((float)	anglePllComp	* (float)RING_BUF_SCALING);
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a78:	ee17 3a90 	vmov	r3, s15
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001a80:	83da      	strh	r2, [r3, #30]
    ringBufData[16] = ((float)	angleDq			* (float)RING_BUF_SCALING);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001b1c <HAL_TIM_PeriodElapsedCallback+0x694>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a94:	ee17 3a90 	vmov	r3, s15
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001a9c:	841a      	strh	r2, [r3, #32]


    ringBufFlag = circular_buffer(RING_BUF_LEN, ringBuf, ringBufData, ringBufTrigger, 0.25, &readStart);
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001aa4:	9200      	str	r2, [sp, #0]
 8001aa6:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001aaa:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001aac:	492f      	ldr	r1, [pc, #188]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ab2:	f004 fcdd 	bl	8006470 <circular_buffer>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001abc:	701a      	strb	r2, [r3, #0]



    // Count up to size of sine array
	if (count < (F_SAMPLE*T_SINE))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001b78 <HAL_TIM_PeriodElapsedCallback+0x6f0>
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d506      	bpl.n	8001ae6 <HAL_TIM_PeriodElapsedCallback+0x65e>
	{
	  count++;
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001ae2:	801a      	strh	r2, [r3, #0]
 8001ae4:	e002      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x664>
	}
	else
	{
	  count = 0;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	801a      	strh	r2, [r3, #0]
	}


	// Reset pin: Stop timer
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	4822      	ldr	r0, [pc, #136]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001af2:	f001 ff77 	bl	80039e4 <HAL_GPIO_WritePin>
  }
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	66666666 	.word	0x66666666
 8001b04:	400a6666 	.word	0x400a6666
 8001b08:	40b00000 	.word	0x40b00000
 8001b0c:	200000a4 	.word	0x200000a4
 8001b10:	200000a8 	.word	0x200000a8
 8001b14:	200003a0 	.word	0x200003a0
 8001b18:	200002c8 	.word	0x200002c8
 8001b1c:	459c4000 	.word	0x459c4000
 8001b20:	20010dd0 	.word	0x20010dd0
 8001b24:	20010df4 	.word	0x20010df4
 8001b28:	20010d54 	.word	0x20010d54
 8001b2c:	200002d4 	.word	0x200002d4
 8001b30:	20010dcc 	.word	0x20010dcc
 8001b34:	200002cc 	.word	0x200002cc
 8001b38:	200002d8 	.word	0x200002d8
 8001b3c:	2000027c 	.word	0x2000027c
 8001b40:	20010db8 	.word	0x20010db8
 8001b44:	2000033c 	.word	0x2000033c
 8001b48:	20000230 	.word	0x20000230
 8001b4c:	20010dc4 	.word	0x20010dc4
 8001b50:	20010dbc 	.word	0x20010dbc
 8001b54:	200002d0 	.word	0x200002d0
 8001b58:	20010df8 	.word	0x20010df8
 8001b5c:	20010dc8 	.word	0x20010dc8
 8001b60:	20010e44 	.word	0x20010e44
 8001b64:	2000009c 	.word	0x2000009c
 8001b68:	20010e40 	.word	0x20010e40
 8001b6c:	200003b4 	.word	0x200003b4
 8001b70:	2000009d 	.word	0x2000009d
 8001b74:	200000a0 	.word	0x200000a0
 8001b78:	447a0000 	.word	0x447a0000
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	cccccccd 	.word	0xcccccccd
 8001b84:	3ff0cccc 	.word	0x3ff0cccc

08001b88 <printRingBuf>:
//  Description :   prints the ring buffer values
//  Parameters  :   uint16_t bufferSize: pointer to an int to store the number
//                  uint16_t circularBuffer: Pointer to circular buffer array
//                  uint16_t readStart: starting index of the circular buffer
//  Returns     :	none
uint8_t printRingBuf(uint16_t bufferSize, int16_t circularBuffer[][17], uint16_t readStart) {
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8a:	b09f      	sub	sp, #124	; 0x7c
 8001b8c:	af10      	add	r7, sp, #64	; 0x40
 8001b8e:	4603      	mov	r3, r0
 8001b90:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b92:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b94:	4613      	mov	r3, r2
 8001b96:	85bb      	strh	r3, [r7, #44]	; 0x2c
    static uint8_t init         =   0;

    static char msg[150];	// Initialize string to be written to USART

    // Initialize readIndex to readStart
    if (!init) {
 8001b98:	4b9d      	ldr	r3, [pc, #628]	; (8001e10 <printRingBuf+0x288>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <printRingBuf+0x24>
        readIndex = readStart;
 8001ba0:	4a9c      	ldr	r2, [pc, #624]	; (8001e14 <printRingBuf+0x28c>)
 8001ba2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ba4:	8013      	strh	r3, [r2, #0]
        init = 1;
 8001ba6:	4b9a      	ldr	r3, [pc, #616]	; (8001e10 <printRingBuf+0x288>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
    }

	sprintf(msg, "phaseA, phaseB, phaseC, alpha1, beta1, Vd, Vq, VdMaf, VqMaf, alpha2, beta2, cosGrid, sinGrid, phaseError, anglePll, anglePllComp, angleDq\r\n");
 8001bac:	499a      	ldr	r1, [pc, #616]	; (8001e18 <printRingBuf+0x290>)
 8001bae:	489b      	ldr	r0, [pc, #620]	; (8001e1c <printRingBuf+0x294>)
 8001bb0:	f004 fd4a 	bl	8006648 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001bb4:	4899      	ldr	r0, [pc, #612]	; (8001e1c <printRingBuf+0x294>)
 8001bb6:	f7fe fb2b 	bl	8000210 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	4996      	ldr	r1, [pc, #600]	; (8001e1c <printRingBuf+0x294>)
 8001bc4:	4896      	ldr	r0, [pc, #600]	; (8001e20 <printRingBuf+0x298>)
 8001bc6:	f003 fa34 	bl	8005032 <HAL_UART_Transmit>


    for (int i = 0; i < bufferSize; i++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bce:	e115      	b.n	8001dfc <printRingBuf+0x274>
        //printf("Buffervalue at index [%d] = %d\n", readIndex, circularBuffer[readIndex]);

//    	sprintf(msg, "%d, %d, %d, %d\r\n", circularBuffer[readIndex][0], circularBuffer[readIndex][1],
//									circularBuffer[readIndex][2], circularBuffer[readIndex][3]);	// Update message for usart print
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
											circularBuffer[readIndex][0], 	circularBuffer[readIndex][1],
 8001bd0:	4b90      	ldr	r3, [pc, #576]	; (8001e14 <printRingBuf+0x28c>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	4413      	add	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	461a      	mov	r2, r3
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	4413      	add	r3, r2
 8001be4:	f9b3 3000 	ldrsh.w	r3, [r3]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001be8:	469c      	mov	ip, r3
											circularBuffer[readIndex][0], 	circularBuffer[readIndex][1],
 8001bea:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <printRingBuf+0x28c>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001c02:	469e      	mov	lr, r3
											circularBuffer[readIndex][2], 	circularBuffer[readIndex][3],
 8001c04:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <printRingBuf+0x28c>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	461a      	mov	r2, r3
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	4413      	add	r3, r2
 8001c18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001c1c:	461e      	mov	r6, r3
											circularBuffer[readIndex][2], 	circularBuffer[readIndex][3],
 8001c1e:	4b7d      	ldr	r3, [pc, #500]	; (8001e14 <printRingBuf+0x28c>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	4413      	add	r3, r2
 8001c32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
											circularBuffer[readIndex][4], 	circularBuffer[readIndex][5],
 8001c38:	4b76      	ldr	r3, [pc, #472]	; (8001e14 <printRingBuf+0x28c>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4613      	mov	r3, r2
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	461a      	mov	r2, r3
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001c50:	623b      	str	r3, [r7, #32]
											circularBuffer[readIndex][4], 	circularBuffer[readIndex][5],
 8001c52:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <printRingBuf+0x28c>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4613      	mov	r3, r2
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	461a      	mov	r2, r3
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	4413      	add	r3, r2
 8001c66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001c6a:	61fb      	str	r3, [r7, #28]
											circularBuffer[readIndex][6], 	circularBuffer[readIndex][7],
 8001c6c:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <printRingBuf+0x28c>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4613      	mov	r3, r2
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	4413      	add	r3, r2
 8001c80:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001c84:	61bb      	str	r3, [r7, #24]
											circularBuffer[readIndex][6], 	circularBuffer[readIndex][7],
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <printRingBuf+0x28c>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4413      	add	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	461a      	mov	r2, r3
 8001c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c98:	4413      	add	r3, r2
 8001c9a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001c9e:	617b      	str	r3, [r7, #20]
											circularBuffer[readIndex][8], 	circularBuffer[readIndex][9],
 8001ca0:	4b5c      	ldr	r3, [pc, #368]	; (8001e14 <printRingBuf+0x28c>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001cb8:	613b      	str	r3, [r7, #16]
											circularBuffer[readIndex][8], 	circularBuffer[readIndex][9],
 8001cba:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <printRingBuf+0x28c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	4413      	add	r3, r2
 8001cce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001cd2:	60fb      	str	r3, [r7, #12]
											circularBuffer[readIndex][10], 	circularBuffer[readIndex][11],
 8001cd4:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <printRingBuf+0x28c>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4613      	mov	r3, r2
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001cec:	60bb      	str	r3, [r7, #8]
											circularBuffer[readIndex][10], 	circularBuffer[readIndex][11],
 8001cee:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <printRingBuf+0x28c>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	4413      	add	r3, r2
 8001d02:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d06:	607b      	str	r3, [r7, #4]
											circularBuffer[readIndex][12], 	circularBuffer[readIndex][13],
 8001d08:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <printRingBuf+0x28c>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4613      	mov	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	461a      	mov	r2, r3
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d20:	461d      	mov	r5, r3
											circularBuffer[readIndex][12], 	circularBuffer[readIndex][13],
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <printRingBuf+0x28c>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	461a      	mov	r2, r3
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	4413      	add	r3, r2
 8001d36:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d3a:	461c      	mov	r4, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <printRingBuf+0x28c>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4413      	add	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	4413      	add	r3, r2
 8001d50:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d54:	4618      	mov	r0, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <printRingBuf+0x28c>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	461a      	mov	r2, r3
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	4413      	add	r3, r2
 8001d6a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d6e:	4619      	mov	r1, r3
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15], circularBuffer[readIndex][16]);	// Update message for usart print
 8001d70:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <printRingBuf+0x28c>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	4413      	add	r3, r2
 8001d84:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001d88:	930e      	str	r3, [sp, #56]	; 0x38
 8001d8a:	910d      	str	r1, [sp, #52]	; 0x34
 8001d8c:	900c      	str	r0, [sp, #48]	; 0x30
 8001d8e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001d90:	950a      	str	r5, [sp, #40]	; 0x28
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	9209      	str	r2, [sp, #36]	; 0x24
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	9208      	str	r2, [sp, #32]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	9207      	str	r2, [sp, #28]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	9206      	str	r2, [sp, #24]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	9205      	str	r2, [sp, #20]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	9204      	str	r2, [sp, #16]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	9203      	str	r2, [sp, #12]
 8001dae:	6a3a      	ldr	r2, [r7, #32]
 8001db0:	9202      	str	r2, [sp, #8]
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	9600      	str	r6, [sp, #0]
 8001db8:	4673      	mov	r3, lr
 8001dba:	4662      	mov	r2, ip
 8001dbc:	4919      	ldr	r1, [pc, #100]	; (8001e24 <printRingBuf+0x29c>)
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <printRingBuf+0x294>)
 8001dc0:	f004 fc42 	bl	8006648 <siprintf>

    	// sprintf(msg, "[%d] = %d\r\n", readIndex, circularBuffer[readIndex]);	// Update message for usart print


    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <printRingBuf+0x294>)
 8001dc6:	f7fe fa23 	bl	8000210 <strlen>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	4912      	ldr	r1, [pc, #72]	; (8001e1c <printRingBuf+0x294>)
 8001dd4:	4812      	ldr	r0, [pc, #72]	; (8001e20 <printRingBuf+0x298>)
 8001dd6:	f003 f92c 	bl	8005032 <HAL_UART_Transmit>
    	huart2.Instance->CR3 |= USART_CR3_DMAT;
    	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg,
    							(uint32_t)&huart2.Instance->DR, strlen(msg));
		*/

        readIndex++;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <printRingBuf+0x28c>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <printRingBuf+0x28c>)
 8001de4:	801a      	strh	r2, [r3, #0]
        if (readIndex > bufferSize) {
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <printRingBuf+0x28c>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d202      	bcs.n	8001df6 <printRingBuf+0x26e>
            readIndex = 0;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <printRingBuf+0x28c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferSize; i++)
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	3301      	adds	r3, #1
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f6ff aee5 	blt.w	8001bd0 <printRingBuf+0x48>
        }
    }
    return 1;
 8001e06:	2301      	movs	r3, #1

}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	373c      	adds	r7, #60	; 0x3c
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e10:	200000aa 	.word	0x200000aa
 8001e14:	200000ac 	.word	0x200000ac
 8001e18:	08007be4 	.word	0x08007be4
 8001e1c:	200000b0 	.word	0x200000b0
 8001e20:	20010dfc 	.word	0x20010dfc
 8001e24:	08007c70 	.word	0x08007c70

08001e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <Error_Handler+0x8>
	...

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	; 0x30
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_ADC_MspInit+0x134>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d157      	bne.n	8001f56 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a43      	ldr	r2, [pc, #268]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a3c      	ldr	r2, [pc, #240]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4833      	ldr	r0, [pc, #204]	; (8001fc0 <HAL_ADC_MspInit+0x13c>)
 8001ef2:	f001 fbe3 	bl	80036bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ef6:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001ef8:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <HAL_ADC_MspInit+0x144>)
 8001efa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f08:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f38:	4822      	ldr	r0, [pc, #136]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f3a:	f001 f843 	bl	8002fc4 <HAL_DMA_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001f44:	f7ff ff70 	bl	8001e28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_ADC_MspInit+0x140>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f54:	e02c      	b.n	8001fb0 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_ADC_MspInit+0x148>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d127      	bne.n	8001fb0 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_ADC_MspInit+0x138>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <HAL_ADC_MspInit+0x13c>)
 8001fac:	f001 fb86 	bl	80036bc <HAL_GPIO_Init>
}
 8001fb0:	bf00      	nop
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40012000 	.word	0x40012000
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	20010d58 	.word	0x20010d58
 8001fc8:	40026410 	.word	0x40026410
 8001fcc:	40012100 	.word	0x40012100

08001fd0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_DAC_MspInit+0x7c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d127      	bne.n	8002042 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_DAC_MspInit+0x80>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <HAL_DAC_MspInit+0x80>)
 8001ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_DAC_MspInit+0x80>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_DAC_MspInit+0x80>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_DAC_MspInit+0x80>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_DAC_MspInit+0x80>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800202a:	2310      	movs	r3, #16
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202e:	2303      	movs	r3, #3
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <HAL_DAC_MspInit+0x84>)
 800203e:	f001 fb3d 	bl	80036bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	; 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40007400 	.word	0x40007400
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000

08002058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_TIM_Base_MspInit+0x48>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d115      	bne.n	8002096 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_TIM_Base_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2019      	movs	r0, #25
 800208c:	f000 fe7b 	bl	8002d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002090:	2019      	movs	r0, #25
 8002092:	f000 fe94 	bl	8002dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40014400 	.word	0x40014400
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a34      	ldr	r2, [pc, #208]	; (8002198 <HAL_UART_MspInit+0xf0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d161      	bne.n	800218e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_UART_MspInit+0xf4>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_UART_MspInit+0xf4>)
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_UART_MspInit+0xf4>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_UART_MspInit+0xf4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a2b      	ldr	r2, [pc, #172]	; (800219c <HAL_UART_MspInit+0xf4>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <HAL_UART_MspInit+0xf4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002102:	230c      	movs	r3, #12
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002112:	2307      	movs	r3, #7
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4820      	ldr	r0, [pc, #128]	; (80021a0 <HAL_UART_MspInit+0xf8>)
 800211e:	f001 facd 	bl	80036bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002124:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <HAL_UART_MspInit+0x100>)
 8002126:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 800212a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800212e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002132:	2240      	movs	r2, #64	; 0x40
 8002134:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 800213e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002142:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002162:	4810      	ldr	r0, [pc, #64]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002164:	f000 ff2e 	bl	8002fc4 <HAL_DMA_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800216e:	f7ff fe5b 	bl	8001e28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 8002176:	635a      	str	r2, [r3, #52]	; 0x34
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_UART_MspInit+0xfc>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2026      	movs	r0, #38	; 0x26
 8002184:	f000 fdff 	bl	8002d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002188:	2026      	movs	r0, #38	; 0x26
 800218a:	f000 fe18 	bl	8002dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40004400 	.word	0x40004400
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	20000340 	.word	0x20000340
 80021a8:	400260a0 	.word	0x400260a0

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 f8ee 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA1_Stream6_IRQHandler+0x10>)
 8002206:	f001 f81d 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000340 	.word	0x20000340

08002214 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800221a:	f002 fad0 	bl	80047be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000280 	.word	0x20000280

08002228 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <USART2_IRQHandler+0x10>)
 800222e:	f002 ff93 	bl	8005158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20010dfc 	.word	0x20010dfc

0800223c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA2_Stream0_IRQHandler+0x10>)
 8002242:	f000 ffff 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20010d58 	.word	0x20010d58

08002250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002280:	f004 f9b0 	bl	80065e4 <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20020000 	.word	0x20020000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	20000148 	.word	0x20000148
 80022b8:	20010e60 	.word	0x20010e60

080022bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <SystemInit+0x20>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <SystemInit+0x20>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022e6:	490e      	ldr	r1, [pc, #56]	; (8002320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022fc:	4c0b      	ldr	r4, [pc, #44]	; (800232c <LoopFillZerobss+0x26>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800230a:	f7ff ffd7 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800230e:	f004 f96f 	bl	80065f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002312:	f7fe fe0d 	bl	8000f30 <main>
  bx  lr    
 8002316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002324:	080080ec 	.word	0x080080ec
  ldr r2, =_sbss
 8002328:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800232c:	20010e5c 	.word	0x20010e5c

08002330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <HAL_Init+0x40>)
 800233e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_Init+0x40>)
 800234a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_Init+0x40>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 fd07 	bl	8002d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002362:	2000      	movs	r0, #0
 8002364:	f000 f808 	bl	8002378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002368:	f7ff fd64 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00

08002378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_InitTick+0x54>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_InitTick+0x58>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fd1f 	bl	8002dda <HAL_SYSTICK_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00e      	b.n	80023c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d80a      	bhi.n	80023c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ac:	2200      	movs	r2, #0
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f000 fce7 	bl	8002d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <HAL_InitTick+0x5c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2000000c 	.word	0x2000000c
 80023d0:	20000014 	.word	0x20000014
 80023d4:	20000010 	.word	0x20000010

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000014 	.word	0x20000014
 80023fc:	20010e48 	.word	0x20010e48

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20010e48 	.word	0x20010e48

08002418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e033      	b.n	8002496 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fd24 	bl	8001e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	f043 0202 	orr.w	r2, r3, #2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fab4 	bl	80029d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
 8002486:	e001      	b.n	800248c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Start+0x1a>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e0b2      	b.n	8002620 <HAL_ADC_Start+0x180>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d018      	beq.n	8002502 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e0:	4b52      	ldr	r3, [pc, #328]	; (800262c <HAL_ADC_Start+0x18c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_ADC_Start+0x190>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9a      	lsrs	r2, r3, #18
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d17a      	bne.n	8002606 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800253a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254e:	d106      	bne.n	800255e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f023 0206 	bic.w	r2, r3, #6
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
 800255c:	e002      	b.n	8002564 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_ADC_Start+0x194>)
 800256e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002578:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2b00      	cmp	r3, #0
 8002584:	d12a      	bne.n	80025dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <HAL_ADC_Start+0x198>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d015      	beq.n	80025bc <HAL_ADC_Start+0x11c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a29      	ldr	r2, [pc, #164]	; (800263c <HAL_ADC_Start+0x19c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_Start+0x106>
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_ADC_Start+0x194>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <HAL_ADC_Start+0x1a0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d136      	bne.n	800261e <HAL_ADC_Start+0x17e>
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_ADC_Start+0x194>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d130      	bne.n	800261e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d129      	bne.n	800261e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	e020      	b.n	800261e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a15      	ldr	r2, [pc, #84]	; (8002638 <HAL_ADC_Start+0x198>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d11b      	bne.n	800261e <HAL_ADC_Start+0x17e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d114      	bne.n	800261e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	e00b      	b.n	800261e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f043 0210 	orr.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	2000000c 	.word	0x2000000c
 8002630:	431bde83 	.word	0x431bde83
 8002634:	40012300 	.word	0x40012300
 8002638:	40012000 	.word	0x40012000
 800263c:	40012100 	.word	0x40012100
 8002640:	40012200 	.word	0x40012200

08002644 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002660:	d113      	bne.n	800268a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800266c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002670:	d10b      	bne.n	800268a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0220 	orr.w	r2, r3, #32
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e063      	b.n	8002752 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800268a:	f7ff feb9 	bl	8002400 <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002690:	e021      	b.n	80026d6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d01d      	beq.n	80026d6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_ADC_PollForConversion+0x6c>
 80026a0:	f7ff feae 	bl	8002400 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d212      	bcs.n	80026d6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d00b      	beq.n	80026d6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f043 0204 	orr.w	r2, r3, #4
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e03d      	b.n	8002752 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d1d6      	bne.n	8002692 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0212 	mvn.w	r2, #18
 80026ec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d123      	bne.n	8002750 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11f      	bne.n	8002750 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1c>
 800278c:	2302      	movs	r3, #2
 800278e:	e113      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x244>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b09      	cmp	r3, #9
 800279e:	d925      	bls.n	80027ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68d9      	ldr	r1, [r3, #12]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	3b1e      	subs	r3, #30
 80027b6:	2207      	movs	r2, #7
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43da      	mvns	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	400a      	ands	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68d9      	ldr	r1, [r3, #12]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	4603      	mov	r3, r0
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4403      	add	r3, r0
 80027de:	3b1e      	subs	r3, #30
 80027e0:	409a      	lsls	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	e022      	b.n	8002832 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6919      	ldr	r1, [r3, #16]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	2207      	movs	r2, #7
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	400a      	ands	r2, r1
 800280e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6919      	ldr	r1, [r3, #16]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4618      	mov	r0, r3
 8002822:	4603      	mov	r3, r0
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4403      	add	r3, r0
 8002828:	409a      	lsls	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b06      	cmp	r3, #6
 8002838:	d824      	bhi.n	8002884 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	3b05      	subs	r3, #5
 800284c:	221f      	movs	r2, #31
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	400a      	ands	r2, r1
 800285a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	4618      	mov	r0, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b05      	subs	r3, #5
 8002876:	fa00 f203 	lsl.w	r2, r0, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
 8002882:	e04c      	b.n	800291e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d824      	bhi.n	80028d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	3b23      	subs	r3, #35	; 0x23
 800289e:	221f      	movs	r2, #31
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43da      	mvns	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	400a      	ands	r2, r1
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b23      	subs	r3, #35	; 0x23
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
 80028d4:	e023      	b.n	800291e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b41      	subs	r3, #65	; 0x41
 80028e8:	221f      	movs	r2, #31
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	400a      	ands	r2, r1
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3b41      	subs	r3, #65	; 0x41
 8002912:	fa00 f203 	lsl.w	r2, r0, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_ADC_ConfigChannel+0x250>)
 8002920:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <HAL_ADC_ConfigChannel+0x254>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d10f      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1d8>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b12      	cmp	r3, #18
 8002932:	d10b      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_ADC_ConfigChannel+0x254>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d12b      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_ADC_ConfigChannel+0x258>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x1f4>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b11      	cmp	r3, #17
 8002966:	d122      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_ADC_ConfigChannel+0x258>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d111      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_ADC_ConfigChannel+0x25c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <HAL_ADC_ConfigChannel+0x260>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0c9a      	lsrs	r2, r3, #18
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012300 	.word	0x40012300
 80029c8:	40012000 	.word	0x40012000
 80029cc:	10000012 	.word	0x10000012
 80029d0:	2000000c 	.word	0x2000000c
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e0:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <ADC_Init+0x1f0>)
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	021a      	lsls	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <ADC_Init+0x1f4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	e00f      	b.n	8002ad6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0202 	bic.w	r2, r2, #2
 8002ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
 8002af0:	005a      	lsls	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	035a      	lsls	r2, r3, #13
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e007      	b.n	8002b4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	051a      	lsls	r2, r3, #20
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8e:	025a      	lsls	r2, r3, #9
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	029a      	lsls	r2, r3, #10
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	0f000001 	.word	0x0f000001

08002bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <__NVIC_SetPriorityGrouping+0x44>)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	60d3      	str	r3, [r2, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <__NVIC_GetPriorityGrouping+0x18>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 0307 	and.w	r3, r3, #7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db0b      	blt.n	8002c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <__NVIC_EnableIRQ+0x38>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2001      	movs	r0, #1
 8002c56:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e100 	.word	0xe000e100

08002c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db0a      	blt.n	8002c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	490c      	ldr	r1, [pc, #48]	; (8002cbc <__NVIC_SetPriority+0x4c>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	440b      	add	r3, r1
 8002c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c98:	e00a      	b.n	8002cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <__NVIC_SetPriority+0x50>)
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	761a      	strb	r2, [r3, #24]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	; 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f1c3 0307 	rsb	r3, r3, #7
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	bf28      	it	cs
 8002ce2:	2304      	movcs	r3, #4
 8002ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d902      	bls.n	8002cf4 <NVIC_EncodePriority+0x30>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3b03      	subs	r3, #3
 8002cf2:	e000      	b.n	8002cf6 <NVIC_EncodePriority+0x32>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	401a      	ands	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	43d9      	mvns	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	4313      	orrs	r3, r2
         );
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d3c:	d301      	bcc.n	8002d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00f      	b.n	8002d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <SysTick_Config+0x40>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4a:	210f      	movs	r1, #15
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	f7ff ff8e 	bl	8002c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <SysTick_Config+0x40>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <SysTick_Config+0x40>)
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	e000e010 	.word	0xe000e010

08002d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ff29 	bl	8002bd0 <__NVIC_SetPriorityGrouping>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d98:	f7ff ff3e 	bl	8002c18 <__NVIC_GetPriorityGrouping>
 8002d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	6978      	ldr	r0, [r7, #20]
 8002da4:	f7ff ff8e 	bl	8002cc4 <NVIC_EncodePriority>
 8002da8:	4602      	mov	r2, r0
 8002daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff5d 	bl	8002c70 <__NVIC_SetPriority>
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff31 	bl	8002c34 <__NVIC_EnableIRQ>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ffa2 	bl	8002d2c <SysTick_Config>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e014      	b.n	8002e2e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff f8db 	bl	8001fd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	795b      	ldrb	r3, [r3, #5]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_DAC_Start+0x16>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e040      	b.n	8002ece <HAL_DAC_Start+0x98>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2201      	movs	r2, #1
 8002e66:	409a      	lsls	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002e80:	2b3c      	cmp	r3, #60	; 0x3c
 8002e82:	d11d      	bne.n	8002ec0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	e014      	b.n	8002ec0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	213c      	movs	r1, #60	; 0x3c
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0202 	orr.w	r2, r2, #2
 8002ebe:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	3308      	adds	r3, #8
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e004      	b.n	8002f0e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	461a      	mov	r2, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	795b      	ldrb	r3, [r3, #5]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_DAC_ConfigChannel+0x18>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e03c      	b.n	8002fb6 <HAL_DAC_ConfigChannel+0x92>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2202      	movs	r2, #2
 8002f46:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4013      	ands	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	22c0      	movs	r2, #192	; 0xc0
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff fa16 	bl	8002400 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e099      	b.n	8003114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003000:	e00f      	b.n	8003022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003002:	f7ff f9fd 	bl	8002400 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b05      	cmp	r3, #5
 800300e:	d908      	bls.n	8003022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e078      	b.n	8003114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e8      	bne.n	8003002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4b38      	ldr	r3, [pc, #224]	; (800311c <HAL_DMA_Init+0x158>)
 800303c:	4013      	ands	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b04      	cmp	r3, #4
 800307a:	d107      	bne.n	800308c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4313      	orrs	r3, r2
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0307 	bic.w	r3, r3, #7
 80030a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d117      	bne.n	80030e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa7b 	bl	80035c4 <DMA_CheckFifoParam>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2240      	movs	r2, #64	; 0x40
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030e2:	2301      	movs	r3, #1
 80030e4:	e016      	b.n	8003114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa32 	bl	8003558 <DMA_CalcBaseAndBitshift>
 80030f4:	4603      	mov	r3, r0
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	223f      	movs	r2, #63	; 0x3f
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	f010803f 	.word	0xf010803f

08003120 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800312e:	f7ff f967 	bl	8002400 <HAL_GetTick>
 8003132:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e052      	b.n	80031f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0216 	bic.w	r2, r2, #22
 8003160:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003170:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_DMA_Abort+0x62>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0208 	bic.w	r2, r2, #8
 8003190:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a2:	e013      	b.n	80031cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a4:	f7ff f92c 	bl	8002400 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b05      	cmp	r3, #5
 80031b0:	d90c      	bls.n	80031cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2203      	movs	r2, #3
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e015      	b.n	80031f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e4      	bne.n	80031a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	223f      	movs	r2, #63	; 0x3f
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d004      	beq.n	800321e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e00c      	b.n	8003238 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003250:	4b92      	ldr	r3, [pc, #584]	; (800349c <HAL_DMA_IRQHandler+0x258>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a92      	ldr	r2, [pc, #584]	; (80034a0 <HAL_DMA_IRQHandler+0x25c>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0a9b      	lsrs	r3, r3, #10
 800325c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	2208      	movs	r2, #8
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01a      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	2208      	movs	r2, #8
 800329e:	409a      	lsls	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	2201      	movs	r2, #1
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	2201      	movs	r2, #1
 80032d4:	409a      	lsls	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0202 	orr.w	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	2204      	movs	r2, #4
 80032ec:	409a      	lsls	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	2204      	movs	r2, #4
 800330a:	409a      	lsls	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2210      	movs	r2, #16
 8003322:	409a      	lsls	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d043      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d03c      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	2210      	movs	r2, #16
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d018      	beq.n	8003386 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d024      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
 8003372:	e01f      	b.n	80033b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01b      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
 8003384:	e016      	b.n	80033b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0208 	bic.w	r2, r2, #8
 80033a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	2220      	movs	r2, #32
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 808e 	beq.w	80034e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8086 	beq.w	80034e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	2220      	movs	r2, #32
 80033dc:	409a      	lsls	r2, r3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d136      	bne.n	800345c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0216 	bic.w	r2, r2, #22
 80033fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <HAL_DMA_IRQHandler+0x1da>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0208 	bic.w	r2, r2, #8
 800342c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	223f      	movs	r2, #63	; 0x3f
 8003434:	409a      	lsls	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	2b00      	cmp	r3, #0
 8003450:	d07d      	beq.n	800354e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
        }
        return;
 800345a:	e078      	b.n	800354e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	2b00      	cmp	r3, #0
 800347e:	d030      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
 8003488:	e02b      	b.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d027      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e022      	b.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
 800349c:	2000000c 	.word	0x2000000c
 80034a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0210 	bic.w	r2, r2, #16
 80034c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d032      	beq.n	8003550 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d022      	beq.n	800353c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2205      	movs	r2, #5
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3301      	adds	r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	429a      	cmp	r2, r3
 8003518:	d307      	bcc.n	800352a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f2      	bne.n	800350e <HAL_DMA_IRQHandler+0x2ca>
 8003528:	e000      	b.n	800352c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800352a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e000      	b.n	8003550 <HAL_DMA_IRQHandler+0x30c>
        return;
 800354e:	bf00      	nop
    }
  }
}
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop

08003558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	3b10      	subs	r3, #16
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <DMA_CalcBaseAndBitshift+0x64>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003572:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d909      	bls.n	800359a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	659a      	str	r2, [r3, #88]	; 0x58
 8003598:	e007      	b.n	80035aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	aaaaaaab 	.word	0xaaaaaaab
 80035c0:	08007cd0 	.word	0x08007cd0

080035c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11f      	bne.n	800361e <DMA_CheckFifoParam+0x5a>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d856      	bhi.n	8003692 <DMA_CheckFifoParam+0xce>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <DMA_CheckFifoParam+0x28>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	0800360f 	.word	0x0800360f
 80035f4:	080035fd 	.word	0x080035fd
 80035f8:	08003693 	.word	0x08003693
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d046      	beq.n	8003696 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360c:	e043      	b.n	8003696 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003616:	d140      	bne.n	800369a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e03d      	b.n	800369a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003626:	d121      	bne.n	800366c <DMA_CheckFifoParam+0xa8>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d837      	bhi.n	800369e <DMA_CheckFifoParam+0xda>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <DMA_CheckFifoParam+0x70>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003645 	.word	0x08003645
 8003638:	0800364b 	.word	0x0800364b
 800363c:	08003645 	.word	0x08003645
 8003640:	0800365d 	.word	0x0800365d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	e030      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d025      	beq.n	80036a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e022      	b.n	80036a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003664:	d11f      	bne.n	80036a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800366a:	e01c      	b.n	80036a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d903      	bls.n	800367a <DMA_CheckFifoParam+0xb6>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d003      	beq.n	8003680 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003678:	e018      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      break;
 800367e:	e015      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e00b      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;
 8003692:	bf00      	nop
 8003694:	e00a      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
 8003698:	e008      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 800369a:	bf00      	nop
 800369c:	e006      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
 80036a0:	e004      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;   
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
    }
  } 
  
  return status; 
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e165      	b.n	80039a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	f040 8154 	bne.w	800399e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d005      	beq.n	800370e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370a:	2b02      	cmp	r3, #2
 800370c:	d130      	bne.n	8003770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003744:	2201      	movs	r2, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d017      	beq.n	80037ac <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d123      	bne.n	8003800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	220f      	movs	r2, #15
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	08da      	lsrs	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3208      	adds	r2, #8
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0203 	and.w	r2, r3, #3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80ae 	beq.w	800399e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b5d      	ldr	r3, [pc, #372]	; (80039bc <HAL_GPIO_Init+0x300>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	4a5c      	ldr	r2, [pc, #368]	; (80039bc <HAL_GPIO_Init+0x300>)
 800384c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <HAL_GPIO_Init+0x300>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385e:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <HAL_GPIO_Init+0x304>)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4f      	ldr	r2, [pc, #316]	; (80039c4 <HAL_GPIO_Init+0x308>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d025      	beq.n	80038d6 <HAL_GPIO_Init+0x21a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4e      	ldr	r2, [pc, #312]	; (80039c8 <HAL_GPIO_Init+0x30c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01f      	beq.n	80038d2 <HAL_GPIO_Init+0x216>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4d      	ldr	r2, [pc, #308]	; (80039cc <HAL_GPIO_Init+0x310>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d019      	beq.n	80038ce <HAL_GPIO_Init+0x212>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4c      	ldr	r2, [pc, #304]	; (80039d0 <HAL_GPIO_Init+0x314>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <HAL_GPIO_Init+0x20e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4b      	ldr	r2, [pc, #300]	; (80039d4 <HAL_GPIO_Init+0x318>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00d      	beq.n	80038c6 <HAL_GPIO_Init+0x20a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4a      	ldr	r2, [pc, #296]	; (80039d8 <HAL_GPIO_Init+0x31c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d007      	beq.n	80038c2 <HAL_GPIO_Init+0x206>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a49      	ldr	r2, [pc, #292]	; (80039dc <HAL_GPIO_Init+0x320>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_GPIO_Init+0x202>
 80038ba:	2306      	movs	r3, #6
 80038bc:	e00c      	b.n	80038d8 <HAL_GPIO_Init+0x21c>
 80038be:	2307      	movs	r3, #7
 80038c0:	e00a      	b.n	80038d8 <HAL_GPIO_Init+0x21c>
 80038c2:	2305      	movs	r3, #5
 80038c4:	e008      	b.n	80038d8 <HAL_GPIO_Init+0x21c>
 80038c6:	2304      	movs	r3, #4
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x21c>
 80038ca:	2303      	movs	r3, #3
 80038cc:	e004      	b.n	80038d8 <HAL_GPIO_Init+0x21c>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x21c>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x21c>
 80038d6:	2300      	movs	r3, #0
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f002 0203 	and.w	r2, r2, #3
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	4093      	lsls	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e8:	4935      	ldr	r1, [pc, #212]	; (80039c0 <HAL_GPIO_Init+0x304>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f6:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <HAL_GPIO_Init+0x324>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800391a:	4a31      	ldr	r2, [pc, #196]	; (80039e0 <HAL_GPIO_Init+0x324>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003920:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_GPIO_Init+0x324>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <HAL_GPIO_Init+0x324>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_GPIO_Init+0x324>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <HAL_GPIO_Init+0x324>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_GPIO_Init+0x324>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_GPIO_Init+0x324>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f ae96 	bls.w	80036d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40021400 	.word	0x40021400
 80039dc:	40021800 	.word	0x40021800
 80039e0:	40013c00 	.word	0x40013c00

080039e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
 80039f0:	4613      	mov	r3, r2
 80039f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f4:	787b      	ldrb	r3, [r7, #1]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a00:	e003      	b.n	8003a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	041a      	lsls	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	619a      	str	r2, [r3, #24]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a1f      	ldr	r2, [pc, #124]	; (8003aa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_PWREx_EnableOverDrive+0x94>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a44:	f7fe fcdc 	bl	8002400 <HAL_GetTick>
 8003a48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a4a:	e009      	b.n	8003a60 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a4c:	f7fe fcd8 	bl	8002400 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a5a:	d901      	bls.n	8003a60 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e01f      	b.n	8003aa0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	d1ee      	bne.n	8003a4c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a74:	f7fe fcc4 	bl	8002400 <HAL_GetTick>
 8003a78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a7a:	e009      	b.n	8003a90 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a7c:	f7fe fcc0 	bl	8002400 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a8a:	d901      	bls.n	8003a90 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e007      	b.n	8003aa0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a9c:	d1ee      	bne.n	8003a7c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	420e0040 	.word	0x420e0040
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	420e0044 	.word	0x420e0044

08003ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0cc      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003acc:	4b68      	ldr	r3, [pc, #416]	; (8003c70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d90c      	bls.n	8003af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <HAL_RCC_ClockConfig+0x1b8>)
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	4b63      	ldr	r3, [pc, #396]	; (8003c70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0b8      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d020      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b0c:	4b59      	ldr	r3, [pc, #356]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b24:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a52      	ldr	r2, [pc, #328]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b30:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	494d      	ldr	r1, [pc, #308]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d044      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d119      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e07f      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b76:	4b3f      	ldr	r3, [pc, #252]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e06f      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b86:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e067      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b96:	4b37      	ldr	r3, [pc, #220]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 0203 	bic.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4934      	ldr	r1, [pc, #208]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba8:	f7fe fc2a 	bl	8002400 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb0:	f7fe fc26 	bl	8002400 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e04f      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 020c 	and.w	r2, r3, #12
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d1eb      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <HAL_RCC_ClockConfig+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d20c      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e032      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4916      	ldr	r1, [pc, #88]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2a:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	490e      	ldr	r1, [pc, #56]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c3e:	f000 f855 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003c42:	4602      	mov	r2, r0
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	490a      	ldr	r1, [pc, #40]	; (8003c78 <HAL_RCC_ClockConfig+0x1c0>)
 8003c50:	5ccb      	ldrb	r3, [r1, r3]
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fb8a 	bl	8002378 <HAL_InitTick>

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40023c00 	.word	0x40023c00
 8003c74:	40023800 	.word	0x40023800
 8003c78:	08007cb8 	.word	0x08007cb8
 8003c7c:	2000000c 	.word	0x2000000c
 8003c80:	20000010 	.word	0x20000010

08003c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	2000000c 	.word	0x2000000c

08003c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca0:	f7ff fff0 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0a9b      	lsrs	r3, r3, #10
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	08007cc8 	.word	0x08007cc8

08003cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cc8:	f7ff ffdc 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0b5b      	lsrs	r3, r3, #13
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	08007cc8 	.word	0x08007cc8

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf0:	b088      	sub	sp, #32
 8003cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d08:	4bce      	ldr	r3, [pc, #824]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	f200 818d 	bhi.w	8004030 <HAL_RCC_GetSysClockFreq+0x344>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <HAL_RCC_GetSysClockFreq+0x30>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08004031 	.word	0x08004031
 8003d24:	08004031 	.word	0x08004031
 8003d28:	08004031 	.word	0x08004031
 8003d2c:	08003d57 	.word	0x08003d57
 8003d30:	08004031 	.word	0x08004031
 8003d34:	08004031 	.word	0x08004031
 8003d38:	08004031 	.word	0x08004031
 8003d3c:	08003d5d 	.word	0x08003d5d
 8003d40:	08004031 	.word	0x08004031
 8003d44:	08004031 	.word	0x08004031
 8003d48:	08004031 	.word	0x08004031
 8003d4c:	08003ed1 	.word	0x08003ed1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4bbd      	ldr	r3, [pc, #756]	; (8004048 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d52:	61bb      	str	r3, [r7, #24]
       break;
 8003d54:	e16f      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d56:	4bbd      	ldr	r3, [pc, #756]	; (800404c <HAL_RCC_GetSysClockFreq+0x360>)
 8003d58:	61bb      	str	r3, [r7, #24]
      break;
 8003d5a:	e16c      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d5c:	4bb9      	ldr	r3, [pc, #740]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d64:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d66:	4bb7      	ldr	r3, [pc, #732]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d053      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d72:	4bb4      	ldr	r3, [pc, #720]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	099b      	lsrs	r3, r3, #6
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d82:	f04f 0100 	mov.w	r1, #0
 8003d86:	ea02 0400 	and.w	r4, r2, r0
 8003d8a:	603c      	str	r4, [r7, #0]
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d94:	4620      	mov	r0, r4
 8003d96:	4629      	mov	r1, r5
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	014b      	lsls	r3, r1, #5
 8003da2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003da6:	0142      	lsls	r2, r0, #5
 8003da8:	4610      	mov	r0, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	4623      	mov	r3, r4
 8003dae:	1ac0      	subs	r0, r0, r3
 8003db0:	462b      	mov	r3, r5
 8003db2:	eb61 0103 	sbc.w	r1, r1, r3
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	018b      	lsls	r3, r1, #6
 8003dc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc4:	0182      	lsls	r2, r0, #6
 8003dc6:	1a12      	subs	r2, r2, r0
 8003dc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003dcc:	f04f 0000 	mov.w	r0, #0
 8003dd0:	f04f 0100 	mov.w	r1, #0
 8003dd4:	00d9      	lsls	r1, r3, #3
 8003dd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dda:	00d0      	lsls	r0, r2, #3
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4621      	mov	r1, r4
 8003de2:	1852      	adds	r2, r2, r1
 8003de4:	4629      	mov	r1, r5
 8003de6:	eb43 0101 	adc.w	r1, r3, r1
 8003dea:	460b      	mov	r3, r1
 8003dec:	f04f 0000 	mov.w	r0, #0
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	0259      	lsls	r1, r3, #9
 8003df6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003dfa:	0250      	lsls	r0, r2, #9
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f7fc ff14 	bl	8000c38 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	e04c      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b8a      	ldr	r3, [pc, #552]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	461a      	mov	r2, r3
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	ea02 0a00 	and.w	sl, r2, r0
 8003e32:	ea03 0b01 	and.w	fp, r3, r1
 8003e36:	4650      	mov	r0, sl
 8003e38:	4659      	mov	r1, fp
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	014b      	lsls	r3, r1, #5
 8003e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e48:	0142      	lsls	r2, r0, #5
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	ebb0 000a 	subs.w	r0, r0, sl
 8003e52:	eb61 010b 	sbc.w	r1, r1, fp
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	018b      	lsls	r3, r1, #6
 8003e60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e64:	0182      	lsls	r2, r0, #6
 8003e66:	1a12      	subs	r2, r2, r0
 8003e68:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6c:	f04f 0000 	mov.w	r0, #0
 8003e70:	f04f 0100 	mov.w	r1, #0
 8003e74:	00d9      	lsls	r1, r3, #3
 8003e76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e7a:	00d0      	lsls	r0, r2, #3
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	eb12 020a 	adds.w	r2, r2, sl
 8003e84:	eb43 030b 	adc.w	r3, r3, fp
 8003e88:	f04f 0000 	mov.w	r0, #0
 8003e8c:	f04f 0100 	mov.w	r1, #0
 8003e90:	0299      	lsls	r1, r3, #10
 8003e92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e96:	0290      	lsls	r0, r2, #10
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	f7fc fec6 	bl	8000c38 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eb4:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	0c1b      	lsrs	r3, r3, #16
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ecc:	61bb      	str	r3, [r7, #24]
      break;
 8003ece:	e0b2      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ed0:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eda:	4b5a      	ldr	r3, [pc, #360]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d04d      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee6:	4b57      	ldr	r3, [pc, #348]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	461a      	mov	r2, r3
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	ea02 0800 	and.w	r8, r2, r0
 8003efe:	ea03 0901 	and.w	r9, r3, r1
 8003f02:	4640      	mov	r0, r8
 8003f04:	4649      	mov	r1, r9
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	014b      	lsls	r3, r1, #5
 8003f10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f14:	0142      	lsls	r2, r0, #5
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	ebb0 0008 	subs.w	r0, r0, r8
 8003f1e:	eb61 0109 	sbc.w	r1, r1, r9
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	018b      	lsls	r3, r1, #6
 8003f2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f30:	0182      	lsls	r2, r0, #6
 8003f32:	1a12      	subs	r2, r2, r0
 8003f34:	eb63 0301 	sbc.w	r3, r3, r1
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	00d9      	lsls	r1, r3, #3
 8003f42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f46:	00d0      	lsls	r0, r2, #3
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	eb12 0208 	adds.w	r2, r2, r8
 8003f50:	eb43 0309 	adc.w	r3, r3, r9
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	0259      	lsls	r1, r3, #9
 8003f5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f62:	0250      	lsls	r0, r2, #9
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	f7fc fe60 	bl	8000c38 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	e04a      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b30      	ldr	r3, [pc, #192]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	ea02 0400 	and.w	r4, r2, r0
 8003f9a:	ea03 0501 	and.w	r5, r3, r1
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	014b      	lsls	r3, r1, #5
 8003fac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fb0:	0142      	lsls	r2, r0, #5
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	1b00      	subs	r0, r0, r4
 8003fb8:	eb61 0105 	sbc.w	r1, r1, r5
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	018b      	lsls	r3, r1, #6
 8003fc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fca:	0182      	lsls	r2, r0, #6
 8003fcc:	1a12      	subs	r2, r2, r0
 8003fce:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	00d9      	lsls	r1, r3, #3
 8003fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fe0:	00d0      	lsls	r0, r2, #3
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	1912      	adds	r2, r2, r4
 8003fe8:	eb45 0303 	adc.w	r3, r5, r3
 8003fec:	f04f 0000 	mov.w	r0, #0
 8003ff0:	f04f 0100 	mov.w	r1, #0
 8003ff4:	0299      	lsls	r1, r3, #10
 8003ff6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ffa:	0290      	lsls	r0, r2, #10
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	461a      	mov	r2, r3
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	f7fc fe14 	bl	8000c38 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_RCC_GetSysClockFreq+0x358>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0f1b      	lsrs	r3, r3, #28
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	61bb      	str	r3, [r7, #24]
      break;
 800402e:	e002      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004032:	61bb      	str	r3, [r7, #24]
      break;
 8004034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004036:	69bb      	ldr	r3, [r7, #24]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e28d      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8083 	beq.w	8004176 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004070:	4b94      	ldr	r3, [pc, #592]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b04      	cmp	r3, #4
 800407a:	d019      	beq.n	80040b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800407c:	4b91      	ldr	r3, [pc, #580]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004084:	2b08      	cmp	r3, #8
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004088:	4b8e      	ldr	r3, [pc, #568]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004094:	d00c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004096:	4b8b      	ldr	r3, [pc, #556]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d112      	bne.n	80040c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a2:	4b88      	ldr	r3, [pc, #544]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	4b84      	ldr	r3, [pc, #528]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05b      	beq.n	8004174 <HAL_RCC_OscConfig+0x124>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d157      	bne.n	8004174 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e25a      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d106      	bne.n	80040e0 <HAL_RCC_OscConfig+0x90>
 80040d2:	4b7c      	ldr	r3, [pc, #496]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7b      	ldr	r2, [pc, #492]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e01d      	b.n	800411c <HAL_RCC_OscConfig+0xcc>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0xb4>
 80040ea:	4b76      	ldr	r3, [pc, #472]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a75      	ldr	r2, [pc, #468]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80040f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b73      	ldr	r3, [pc, #460]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a72      	ldr	r2, [pc, #456]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e00b      	b.n	800411c <HAL_RCC_OscConfig+0xcc>
 8004104:	4b6f      	ldr	r3, [pc, #444]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a6e      	ldr	r2, [pc, #440]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 800410a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b6c      	ldr	r3, [pc, #432]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a6b      	ldr	r2, [pc, #428]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d013      	beq.n	800414c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fe f96c 	bl	8002400 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412c:	f7fe f968 	bl	8002400 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e21f      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0xdc>
 800414a:	e014      	b.n	8004176 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe f958 	bl	8002400 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004154:	f7fe f954 	bl	8002400 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e20b      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	4b57      	ldr	r3, [pc, #348]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x104>
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d06f      	beq.n	8004262 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004182:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b00      	cmp	r3, #0
 800418c:	d017      	beq.n	80041be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800418e:	4b4d      	ldr	r3, [pc, #308]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004196:	2b08      	cmp	r3, #8
 8004198:	d105      	bne.n	80041a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800419a:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d11c      	bne.n	80041ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b2:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041be:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_RCC_OscConfig+0x186>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d001      	beq.n	80041d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e1d3      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d6:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4937      	ldr	r1, [pc, #220]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	e03a      	b.n	8004262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f4:	4b34      	ldr	r3, [pc, #208]	; (80042c8 <HAL_RCC_OscConfig+0x278>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fe f901 	bl	8002400 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004202:	f7fe f8fd 	bl	8002400 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e1b4      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4925      	ldr	r1, [pc, #148]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004230:	4313      	orrs	r3, r2
 8004232:	600b      	str	r3, [r1, #0]
 8004234:	e015      	b.n	8004262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004236:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_RCC_OscConfig+0x278>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fe f8e0 	bl	8002400 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004244:	f7fe f8dc 	bl	8002400 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e193      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d036      	beq.n	80042dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fe f8c0 	bl	8002400 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004284:	f7fe f8bc 	bl	8002400 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e173      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x234>
 80042a2:	e01b      	b.n	80042dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCC_OscConfig+0x27c>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fe f8a9 	bl	8002400 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b0:	e00e      	b.n	80042d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b2:	f7fe f8a5 	bl	8002400 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d907      	bls.n	80042d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e15c      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	42470000 	.word	0x42470000
 80042cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	4b8a      	ldr	r3, [pc, #552]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 80042d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1ea      	bne.n	80042b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8097 	beq.w	8004418 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b83      	ldr	r3, [pc, #524]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	4b7f      	ldr	r3, [pc, #508]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a7e      	ldr	r2, [pc, #504]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
 800430a:	4b7c      	ldr	r3, [pc, #496]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b79      	ldr	r3, [pc, #484]	; (8004500 <HAL_RCC_OscConfig+0x4b0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d118      	bne.n	8004358 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b76      	ldr	r3, [pc, #472]	; (8004500 <HAL_RCC_OscConfig+0x4b0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a75      	ldr	r2, [pc, #468]	; (8004500 <HAL_RCC_OscConfig+0x4b0>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004332:	f7fe f865 	bl	8002400 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433a:	f7fe f861 	bl	8002400 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e118      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b6c      	ldr	r3, [pc, #432]	; (8004500 <HAL_RCC_OscConfig+0x4b0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x31e>
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
 800436c:	e01c      	b.n	80043a8 <HAL_RCC_OscConfig+0x358>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b05      	cmp	r3, #5
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0x340>
 8004376:	4b61      	ldr	r3, [pc, #388]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a60      	ldr	r2, [pc, #384]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	6713      	str	r3, [r2, #112]	; 0x70
 8004382:	4b5e      	ldr	r3, [pc, #376]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4a5d      	ldr	r2, [pc, #372]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6713      	str	r3, [r2, #112]	; 0x70
 800438e:	e00b      	b.n	80043a8 <HAL_RCC_OscConfig+0x358>
 8004390:	4b5a      	ldr	r3, [pc, #360]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4a59      	ldr	r2, [pc, #356]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
 800439c:	4b57      	ldr	r3, [pc, #348]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a56      	ldr	r2, [pc, #344]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	f023 0304 	bic.w	r3, r3, #4
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fe f826 	bl	8002400 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fe f822 	bl	8002400 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e0d7      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	4b4b      	ldr	r3, [pc, #300]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ee      	beq.n	80043b8 <HAL_RCC_OscConfig+0x368>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fe f810 	bl	8002400 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fe f80c 	bl	8002400 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0c1      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fa:	4b40      	ldr	r3, [pc, #256]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ee      	bne.n	80043e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440c:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	4a3a      	ldr	r2, [pc, #232]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80ad 	beq.w	800457c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004422:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b08      	cmp	r3, #8
 800442c:	d060      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d145      	bne.n	80044c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004436:	4b33      	ldr	r3, [pc, #204]	; (8004504 <HAL_RCC_OscConfig+0x4b4>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd ffe0 	bl	8002400 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd ffdc 	bl	8002400 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e093      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	3b01      	subs	r3, #1
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	491b      	ldr	r1, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <HAL_RCC_OscConfig+0x4b4>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fd ffb1 	bl	8002400 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fd ffad 	bl	8002400 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e064      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x452>
 80044c0:	e05c      	b.n	800457c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <HAL_RCC_OscConfig+0x4b4>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fd ff9a 	bl	8002400 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fd ff96 	bl	8002400 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e04d      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x480>
 80044ee:	e045      	b.n	800457c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e040      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
 80044fc:	40023800 	.word	0x40023800
 8004500:	40007000 	.word	0x40007000
 8004504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004508:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <HAL_RCC_OscConfig+0x538>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d030      	beq.n	8004578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d129      	bne.n	8004578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d122      	bne.n	8004578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800453e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004540:	4293      	cmp	r3, r2
 8004542:	d119      	bne.n	8004578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	3b01      	subs	r3, #1
 8004552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d10f      	bne.n	8004578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d107      	bne.n	8004578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800

0800458c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e041      	b.n	8004622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd fd50 	bl	8002058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f000 fa80 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d001      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e04e      	b.n	80046e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d022      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466e:	d01d      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <HAL_TIM_Base_Start_IT+0xd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_TIM_Base_Start_IT+0xd4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a19      	ldr	r2, [pc, #100]	; (8004704 <HAL_TIM_Base_Start_IT+0xd8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x80>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_TIM_Base_Start_IT+0xdc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d111      	bne.n	80046d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d010      	beq.n	80046e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	e007      	b.n	80046e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40000800 	.word	0x40000800
 80046fc:	40000c00 	.word	0x40000c00
 8004700:	40010400 	.word	0x40010400
 8004704:	40014000 	.word	0x40014000
 8004708:	40001800 	.word	0x40001800

0800470c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e041      	b.n	80047a2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f839 	bl	80047aa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f000 f9c0 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d122      	bne.n	800481a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d11b      	bne.n	800481a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f06f 0202 	mvn.w	r2, #2
 80047ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f947 	bl	8004a94 <HAL_TIM_IC_CaptureCallback>
 8004806:	e005      	b.n	8004814 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f939 	bl	8004a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f94a 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b04      	cmp	r3, #4
 8004826:	d122      	bne.n	800486e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b04      	cmp	r3, #4
 8004834:	d11b      	bne.n	800486e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f06f 0204 	mvn.w	r2, #4
 800483e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f91d 	bl	8004a94 <HAL_TIM_IC_CaptureCallback>
 800485a:	e005      	b.n	8004868 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f90f 	bl	8004a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f920 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b08      	cmp	r3, #8
 800487a:	d122      	bne.n	80048c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b08      	cmp	r3, #8
 8004888:	d11b      	bne.n	80048c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f06f 0208 	mvn.w	r2, #8
 8004892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2204      	movs	r2, #4
 8004898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f8f3 	bl	8004a94 <HAL_TIM_IC_CaptureCallback>
 80048ae:	e005      	b.n	80048bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f8e5 	bl	8004a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8f6 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d122      	bne.n	8004916 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d11b      	bne.n	8004916 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f06f 0210 	mvn.w	r2, #16
 80048e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2208      	movs	r2, #8
 80048ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8c9 	bl	8004a94 <HAL_TIM_IC_CaptureCallback>
 8004902:	e005      	b.n	8004910 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f8bb 	bl	8004a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8cc 	bl	8004aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10e      	bne.n	8004942 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d107      	bne.n	8004942 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0201 	mvn.w	r2, #1
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fc fda3 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	2b80      	cmp	r3, #128	; 0x80
 800494e:	d10e      	bne.n	800496e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d107      	bne.n	800496e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb0b 	bl	8004f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d10e      	bne.n	800499a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d107      	bne.n	800499a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f891 	bl	8004abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d10e      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d107      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f06f 0220 	mvn.w	r2, #32
 80049be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fad5 	bl	8004f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_OC_ConfigChannel+0x1a>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e046      	b.n	8004a78 <HAL_TIM_OC_ConfigChannel+0xa8>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	d839      	bhi.n	8004a6c <HAL_TIM_OC_ConfigChannel+0x9c>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <HAL_TIM_OC_ConfigChannel+0x30>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a6d 	.word	0x08004a6d
 8004a08:	08004a6d 	.word	0x08004a6d
 8004a0c:	08004a6d 	.word	0x08004a6d
 8004a10:	08004a43 	.word	0x08004a43
 8004a14:	08004a6d 	.word	0x08004a6d
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	08004a6d 	.word	0x08004a6d
 8004a20:	08004a51 	.word	0x08004a51
 8004a24:	08004a6d 	.word	0x08004a6d
 8004a28:	08004a6d 	.word	0x08004a6d
 8004a2c:	08004a6d 	.word	0x08004a6d
 8004a30:	08004a5f 	.word	0x08004a5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f8e8 	bl	8004c10 <TIM_OC1_SetConfig>
      break;
 8004a40:	e015      	b.n	8004a6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f951 	bl	8004cf0 <TIM_OC2_SetConfig>
      break;
 8004a4e:	e00e      	b.n	8004a6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f9c0 	bl	8004ddc <TIM_OC3_SetConfig>
      break;
 8004a5c:	e007      	b.n	8004a6e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fa2d 	bl	8004ec4 <TIM_OC4_SetConfig>
      break;
 8004a6a:	e000      	b.n	8004a6e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004a6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a40      	ldr	r2, [pc, #256]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d013      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d00f      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a3d      	ldr	r2, [pc, #244]	; (8004be8 <TIM_Base_SetConfig+0x118>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3c      	ldr	r2, [pc, #240]	; (8004bec <TIM_Base_SetConfig+0x11c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3b      	ldr	r2, [pc, #236]	; (8004bf0 <TIM_Base_SetConfig+0x120>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3a      	ldr	r2, [pc, #232]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d108      	bne.n	8004b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d02b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d027      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a2c      	ldr	r2, [pc, #176]	; (8004be8 <TIM_Base_SetConfig+0x118>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d023      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2b      	ldr	r2, [pc, #172]	; (8004bec <TIM_Base_SetConfig+0x11c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01f      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <TIM_Base_SetConfig+0x120>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a29      	ldr	r2, [pc, #164]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d017      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <TIM_Base_SetConfig+0x128>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <TIM_Base_SetConfig+0x12c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00f      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a26      	ldr	r2, [pc, #152]	; (8004c00 <TIM_Base_SetConfig+0x130>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <TIM_Base_SetConfig+0x134>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <TIM_Base_SetConfig+0x138>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a23      	ldr	r2, [pc, #140]	; (8004c0c <TIM_Base_SetConfig+0x13c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d108      	bne.n	8004b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <TIM_Base_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_Base_SetConfig+0xf8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <TIM_Base_SetConfig+0x124>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d103      	bne.n	8004bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	615a      	str	r2, [r3, #20]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40010400 	.word	0x40010400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40001800 	.word	0x40001800
 8004c08:	40001c00 	.word	0x40001c00
 8004c0c:	40002000 	.word	0x40002000

08004c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f023 0201 	bic.w	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0303 	bic.w	r3, r3, #3
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 0302 	bic.w	r3, r3, #2
 8004c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a20      	ldr	r2, [pc, #128]	; (8004ce8 <TIM_OC1_SetConfig+0xd8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_OC1_SetConfig+0x64>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <TIM_OC1_SetConfig+0xdc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d10c      	bne.n	8004c8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0308 	bic.w	r3, r3, #8
 8004c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f023 0304 	bic.w	r3, r3, #4
 8004c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <TIM_OC1_SetConfig+0xd8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_OC1_SetConfig+0x8e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <TIM_OC1_SetConfig+0xdc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d111      	bne.n	8004cc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	621a      	str	r2, [r3, #32]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40010400 	.word	0x40010400

08004cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0210 	bic.w	r2, r3, #16
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0320 	bic.w	r3, r3, #32
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <TIM_OC2_SetConfig+0xe4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC2_SetConfig+0x68>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a21      	ldr	r2, [pc, #132]	; (8004dd8 <TIM_OC2_SetConfig+0xe8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d10d      	bne.n	8004d74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a17      	ldr	r2, [pc, #92]	; (8004dd4 <TIM_OC2_SetConfig+0xe4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <TIM_OC2_SetConfig+0x94>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <TIM_OC2_SetConfig+0xe8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d113      	bne.n	8004dac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40010400 	.word	0x40010400

08004ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a21      	ldr	r2, [pc, #132]	; (8004ebc <TIM_OC3_SetConfig+0xe0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_OC3_SetConfig+0x66>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a20      	ldr	r2, [pc, #128]	; (8004ec0 <TIM_OC3_SetConfig+0xe4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10d      	bne.n	8004e5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <TIM_OC3_SetConfig+0xe0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_OC3_SetConfig+0x92>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <TIM_OC3_SetConfig+0xe4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d113      	bne.n	8004e96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40010400 	.word	0x40010400

08004ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	031b      	lsls	r3, r3, #12
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a12      	ldr	r2, [pc, #72]	; (8004f68 <TIM_OC4_SetConfig+0xa4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC4_SetConfig+0x68>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <TIM_OC4_SetConfig+0xa8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d109      	bne.n	8004f40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40010400 	.word	0x40010400

08004f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e03f      	b.n	800502a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fd f872 	bl	80020a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2224      	movs	r2, #36	; 0x24
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fc1b 	bl	8005818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695a      	ldr	r2, [r3, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b08a      	sub	sp, #40	; 0x28
 8005036:	af02      	add	r7, sp, #8
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b20      	cmp	r3, #32
 8005050:	d17c      	bne.n	800514c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_UART_Transmit+0x2c>
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e075      	b.n	800514e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UART_Transmit+0x3e>
 800506c:	2302      	movs	r3, #2
 800506e:	e06e      	b.n	800514e <HAL_UART_Transmit+0x11c>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2221      	movs	r2, #33	; 0x21
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005086:	f7fd f9bb 	bl	8002400 <HAL_GetTick>
 800508a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a0:	d108      	bne.n	80050b4 <HAL_UART_Transmit+0x82>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e003      	b.n	80050bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050c4:	e02a      	b.n	800511c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2180      	movs	r1, #128	; 0x80
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fa17 	bl	8005504 <UART_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e036      	b.n	800514e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	3302      	adds	r3, #2
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	e007      	b.n	800510e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3301      	adds	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1cf      	bne.n	80050c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	2140      	movs	r1, #64	; 0x40
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f9e7 	bl	8005504 <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e006      	b.n	800514e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_UART_IRQHandler+0x52>
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 faa1 	bl	80056ea <UART_Receive_IT>
      return;
 80051a8:	e17c      	b.n	80054a4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80b1 	beq.w	8005314 <HAL_UART_IRQHandler+0x1bc>
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d105      	bne.n	80051c8 <HAL_UART_IRQHandler+0x70>
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80a6 	beq.w	8005314 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_UART_IRQHandler+0x90>
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	f043 0201 	orr.w	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_UART_IRQHandler+0xb0>
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	f043 0202 	orr.w	r2, r3, #2
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_UART_IRQHandler+0xd0>
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	f043 0204 	orr.w	r2, r3, #4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00f      	beq.n	8005252 <HAL_UART_IRQHandler+0xfa>
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d104      	bne.n	8005246 <HAL_UART_IRQHandler+0xee>
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f043 0208 	orr.w	r2, r3, #8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 811f 	beq.w	800549a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <HAL_UART_IRQHandler+0x11e>
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa3a 	bl	80056ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <HAL_UART_IRQHandler+0x146>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d031      	beq.n	8005302 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f97a 	bl	8005598 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b40      	cmp	r3, #64	; 0x40
 80052b0:	d123      	bne.n	80052fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d013      	beq.n	80052f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	4a77      	ldr	r2, [pc, #476]	; (80054ac <HAL_UART_IRQHandler+0x354>)
 80052d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fd ff92 	bl	8003200 <HAL_DMA_Abort_IT>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d016      	beq.n	8005310 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052ec:	4610      	mov	r0, r2
 80052ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f0:	e00e      	b.n	8005310 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f8f0 	bl	80054d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	e00a      	b.n	8005310 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f8ec 	bl	80054d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	e006      	b.n	8005310 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8e8 	bl	80054d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800530e:	e0c4      	b.n	800549a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	bf00      	nop
    return;
 8005312:	e0c2      	b.n	800549a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	2b01      	cmp	r3, #1
 800531a:	f040 80a2 	bne.w	8005462 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 809c 	beq.w	8005462 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8096 	beq.w	8005462 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d14f      	bne.n	80053fa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005364:	8a3b      	ldrh	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8099 	beq.w	800549e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005370:	8a3a      	ldrh	r2, [r7, #16]
 8005372:	429a      	cmp	r2, r3
 8005374:	f080 8093 	bcs.w	800549e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8a3a      	ldrh	r2, [r7, #16]
 800537c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005388:	d02b      	beq.n	80053e2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005398:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0210 	bic.w	r2, r2, #16
 80053d6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fd fe9f 	bl	8003120 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f87a 	bl	80054ec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053f8:	e051      	b.n	800549e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005402:	b29b      	uxth	r3, r3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d047      	beq.n	80054a2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005412:	8a7b      	ldrh	r3, [r7, #18]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d044      	beq.n	80054a2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005426:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0210 	bic.w	r2, r2, #16
 8005454:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005456:	8a7b      	ldrh	r3, [r7, #18]
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f846 	bl	80054ec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005460:	e01f      	b.n	80054a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_UART_IRQHandler+0x326>
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8cf 	bl	800561a <UART_Transmit_IT>
    return;
 800547c:	e012      	b.n	80054a4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <HAL_UART_IRQHandler+0x34c>
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f911 	bl	80056ba <UART_EndTransmit_IT>
    return;
 8005498:	e004      	b.n	80054a4 <HAL_UART_IRQHandler+0x34c>
    return;
 800549a:	bf00      	nop
 800549c:	e002      	b.n	80054a4 <HAL_UART_IRQHandler+0x34c>
      return;
 800549e:	bf00      	nop
 80054a0:	e000      	b.n	80054a4 <HAL_UART_IRQHandler+0x34c>
      return;
 80054a2:	bf00      	nop
  }
}
 80054a4:	3728      	adds	r7, #40	; 0x28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	080055f3 	.word	0x080055f3

080054b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	4613      	mov	r3, r2
 8005512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005514:	e02c      	b.n	8005570 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d028      	beq.n	8005570 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <UART_WaitOnFlagUntilTimeout+0x30>
 8005524:	f7fc ff6c 	bl	8002400 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	429a      	cmp	r2, r3
 8005532:	d21d      	bcs.n	8005570 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005542:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e00f      	b.n	8005590 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	429a      	cmp	r2, r3
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	429a      	cmp	r2, r3
 800558c:	d0c3      	beq.n	8005516 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d107      	bne.n	80055d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0210 	bic.w	r2, r2, #16
 80055d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff ff63 	bl	80054d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b21      	cmp	r3, #33	; 0x21
 800562c:	d13e      	bne.n	80056ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005636:	d114      	bne.n	8005662 <UART_Transmit_IT+0x48>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d110      	bne.n	8005662 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005654:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	1c9a      	adds	r2, r3, #2
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	621a      	str	r2, [r3, #32]
 8005660:	e008      	b.n	8005674 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	1c59      	adds	r1, r3, #1
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6211      	str	r1, [r2, #32]
 800566c:	781a      	ldrb	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29b      	uxth	r3, r3
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	4619      	mov	r1, r3
 8005682:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10f      	bne.n	80056a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005696:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fee8 	bl	80054b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b22      	cmp	r3, #34	; 0x22
 80056fc:	f040 8087 	bne.w	800580e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d117      	bne.n	800573a <UART_Receive_IT+0x50>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d113      	bne.n	800573a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005728:	b29a      	uxth	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	1c9a      	adds	r2, r3, #2
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	629a      	str	r2, [r3, #40]	; 0x28
 8005738:	e026      	b.n	8005788 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d007      	beq.n	800575e <UART_Receive_IT+0x74>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <UART_Receive_IT+0x82>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e008      	b.n	800577e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29b      	uxth	r3, r3
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4619      	mov	r1, r3
 8005796:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005798:	2b00      	cmp	r3, #0
 800579a:	d136      	bne.n	800580a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0220 	bic.w	r2, r2, #32
 80057aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0201 	bic.w	r2, r2, #1
 80057ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d10e      	bne.n	80057fa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0210 	bic.w	r2, r2, #16
 80057ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fe7a 	bl	80054ec <HAL_UARTEx_RxEventCallback>
 80057f8:	e002      	b.n	8005800 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fe62 	bl	80054c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	e002      	b.n	8005810 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e000      	b.n	8005810 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	b09f      	sub	sp, #124	; 0x7c
 800581e:	af00      	add	r7, sp, #0
 8005820:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800582c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582e:	68d9      	ldr	r1, [r3, #12]
 8005830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	ea40 0301 	orr.w	r3, r0, r1
 8005838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800583a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	431a      	orrs	r2, r3
 8005844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	431a      	orrs	r2, r3
 800584a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	4313      	orrs	r3, r2
 8005850:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800585c:	f021 010c 	bic.w	r1, r1, #12
 8005860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005866:	430b      	orrs	r3, r1
 8005868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800586a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005876:	6999      	ldr	r1, [r3, #24]
 8005878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	ea40 0301 	orr.w	r3, r0, r1
 8005880:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4bc5      	ldr	r3, [pc, #788]	; (8005b9c <UART_SetConfig+0x384>)
 8005888:	429a      	cmp	r2, r3
 800588a:	d004      	beq.n	8005896 <UART_SetConfig+0x7e>
 800588c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4bc3      	ldr	r3, [pc, #780]	; (8005ba0 <UART_SetConfig+0x388>)
 8005892:	429a      	cmp	r2, r3
 8005894:	d103      	bne.n	800589e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005896:	f7fe fa15 	bl	8003cc4 <HAL_RCC_GetPCLK2Freq>
 800589a:	6778      	str	r0, [r7, #116]	; 0x74
 800589c:	e002      	b.n	80058a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800589e:	f7fe f9fd 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 80058a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ac:	f040 80b6 	bne.w	8005a1c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b2:	461c      	mov	r4, r3
 80058b4:	f04f 0500 	mov.w	r5, #0
 80058b8:	4622      	mov	r2, r4
 80058ba:	462b      	mov	r3, r5
 80058bc:	1891      	adds	r1, r2, r2
 80058be:	6439      	str	r1, [r7, #64]	; 0x40
 80058c0:	415b      	adcs	r3, r3
 80058c2:	647b      	str	r3, [r7, #68]	; 0x44
 80058c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058c8:	1912      	adds	r2, r2, r4
 80058ca:	eb45 0303 	adc.w	r3, r5, r3
 80058ce:	f04f 0000 	mov.w	r0, #0
 80058d2:	f04f 0100 	mov.w	r1, #0
 80058d6:	00d9      	lsls	r1, r3, #3
 80058d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058dc:	00d0      	lsls	r0, r2, #3
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	1911      	adds	r1, r2, r4
 80058e4:	6639      	str	r1, [r7, #96]	; 0x60
 80058e6:	416b      	adcs	r3, r5
 80058e8:	667b      	str	r3, [r7, #100]	; 0x64
 80058ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	1891      	adds	r1, r2, r2
 80058f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058f8:	415b      	adcs	r3, r3
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005900:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005904:	f7fb f998 	bl	8000c38 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4ba5      	ldr	r3, [pc, #660]	; (8005ba4 <UART_SetConfig+0x38c>)
 800590e:	fba3 2302 	umull	r2, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	011e      	lsls	r6, r3, #4
 8005916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005918:	461c      	mov	r4, r3
 800591a:	f04f 0500 	mov.w	r5, #0
 800591e:	4622      	mov	r2, r4
 8005920:	462b      	mov	r3, r5
 8005922:	1891      	adds	r1, r2, r2
 8005924:	6339      	str	r1, [r7, #48]	; 0x30
 8005926:	415b      	adcs	r3, r3
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800592e:	1912      	adds	r2, r2, r4
 8005930:	eb45 0303 	adc.w	r3, r5, r3
 8005934:	f04f 0000 	mov.w	r0, #0
 8005938:	f04f 0100 	mov.w	r1, #0
 800593c:	00d9      	lsls	r1, r3, #3
 800593e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005942:	00d0      	lsls	r0, r2, #3
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	1911      	adds	r1, r2, r4
 800594a:	65b9      	str	r1, [r7, #88]	; 0x58
 800594c:	416b      	adcs	r3, r5
 800594e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	461a      	mov	r2, r3
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	1891      	adds	r1, r2, r2
 800595c:	62b9      	str	r1, [r7, #40]	; 0x28
 800595e:	415b      	adcs	r3, r3
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005966:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800596a:	f7fb f965 	bl	8000c38 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4b8c      	ldr	r3, [pc, #560]	; (8005ba4 <UART_SetConfig+0x38c>)
 8005974:	fba3 1302 	umull	r1, r3, r3, r2
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	2164      	movs	r1, #100	; 0x64
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	3332      	adds	r3, #50	; 0x32
 8005986:	4a87      	ldr	r2, [pc, #540]	; (8005ba4 <UART_SetConfig+0x38c>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005994:	441e      	add	r6, r3
 8005996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005998:	4618      	mov	r0, r3
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	1894      	adds	r4, r2, r2
 80059a4:	623c      	str	r4, [r7, #32]
 80059a6:	415b      	adcs	r3, r3
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
 80059aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ae:	1812      	adds	r2, r2, r0
 80059b0:	eb41 0303 	adc.w	r3, r1, r3
 80059b4:	f04f 0400 	mov.w	r4, #0
 80059b8:	f04f 0500 	mov.w	r5, #0
 80059bc:	00dd      	lsls	r5, r3, #3
 80059be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059c2:	00d4      	lsls	r4, r2, #3
 80059c4:	4622      	mov	r2, r4
 80059c6:	462b      	mov	r3, r5
 80059c8:	1814      	adds	r4, r2, r0
 80059ca:	653c      	str	r4, [r7, #80]	; 0x50
 80059cc:	414b      	adcs	r3, r1
 80059ce:	657b      	str	r3, [r7, #84]	; 0x54
 80059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	461a      	mov	r2, r3
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	1891      	adds	r1, r2, r2
 80059dc:	61b9      	str	r1, [r7, #24]
 80059de:	415b      	adcs	r3, r3
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059ea:	f7fb f925 	bl	8000c38 <__aeabi_uldivmod>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4b6c      	ldr	r3, [pc, #432]	; (8005ba4 <UART_SetConfig+0x38c>)
 80059f4:	fba3 1302 	umull	r1, r3, r3, r2
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	2164      	movs	r1, #100	; 0x64
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	3332      	adds	r3, #50	; 0x32
 8005a06:	4a67      	ldr	r2, [pc, #412]	; (8005ba4 <UART_SetConfig+0x38c>)
 8005a08:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	f003 0207 	and.w	r2, r3, #7
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4432      	add	r2, r6
 8005a18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a1a:	e0b9      	b.n	8005b90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a1e:	461c      	mov	r4, r3
 8005a20:	f04f 0500 	mov.w	r5, #0
 8005a24:	4622      	mov	r2, r4
 8005a26:	462b      	mov	r3, r5
 8005a28:	1891      	adds	r1, r2, r2
 8005a2a:	6139      	str	r1, [r7, #16]
 8005a2c:	415b      	adcs	r3, r3
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a34:	1912      	adds	r2, r2, r4
 8005a36:	eb45 0303 	adc.w	r3, r5, r3
 8005a3a:	f04f 0000 	mov.w	r0, #0
 8005a3e:	f04f 0100 	mov.w	r1, #0
 8005a42:	00d9      	lsls	r1, r3, #3
 8005a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a48:	00d0      	lsls	r0, r2, #3
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	eb12 0804 	adds.w	r8, r2, r4
 8005a52:	eb43 0905 	adc.w	r9, r3, r5
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f04f 0100 	mov.w	r1, #0
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	008b      	lsls	r3, r1, #2
 8005a6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a6e:	0082      	lsls	r2, r0, #2
 8005a70:	4640      	mov	r0, r8
 8005a72:	4649      	mov	r1, r9
 8005a74:	f7fb f8e0 	bl	8000c38 <__aeabi_uldivmod>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4b49      	ldr	r3, [pc, #292]	; (8005ba4 <UART_SetConfig+0x38c>)
 8005a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	011e      	lsls	r6, r3, #4
 8005a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	1894      	adds	r4, r2, r2
 8005a94:	60bc      	str	r4, [r7, #8]
 8005a96:	415b      	adcs	r3, r3
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a9e:	1812      	adds	r2, r2, r0
 8005aa0:	eb41 0303 	adc.w	r3, r1, r3
 8005aa4:	f04f 0400 	mov.w	r4, #0
 8005aa8:	f04f 0500 	mov.w	r5, #0
 8005aac:	00dd      	lsls	r5, r3, #3
 8005aae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ab2:	00d4      	lsls	r4, r2, #3
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	1814      	adds	r4, r2, r0
 8005aba:	64bc      	str	r4, [r7, #72]	; 0x48
 8005abc:	414b      	adcs	r3, r1
 8005abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	008b      	lsls	r3, r1, #2
 8005ad4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ad8:	0082      	lsls	r2, r0, #2
 8005ada:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ade:	f7fb f8ab 	bl	8000c38 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4b2f      	ldr	r3, [pc, #188]	; (8005ba4 <UART_SetConfig+0x38c>)
 8005ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	2164      	movs	r1, #100	; 0x64
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	3332      	adds	r3, #50	; 0x32
 8005afa:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <UART_SetConfig+0x38c>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b06:	441e      	add	r6, r3
 8005b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f04f 0100 	mov.w	r1, #0
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	1894      	adds	r4, r2, r2
 8005b16:	603c      	str	r4, [r7, #0]
 8005b18:	415b      	adcs	r3, r3
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b20:	1812      	adds	r2, r2, r0
 8005b22:	eb41 0303 	adc.w	r3, r1, r3
 8005b26:	f04f 0400 	mov.w	r4, #0
 8005b2a:	f04f 0500 	mov.w	r5, #0
 8005b2e:	00dd      	lsls	r5, r3, #3
 8005b30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b34:	00d4      	lsls	r4, r2, #3
 8005b36:	4622      	mov	r2, r4
 8005b38:	462b      	mov	r3, r5
 8005b3a:	eb12 0a00 	adds.w	sl, r2, r0
 8005b3e:	eb43 0b01 	adc.w	fp, r3, r1
 8005b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f04f 0100 	mov.w	r1, #0
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	008b      	lsls	r3, r1, #2
 8005b56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b5a:	0082      	lsls	r2, r0, #2
 8005b5c:	4650      	mov	r0, sl
 8005b5e:	4659      	mov	r1, fp
 8005b60:	f7fb f86a 	bl	8000c38 <__aeabi_uldivmod>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <UART_SetConfig+0x38c>)
 8005b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	2164      	movs	r1, #100	; 0x64
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	3332      	adds	r3, #50	; 0x32
 8005b7c:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <UART_SetConfig+0x38c>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	f003 020f 	and.w	r2, r3, #15
 8005b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4432      	add	r2, r6
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	377c      	adds	r7, #124	; 0x7c
 8005b94:	46bd      	mov	sp, r7
 8005b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40011000 	.word	0x40011000
 8005ba0:	40011400 	.word	0x40011400
 8005ba4:	51eb851f 	.word	0x51eb851f

08005ba8 <maf1>:
// This file contains functions that are associated with moving average filter


float maf1(float nextSample) //float t is not supposed to be included in stm
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	ed87 0a01 	vstr	s0, [r7, #4]
  static float sum;
  static int pos;
  int len = 20;
 8005bb2:	2314      	movs	r3, #20
 8005bb4:	60fb      	str	r3, [r7, #12]
  static float sampleArr[20] = {0}; // tried parsing len instead of 200 but didnt work

  sum = sum - sampleArr[pos] + nextSample;
 8005bb6:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <maf1+0x84>)
 8005bb8:	ed93 7a00 	vldr	s14, [r3]
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <maf1+0x88>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <maf1+0x8c>)
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	edd3 7a00 	vldr	s15, [r3]
 8005bca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <maf1+0x84>)
 8005bd8:	edc3 7a00 	vstr	s15, [r3]
  sampleArr[pos] = nextSample;
 8005bdc:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <maf1+0x88>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <maf1+0x8c>)
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	601a      	str	r2, [r3, #0]
  pos++;
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <maf1+0x88>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	4a0f      	ldr	r2, [pc, #60]	; (8005c30 <maf1+0x88>)
 8005bf2:	6013      	str	r3, [r2, #0]
  if(pos>=len)
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <maf1+0x88>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	dc02      	bgt.n	8005c04 <maf1+0x5c>
  {
      pos = 0; 
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <maf1+0x88>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
  }

  return sum / (float) len; 
 8005c04:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <maf1+0x84>)
 8005c06:	ed93 7a00 	vldr	s14, [r3]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005c18:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	2000014c 	.word	0x2000014c
 8005c30:	20000150 	.word	0x20000150
 8005c34:	20000154 	.word	0x20000154

08005c38 <maf2>:

float maf2(float nextSample) //float t is not supposed to be included in stm
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float sum;
  static int pos;
  int len = 20;
 8005c42:	2314      	movs	r3, #20
 8005c44:	60fb      	str	r3, [r7, #12]
  static float sampleArr[20] = {0}; // tried parsing len instead of 200 but didnt work

  sum = sum - sampleArr[pos] + nextSample;
 8005c46:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <maf2+0x84>)
 8005c48:	ed93 7a00 	vldr	s14, [r3]
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <maf2+0x88>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <maf2+0x8c>)
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	edd3 7a00 	vldr	s15, [r3]
 8005c5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <maf2+0x84>)
 8005c68:	edc3 7a00 	vstr	s15, [r3]
  sampleArr[pos] = nextSample;
 8005c6c:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <maf2+0x88>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <maf2+0x8c>)
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]
  pos++;
 8005c7a:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <maf2+0x88>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	4a0f      	ldr	r2, [pc, #60]	; (8005cc0 <maf2+0x88>)
 8005c82:	6013      	str	r3, [r2, #0]
  if(pos>=len)
 8005c84:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <maf2+0x88>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	dc02      	bgt.n	8005c94 <maf2+0x5c>
  {
      pos = 0; 
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <maf2+0x88>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
  }
  return sum / (float) len;
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <maf2+0x84>)
 8005c96:	ed93 7a00 	vldr	s14, [r3]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ca8:	eef0 7a66 	vmov.f32	s15, s13
}
 8005cac:	eeb0 0a67 	vmov.f32	s0, s15
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	200001a4 	.word	0x200001a4
 8005cc0:	200001a8 	.word	0x200001a8
 8005cc4:	200001ac 	.word	0x200001ac

08005cc8 <abc_to_alpha>:
// this file contains all the functions of PLL.
#include <math.h>
#include "INCLUDES.c"

float abc_to_alpha(float a, float b, float c)
{
 8005cc8:	b5b0      	push	{r4, r5, r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	ed87 0a03 	vstr	s0, [r7, #12]
 8005cd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8005cd6:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;
    // alpha = (float)2 * (float)a / ((float) 3); // - 0.3333333 * b - 0.3333333 * c;
    alpha =  0.66666667 * a - 0.3333333 * b - 0.3333333 * c;
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7fa fc54 	bl	8000588 <__aeabi_f2d>
 8005ce0:	a31d      	add	r3, pc, #116	; (adr r3, 8005d58 <abc_to_alpha+0x90>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f7fa fca7 	bl	8000638 <__aeabi_dmul>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4614      	mov	r4, r2
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	68b8      	ldr	r0, [r7, #8]
 8005cf4:	f7fa fc48 	bl	8000588 <__aeabi_f2d>
 8005cf8:	a319      	add	r3, pc, #100	; (adr r3, 8005d60 <abc_to_alpha+0x98>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fc9b 	bl	8000638 <__aeabi_dmul>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4620      	mov	r0, r4
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f7fa fadd 	bl	80002c8 <__aeabi_dsub>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4614      	mov	r4, r2
 8005d14:	461d      	mov	r5, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fa fc36 	bl	8000588 <__aeabi_f2d>
 8005d1c:	a310      	add	r3, pc, #64	; (adr r3, 8005d60 <abc_to_alpha+0x98>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa fc89 	bl	8000638 <__aeabi_dmul>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7fa facb 	bl	80002c8 <__aeabi_dsub>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f7fa ff2d 	bl	8000b98 <__aeabi_d2f>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	617b      	str	r3, [r7, #20]
    // alpha = 2.0/3.0 * a - 1.0/3.0 * b - 1.0/3.0 * c;

    return alpha;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	ee07 3a90 	vmov	s15, r3
    // return a;
}
 8005d48:	eeb0 0a67 	vmov.f32	s0, s15
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bdb0      	pop	{r4, r5, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	f3af 8000 	nop.w
 8005d58:	571f7693 	.word	0x571f7693
 8005d5c:	3fe55555 	.word	0x3fe55555
 8005d60:	318abc87 	.word	0x318abc87
 8005d64:	3fd55555 	.word	0x3fd55555

08005d68 <abc_to_beta>:

float abc_to_beta(float a, float b, float c)
{
 8005d68:	b5b0      	push	{r4, r5, r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d72:	edc7 0a02 	vstr	s1, [r7, #8]
 8005d76:	ed87 1a01 	vstr	s2, [r7, #4]
    float beta;


    // beta = 0.5773503*b - 0.5773503*c;
    beta = 2.0/3.0*((sqrt(3.0)/2.0)*b - (sqrt(3.0)/2.0)*c);
 8005d7a:	68b8      	ldr	r0, [r7, #8]
 8005d7c:	f7fa fc04 	bl	8000588 <__aeabi_f2d>
 8005d80:	a317      	add	r3, pc, #92	; (adr r3, 8005de0 <abc_to_beta+0x78>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fc57 	bl	8000638 <__aeabi_dmul>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4614      	mov	r4, r2
 8005d90:	461d      	mov	r5, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fa fbf8 	bl	8000588 <__aeabi_f2d>
 8005d98:	a311      	add	r3, pc, #68	; (adr r3, 8005de0 <abc_to_beta+0x78>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fc4b 	bl	8000638 <__aeabi_dmul>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7fa fa8d 	bl	80002c8 <__aeabi_dsub>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	a30c      	add	r3, pc, #48	; (adr r3, 8005de8 <abc_to_beta+0x80>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fc3c 	bl	8000638 <__aeabi_dmul>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f7fa fee6 	bl	8000b98 <__aeabi_d2f>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	617b      	str	r3, [r7, #20]

    return beta;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	ee07 3a90 	vmov	s15, r3
}
 8005dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bdb0      	pop	{r4, r5, r7, pc}
 8005de0:	e8584caa 	.word	0xe8584caa
 8005de4:	3febb67a 	.word	0x3febb67a
 8005de8:	55555555 	.word	0x55555555
 8005dec:	3fe55555 	.word	0x3fe55555

08005df0 <alphabeta_to_d>:

float alphabeta_to_d(float alpha, float beta, float angle)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	ed2d 8b02 	vpush	{d8}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	ed87 0a03 	vstr	s0, [r7, #12]
 8005dfe:	edc7 0a02 	vstr	s1, [r7, #8]
 8005e02:	ed87 1a01 	vstr	s2, [r7, #4]
    float d;


    d = cosf(angle)*alpha + sinf(angle)*beta;
 8005e06:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e0a:	f001 f84b 	bl	8006ea4 <cosf>
 8005e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8005e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e16:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005e1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e1e:	f001 f881 	bl	8006f24 <sinf>
 8005e22:	eeb0 7a40 	vmov.f32	s14, s0
 8005e26:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005e32:	edc7 7a05 	vstr	s15, [r7, #20]

    return d;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	ee07 3a90 	vmov	s15, r3
}
 8005e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	ecbd 8b02 	vpop	{d8}
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <alphabeta_to_q>:

float alphabeta_to_q(float alpha, float beta, float angle)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	ed2d 8b02 	vpush	{d8}
 8005e50:	b086      	sub	sp, #24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	ed87 0a03 	vstr	s0, [r7, #12]
 8005e58:	edc7 0a02 	vstr	s1, [r7, #8]
 8005e5c:	ed87 1a01 	vstr	s2, [r7, #4]
    float q;


    q = -sinf(angle)*alpha + cosf(angle)*beta;
 8005e60:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e64:	f001 f85e 	bl	8006f24 <sinf>
 8005e68:	eef0 7a40 	vmov.f32	s15, s0
 8005e6c:	eeb1 7a67 	vneg.f32	s14, s15
 8005e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e74:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005e78:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e7c:	f001 f812 	bl	8006ea4 <cosf>
 8005e80:	eeb0 7a40 	vmov.f32	s14, s0
 8005e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005e90:	edc7 7a05 	vstr	s15, [r7, #20]

    return q;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	ee07 3a90 	vmov	s15, r3
}
 8005e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	ecbd 8b02 	vpop	{d8}
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <dq_to_alpha>:

float dq_to_alpha(float d, float q, float angle)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	ed2d 8b02 	vpush	{d8}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	ed87 0a03 	vstr	s0, [r7, #12]
 8005eb6:	edc7 0a02 	vstr	s1, [r7, #8]
 8005eba:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;

    alpha = cosf(angle)*d - sinf(angle)*q;
 8005ebe:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ec2:	f000 ffef 	bl	8006ea4 <cosf>
 8005ec6:	eeb0 7a40 	vmov.f32	s14, s0
 8005eca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ece:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005ed2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ed6:	f001 f825 	bl	8006f24 <sinf>
 8005eda:	eeb0 7a40 	vmov.f32	s14, s0
 8005ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005eea:	edc7 7a05 	vstr	s15, [r7, #20]

    return alpha;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	ee07 3a90 	vmov	s15, r3
}
 8005ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	ecbd 8b02 	vpop	{d8}
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <dq_to_beta>:

float dq_to_beta(float d, float q, float angle)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	ed2d 8b02 	vpush	{d8}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f10:	edc7 0a02 	vstr	s1, [r7, #8]
 8005f14:	ed87 1a01 	vstr	s2, [r7, #4]
    float beta;


    beta = sinf(angle)*d + cosf(angle)*q;
 8005f18:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f1c:	f001 f802 	bl	8006f24 <sinf>
 8005f20:	eeb0 7a40 	vmov.f32	s14, s0
 8005f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f28:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005f2c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f30:	f000 ffb8 	bl	8006ea4 <cosf>
 8005f34:	eeb0 7a40 	vmov.f32	s14, s0
 8005f38:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f40:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005f44:	edc7 7a05 	vstr	s15, [r7, #20]

    return beta;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	ee07 3a90 	vmov	s15, r3
}
 8005f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	ecbd 8b02 	vpop	{d8}
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <cos_grid>:

float cos_grid(float alpha, float beta)
{
 8005f5c:	b5b0      	push	{r4, r5, r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f66:	edc7 0a00 	vstr	s1, [r7]
    float cosGrid;

    cosGrid = alpha/ (sqrt(alpha*alpha + beta*beta));
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fa fb0c 	bl	8000588 <__aeabi_f2d>
 8005f70:	4604      	mov	r4, r0
 8005f72:	460d      	mov	r5, r1
 8005f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f78:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005f7c:	edd7 7a00 	vldr	s15, [r7]
 8005f80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f88:	ee17 0a90 	vmov	r0, s15
 8005f8c:	f7fa fafc 	bl	8000588 <__aeabi_f2d>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	ec43 2b10 	vmov	d0, r2, r3
 8005f98:	f001 f806 	bl	8006fa8 <sqrt>
 8005f9c:	ec53 2b10 	vmov	r2, r3, d0
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	f7fa fc72 	bl	800088c <__aeabi_ddiv>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4610      	mov	r0, r2
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f7fa fdf2 	bl	8000b98 <__aeabi_d2f>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	60fb      	str	r3, [r7, #12]
    

    return cosGrid;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	ee07 3a90 	vmov	s15, r3
}
 8005fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bdb0      	pop	{r4, r5, r7, pc}

08005fc8 <sin_grid>:

float sin_grid(float alpha, float beta)
{
 8005fc8:	b5b0      	push	{r4, r5, r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8005fd2:	edc7 0a00 	vstr	s1, [r7]
    float sinGrid;


    sinGrid = beta/ (sqrt(alpha*alpha + beta*beta));
 8005fd6:	6838      	ldr	r0, [r7, #0]
 8005fd8:	f7fa fad6 	bl	8000588 <__aeabi_f2d>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	460d      	mov	r5, r1
 8005fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fe4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005fe8:	edd7 7a00 	vldr	s15, [r7]
 8005fec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ff4:	ee17 0a90 	vmov	r0, s15
 8005ff8:	f7fa fac6 	bl	8000588 <__aeabi_f2d>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	ec43 2b10 	vmov	d0, r2, r3
 8006004:	f000 ffd0 	bl	8006fa8 <sqrt>
 8006008:	ec53 2b10 	vmov	r2, r3, d0
 800600c:	4620      	mov	r0, r4
 800600e:	4629      	mov	r1, r5
 8006010:	f7fa fc3c 	bl	800088c <__aeabi_ddiv>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4610      	mov	r0, r2
 800601a:	4619      	mov	r1, r3
 800601c:	f7fa fdbc 	bl	8000b98 <__aeabi_d2f>
 8006020:	4603      	mov	r3, r0
 8006022:	60fb      	str	r3, [r7, #12]

    return sinGrid;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	ee07 3a90 	vmov	s15, r3
}
 800602a:	eeb0 0a67 	vmov.f32	s0, s15
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bdb0      	pop	{r4, r5, r7, pc}
 8006034:	0000      	movs	r0, r0
	...

08006038 <pi_regulator>:



float pi_regulator(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
 8006038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800603c:	b08a      	sub	sp, #40	; 0x28
 800603e:	af00      	add	r7, sp, #0
 8006040:	ed87 0a05 	vstr	s0, [r7, #20]
 8006044:	edc7 0a04 	vstr	s1, [r7, #16]
 8006048:	ed87 1a03 	vstr	s2, [r7, #12]
 800604c:	edc7 1a02 	vstr	s3, [r7, #8]
 8006050:	ed87 2a01 	vstr	s4, [r7, #4]
 8006054:	edc7 2a00 	vstr	s5, [r7]
    float anglePll, integral, omega;

    static float phaseError_old, integral_old, angle_old, omega_old;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7fa fa95 	bl	8000588 <__aeabi_f2d>
 800605e:	4604      	mov	r4, r0
 8006060:	460d      	mov	r5, r1
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f7fa fa90 	bl	8000588 <__aeabi_f2d>
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	4b62      	ldr	r3, [pc, #392]	; (80061f8 <pi_regulator+0x1c0>)
 800606e:	f7fa fae3 	bl	8000638 <__aeabi_dmul>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4690      	mov	r8, r2
 8006078:	4699      	mov	r9, r3
 800607a:	4b60      	ldr	r3, [pc, #384]	; (80061fc <pi_regulator+0x1c4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fa fa82 	bl	8000588 <__aeabi_f2d>
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	4b5b      	ldr	r3, [pc, #364]	; (80061f8 <pi_regulator+0x1c0>)
 800608a:	f7fa fad5 	bl	8000638 <__aeabi_dmul>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4640      	mov	r0, r8
 8006094:	4649      	mov	r1, r9
 8006096:	f7fa f919 	bl	80002cc <__adddf3>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa fac9 	bl	8000638 <__aeabi_dmul>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4614      	mov	r4, r2
 80060ac:	461d      	mov	r5, r3
 80060ae:	6838      	ldr	r0, [r7, #0]
 80060b0:	f7fa fa6a 	bl	8000588 <__aeabi_f2d>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4620      	mov	r0, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	f7fa fabc 	bl	8000638 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4614      	mov	r4, r2
 80060c6:	461d      	mov	r5, r3
 80060c8:	4b4d      	ldr	r3, [pc, #308]	; (8006200 <pi_regulator+0x1c8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fa fa5b 	bl	8000588 <__aeabi_f2d>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa f8f7 	bl	80002cc <__adddf3>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	f7fa fd57 	bl	8000b98 <__aeabi_d2f>
 80060ea:	4603      	mov	r3, r0
 80060ec:	623b      	str	r3, [r7, #32]
    omega = phaseError*kp + integral + feedForward; 
 80060ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80060f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80060f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80060fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006102:	ed97 7a04 	vldr	s14, [r7, #16]
 8006106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800610a:	edc7 7a07 	vstr	s15, [r7, #28]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 800610e:	69f8      	ldr	r0, [r7, #28]
 8006110:	f7fa fa3a 	bl	8000588 <__aeabi_f2d>
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <pi_regulator+0x1c0>)
 800611a:	f7fa fa8d 	bl	8000638 <__aeabi_dmul>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4614      	mov	r4, r2
 8006124:	461d      	mov	r5, r3
 8006126:	4b37      	ldr	r3, [pc, #220]	; (8006204 <pi_regulator+0x1cc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f7fa fa2c 	bl	8000588 <__aeabi_f2d>
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <pi_regulator+0x1c0>)
 8006136:	f7fa fa7f 	bl	8000638 <__aeabi_dmul>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4620      	mov	r0, r4
 8006140:	4629      	mov	r1, r5
 8006142:	f7fa f8c3 	bl	80002cc <__adddf3>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4614      	mov	r4, r2
 800614c:	461d      	mov	r5, r3
 800614e:	6838      	ldr	r0, [r7, #0]
 8006150:	f7fa fa1a 	bl	8000588 <__aeabi_f2d>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4620      	mov	r0, r4
 800615a:	4629      	mov	r1, r5
 800615c:	f7fa fa6c 	bl	8000638 <__aeabi_dmul>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4614      	mov	r4, r2
 8006166:	461d      	mov	r5, r3
 8006168:	4b27      	ldr	r3, [pc, #156]	; (8006208 <pi_regulator+0x1d0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fa fa0b 	bl	8000588 <__aeabi_f2d>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	f7fa f8a7 	bl	80002cc <__adddf3>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4610      	mov	r0, r2
 8006184:	4619      	mov	r1, r3
 8006186:	f7fa fd07 	bl	8000b98 <__aeabi_d2f>
 800618a:	4603      	mov	r3, r0
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
    // anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;

    if (anglePll > TWO_PI) {
 800618e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006190:	f7fa f9fa 	bl	8000588 <__aeabi_f2d>
 8006194:	a316      	add	r3, pc, #88	; (adr r3, 80061f0 <pi_regulator+0x1b8>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa fcdd 	bl	8000b58 <__aeabi_dcmpgt>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00f      	beq.n	80061c4 <pi_regulator+0x18c>
    		anglePll = anglePll - TWO_PI;
 80061a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061a6:	f7fa f9ef 	bl	8000588 <__aeabi_f2d>
 80061aa:	a311      	add	r3, pc, #68	; (adr r3, 80061f0 <pi_regulator+0x1b8>)
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f7fa f88a 	bl	80002c8 <__aeabi_dsub>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4610      	mov	r0, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	f7fa fcec 	bl	8000b98 <__aeabi_d2f>
 80061c0:	4603      	mov	r3, r0
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    phaseError_old = phaseError;
 80061c4:	4a0d      	ldr	r2, [pc, #52]	; (80061fc <pi_regulator+0x1c4>)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 80061ca:	4a0d      	ldr	r2, [pc, #52]	; (8006200 <pi_regulator+0x1c8>)
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 80061d0:	4a0d      	ldr	r2, [pc, #52]	; (8006208 <pi_regulator+0x1d0>)
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 80061d6:	4a0b      	ldr	r2, [pc, #44]	; (8006204 <pi_regulator+0x1cc>)
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	6013      	str	r3, [r2, #0]


    return anglePll;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	ee07 3a90 	vmov	s15, r3
}
 80061e2:	eeb0 0a67 	vmov.f32	s0, s15
 80061e6:	3728      	adds	r7, #40	; 0x28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80061ee:	bf00      	nop
 80061f0:	54442c46 	.word	0x54442c46
 80061f4:	401921fb 	.word	0x401921fb
 80061f8:	3fe00000 	.word	0x3fe00000
 80061fc:	200001fc 	.word	0x200001fc
 8006200:	20000200 	.word	0x20000200
 8006204:	20000204 	.word	0x20000204
 8006208:	20000208 	.word	0x20000208
 800620c:	00000000 	.word	0x00000000

08006210 <pi_regulator_comp>:

float pi_regulator_comp(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
 8006210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006214:	b08a      	sub	sp, #40	; 0x28
 8006216:	af00      	add	r7, sp, #0
 8006218:	ed87 0a05 	vstr	s0, [r7, #20]
 800621c:	edc7 0a04 	vstr	s1, [r7, #16]
 8006220:	ed87 1a03 	vstr	s2, [r7, #12]
 8006224:	edc7 1a02 	vstr	s3, [r7, #8]
 8006228:	ed87 2a01 	vstr	s4, [r7, #4]
 800622c:	edc7 2a00 	vstr	s5, [r7]
    float anglePll, integral, omega, anglePllComp;
    static float phaseError_old, integral_old, angle_old, omega_old;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7fa f9a9 	bl	8000588 <__aeabi_f2d>
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f7fa f9a4 	bl	8000588 <__aeabi_f2d>
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	4b6e      	ldr	r3, [pc, #440]	; (8006400 <pi_regulator_comp+0x1f0>)
 8006246:	f7fa f9f7 	bl	8000638 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4690      	mov	r8, r2
 8006250:	4699      	mov	r9, r3
 8006252:	4b6c      	ldr	r3, [pc, #432]	; (8006404 <pi_regulator_comp+0x1f4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa f996 	bl	8000588 <__aeabi_f2d>
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	4b67      	ldr	r3, [pc, #412]	; (8006400 <pi_regulator_comp+0x1f0>)
 8006262:	f7fa f9e9 	bl	8000638 <__aeabi_dmul>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f7fa f82d 	bl	80002cc <__adddf3>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa f9dd 	bl	8000638 <__aeabi_dmul>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4614      	mov	r4, r2
 8006284:	461d      	mov	r5, r3
 8006286:	6838      	ldr	r0, [r7, #0]
 8006288:	f7fa f97e 	bl	8000588 <__aeabi_f2d>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7fa f9d0 	bl	8000638 <__aeabi_dmul>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	4b59      	ldr	r3, [pc, #356]	; (8006408 <pi_regulator_comp+0x1f8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fa f96f 	bl	8000588 <__aeabi_f2d>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7fa f80b 	bl	80002cc <__adddf3>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	f7fa fc6b 	bl	8000b98 <__aeabi_d2f>
 80062c2:	4603      	mov	r3, r0
 80062c4:	623b      	str	r3, [r7, #32]
    omega = phaseError*kp + integral + feedForward; 
 80062c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80062ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80062ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80062d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062da:	ed97 7a04 	vldr	s14, [r7, #16]
 80062de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 80062e6:	69f8      	ldr	r0, [r7, #28]
 80062e8:	f7fa f94e 	bl	8000588 <__aeabi_f2d>
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	4b43      	ldr	r3, [pc, #268]	; (8006400 <pi_regulator_comp+0x1f0>)
 80062f2:	f7fa f9a1 	bl	8000638 <__aeabi_dmul>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4614      	mov	r4, r2
 80062fc:	461d      	mov	r5, r3
 80062fe:	4b43      	ldr	r3, [pc, #268]	; (800640c <pi_regulator_comp+0x1fc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fa f940 	bl	8000588 <__aeabi_f2d>
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	4b3c      	ldr	r3, [pc, #240]	; (8006400 <pi_regulator_comp+0x1f0>)
 800630e:	f7fa f993 	bl	8000638 <__aeabi_dmul>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7f9 ffd7 	bl	80002cc <__adddf3>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4614      	mov	r4, r2
 8006324:	461d      	mov	r5, r3
 8006326:	6838      	ldr	r0, [r7, #0]
 8006328:	f7fa f92e 	bl	8000588 <__aeabi_f2d>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4620      	mov	r0, r4
 8006332:	4629      	mov	r1, r5
 8006334:	f7fa f980 	bl	8000638 <__aeabi_dmul>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4614      	mov	r4, r2
 800633e:	461d      	mov	r5, r3
 8006340:	4b33      	ldr	r3, [pc, #204]	; (8006410 <pi_regulator_comp+0x200>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fa f91f 	bl	8000588 <__aeabi_f2d>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4620      	mov	r0, r4
 8006350:	4629      	mov	r1, r5
 8006352:	f7f9 ffbb 	bl	80002cc <__adddf3>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	f7fa fc1b 	bl	8000b98 <__aeabi_d2f>
 8006362:	4603      	mov	r3, r0
 8006364:	627b      	str	r3, [r7, #36]	; 0x24

    if (anglePll > TWO_PI) {
 8006366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006368:	f7fa f90e 	bl	8000588 <__aeabi_f2d>
 800636c:	a322      	add	r3, pc, #136	; (adr r3, 80063f8 <pi_regulator_comp+0x1e8>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7fa fbf1 	bl	8000b58 <__aeabi_dcmpgt>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00f      	beq.n	800639c <pi_regulator_comp+0x18c>
        	anglePll = anglePll - TWO_PI;
 800637c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800637e:	f7fa f903 	bl	8000588 <__aeabi_f2d>
 8006382:	a31d      	add	r3, pc, #116	; (adr r3, 80063f8 <pi_regulator_comp+0x1e8>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7f9 ff9e 	bl	80002c8 <__aeabi_dsub>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4610      	mov	r0, r2
 8006392:	4619      	mov	r1, r3
 8006394:	f7fa fc00 	bl	8000b98 <__aeabi_d2f>
 8006398:	4603      	mov	r3, r0
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;
 800639c:	ed97 7a07 	vldr	s14, [r7, #28]
 80063a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80063a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063a8:	edd7 6a05 	vldr	s13, [r7, #20]
 80063ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80063b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80063bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80063c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c8:	edc7 7a06 	vstr	s15, [r7, #24]

    phaseError_old = phaseError;
 80063cc:	4a0d      	ldr	r2, [pc, #52]	; (8006404 <pi_regulator_comp+0x1f4>)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 80063d2:	4a0d      	ldr	r2, [pc, #52]	; (8006408 <pi_regulator_comp+0x1f8>)
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 80063d8:	4a0d      	ldr	r2, [pc, #52]	; (8006410 <pi_regulator_comp+0x200>)
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 80063de:	4a0b      	ldr	r2, [pc, #44]	; (800640c <pi_regulator_comp+0x1fc>)
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	6013      	str	r3, [r2, #0]

    
    return anglePllComp;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	ee07 3a90 	vmov	s15, r3
}
 80063ea:	eeb0 0a67 	vmov.f32	s0, s15
 80063ee:	3728      	adds	r7, #40	; 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80063f6:	bf00      	nop
 80063f8:	54442c46 	.word	0x54442c46
 80063fc:	401921fb 	.word	0x401921fb
 8006400:	3fe00000 	.word	0x3fe00000
 8006404:	2000020c 	.word	0x2000020c
 8006408:	20000210 	.word	0x20000210
 800640c:	20000214 	.word	0x20000214
 8006410:	20000218 	.word	0x20000218

08006414 <phase_detector>:


float phase_detector(float cosGrid, float sinGrid, float anglePllComp)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	ed2d 8b02 	vpush	{d8}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006422:	edc7 0a02 	vstr	s1, [r7, #8]
 8006426:	ed87 1a01 	vstr	s2, [r7, #4]
    float phaseError;

    phaseError = sinGrid*cosf(anglePllComp) - cosGrid*sinf(anglePllComp);
 800642a:	ed97 0a01 	vldr	s0, [r7, #4]
 800642e:	f000 fd39 	bl	8006ea4 <cosf>
 8006432:	eeb0 7a40 	vmov.f32	s14, s0
 8006436:	edd7 7a02 	vldr	s15, [r7, #8]
 800643a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800643e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006442:	f000 fd6f 	bl	8006f24 <sinf>
 8006446:	eeb0 7a40 	vmov.f32	s14, s0
 800644a:	edd7 7a03 	vldr	s15, [r7, #12]
 800644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006452:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006456:	edc7 7a05 	vstr	s15, [r7, #20]
    

    return phaseError;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	ee07 3a90 	vmov	s15, r3
}
 8006460:	eeb0 0a67 	vmov.f32	s0, s15
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	ecbd 8b02 	vpop	{d8}
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <circular_buffer>:
//                  uint16_t *dataInput: Pointer to data to be inserted into circular buffer
//                  uint8_t event: A flag which, when triggered, sets the ring buffer to fill the last 1-bufSplit% of the buffer
//                  float bufSplit: The percentage of the buffer which is kept in the ring buffer after event trigger.
//  Returns     :   *readStart: Where to start reading the ring buffer
uint8_t circular_buffer(uint16_t bufferSize, int16_t circularBuffer[][17], int16_t *dataInput, uint8_t event, float bufSplit, uint16_t *readStart)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	ed87 0a00 	vstr	s0, [r7]
 8006480:	4603      	mov	r3, r0
 8006482:	81fb      	strh	r3, [r7, #14]
 8006484:	4613      	mov	r3, r2
 8006486:	737b      	strb	r3, [r7, #13]
        else {
            *readStart = 0;
        }
    } */

    if (bufferLength == bufferSize) {
 8006488:	4b50      	ldr	r3, [pc, #320]	; (80065cc <circular_buffer+0x15c>)
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	89fa      	ldrh	r2, [r7, #14]
 800648e:	429a      	cmp	r2, r3
 8006490:	d103      	bne.n	800649a <circular_buffer+0x2a>
        *readStart = writeIndex;
 8006492:	4b4f      	ldr	r3, [pc, #316]	; (80065d0 <circular_buffer+0x160>)
 8006494:	881a      	ldrh	r2, [r3, #0]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	801a      	strh	r2, [r3, #0]
    }

    if (event) {
 800649a:	7b7b      	ldrb	r3, [r7, #13]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d055      	beq.n	800654c <circular_buffer+0xdc>
        if (!eventEntry) {
 80064a0:	4b4c      	ldr	r3, [pc, #304]	; (80065d4 <circular_buffer+0x164>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d112      	bne.n	80064ce <circular_buffer+0x5e>
            // Event has triggered
            bufferSplitLength = bufSplit * bufferSize;
 80064a8:	89fb      	ldrh	r3, [r7, #14]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064b2:	edd7 7a00 	vldr	s15, [r7]
 80064b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064be:	ee17 3a90 	vmov	r3, s15
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	4b44      	ldr	r3, [pc, #272]	; (80065d8 <circular_buffer+0x168>)
 80064c6:	801a      	strh	r2, [r3, #0]
            eventEntry = 1;
 80064c8:	4b42      	ldr	r3, [pc, #264]	; (80065d4 <circular_buffer+0x164>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
        }

        if (bufferSplitLength == bufferSize) {
 80064ce:	4b42      	ldr	r3, [pc, #264]	; (80065d8 <circular_buffer+0x168>)
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	89fa      	ldrh	r2, [r7, #14]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d10a      	bne.n	80064ee <circular_buffer+0x7e>
            if (!bufferFullEntry) {
 80064d8:	4b40      	ldr	r3, [pc, #256]	; (80065dc <circular_buffer+0x16c>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d15d      	bne.n	800659c <circular_buffer+0x12c>
            	bufferDoneFlag = 1;
 80064e0:	4b3f      	ldr	r3, [pc, #252]	; (80065e0 <circular_buffer+0x170>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
                // Do something?
                bufferFullEntry = 1;
 80064e6:	4b3d      	ldr	r3, [pc, #244]	; (80065dc <circular_buffer+0x16c>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e056      	b.n	800659c <circular_buffer+0x12c>
            }
            // STOP
        }
        else {
        	for (int i = 0; i < 17; ++i) {
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e015      	b.n	8006520 <circular_buffer+0xb0>
        	    circularBuffer[writeIndex][i] = dataInput[i];
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	441a      	add	r2, r3
 80064fc:	4b34      	ldr	r3, [pc, #208]	; (80065d0 <circular_buffer+0x160>)
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	4619      	mov	r1, r3
 8006502:	460b      	mov	r3, r1
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	440b      	add	r3, r1
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	4619      	mov	r1, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	440b      	add	r3, r1
 8006510:	f9b2 1000 	ldrsh.w	r1, [r2]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	for (int i = 0; i < 17; ++i) {
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	3301      	adds	r3, #1
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b10      	cmp	r3, #16
 8006524:	dde6      	ble.n	80064f4 <circular_buffer+0x84>
        	}
            bufferSplitLength++;
 8006526:	4b2c      	ldr	r3, [pc, #176]	; (80065d8 <circular_buffer+0x168>)
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <circular_buffer+0x168>)
 8006530:	801a      	strh	r2, [r3, #0]
            writeIndex++;
 8006532:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <circular_buffer+0x160>)
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	4b25      	ldr	r3, [pc, #148]	; (80065d0 <circular_buffer+0x160>)
 800653c:	801a      	strh	r2, [r3, #0]
            bufferLength++;
 800653e:	4b23      	ldr	r3, [pc, #140]	; (80065cc <circular_buffer+0x15c>)
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	3301      	adds	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	4b21      	ldr	r3, [pc, #132]	; (80065cc <circular_buffer+0x15c>)
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e027      	b.n	800659c <circular_buffer+0x12c>
        }
    }
    else {
    	for (int i = 0; i < 17; ++i) {
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	e015      	b.n	800657e <circular_buffer+0x10e>
    		circularBuffer[writeIndex][i] = dataInput[i];
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	441a      	add	r2, r3
 800655a:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <circular_buffer+0x160>)
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	4619      	mov	r1, r3
 8006560:	460b      	mov	r3, r1
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	440b      	add	r3, r1
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4619      	mov	r1, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	440b      	add	r3, r1
 800656e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	for (int i = 0; i < 17; ++i) {
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3301      	adds	r3, #1
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b10      	cmp	r3, #16
 8006582:	dde6      	ble.n	8006552 <circular_buffer+0xe2>
		}

        writeIndex++;
 8006584:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <circular_buffer+0x160>)
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <circular_buffer+0x160>)
 800658e:	801a      	strh	r2, [r3, #0]
        bufferLength++;
 8006590:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <circular_buffer+0x15c>)
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <circular_buffer+0x15c>)
 800659a:	801a      	strh	r2, [r3, #0]
    }



    // Reset bufferlength
    if (bufferLength > bufferSize) {
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <circular_buffer+0x15c>)
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	89fa      	ldrh	r2, [r7, #14]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d202      	bcs.n	80065ac <circular_buffer+0x13c>
        bufferLength = bufferSize;
 80065a6:	4a09      	ldr	r2, [pc, #36]	; (80065cc <circular_buffer+0x15c>)
 80065a8:	89fb      	ldrh	r3, [r7, #14]
 80065aa:	8013      	strh	r3, [r2, #0]
    }
    // Reset writeindex
    if (writeIndex == bufferSize) {
 80065ac:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <circular_buffer+0x160>)
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	89fa      	ldrh	r2, [r7, #14]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d102      	bne.n	80065bc <circular_buffer+0x14c>
        writeIndex = 0;
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <circular_buffer+0x160>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	801a      	strh	r2, [r3, #0]
    }

    return bufferDoneFlag;
 80065bc:	4b08      	ldr	r3, [pc, #32]	; (80065e0 <circular_buffer+0x170>)
 80065be:	781b      	ldrb	r3, [r3, #0]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	2000021c 	.word	0x2000021c
 80065d0:	2000021e 	.word	0x2000021e
 80065d4:	20000220 	.word	0x20000220
 80065d8:	20000222 	.word	0x20000222
 80065dc:	20000224 	.word	0x20000224
 80065e0:	20000225 	.word	0x20000225

080065e4 <__errno>:
 80065e4:	4b01      	ldr	r3, [pc, #4]	; (80065ec <__errno+0x8>)
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000018 	.word	0x20000018

080065f0 <__libc_init_array>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4d0d      	ldr	r5, [pc, #52]	; (8006628 <__libc_init_array+0x38>)
 80065f4:	4c0d      	ldr	r4, [pc, #52]	; (800662c <__libc_init_array+0x3c>)
 80065f6:	1b64      	subs	r4, r4, r5
 80065f8:	10a4      	asrs	r4, r4, #2
 80065fa:	2600      	movs	r6, #0
 80065fc:	42a6      	cmp	r6, r4
 80065fe:	d109      	bne.n	8006614 <__libc_init_array+0x24>
 8006600:	4d0b      	ldr	r5, [pc, #44]	; (8006630 <__libc_init_array+0x40>)
 8006602:	4c0c      	ldr	r4, [pc, #48]	; (8006634 <__libc_init_array+0x44>)
 8006604:	f001 fae2 	bl	8007bcc <_init>
 8006608:	1b64      	subs	r4, r4, r5
 800660a:	10a4      	asrs	r4, r4, #2
 800660c:	2600      	movs	r6, #0
 800660e:	42a6      	cmp	r6, r4
 8006610:	d105      	bne.n	800661e <__libc_init_array+0x2e>
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	f855 3b04 	ldr.w	r3, [r5], #4
 8006618:	4798      	blx	r3
 800661a:	3601      	adds	r6, #1
 800661c:	e7ee      	b.n	80065fc <__libc_init_array+0xc>
 800661e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006622:	4798      	blx	r3
 8006624:	3601      	adds	r6, #1
 8006626:	e7f2      	b.n	800660e <__libc_init_array+0x1e>
 8006628:	080080e4 	.word	0x080080e4
 800662c:	080080e4 	.word	0x080080e4
 8006630:	080080e4 	.word	0x080080e4
 8006634:	080080e8 	.word	0x080080e8

08006638 <memset>:
 8006638:	4402      	add	r2, r0
 800663a:	4603      	mov	r3, r0
 800663c:	4293      	cmp	r3, r2
 800663e:	d100      	bne.n	8006642 <memset+0xa>
 8006640:	4770      	bx	lr
 8006642:	f803 1b01 	strb.w	r1, [r3], #1
 8006646:	e7f9      	b.n	800663c <memset+0x4>

08006648 <siprintf>:
 8006648:	b40e      	push	{r1, r2, r3}
 800664a:	b500      	push	{lr}
 800664c:	b09c      	sub	sp, #112	; 0x70
 800664e:	ab1d      	add	r3, sp, #116	; 0x74
 8006650:	9002      	str	r0, [sp, #8]
 8006652:	9006      	str	r0, [sp, #24]
 8006654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006658:	4809      	ldr	r0, [pc, #36]	; (8006680 <siprintf+0x38>)
 800665a:	9107      	str	r1, [sp, #28]
 800665c:	9104      	str	r1, [sp, #16]
 800665e:	4909      	ldr	r1, [pc, #36]	; (8006684 <siprintf+0x3c>)
 8006660:	f853 2b04 	ldr.w	r2, [r3], #4
 8006664:	9105      	str	r1, [sp, #20]
 8006666:	6800      	ldr	r0, [r0, #0]
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	a902      	add	r1, sp, #8
 800666c:	f000 f868 	bl	8006740 <_svfiprintf_r>
 8006670:	9b02      	ldr	r3, [sp, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	b01c      	add	sp, #112	; 0x70
 8006678:	f85d eb04 	ldr.w	lr, [sp], #4
 800667c:	b003      	add	sp, #12
 800667e:	4770      	bx	lr
 8006680:	20000018 	.word	0x20000018
 8006684:	ffff0208 	.word	0xffff0208

08006688 <__ssputs_r>:
 8006688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668c:	688e      	ldr	r6, [r1, #8]
 800668e:	429e      	cmp	r6, r3
 8006690:	4682      	mov	sl, r0
 8006692:	460c      	mov	r4, r1
 8006694:	4690      	mov	r8, r2
 8006696:	461f      	mov	r7, r3
 8006698:	d838      	bhi.n	800670c <__ssputs_r+0x84>
 800669a:	898a      	ldrh	r2, [r1, #12]
 800669c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066a0:	d032      	beq.n	8006708 <__ssputs_r+0x80>
 80066a2:	6825      	ldr	r5, [r4, #0]
 80066a4:	6909      	ldr	r1, [r1, #16]
 80066a6:	eba5 0901 	sub.w	r9, r5, r1
 80066aa:	6965      	ldr	r5, [r4, #20]
 80066ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066b4:	3301      	adds	r3, #1
 80066b6:	444b      	add	r3, r9
 80066b8:	106d      	asrs	r5, r5, #1
 80066ba:	429d      	cmp	r5, r3
 80066bc:	bf38      	it	cc
 80066be:	461d      	movcc	r5, r3
 80066c0:	0553      	lsls	r3, r2, #21
 80066c2:	d531      	bpl.n	8006728 <__ssputs_r+0xa0>
 80066c4:	4629      	mov	r1, r5
 80066c6:	f000 fb47 	bl	8006d58 <_malloc_r>
 80066ca:	4606      	mov	r6, r0
 80066cc:	b950      	cbnz	r0, 80066e4 <__ssputs_r+0x5c>
 80066ce:	230c      	movs	r3, #12
 80066d0:	f8ca 3000 	str.w	r3, [sl]
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e4:	6921      	ldr	r1, [r4, #16]
 80066e6:	464a      	mov	r2, r9
 80066e8:	f000 fabe 	bl	8006c68 <memcpy>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	6126      	str	r6, [r4, #16]
 80066fa:	6165      	str	r5, [r4, #20]
 80066fc:	444e      	add	r6, r9
 80066fe:	eba5 0509 	sub.w	r5, r5, r9
 8006702:	6026      	str	r6, [r4, #0]
 8006704:	60a5      	str	r5, [r4, #8]
 8006706:	463e      	mov	r6, r7
 8006708:	42be      	cmp	r6, r7
 800670a:	d900      	bls.n	800670e <__ssputs_r+0x86>
 800670c:	463e      	mov	r6, r7
 800670e:	4632      	mov	r2, r6
 8006710:	6820      	ldr	r0, [r4, #0]
 8006712:	4641      	mov	r1, r8
 8006714:	f000 fab6 	bl	8006c84 <memmove>
 8006718:	68a3      	ldr	r3, [r4, #8]
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	1b9b      	subs	r3, r3, r6
 800671e:	4432      	add	r2, r6
 8006720:	60a3      	str	r3, [r4, #8]
 8006722:	6022      	str	r2, [r4, #0]
 8006724:	2000      	movs	r0, #0
 8006726:	e7db      	b.n	80066e0 <__ssputs_r+0x58>
 8006728:	462a      	mov	r2, r5
 800672a:	f000 fb6f 	bl	8006e0c <_realloc_r>
 800672e:	4606      	mov	r6, r0
 8006730:	2800      	cmp	r0, #0
 8006732:	d1e1      	bne.n	80066f8 <__ssputs_r+0x70>
 8006734:	6921      	ldr	r1, [r4, #16]
 8006736:	4650      	mov	r0, sl
 8006738:	f000 fabe 	bl	8006cb8 <_free_r>
 800673c:	e7c7      	b.n	80066ce <__ssputs_r+0x46>
	...

08006740 <_svfiprintf_r>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	4698      	mov	r8, r3
 8006746:	898b      	ldrh	r3, [r1, #12]
 8006748:	061b      	lsls	r3, r3, #24
 800674a:	b09d      	sub	sp, #116	; 0x74
 800674c:	4607      	mov	r7, r0
 800674e:	460d      	mov	r5, r1
 8006750:	4614      	mov	r4, r2
 8006752:	d50e      	bpl.n	8006772 <_svfiprintf_r+0x32>
 8006754:	690b      	ldr	r3, [r1, #16]
 8006756:	b963      	cbnz	r3, 8006772 <_svfiprintf_r+0x32>
 8006758:	2140      	movs	r1, #64	; 0x40
 800675a:	f000 fafd 	bl	8006d58 <_malloc_r>
 800675e:	6028      	str	r0, [r5, #0]
 8006760:	6128      	str	r0, [r5, #16]
 8006762:	b920      	cbnz	r0, 800676e <_svfiprintf_r+0x2e>
 8006764:	230c      	movs	r3, #12
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e0d1      	b.n	8006912 <_svfiprintf_r+0x1d2>
 800676e:	2340      	movs	r3, #64	; 0x40
 8006770:	616b      	str	r3, [r5, #20]
 8006772:	2300      	movs	r3, #0
 8006774:	9309      	str	r3, [sp, #36]	; 0x24
 8006776:	2320      	movs	r3, #32
 8006778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800677c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006780:	2330      	movs	r3, #48	; 0x30
 8006782:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800692c <_svfiprintf_r+0x1ec>
 8006786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800678a:	f04f 0901 	mov.w	r9, #1
 800678e:	4623      	mov	r3, r4
 8006790:	469a      	mov	sl, r3
 8006792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006796:	b10a      	cbz	r2, 800679c <_svfiprintf_r+0x5c>
 8006798:	2a25      	cmp	r2, #37	; 0x25
 800679a:	d1f9      	bne.n	8006790 <_svfiprintf_r+0x50>
 800679c:	ebba 0b04 	subs.w	fp, sl, r4
 80067a0:	d00b      	beq.n	80067ba <_svfiprintf_r+0x7a>
 80067a2:	465b      	mov	r3, fp
 80067a4:	4622      	mov	r2, r4
 80067a6:	4629      	mov	r1, r5
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7ff ff6d 	bl	8006688 <__ssputs_r>
 80067ae:	3001      	adds	r0, #1
 80067b0:	f000 80aa 	beq.w	8006908 <_svfiprintf_r+0x1c8>
 80067b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b6:	445a      	add	r2, fp
 80067b8:	9209      	str	r2, [sp, #36]	; 0x24
 80067ba:	f89a 3000 	ldrb.w	r3, [sl]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 80a2 	beq.w	8006908 <_svfiprintf_r+0x1c8>
 80067c4:	2300      	movs	r3, #0
 80067c6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067ce:	f10a 0a01 	add.w	sl, sl, #1
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	9307      	str	r3, [sp, #28]
 80067d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067da:	931a      	str	r3, [sp, #104]	; 0x68
 80067dc:	4654      	mov	r4, sl
 80067de:	2205      	movs	r2, #5
 80067e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e4:	4851      	ldr	r0, [pc, #324]	; (800692c <_svfiprintf_r+0x1ec>)
 80067e6:	f7f9 fd1b 	bl	8000220 <memchr>
 80067ea:	9a04      	ldr	r2, [sp, #16]
 80067ec:	b9d8      	cbnz	r0, 8006826 <_svfiprintf_r+0xe6>
 80067ee:	06d0      	lsls	r0, r2, #27
 80067f0:	bf44      	itt	mi
 80067f2:	2320      	movmi	r3, #32
 80067f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f8:	0711      	lsls	r1, r2, #28
 80067fa:	bf44      	itt	mi
 80067fc:	232b      	movmi	r3, #43	; 0x2b
 80067fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006802:	f89a 3000 	ldrb.w	r3, [sl]
 8006806:	2b2a      	cmp	r3, #42	; 0x2a
 8006808:	d015      	beq.n	8006836 <_svfiprintf_r+0xf6>
 800680a:	9a07      	ldr	r2, [sp, #28]
 800680c:	4654      	mov	r4, sl
 800680e:	2000      	movs	r0, #0
 8006810:	f04f 0c0a 	mov.w	ip, #10
 8006814:	4621      	mov	r1, r4
 8006816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800681a:	3b30      	subs	r3, #48	; 0x30
 800681c:	2b09      	cmp	r3, #9
 800681e:	d94e      	bls.n	80068be <_svfiprintf_r+0x17e>
 8006820:	b1b0      	cbz	r0, 8006850 <_svfiprintf_r+0x110>
 8006822:	9207      	str	r2, [sp, #28]
 8006824:	e014      	b.n	8006850 <_svfiprintf_r+0x110>
 8006826:	eba0 0308 	sub.w	r3, r0, r8
 800682a:	fa09 f303 	lsl.w	r3, r9, r3
 800682e:	4313      	orrs	r3, r2
 8006830:	9304      	str	r3, [sp, #16]
 8006832:	46a2      	mov	sl, r4
 8006834:	e7d2      	b.n	80067dc <_svfiprintf_r+0x9c>
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	1d19      	adds	r1, r3, #4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	9103      	str	r1, [sp, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	bfbb      	ittet	lt
 8006842:	425b      	neglt	r3, r3
 8006844:	f042 0202 	orrlt.w	r2, r2, #2
 8006848:	9307      	strge	r3, [sp, #28]
 800684a:	9307      	strlt	r3, [sp, #28]
 800684c:	bfb8      	it	lt
 800684e:	9204      	strlt	r2, [sp, #16]
 8006850:	7823      	ldrb	r3, [r4, #0]
 8006852:	2b2e      	cmp	r3, #46	; 0x2e
 8006854:	d10c      	bne.n	8006870 <_svfiprintf_r+0x130>
 8006856:	7863      	ldrb	r3, [r4, #1]
 8006858:	2b2a      	cmp	r3, #42	; 0x2a
 800685a:	d135      	bne.n	80068c8 <_svfiprintf_r+0x188>
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	1d1a      	adds	r2, r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	9203      	str	r2, [sp, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	bfb8      	it	lt
 8006868:	f04f 33ff 	movlt.w	r3, #4294967295
 800686c:	3402      	adds	r4, #2
 800686e:	9305      	str	r3, [sp, #20]
 8006870:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800693c <_svfiprintf_r+0x1fc>
 8006874:	7821      	ldrb	r1, [r4, #0]
 8006876:	2203      	movs	r2, #3
 8006878:	4650      	mov	r0, sl
 800687a:	f7f9 fcd1 	bl	8000220 <memchr>
 800687e:	b140      	cbz	r0, 8006892 <_svfiprintf_r+0x152>
 8006880:	2340      	movs	r3, #64	; 0x40
 8006882:	eba0 000a 	sub.w	r0, r0, sl
 8006886:	fa03 f000 	lsl.w	r0, r3, r0
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	4303      	orrs	r3, r0
 800688e:	3401      	adds	r4, #1
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006896:	4826      	ldr	r0, [pc, #152]	; (8006930 <_svfiprintf_r+0x1f0>)
 8006898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800689c:	2206      	movs	r2, #6
 800689e:	f7f9 fcbf 	bl	8000220 <memchr>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d038      	beq.n	8006918 <_svfiprintf_r+0x1d8>
 80068a6:	4b23      	ldr	r3, [pc, #140]	; (8006934 <_svfiprintf_r+0x1f4>)
 80068a8:	bb1b      	cbnz	r3, 80068f2 <_svfiprintf_r+0x1b2>
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	3307      	adds	r3, #7
 80068ae:	f023 0307 	bic.w	r3, r3, #7
 80068b2:	3308      	adds	r3, #8
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b8:	4433      	add	r3, r6
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	e767      	b.n	800678e <_svfiprintf_r+0x4e>
 80068be:	fb0c 3202 	mla	r2, ip, r2, r3
 80068c2:	460c      	mov	r4, r1
 80068c4:	2001      	movs	r0, #1
 80068c6:	e7a5      	b.n	8006814 <_svfiprintf_r+0xd4>
 80068c8:	2300      	movs	r3, #0
 80068ca:	3401      	adds	r4, #1
 80068cc:	9305      	str	r3, [sp, #20]
 80068ce:	4619      	mov	r1, r3
 80068d0:	f04f 0c0a 	mov.w	ip, #10
 80068d4:	4620      	mov	r0, r4
 80068d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068da:	3a30      	subs	r2, #48	; 0x30
 80068dc:	2a09      	cmp	r2, #9
 80068de:	d903      	bls.n	80068e8 <_svfiprintf_r+0x1a8>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0c5      	beq.n	8006870 <_svfiprintf_r+0x130>
 80068e4:	9105      	str	r1, [sp, #20]
 80068e6:	e7c3      	b.n	8006870 <_svfiprintf_r+0x130>
 80068e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ec:	4604      	mov	r4, r0
 80068ee:	2301      	movs	r3, #1
 80068f0:	e7f0      	b.n	80068d4 <_svfiprintf_r+0x194>
 80068f2:	ab03      	add	r3, sp, #12
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	462a      	mov	r2, r5
 80068f8:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <_svfiprintf_r+0x1f8>)
 80068fa:	a904      	add	r1, sp, #16
 80068fc:	4638      	mov	r0, r7
 80068fe:	f3af 8000 	nop.w
 8006902:	1c42      	adds	r2, r0, #1
 8006904:	4606      	mov	r6, r0
 8006906:	d1d6      	bne.n	80068b6 <_svfiprintf_r+0x176>
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	065b      	lsls	r3, r3, #25
 800690c:	f53f af2c 	bmi.w	8006768 <_svfiprintf_r+0x28>
 8006910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006912:	b01d      	add	sp, #116	; 0x74
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	ab03      	add	r3, sp, #12
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	462a      	mov	r2, r5
 800691e:	4b06      	ldr	r3, [pc, #24]	; (8006938 <_svfiprintf_r+0x1f8>)
 8006920:	a904      	add	r1, sp, #16
 8006922:	4638      	mov	r0, r7
 8006924:	f000 f87a 	bl	8006a1c <_printf_i>
 8006928:	e7eb      	b.n	8006902 <_svfiprintf_r+0x1c2>
 800692a:	bf00      	nop
 800692c:	08007cd8 	.word	0x08007cd8
 8006930:	08007ce2 	.word	0x08007ce2
 8006934:	00000000 	.word	0x00000000
 8006938:	08006689 	.word	0x08006689
 800693c:	08007cde 	.word	0x08007cde

08006940 <_printf_common>:
 8006940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	4616      	mov	r6, r2
 8006946:	4699      	mov	r9, r3
 8006948:	688a      	ldr	r2, [r1, #8]
 800694a:	690b      	ldr	r3, [r1, #16]
 800694c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006950:	4293      	cmp	r3, r2
 8006952:	bfb8      	it	lt
 8006954:	4613      	movlt	r3, r2
 8006956:	6033      	str	r3, [r6, #0]
 8006958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800695c:	4607      	mov	r7, r0
 800695e:	460c      	mov	r4, r1
 8006960:	b10a      	cbz	r2, 8006966 <_printf_common+0x26>
 8006962:	3301      	adds	r3, #1
 8006964:	6033      	str	r3, [r6, #0]
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	0699      	lsls	r1, r3, #26
 800696a:	bf42      	ittt	mi
 800696c:	6833      	ldrmi	r3, [r6, #0]
 800696e:	3302      	addmi	r3, #2
 8006970:	6033      	strmi	r3, [r6, #0]
 8006972:	6825      	ldr	r5, [r4, #0]
 8006974:	f015 0506 	ands.w	r5, r5, #6
 8006978:	d106      	bne.n	8006988 <_printf_common+0x48>
 800697a:	f104 0a19 	add.w	sl, r4, #25
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	6832      	ldr	r2, [r6, #0]
 8006982:	1a9b      	subs	r3, r3, r2
 8006984:	42ab      	cmp	r3, r5
 8006986:	dc26      	bgt.n	80069d6 <_printf_common+0x96>
 8006988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800698c:	1e13      	subs	r3, r2, #0
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	bf18      	it	ne
 8006992:	2301      	movne	r3, #1
 8006994:	0692      	lsls	r2, r2, #26
 8006996:	d42b      	bmi.n	80069f0 <_printf_common+0xb0>
 8006998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800699c:	4649      	mov	r1, r9
 800699e:	4638      	mov	r0, r7
 80069a0:	47c0      	blx	r8
 80069a2:	3001      	adds	r0, #1
 80069a4:	d01e      	beq.n	80069e4 <_printf_common+0xa4>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	68e5      	ldr	r5, [r4, #12]
 80069aa:	6832      	ldr	r2, [r6, #0]
 80069ac:	f003 0306 	and.w	r3, r3, #6
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	bf08      	it	eq
 80069b4:	1aad      	subeq	r5, r5, r2
 80069b6:	68a3      	ldr	r3, [r4, #8]
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	bf0c      	ite	eq
 80069bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069c0:	2500      	movne	r5, #0
 80069c2:	4293      	cmp	r3, r2
 80069c4:	bfc4      	itt	gt
 80069c6:	1a9b      	subgt	r3, r3, r2
 80069c8:	18ed      	addgt	r5, r5, r3
 80069ca:	2600      	movs	r6, #0
 80069cc:	341a      	adds	r4, #26
 80069ce:	42b5      	cmp	r5, r6
 80069d0:	d11a      	bne.n	8006a08 <_printf_common+0xc8>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e008      	b.n	80069e8 <_printf_common+0xa8>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4652      	mov	r2, sl
 80069da:	4649      	mov	r1, r9
 80069dc:	4638      	mov	r0, r7
 80069de:	47c0      	blx	r8
 80069e0:	3001      	adds	r0, #1
 80069e2:	d103      	bne.n	80069ec <_printf_common+0xac>
 80069e4:	f04f 30ff 	mov.w	r0, #4294967295
 80069e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ec:	3501      	adds	r5, #1
 80069ee:	e7c6      	b.n	800697e <_printf_common+0x3e>
 80069f0:	18e1      	adds	r1, r4, r3
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	2030      	movs	r0, #48	; 0x30
 80069f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069fa:	4422      	add	r2, r4
 80069fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a04:	3302      	adds	r3, #2
 8006a06:	e7c7      	b.n	8006998 <_printf_common+0x58>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	4638      	mov	r0, r7
 8006a10:	47c0      	blx	r8
 8006a12:	3001      	adds	r0, #1
 8006a14:	d0e6      	beq.n	80069e4 <_printf_common+0xa4>
 8006a16:	3601      	adds	r6, #1
 8006a18:	e7d9      	b.n	80069ce <_printf_common+0x8e>
	...

08006a1c <_printf_i>:
 8006a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	460c      	mov	r4, r1
 8006a22:	4691      	mov	r9, r2
 8006a24:	7e27      	ldrb	r7, [r4, #24]
 8006a26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a28:	2f78      	cmp	r7, #120	; 0x78
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	469a      	mov	sl, r3
 8006a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a32:	d807      	bhi.n	8006a44 <_printf_i+0x28>
 8006a34:	2f62      	cmp	r7, #98	; 0x62
 8006a36:	d80a      	bhi.n	8006a4e <_printf_i+0x32>
 8006a38:	2f00      	cmp	r7, #0
 8006a3a:	f000 80d8 	beq.w	8006bee <_printf_i+0x1d2>
 8006a3e:	2f58      	cmp	r7, #88	; 0x58
 8006a40:	f000 80a3 	beq.w	8006b8a <_printf_i+0x16e>
 8006a44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a4c:	e03a      	b.n	8006ac4 <_printf_i+0xa8>
 8006a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a52:	2b15      	cmp	r3, #21
 8006a54:	d8f6      	bhi.n	8006a44 <_printf_i+0x28>
 8006a56:	a001      	add	r0, pc, #4	; (adr r0, 8006a5c <_printf_i+0x40>)
 8006a58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a5c:	08006ab5 	.word	0x08006ab5
 8006a60:	08006ac9 	.word	0x08006ac9
 8006a64:	08006a45 	.word	0x08006a45
 8006a68:	08006a45 	.word	0x08006a45
 8006a6c:	08006a45 	.word	0x08006a45
 8006a70:	08006a45 	.word	0x08006a45
 8006a74:	08006ac9 	.word	0x08006ac9
 8006a78:	08006a45 	.word	0x08006a45
 8006a7c:	08006a45 	.word	0x08006a45
 8006a80:	08006a45 	.word	0x08006a45
 8006a84:	08006a45 	.word	0x08006a45
 8006a88:	08006bd5 	.word	0x08006bd5
 8006a8c:	08006af9 	.word	0x08006af9
 8006a90:	08006bb7 	.word	0x08006bb7
 8006a94:	08006a45 	.word	0x08006a45
 8006a98:	08006a45 	.word	0x08006a45
 8006a9c:	08006bf7 	.word	0x08006bf7
 8006aa0:	08006a45 	.word	0x08006a45
 8006aa4:	08006af9 	.word	0x08006af9
 8006aa8:	08006a45 	.word	0x08006a45
 8006aac:	08006a45 	.word	0x08006a45
 8006ab0:	08006bbf 	.word	0x08006bbf
 8006ab4:	680b      	ldr	r3, [r1, #0]
 8006ab6:	1d1a      	adds	r2, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	600a      	str	r2, [r1, #0]
 8006abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0a3      	b.n	8006c10 <_printf_i+0x1f4>
 8006ac8:	6825      	ldr	r5, [r4, #0]
 8006aca:	6808      	ldr	r0, [r1, #0]
 8006acc:	062e      	lsls	r6, r5, #24
 8006ace:	f100 0304 	add.w	r3, r0, #4
 8006ad2:	d50a      	bpl.n	8006aea <_printf_i+0xce>
 8006ad4:	6805      	ldr	r5, [r0, #0]
 8006ad6:	600b      	str	r3, [r1, #0]
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	da03      	bge.n	8006ae4 <_printf_i+0xc8>
 8006adc:	232d      	movs	r3, #45	; 0x2d
 8006ade:	426d      	negs	r5, r5
 8006ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae4:	485e      	ldr	r0, [pc, #376]	; (8006c60 <_printf_i+0x244>)
 8006ae6:	230a      	movs	r3, #10
 8006ae8:	e019      	b.n	8006b1e <_printf_i+0x102>
 8006aea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006aee:	6805      	ldr	r5, [r0, #0]
 8006af0:	600b      	str	r3, [r1, #0]
 8006af2:	bf18      	it	ne
 8006af4:	b22d      	sxthne	r5, r5
 8006af6:	e7ef      	b.n	8006ad8 <_printf_i+0xbc>
 8006af8:	680b      	ldr	r3, [r1, #0]
 8006afa:	6825      	ldr	r5, [r4, #0]
 8006afc:	1d18      	adds	r0, r3, #4
 8006afe:	6008      	str	r0, [r1, #0]
 8006b00:	0628      	lsls	r0, r5, #24
 8006b02:	d501      	bpl.n	8006b08 <_printf_i+0xec>
 8006b04:	681d      	ldr	r5, [r3, #0]
 8006b06:	e002      	b.n	8006b0e <_printf_i+0xf2>
 8006b08:	0669      	lsls	r1, r5, #25
 8006b0a:	d5fb      	bpl.n	8006b04 <_printf_i+0xe8>
 8006b0c:	881d      	ldrh	r5, [r3, #0]
 8006b0e:	4854      	ldr	r0, [pc, #336]	; (8006c60 <_printf_i+0x244>)
 8006b10:	2f6f      	cmp	r7, #111	; 0x6f
 8006b12:	bf0c      	ite	eq
 8006b14:	2308      	moveq	r3, #8
 8006b16:	230a      	movne	r3, #10
 8006b18:	2100      	movs	r1, #0
 8006b1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b1e:	6866      	ldr	r6, [r4, #4]
 8006b20:	60a6      	str	r6, [r4, #8]
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	bfa2      	ittt	ge
 8006b26:	6821      	ldrge	r1, [r4, #0]
 8006b28:	f021 0104 	bicge.w	r1, r1, #4
 8006b2c:	6021      	strge	r1, [r4, #0]
 8006b2e:	b90d      	cbnz	r5, 8006b34 <_printf_i+0x118>
 8006b30:	2e00      	cmp	r6, #0
 8006b32:	d04d      	beq.n	8006bd0 <_printf_i+0x1b4>
 8006b34:	4616      	mov	r6, r2
 8006b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b3e:	5dc7      	ldrb	r7, [r0, r7]
 8006b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b44:	462f      	mov	r7, r5
 8006b46:	42bb      	cmp	r3, r7
 8006b48:	460d      	mov	r5, r1
 8006b4a:	d9f4      	bls.n	8006b36 <_printf_i+0x11a>
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d10b      	bne.n	8006b68 <_printf_i+0x14c>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	07df      	lsls	r7, r3, #31
 8006b54:	d508      	bpl.n	8006b68 <_printf_i+0x14c>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	6861      	ldr	r1, [r4, #4]
 8006b5a:	4299      	cmp	r1, r3
 8006b5c:	bfde      	ittt	le
 8006b5e:	2330      	movle	r3, #48	; 0x30
 8006b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b68:	1b92      	subs	r2, r2, r6
 8006b6a:	6122      	str	r2, [r4, #16]
 8006b6c:	f8cd a000 	str.w	sl, [sp]
 8006b70:	464b      	mov	r3, r9
 8006b72:	aa03      	add	r2, sp, #12
 8006b74:	4621      	mov	r1, r4
 8006b76:	4640      	mov	r0, r8
 8006b78:	f7ff fee2 	bl	8006940 <_printf_common>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d14c      	bne.n	8006c1a <_printf_i+0x1fe>
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	b004      	add	sp, #16
 8006b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8a:	4835      	ldr	r0, [pc, #212]	; (8006c60 <_printf_i+0x244>)
 8006b8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	680e      	ldr	r6, [r1, #0]
 8006b94:	061f      	lsls	r7, r3, #24
 8006b96:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b9a:	600e      	str	r6, [r1, #0]
 8006b9c:	d514      	bpl.n	8006bc8 <_printf_i+0x1ac>
 8006b9e:	07d9      	lsls	r1, r3, #31
 8006ba0:	bf44      	itt	mi
 8006ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ba6:	6023      	strmi	r3, [r4, #0]
 8006ba8:	b91d      	cbnz	r5, 8006bb2 <_printf_i+0x196>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	f023 0320 	bic.w	r3, r3, #32
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	2310      	movs	r3, #16
 8006bb4:	e7b0      	b.n	8006b18 <_printf_i+0xfc>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f043 0320 	orr.w	r3, r3, #32
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	2378      	movs	r3, #120	; 0x78
 8006bc0:	4828      	ldr	r0, [pc, #160]	; (8006c64 <_printf_i+0x248>)
 8006bc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bc6:	e7e3      	b.n	8006b90 <_printf_i+0x174>
 8006bc8:	065e      	lsls	r6, r3, #25
 8006bca:	bf48      	it	mi
 8006bcc:	b2ad      	uxthmi	r5, r5
 8006bce:	e7e6      	b.n	8006b9e <_printf_i+0x182>
 8006bd0:	4616      	mov	r6, r2
 8006bd2:	e7bb      	b.n	8006b4c <_printf_i+0x130>
 8006bd4:	680b      	ldr	r3, [r1, #0]
 8006bd6:	6826      	ldr	r6, [r4, #0]
 8006bd8:	6960      	ldr	r0, [r4, #20]
 8006bda:	1d1d      	adds	r5, r3, #4
 8006bdc:	600d      	str	r5, [r1, #0]
 8006bde:	0635      	lsls	r5, r6, #24
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	d501      	bpl.n	8006be8 <_printf_i+0x1cc>
 8006be4:	6018      	str	r0, [r3, #0]
 8006be6:	e002      	b.n	8006bee <_printf_i+0x1d2>
 8006be8:	0671      	lsls	r1, r6, #25
 8006bea:	d5fb      	bpl.n	8006be4 <_printf_i+0x1c8>
 8006bec:	8018      	strh	r0, [r3, #0]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	4616      	mov	r6, r2
 8006bf4:	e7ba      	b.n	8006b6c <_printf_i+0x150>
 8006bf6:	680b      	ldr	r3, [r1, #0]
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	600a      	str	r2, [r1, #0]
 8006bfc:	681e      	ldr	r6, [r3, #0]
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	2100      	movs	r1, #0
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7f9 fb0c 	bl	8000220 <memchr>
 8006c08:	b108      	cbz	r0, 8006c0e <_printf_i+0x1f2>
 8006c0a:	1b80      	subs	r0, r0, r6
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	2300      	movs	r3, #0
 8006c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c18:	e7a8      	b.n	8006b6c <_printf_i+0x150>
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	4649      	mov	r1, r9
 8006c20:	4640      	mov	r0, r8
 8006c22:	47d0      	blx	sl
 8006c24:	3001      	adds	r0, #1
 8006c26:	d0ab      	beq.n	8006b80 <_printf_i+0x164>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	079b      	lsls	r3, r3, #30
 8006c2c:	d413      	bmi.n	8006c56 <_printf_i+0x23a>
 8006c2e:	68e0      	ldr	r0, [r4, #12]
 8006c30:	9b03      	ldr	r3, [sp, #12]
 8006c32:	4298      	cmp	r0, r3
 8006c34:	bfb8      	it	lt
 8006c36:	4618      	movlt	r0, r3
 8006c38:	e7a4      	b.n	8006b84 <_printf_i+0x168>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4640      	mov	r0, r8
 8006c42:	47d0      	blx	sl
 8006c44:	3001      	adds	r0, #1
 8006c46:	d09b      	beq.n	8006b80 <_printf_i+0x164>
 8006c48:	3501      	adds	r5, #1
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	9903      	ldr	r1, [sp, #12]
 8006c4e:	1a5b      	subs	r3, r3, r1
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dcf2      	bgt.n	8006c3a <_printf_i+0x21e>
 8006c54:	e7eb      	b.n	8006c2e <_printf_i+0x212>
 8006c56:	2500      	movs	r5, #0
 8006c58:	f104 0619 	add.w	r6, r4, #25
 8006c5c:	e7f5      	b.n	8006c4a <_printf_i+0x22e>
 8006c5e:	bf00      	nop
 8006c60:	08007ce9 	.word	0x08007ce9
 8006c64:	08007cfa 	.word	0x08007cfa

08006c68 <memcpy>:
 8006c68:	440a      	add	r2, r1
 8006c6a:	4291      	cmp	r1, r2
 8006c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c70:	d100      	bne.n	8006c74 <memcpy+0xc>
 8006c72:	4770      	bx	lr
 8006c74:	b510      	push	{r4, lr}
 8006c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7e:	4291      	cmp	r1, r2
 8006c80:	d1f9      	bne.n	8006c76 <memcpy+0xe>
 8006c82:	bd10      	pop	{r4, pc}

08006c84 <memmove>:
 8006c84:	4288      	cmp	r0, r1
 8006c86:	b510      	push	{r4, lr}
 8006c88:	eb01 0402 	add.w	r4, r1, r2
 8006c8c:	d902      	bls.n	8006c94 <memmove+0x10>
 8006c8e:	4284      	cmp	r4, r0
 8006c90:	4623      	mov	r3, r4
 8006c92:	d807      	bhi.n	8006ca4 <memmove+0x20>
 8006c94:	1e43      	subs	r3, r0, #1
 8006c96:	42a1      	cmp	r1, r4
 8006c98:	d008      	beq.n	8006cac <memmove+0x28>
 8006c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ca2:	e7f8      	b.n	8006c96 <memmove+0x12>
 8006ca4:	4402      	add	r2, r0
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	428a      	cmp	r2, r1
 8006caa:	d100      	bne.n	8006cae <memmove+0x2a>
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cb6:	e7f7      	b.n	8006ca8 <memmove+0x24>

08006cb8 <_free_r>:
 8006cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	d048      	beq.n	8006d50 <_free_r+0x98>
 8006cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc2:	9001      	str	r0, [sp, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8006cca:	bfb8      	it	lt
 8006ccc:	18e4      	addlt	r4, r4, r3
 8006cce:	f000 f8d3 	bl	8006e78 <__malloc_lock>
 8006cd2:	4a20      	ldr	r2, [pc, #128]	; (8006d54 <_free_r+0x9c>)
 8006cd4:	9801      	ldr	r0, [sp, #4]
 8006cd6:	6813      	ldr	r3, [r2, #0]
 8006cd8:	4615      	mov	r5, r2
 8006cda:	b933      	cbnz	r3, 8006cea <_free_r+0x32>
 8006cdc:	6063      	str	r3, [r4, #4]
 8006cde:	6014      	str	r4, [r2, #0]
 8006ce0:	b003      	add	sp, #12
 8006ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ce6:	f000 b8cd 	b.w	8006e84 <__malloc_unlock>
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	d90b      	bls.n	8006d06 <_free_r+0x4e>
 8006cee:	6821      	ldr	r1, [r4, #0]
 8006cf0:	1862      	adds	r2, r4, r1
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	bf04      	itt	eq
 8006cf6:	681a      	ldreq	r2, [r3, #0]
 8006cf8:	685b      	ldreq	r3, [r3, #4]
 8006cfa:	6063      	str	r3, [r4, #4]
 8006cfc:	bf04      	itt	eq
 8006cfe:	1852      	addeq	r2, r2, r1
 8006d00:	6022      	streq	r2, [r4, #0]
 8006d02:	602c      	str	r4, [r5, #0]
 8006d04:	e7ec      	b.n	8006ce0 <_free_r+0x28>
 8006d06:	461a      	mov	r2, r3
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	b10b      	cbz	r3, 8006d10 <_free_r+0x58>
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d9fa      	bls.n	8006d06 <_free_r+0x4e>
 8006d10:	6811      	ldr	r1, [r2, #0]
 8006d12:	1855      	adds	r5, r2, r1
 8006d14:	42a5      	cmp	r5, r4
 8006d16:	d10b      	bne.n	8006d30 <_free_r+0x78>
 8006d18:	6824      	ldr	r4, [r4, #0]
 8006d1a:	4421      	add	r1, r4
 8006d1c:	1854      	adds	r4, r2, r1
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	6011      	str	r1, [r2, #0]
 8006d22:	d1dd      	bne.n	8006ce0 <_free_r+0x28>
 8006d24:	681c      	ldr	r4, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	6053      	str	r3, [r2, #4]
 8006d2a:	4421      	add	r1, r4
 8006d2c:	6011      	str	r1, [r2, #0]
 8006d2e:	e7d7      	b.n	8006ce0 <_free_r+0x28>
 8006d30:	d902      	bls.n	8006d38 <_free_r+0x80>
 8006d32:	230c      	movs	r3, #12
 8006d34:	6003      	str	r3, [r0, #0]
 8006d36:	e7d3      	b.n	8006ce0 <_free_r+0x28>
 8006d38:	6825      	ldr	r5, [r4, #0]
 8006d3a:	1961      	adds	r1, r4, r5
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	bf04      	itt	eq
 8006d40:	6819      	ldreq	r1, [r3, #0]
 8006d42:	685b      	ldreq	r3, [r3, #4]
 8006d44:	6063      	str	r3, [r4, #4]
 8006d46:	bf04      	itt	eq
 8006d48:	1949      	addeq	r1, r1, r5
 8006d4a:	6021      	streq	r1, [r4, #0]
 8006d4c:	6054      	str	r4, [r2, #4]
 8006d4e:	e7c7      	b.n	8006ce0 <_free_r+0x28>
 8006d50:	b003      	add	sp, #12
 8006d52:	bd30      	pop	{r4, r5, pc}
 8006d54:	20000228 	.word	0x20000228

08006d58 <_malloc_r>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	1ccd      	adds	r5, r1, #3
 8006d5c:	f025 0503 	bic.w	r5, r5, #3
 8006d60:	3508      	adds	r5, #8
 8006d62:	2d0c      	cmp	r5, #12
 8006d64:	bf38      	it	cc
 8006d66:	250c      	movcc	r5, #12
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	db01      	blt.n	8006d72 <_malloc_r+0x1a>
 8006d6e:	42a9      	cmp	r1, r5
 8006d70:	d903      	bls.n	8006d7a <_malloc_r+0x22>
 8006d72:	230c      	movs	r3, #12
 8006d74:	6033      	str	r3, [r6, #0]
 8006d76:	2000      	movs	r0, #0
 8006d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d7a:	f000 f87d 	bl	8006e78 <__malloc_lock>
 8006d7e:	4921      	ldr	r1, [pc, #132]	; (8006e04 <_malloc_r+0xac>)
 8006d80:	680a      	ldr	r2, [r1, #0]
 8006d82:	4614      	mov	r4, r2
 8006d84:	b99c      	cbnz	r4, 8006dae <_malloc_r+0x56>
 8006d86:	4f20      	ldr	r7, [pc, #128]	; (8006e08 <_malloc_r+0xb0>)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	b923      	cbnz	r3, 8006d96 <_malloc_r+0x3e>
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f000 f862 	bl	8006e58 <_sbrk_r>
 8006d94:	6038      	str	r0, [r7, #0]
 8006d96:	4629      	mov	r1, r5
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f000 f85d 	bl	8006e58 <_sbrk_r>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	d123      	bne.n	8006dea <_malloc_r+0x92>
 8006da2:	230c      	movs	r3, #12
 8006da4:	6033      	str	r3, [r6, #0]
 8006da6:	4630      	mov	r0, r6
 8006da8:	f000 f86c 	bl	8006e84 <__malloc_unlock>
 8006dac:	e7e3      	b.n	8006d76 <_malloc_r+0x1e>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	1b5b      	subs	r3, r3, r5
 8006db2:	d417      	bmi.n	8006de4 <_malloc_r+0x8c>
 8006db4:	2b0b      	cmp	r3, #11
 8006db6:	d903      	bls.n	8006dc0 <_malloc_r+0x68>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	441c      	add	r4, r3
 8006dbc:	6025      	str	r5, [r4, #0]
 8006dbe:	e004      	b.n	8006dca <_malloc_r+0x72>
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	42a2      	cmp	r2, r4
 8006dc4:	bf0c      	ite	eq
 8006dc6:	600b      	streq	r3, [r1, #0]
 8006dc8:	6053      	strne	r3, [r2, #4]
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f000 f85a 	bl	8006e84 <__malloc_unlock>
 8006dd0:	f104 000b 	add.w	r0, r4, #11
 8006dd4:	1d23      	adds	r3, r4, #4
 8006dd6:	f020 0007 	bic.w	r0, r0, #7
 8006dda:	1ac2      	subs	r2, r0, r3
 8006ddc:	d0cc      	beq.n	8006d78 <_malloc_r+0x20>
 8006dde:	1a1b      	subs	r3, r3, r0
 8006de0:	50a3      	str	r3, [r4, r2]
 8006de2:	e7c9      	b.n	8006d78 <_malloc_r+0x20>
 8006de4:	4622      	mov	r2, r4
 8006de6:	6864      	ldr	r4, [r4, #4]
 8006de8:	e7cc      	b.n	8006d84 <_malloc_r+0x2c>
 8006dea:	1cc4      	adds	r4, r0, #3
 8006dec:	f024 0403 	bic.w	r4, r4, #3
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d0e3      	beq.n	8006dbc <_malloc_r+0x64>
 8006df4:	1a21      	subs	r1, r4, r0
 8006df6:	4630      	mov	r0, r6
 8006df8:	f000 f82e 	bl	8006e58 <_sbrk_r>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d1dd      	bne.n	8006dbc <_malloc_r+0x64>
 8006e00:	e7cf      	b.n	8006da2 <_malloc_r+0x4a>
 8006e02:	bf00      	nop
 8006e04:	20000228 	.word	0x20000228
 8006e08:	2000022c 	.word	0x2000022c

08006e0c <_realloc_r>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	4607      	mov	r7, r0
 8006e10:	4614      	mov	r4, r2
 8006e12:	460e      	mov	r6, r1
 8006e14:	b921      	cbnz	r1, 8006e20 <_realloc_r+0x14>
 8006e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	f7ff bf9c 	b.w	8006d58 <_malloc_r>
 8006e20:	b922      	cbnz	r2, 8006e2c <_realloc_r+0x20>
 8006e22:	f7ff ff49 	bl	8006cb8 <_free_r>
 8006e26:	4625      	mov	r5, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e2c:	f000 f830 	bl	8006e90 <_malloc_usable_size_r>
 8006e30:	42a0      	cmp	r0, r4
 8006e32:	d20f      	bcs.n	8006e54 <_realloc_r+0x48>
 8006e34:	4621      	mov	r1, r4
 8006e36:	4638      	mov	r0, r7
 8006e38:	f7ff ff8e 	bl	8006d58 <_malloc_r>
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d0f2      	beq.n	8006e28 <_realloc_r+0x1c>
 8006e42:	4631      	mov	r1, r6
 8006e44:	4622      	mov	r2, r4
 8006e46:	f7ff ff0f 	bl	8006c68 <memcpy>
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f7ff ff33 	bl	8006cb8 <_free_r>
 8006e52:	e7e9      	b.n	8006e28 <_realloc_r+0x1c>
 8006e54:	4635      	mov	r5, r6
 8006e56:	e7e7      	b.n	8006e28 <_realloc_r+0x1c>

08006e58 <_sbrk_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4d06      	ldr	r5, [pc, #24]	; (8006e74 <_sbrk_r+0x1c>)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4608      	mov	r0, r1
 8006e62:	602b      	str	r3, [r5, #0]
 8006e64:	f7fb f9f4 	bl	8002250 <_sbrk>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	d102      	bne.n	8006e72 <_sbrk_r+0x1a>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	b103      	cbz	r3, 8006e72 <_sbrk_r+0x1a>
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	20010e4c 	.word	0x20010e4c

08006e78 <__malloc_lock>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__malloc_lock+0x8>)
 8006e7a:	f000 b811 	b.w	8006ea0 <__retarget_lock_acquire_recursive>
 8006e7e:	bf00      	nop
 8006e80:	20010e54 	.word	0x20010e54

08006e84 <__malloc_unlock>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__malloc_unlock+0x8>)
 8006e86:	f000 b80c 	b.w	8006ea2 <__retarget_lock_release_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	20010e54 	.word	0x20010e54

08006e90 <_malloc_usable_size_r>:
 8006e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e94:	1f18      	subs	r0, r3, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bfbc      	itt	lt
 8006e9a:	580b      	ldrlt	r3, [r1, r0]
 8006e9c:	18c0      	addlt	r0, r0, r3
 8006e9e:	4770      	bx	lr

08006ea0 <__retarget_lock_acquire_recursive>:
 8006ea0:	4770      	bx	lr

08006ea2 <__retarget_lock_release_recursive>:
 8006ea2:	4770      	bx	lr

08006ea4 <cosf>:
 8006ea4:	ee10 3a10 	vmov	r3, s0
 8006ea8:	b507      	push	{r0, r1, r2, lr}
 8006eaa:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <cosf+0x78>)
 8006eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	dc04      	bgt.n	8006ebe <cosf+0x1a>
 8006eb4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8006f20 <cosf+0x7c>
 8006eb8:	f000 fa9a 	bl	80073f0 <__kernel_cosf>
 8006ebc:	e004      	b.n	8006ec8 <cosf+0x24>
 8006ebe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006ec2:	db04      	blt.n	8006ece <cosf+0x2a>
 8006ec4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006ec8:	b003      	add	sp, #12
 8006eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ece:	4668      	mov	r0, sp
 8006ed0:	f000 f952 	bl	8007178 <__ieee754_rem_pio2f>
 8006ed4:	f000 0003 	and.w	r0, r0, #3
 8006ed8:	2801      	cmp	r0, #1
 8006eda:	d007      	beq.n	8006eec <cosf+0x48>
 8006edc:	2802      	cmp	r0, #2
 8006ede:	d00e      	beq.n	8006efe <cosf+0x5a>
 8006ee0:	b9a0      	cbnz	r0, 8006f0c <cosf+0x68>
 8006ee2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ee6:	ed9d 0a00 	vldr	s0, [sp]
 8006eea:	e7e5      	b.n	8006eb8 <cosf+0x14>
 8006eec:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ef0:	ed9d 0a00 	vldr	s0, [sp]
 8006ef4:	f000 fd66 	bl	80079c4 <__kernel_sinf>
 8006ef8:	eeb1 0a40 	vneg.f32	s0, s0
 8006efc:	e7e4      	b.n	8006ec8 <cosf+0x24>
 8006efe:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f02:	ed9d 0a00 	vldr	s0, [sp]
 8006f06:	f000 fa73 	bl	80073f0 <__kernel_cosf>
 8006f0a:	e7f5      	b.n	8006ef8 <cosf+0x54>
 8006f0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f10:	ed9d 0a00 	vldr	s0, [sp]
 8006f14:	2001      	movs	r0, #1
 8006f16:	f000 fd55 	bl	80079c4 <__kernel_sinf>
 8006f1a:	e7d5      	b.n	8006ec8 <cosf+0x24>
 8006f1c:	3f490fd8 	.word	0x3f490fd8
 8006f20:	00000000 	.word	0x00000000

08006f24 <sinf>:
 8006f24:	ee10 3a10 	vmov	r3, s0
 8006f28:	b507      	push	{r0, r1, r2, lr}
 8006f2a:	4a1d      	ldr	r2, [pc, #116]	; (8006fa0 <sinf+0x7c>)
 8006f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f30:	4293      	cmp	r3, r2
 8006f32:	dc05      	bgt.n	8006f40 <sinf+0x1c>
 8006f34:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006fa4 <sinf+0x80>
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f000 fd43 	bl	80079c4 <__kernel_sinf>
 8006f3e:	e004      	b.n	8006f4a <sinf+0x26>
 8006f40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f44:	db04      	blt.n	8006f50 <sinf+0x2c>
 8006f46:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006f4a:	b003      	add	sp, #12
 8006f4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f50:	4668      	mov	r0, sp
 8006f52:	f000 f911 	bl	8007178 <__ieee754_rem_pio2f>
 8006f56:	f000 0003 	and.w	r0, r0, #3
 8006f5a:	2801      	cmp	r0, #1
 8006f5c:	d008      	beq.n	8006f70 <sinf+0x4c>
 8006f5e:	2802      	cmp	r0, #2
 8006f60:	d00d      	beq.n	8006f7e <sinf+0x5a>
 8006f62:	b9b0      	cbnz	r0, 8006f92 <sinf+0x6e>
 8006f64:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f68:	ed9d 0a00 	vldr	s0, [sp]
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	e7e4      	b.n	8006f3a <sinf+0x16>
 8006f70:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f74:	ed9d 0a00 	vldr	s0, [sp]
 8006f78:	f000 fa3a 	bl	80073f0 <__kernel_cosf>
 8006f7c:	e7e5      	b.n	8006f4a <sinf+0x26>
 8006f7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f82:	ed9d 0a00 	vldr	s0, [sp]
 8006f86:	2001      	movs	r0, #1
 8006f88:	f000 fd1c 	bl	80079c4 <__kernel_sinf>
 8006f8c:	eeb1 0a40 	vneg.f32	s0, s0
 8006f90:	e7db      	b.n	8006f4a <sinf+0x26>
 8006f92:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f96:	ed9d 0a00 	vldr	s0, [sp]
 8006f9a:	f000 fa29 	bl	80073f0 <__kernel_cosf>
 8006f9e:	e7f5      	b.n	8006f8c <sinf+0x68>
 8006fa0:	3f490fd8 	.word	0x3f490fd8
 8006fa4:	00000000 	.word	0x00000000

08006fa8 <sqrt>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	ed2d 8b02 	vpush	{d8}
 8006fae:	ec55 4b10 	vmov	r4, r5, d0
 8006fb2:	f000 f82d 	bl	8007010 <__ieee754_sqrt>
 8006fb6:	4b15      	ldr	r3, [pc, #84]	; (800700c <sqrt+0x64>)
 8006fb8:	eeb0 8a40 	vmov.f32	s16, s0
 8006fbc:	eef0 8a60 	vmov.f32	s17, s1
 8006fc0:	f993 3000 	ldrsb.w	r3, [r3]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	d019      	beq.n	8006ffc <sqrt+0x54>
 8006fc8:	4622      	mov	r2, r4
 8006fca:	462b      	mov	r3, r5
 8006fcc:	4620      	mov	r0, r4
 8006fce:	4629      	mov	r1, r5
 8006fd0:	f7f9 fdcc 	bl	8000b6c <__aeabi_dcmpun>
 8006fd4:	b990      	cbnz	r0, 8006ffc <sqrt+0x54>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 fd9d 	bl	8000b1c <__aeabi_dcmplt>
 8006fe2:	b158      	cbz	r0, 8006ffc <sqrt+0x54>
 8006fe4:	f7ff fafe 	bl	80065e4 <__errno>
 8006fe8:	2321      	movs	r3, #33	; 0x21
 8006fea:	6003      	str	r3, [r0, #0]
 8006fec:	2200      	movs	r2, #0
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	f7f9 fc4a 	bl	800088c <__aeabi_ddiv>
 8006ff8:	ec41 0b18 	vmov	d8, r0, r1
 8006ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8007000:	eef0 0a68 	vmov.f32	s1, s17
 8007004:	ecbd 8b02 	vpop	{d8}
 8007008:	bd38      	pop	{r3, r4, r5, pc}
 800700a:	bf00      	nop
 800700c:	2000007c 	.word	0x2000007c

08007010 <__ieee754_sqrt>:
 8007010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007014:	ec55 4b10 	vmov	r4, r5, d0
 8007018:	4e56      	ldr	r6, [pc, #344]	; (8007174 <__ieee754_sqrt+0x164>)
 800701a:	43ae      	bics	r6, r5
 800701c:	ee10 0a10 	vmov	r0, s0
 8007020:	ee10 3a10 	vmov	r3, s0
 8007024:	4629      	mov	r1, r5
 8007026:	462a      	mov	r2, r5
 8007028:	d110      	bne.n	800704c <__ieee754_sqrt+0x3c>
 800702a:	ee10 2a10 	vmov	r2, s0
 800702e:	462b      	mov	r3, r5
 8007030:	f7f9 fb02 	bl	8000638 <__aeabi_dmul>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4620      	mov	r0, r4
 800703a:	4629      	mov	r1, r5
 800703c:	f7f9 f946 	bl	80002cc <__adddf3>
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	ec45 4b10 	vmov	d0, r4, r5
 8007048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800704c:	2d00      	cmp	r5, #0
 800704e:	dc10      	bgt.n	8007072 <__ieee754_sqrt+0x62>
 8007050:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007054:	4330      	orrs	r0, r6
 8007056:	d0f5      	beq.n	8007044 <__ieee754_sqrt+0x34>
 8007058:	b15d      	cbz	r5, 8007072 <__ieee754_sqrt+0x62>
 800705a:	ee10 2a10 	vmov	r2, s0
 800705e:	462b      	mov	r3, r5
 8007060:	ee10 0a10 	vmov	r0, s0
 8007064:	f7f9 f930 	bl	80002c8 <__aeabi_dsub>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	f7f9 fc0e 	bl	800088c <__aeabi_ddiv>
 8007070:	e7e6      	b.n	8007040 <__ieee754_sqrt+0x30>
 8007072:	1509      	asrs	r1, r1, #20
 8007074:	d076      	beq.n	8007164 <__ieee754_sqrt+0x154>
 8007076:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800707a:	07ce      	lsls	r6, r1, #31
 800707c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007080:	bf5e      	ittt	pl
 8007082:	0fda      	lsrpl	r2, r3, #31
 8007084:	005b      	lslpl	r3, r3, #1
 8007086:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800708a:	0fda      	lsrs	r2, r3, #31
 800708c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007090:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007094:	2000      	movs	r0, #0
 8007096:	106d      	asrs	r5, r5, #1
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	f04f 0e16 	mov.w	lr, #22
 800709e:	4684      	mov	ip, r0
 80070a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070a4:	eb0c 0401 	add.w	r4, ip, r1
 80070a8:	4294      	cmp	r4, r2
 80070aa:	bfde      	ittt	le
 80070ac:	1b12      	suble	r2, r2, r4
 80070ae:	eb04 0c01 	addle.w	ip, r4, r1
 80070b2:	1840      	addle	r0, r0, r1
 80070b4:	0052      	lsls	r2, r2, #1
 80070b6:	f1be 0e01 	subs.w	lr, lr, #1
 80070ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80070be:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80070c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070c6:	d1ed      	bne.n	80070a4 <__ieee754_sqrt+0x94>
 80070c8:	4671      	mov	r1, lr
 80070ca:	2720      	movs	r7, #32
 80070cc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80070d0:	4562      	cmp	r2, ip
 80070d2:	eb04 060e 	add.w	r6, r4, lr
 80070d6:	dc02      	bgt.n	80070de <__ieee754_sqrt+0xce>
 80070d8:	d113      	bne.n	8007102 <__ieee754_sqrt+0xf2>
 80070da:	429e      	cmp	r6, r3
 80070dc:	d811      	bhi.n	8007102 <__ieee754_sqrt+0xf2>
 80070de:	2e00      	cmp	r6, #0
 80070e0:	eb06 0e04 	add.w	lr, r6, r4
 80070e4:	da43      	bge.n	800716e <__ieee754_sqrt+0x15e>
 80070e6:	f1be 0f00 	cmp.w	lr, #0
 80070ea:	db40      	blt.n	800716e <__ieee754_sqrt+0x15e>
 80070ec:	f10c 0801 	add.w	r8, ip, #1
 80070f0:	eba2 020c 	sub.w	r2, r2, ip
 80070f4:	429e      	cmp	r6, r3
 80070f6:	bf88      	it	hi
 80070f8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80070fc:	1b9b      	subs	r3, r3, r6
 80070fe:	4421      	add	r1, r4
 8007100:	46c4      	mov	ip, r8
 8007102:	0052      	lsls	r2, r2, #1
 8007104:	3f01      	subs	r7, #1
 8007106:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800710a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800710e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007112:	d1dd      	bne.n	80070d0 <__ieee754_sqrt+0xc0>
 8007114:	4313      	orrs	r3, r2
 8007116:	d006      	beq.n	8007126 <__ieee754_sqrt+0x116>
 8007118:	1c4c      	adds	r4, r1, #1
 800711a:	bf13      	iteet	ne
 800711c:	3101      	addne	r1, #1
 800711e:	3001      	addeq	r0, #1
 8007120:	4639      	moveq	r1, r7
 8007122:	f021 0101 	bicne.w	r1, r1, #1
 8007126:	1043      	asrs	r3, r0, #1
 8007128:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800712c:	0849      	lsrs	r1, r1, #1
 800712e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007132:	07c2      	lsls	r2, r0, #31
 8007134:	bf48      	it	mi
 8007136:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800713a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800713e:	460c      	mov	r4, r1
 8007140:	463d      	mov	r5, r7
 8007142:	e77f      	b.n	8007044 <__ieee754_sqrt+0x34>
 8007144:	0ada      	lsrs	r2, r3, #11
 8007146:	3815      	subs	r0, #21
 8007148:	055b      	lsls	r3, r3, #21
 800714a:	2a00      	cmp	r2, #0
 800714c:	d0fa      	beq.n	8007144 <__ieee754_sqrt+0x134>
 800714e:	02d7      	lsls	r7, r2, #11
 8007150:	d50a      	bpl.n	8007168 <__ieee754_sqrt+0x158>
 8007152:	f1c1 0420 	rsb	r4, r1, #32
 8007156:	fa23 f404 	lsr.w	r4, r3, r4
 800715a:	1e4d      	subs	r5, r1, #1
 800715c:	408b      	lsls	r3, r1
 800715e:	4322      	orrs	r2, r4
 8007160:	1b41      	subs	r1, r0, r5
 8007162:	e788      	b.n	8007076 <__ieee754_sqrt+0x66>
 8007164:	4608      	mov	r0, r1
 8007166:	e7f0      	b.n	800714a <__ieee754_sqrt+0x13a>
 8007168:	0052      	lsls	r2, r2, #1
 800716a:	3101      	adds	r1, #1
 800716c:	e7ef      	b.n	800714e <__ieee754_sqrt+0x13e>
 800716e:	46e0      	mov	r8, ip
 8007170:	e7be      	b.n	80070f0 <__ieee754_sqrt+0xe0>
 8007172:	bf00      	nop
 8007174:	7ff00000 	.word	0x7ff00000

08007178 <__ieee754_rem_pio2f>:
 8007178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717a:	ee10 6a10 	vmov	r6, s0
 800717e:	4b8e      	ldr	r3, [pc, #568]	; (80073b8 <__ieee754_rem_pio2f+0x240>)
 8007180:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007184:	429d      	cmp	r5, r3
 8007186:	b087      	sub	sp, #28
 8007188:	eef0 7a40 	vmov.f32	s15, s0
 800718c:	4604      	mov	r4, r0
 800718e:	dc05      	bgt.n	800719c <__ieee754_rem_pio2f+0x24>
 8007190:	2300      	movs	r3, #0
 8007192:	ed80 0a00 	vstr	s0, [r0]
 8007196:	6043      	str	r3, [r0, #4]
 8007198:	2000      	movs	r0, #0
 800719a:	e01a      	b.n	80071d2 <__ieee754_rem_pio2f+0x5a>
 800719c:	4b87      	ldr	r3, [pc, #540]	; (80073bc <__ieee754_rem_pio2f+0x244>)
 800719e:	429d      	cmp	r5, r3
 80071a0:	dc46      	bgt.n	8007230 <__ieee754_rem_pio2f+0xb8>
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80073c0 <__ieee754_rem_pio2f+0x248>
 80071a8:	4b86      	ldr	r3, [pc, #536]	; (80073c4 <__ieee754_rem_pio2f+0x24c>)
 80071aa:	f025 050f 	bic.w	r5, r5, #15
 80071ae:	dd1f      	ble.n	80071f0 <__ieee754_rem_pio2f+0x78>
 80071b0:	429d      	cmp	r5, r3
 80071b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071b6:	d00e      	beq.n	80071d6 <__ieee754_rem_pio2f+0x5e>
 80071b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80073c8 <__ieee754_rem_pio2f+0x250>
 80071bc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80071c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071c4:	ed80 0a00 	vstr	s0, [r0]
 80071c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071cc:	2001      	movs	r0, #1
 80071ce:	edc4 7a01 	vstr	s15, [r4, #4]
 80071d2:	b007      	add	sp, #28
 80071d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80073cc <__ieee754_rem_pio2f+0x254>
 80071da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80073d0 <__ieee754_rem_pio2f+0x258>
 80071de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80071e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071ea:	edc0 6a00 	vstr	s13, [r0]
 80071ee:	e7eb      	b.n	80071c8 <__ieee754_rem_pio2f+0x50>
 80071f0:	429d      	cmp	r5, r3
 80071f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80071f6:	d00e      	beq.n	8007216 <__ieee754_rem_pio2f+0x9e>
 80071f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80073c8 <__ieee754_rem_pio2f+0x250>
 80071fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007200:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007204:	ed80 0a00 	vstr	s0, [r0]
 8007208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	edc4 7a01 	vstr	s15, [r4, #4]
 8007214:	e7dd      	b.n	80071d2 <__ieee754_rem_pio2f+0x5a>
 8007216:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80073cc <__ieee754_rem_pio2f+0x254>
 800721a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80073d0 <__ieee754_rem_pio2f+0x258>
 800721e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007222:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007226:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800722a:	edc0 6a00 	vstr	s13, [r0]
 800722e:	e7eb      	b.n	8007208 <__ieee754_rem_pio2f+0x90>
 8007230:	4b68      	ldr	r3, [pc, #416]	; (80073d4 <__ieee754_rem_pio2f+0x25c>)
 8007232:	429d      	cmp	r5, r3
 8007234:	dc72      	bgt.n	800731c <__ieee754_rem_pio2f+0x1a4>
 8007236:	f000 fc0d 	bl	8007a54 <fabsf>
 800723a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80073d8 <__ieee754_rem_pio2f+0x260>
 800723e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007242:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800724a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800724e:	ee17 0a90 	vmov	r0, s15
 8007252:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80073c0 <__ieee754_rem_pio2f+0x248>
 8007256:	eea7 0a67 	vfms.f32	s0, s14, s15
 800725a:	281f      	cmp	r0, #31
 800725c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80073c8 <__ieee754_rem_pio2f+0x250>
 8007260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007264:	eeb1 6a47 	vneg.f32	s12, s14
 8007268:	ee70 6a67 	vsub.f32	s13, s0, s15
 800726c:	ee16 2a90 	vmov	r2, s13
 8007270:	dc1c      	bgt.n	80072ac <__ieee754_rem_pio2f+0x134>
 8007272:	495a      	ldr	r1, [pc, #360]	; (80073dc <__ieee754_rem_pio2f+0x264>)
 8007274:	1e47      	subs	r7, r0, #1
 8007276:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800727a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800727e:	428b      	cmp	r3, r1
 8007280:	d014      	beq.n	80072ac <__ieee754_rem_pio2f+0x134>
 8007282:	6022      	str	r2, [r4, #0]
 8007284:	ed94 7a00 	vldr	s14, [r4]
 8007288:	ee30 0a47 	vsub.f32	s0, s0, s14
 800728c:	2e00      	cmp	r6, #0
 800728e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007292:	ed84 0a01 	vstr	s0, [r4, #4]
 8007296:	da9c      	bge.n	80071d2 <__ieee754_rem_pio2f+0x5a>
 8007298:	eeb1 7a47 	vneg.f32	s14, s14
 800729c:	eeb1 0a40 	vneg.f32	s0, s0
 80072a0:	ed84 7a00 	vstr	s14, [r4]
 80072a4:	ed84 0a01 	vstr	s0, [r4, #4]
 80072a8:	4240      	negs	r0, r0
 80072aa:	e792      	b.n	80071d2 <__ieee754_rem_pio2f+0x5a>
 80072ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80072b0:	15eb      	asrs	r3, r5, #23
 80072b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80072b6:	2d08      	cmp	r5, #8
 80072b8:	dde3      	ble.n	8007282 <__ieee754_rem_pio2f+0x10a>
 80072ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 80073cc <__ieee754_rem_pio2f+0x254>
 80072be:	eef0 6a40 	vmov.f32	s13, s0
 80072c2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80072c6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80072ca:	eea6 0a27 	vfma.f32	s0, s12, s15
 80072ce:	eddf 7a40 	vldr	s15, [pc, #256]	; 80073d0 <__ieee754_rem_pio2f+0x258>
 80072d2:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80072d6:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80072da:	eef0 7a40 	vmov.f32	s15, s0
 80072de:	ee15 2a90 	vmov	r2, s11
 80072e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80072e6:	1a5b      	subs	r3, r3, r1
 80072e8:	2b19      	cmp	r3, #25
 80072ea:	dc04      	bgt.n	80072f6 <__ieee754_rem_pio2f+0x17e>
 80072ec:	edc4 5a00 	vstr	s11, [r4]
 80072f0:	eeb0 0a66 	vmov.f32	s0, s13
 80072f4:	e7c6      	b.n	8007284 <__ieee754_rem_pio2f+0x10c>
 80072f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80073e0 <__ieee754_rem_pio2f+0x268>
 80072fa:	eeb0 0a66 	vmov.f32	s0, s13
 80072fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007302:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007306:	eddf 6a37 	vldr	s13, [pc, #220]	; 80073e4 <__ieee754_rem_pio2f+0x26c>
 800730a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800730e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007312:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007316:	ed84 7a00 	vstr	s14, [r4]
 800731a:	e7b3      	b.n	8007284 <__ieee754_rem_pio2f+0x10c>
 800731c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007320:	db06      	blt.n	8007330 <__ieee754_rem_pio2f+0x1b8>
 8007322:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007326:	edc0 7a01 	vstr	s15, [r0, #4]
 800732a:	edc0 7a00 	vstr	s15, [r0]
 800732e:	e733      	b.n	8007198 <__ieee754_rem_pio2f+0x20>
 8007330:	15ea      	asrs	r2, r5, #23
 8007332:	3a86      	subs	r2, #134	; 0x86
 8007334:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007340:	eddf 6a29 	vldr	s13, [pc, #164]	; 80073e8 <__ieee754_rem_pio2f+0x270>
 8007344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800734c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007354:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007358:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800735c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007360:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007364:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007368:	eef5 7a40 	vcmp.f32	s15, #0.0
 800736c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007370:	edcd 7a05 	vstr	s15, [sp, #20]
 8007374:	d11e      	bne.n	80073b4 <__ieee754_rem_pio2f+0x23c>
 8007376:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737e:	bf14      	ite	ne
 8007380:	2302      	movne	r3, #2
 8007382:	2301      	moveq	r3, #1
 8007384:	4919      	ldr	r1, [pc, #100]	; (80073ec <__ieee754_rem_pio2f+0x274>)
 8007386:	9101      	str	r1, [sp, #4]
 8007388:	2102      	movs	r1, #2
 800738a:	9100      	str	r1, [sp, #0]
 800738c:	a803      	add	r0, sp, #12
 800738e:	4621      	mov	r1, r4
 8007390:	f000 f88e 	bl	80074b0 <__kernel_rem_pio2f>
 8007394:	2e00      	cmp	r6, #0
 8007396:	f6bf af1c 	bge.w	80071d2 <__ieee754_rem_pio2f+0x5a>
 800739a:	edd4 7a00 	vldr	s15, [r4]
 800739e:	eef1 7a67 	vneg.f32	s15, s15
 80073a2:	edc4 7a00 	vstr	s15, [r4]
 80073a6:	edd4 7a01 	vldr	s15, [r4, #4]
 80073aa:	eef1 7a67 	vneg.f32	s15, s15
 80073ae:	edc4 7a01 	vstr	s15, [r4, #4]
 80073b2:	e779      	b.n	80072a8 <__ieee754_rem_pio2f+0x130>
 80073b4:	2303      	movs	r3, #3
 80073b6:	e7e5      	b.n	8007384 <__ieee754_rem_pio2f+0x20c>
 80073b8:	3f490fd8 	.word	0x3f490fd8
 80073bc:	4016cbe3 	.word	0x4016cbe3
 80073c0:	3fc90f80 	.word	0x3fc90f80
 80073c4:	3fc90fd0 	.word	0x3fc90fd0
 80073c8:	37354443 	.word	0x37354443
 80073cc:	37354400 	.word	0x37354400
 80073d0:	2e85a308 	.word	0x2e85a308
 80073d4:	43490f80 	.word	0x43490f80
 80073d8:	3f22f984 	.word	0x3f22f984
 80073dc:	08007d0c 	.word	0x08007d0c
 80073e0:	2e85a300 	.word	0x2e85a300
 80073e4:	248d3132 	.word	0x248d3132
 80073e8:	43800000 	.word	0x43800000
 80073ec:	08007d8c 	.word	0x08007d8c

080073f0 <__kernel_cosf>:
 80073f0:	ee10 3a10 	vmov	r3, s0
 80073f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80073fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007400:	da05      	bge.n	800740e <__kernel_cosf+0x1e>
 8007402:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007406:	ee17 2a90 	vmov	r2, s15
 800740a:	2a00      	cmp	r2, #0
 800740c:	d03d      	beq.n	800748a <__kernel_cosf+0x9a>
 800740e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007412:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007490 <__kernel_cosf+0xa0>
 8007416:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007494 <__kernel_cosf+0xa4>
 800741a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007498 <__kernel_cosf+0xa8>
 800741e:	4a1f      	ldr	r2, [pc, #124]	; (800749c <__kernel_cosf+0xac>)
 8007420:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007424:	4293      	cmp	r3, r2
 8007426:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80074a0 <__kernel_cosf+0xb0>
 800742a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800742e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80074a4 <__kernel_cosf+0xb4>
 8007432:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007436:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80074a8 <__kernel_cosf+0xb8>
 800743a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800743e:	eeb0 7a66 	vmov.f32	s14, s13
 8007442:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007446:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800744a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800744e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007452:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007456:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800745a:	dc04      	bgt.n	8007466 <__kernel_cosf+0x76>
 800745c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007460:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007464:	4770      	bx	lr
 8007466:	4a11      	ldr	r2, [pc, #68]	; (80074ac <__kernel_cosf+0xbc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	bfda      	itte	le
 800746c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007470:	ee06 3a90 	vmovle	s13, r3
 8007474:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007478:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800747c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007484:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007488:	4770      	bx	lr
 800748a:	eeb0 0a46 	vmov.f32	s0, s12
 800748e:	4770      	bx	lr
 8007490:	ad47d74e 	.word	0xad47d74e
 8007494:	310f74f6 	.word	0x310f74f6
 8007498:	3d2aaaab 	.word	0x3d2aaaab
 800749c:	3e999999 	.word	0x3e999999
 80074a0:	b493f27c 	.word	0xb493f27c
 80074a4:	37d00d01 	.word	0x37d00d01
 80074a8:	bab60b61 	.word	0xbab60b61
 80074ac:	3f480000 	.word	0x3f480000

080074b0 <__kernel_rem_pio2f>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	ed2d 8b04 	vpush	{d8-d9}
 80074b8:	b0d7      	sub	sp, #348	; 0x15c
 80074ba:	4616      	mov	r6, r2
 80074bc:	4698      	mov	r8, r3
 80074be:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80074c0:	4bbb      	ldr	r3, [pc, #748]	; (80077b0 <__kernel_rem_pio2f+0x300>)
 80074c2:	9001      	str	r0, [sp, #4]
 80074c4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80074c8:	1d33      	adds	r3, r6, #4
 80074ca:	460d      	mov	r5, r1
 80074cc:	f108 39ff 	add.w	r9, r8, #4294967295
 80074d0:	db29      	blt.n	8007526 <__kernel_rem_pio2f+0x76>
 80074d2:	1ef1      	subs	r1, r6, #3
 80074d4:	bf48      	it	mi
 80074d6:	1d31      	addmi	r1, r6, #4
 80074d8:	10c9      	asrs	r1, r1, #3
 80074da:	1c4c      	adds	r4, r1, #1
 80074dc:	00e3      	lsls	r3, r4, #3
 80074de:	9302      	str	r3, [sp, #8]
 80074e0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80074e2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80077c0 <__kernel_rem_pio2f+0x310>
 80074e6:	eba1 0009 	sub.w	r0, r1, r9
 80074ea:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80074ee:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80074f2:	eb07 0c09 	add.w	ip, r7, r9
 80074f6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80074fa:	2300      	movs	r3, #0
 80074fc:	4563      	cmp	r3, ip
 80074fe:	dd14      	ble.n	800752a <__kernel_rem_pio2f+0x7a>
 8007500:	ab1a      	add	r3, sp, #104	; 0x68
 8007502:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007506:	46cc      	mov	ip, r9
 8007508:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800750c:	f1c8 0b01 	rsb	fp, r8, #1
 8007510:	eb0b 020c 	add.w	r2, fp, ip
 8007514:	4297      	cmp	r7, r2
 8007516:	db27      	blt.n	8007568 <__kernel_rem_pio2f+0xb8>
 8007518:	f8dd e004 	ldr.w	lr, [sp, #4]
 800751c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80077c0 <__kernel_rem_pio2f+0x310>
 8007520:	4618      	mov	r0, r3
 8007522:	2200      	movs	r2, #0
 8007524:	e016      	b.n	8007554 <__kernel_rem_pio2f+0xa4>
 8007526:	2100      	movs	r1, #0
 8007528:	e7d7      	b.n	80074da <__kernel_rem_pio2f+0x2a>
 800752a:	42d8      	cmn	r0, r3
 800752c:	bf5d      	ittte	pl
 800752e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007532:	ee07 2a90 	vmovpl	s15, r2
 8007536:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800753a:	eef0 7a47 	vmovmi.f32	s15, s14
 800753e:	ecea 7a01 	vstmia	sl!, {s15}
 8007542:	3301      	adds	r3, #1
 8007544:	e7da      	b.n	80074fc <__kernel_rem_pio2f+0x4c>
 8007546:	ecfe 6a01 	vldmia	lr!, {s13}
 800754a:	ed90 7a00 	vldr	s14, [r0]
 800754e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007552:	3201      	adds	r2, #1
 8007554:	454a      	cmp	r2, r9
 8007556:	f1a0 0004 	sub.w	r0, r0, #4
 800755a:	ddf4      	ble.n	8007546 <__kernel_rem_pio2f+0x96>
 800755c:	ecea 7a01 	vstmia	sl!, {s15}
 8007560:	3304      	adds	r3, #4
 8007562:	f10c 0c01 	add.w	ip, ip, #1
 8007566:	e7d3      	b.n	8007510 <__kernel_rem_pio2f+0x60>
 8007568:	ab06      	add	r3, sp, #24
 800756a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800756e:	9304      	str	r3, [sp, #16]
 8007570:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007572:	eddf 8a92 	vldr	s17, [pc, #584]	; 80077bc <__kernel_rem_pio2f+0x30c>
 8007576:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80077b8 <__kernel_rem_pio2f+0x308>
 800757a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800757e:	9303      	str	r3, [sp, #12]
 8007580:	46ba      	mov	sl, r7
 8007582:	ab56      	add	r3, sp, #344	; 0x158
 8007584:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007588:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800758c:	ab06      	add	r3, sp, #24
 800758e:	4618      	mov	r0, r3
 8007590:	4652      	mov	r2, sl
 8007592:	2a00      	cmp	r2, #0
 8007594:	dc51      	bgt.n	800763a <__kernel_rem_pio2f+0x18a>
 8007596:	4620      	mov	r0, r4
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	f000 faa5 	bl	8007ae8 <scalbnf>
 800759e:	eeb0 8a40 	vmov.f32	s16, s0
 80075a2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80075a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80075aa:	f000 fa5b 	bl	8007a64 <floorf>
 80075ae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80075b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	9b05      	ldr	r3, [sp, #20]
 80075ba:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80075be:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80075c2:	edcd 7a00 	vstr	s15, [sp]
 80075c6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80075ca:	dd4b      	ble.n	8007664 <__kernel_rem_pio2f+0x1b4>
 80075cc:	f10a 3cff 	add.w	ip, sl, #4294967295
 80075d0:	aa06      	add	r2, sp, #24
 80075d2:	f1c4 0e08 	rsb	lr, r4, #8
 80075d6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80075da:	ee17 1a90 	vmov	r1, s15
 80075de:	fa42 f00e 	asr.w	r0, r2, lr
 80075e2:	4401      	add	r1, r0
 80075e4:	9100      	str	r1, [sp, #0]
 80075e6:	fa00 f00e 	lsl.w	r0, r0, lr
 80075ea:	a906      	add	r1, sp, #24
 80075ec:	1a12      	subs	r2, r2, r0
 80075ee:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80075f2:	f1c4 0007 	rsb	r0, r4, #7
 80075f6:	fa42 fb00 	asr.w	fp, r2, r0
 80075fa:	f1bb 0f00 	cmp.w	fp, #0
 80075fe:	dd43      	ble.n	8007688 <__kernel_rem_pio2f+0x1d8>
 8007600:	9a00      	ldr	r2, [sp, #0]
 8007602:	f04f 0e00 	mov.w	lr, #0
 8007606:	3201      	adds	r2, #1
 8007608:	9200      	str	r2, [sp, #0]
 800760a:	4670      	mov	r0, lr
 800760c:	45f2      	cmp	sl, lr
 800760e:	dc6c      	bgt.n	80076ea <__kernel_rem_pio2f+0x23a>
 8007610:	2c00      	cmp	r4, #0
 8007612:	dd04      	ble.n	800761e <__kernel_rem_pio2f+0x16e>
 8007614:	2c01      	cmp	r4, #1
 8007616:	d079      	beq.n	800770c <__kernel_rem_pio2f+0x25c>
 8007618:	2c02      	cmp	r4, #2
 800761a:	f000 8082 	beq.w	8007722 <__kernel_rem_pio2f+0x272>
 800761e:	f1bb 0f02 	cmp.w	fp, #2
 8007622:	d131      	bne.n	8007688 <__kernel_rem_pio2f+0x1d8>
 8007624:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007628:	ee30 8a48 	vsub.f32	s16, s0, s16
 800762c:	b360      	cbz	r0, 8007688 <__kernel_rem_pio2f+0x1d8>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 fa5a 	bl	8007ae8 <scalbnf>
 8007634:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007638:	e026      	b.n	8007688 <__kernel_rem_pio2f+0x1d8>
 800763a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800763e:	3a01      	subs	r2, #1
 8007640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007644:	a942      	add	r1, sp, #264	; 0x108
 8007646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800764a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800764e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007652:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007656:	eca0 0a01 	vstmia	r0!, {s0}
 800765a:	ed9c 0a00 	vldr	s0, [ip]
 800765e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007662:	e796      	b.n	8007592 <__kernel_rem_pio2f+0xe2>
 8007664:	d107      	bne.n	8007676 <__kernel_rem_pio2f+0x1c6>
 8007666:	f10a 32ff 	add.w	r2, sl, #4294967295
 800766a:	a906      	add	r1, sp, #24
 800766c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007670:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007674:	e7c1      	b.n	80075fa <__kernel_rem_pio2f+0x14a>
 8007676:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800767a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007682:	da2f      	bge.n	80076e4 <__kernel_rem_pio2f+0x234>
 8007684:	f04f 0b00 	mov.w	fp, #0
 8007688:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007690:	f040 8098 	bne.w	80077c4 <__kernel_rem_pio2f+0x314>
 8007694:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007698:	469c      	mov	ip, r3
 800769a:	2200      	movs	r2, #0
 800769c:	45bc      	cmp	ip, r7
 800769e:	da48      	bge.n	8007732 <__kernel_rem_pio2f+0x282>
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	d05f      	beq.n	8007764 <__kernel_rem_pio2f+0x2b4>
 80076a4:	aa06      	add	r2, sp, #24
 80076a6:	3c08      	subs	r4, #8
 80076a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80076ac:	2900      	cmp	r1, #0
 80076ae:	d07d      	beq.n	80077ac <__kernel_rem_pio2f+0x2fc>
 80076b0:	4620      	mov	r0, r4
 80076b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	f000 fa16 	bl	8007ae8 <scalbnf>
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80077bc <__kernel_rem_pio2f+0x30c>
 80076c2:	4619      	mov	r1, r3
 80076c4:	2900      	cmp	r1, #0
 80076c6:	f280 80af 	bge.w	8007828 <__kernel_rem_pio2f+0x378>
 80076ca:	4618      	mov	r0, r3
 80076cc:	2400      	movs	r4, #0
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f2c0 80d0 	blt.w	8007874 <__kernel_rem_pio2f+0x3c4>
 80076d4:	a942      	add	r1, sp, #264	; 0x108
 80076d6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80076da:	4a36      	ldr	r2, [pc, #216]	; (80077b4 <__kernel_rem_pio2f+0x304>)
 80076dc:	eddf 7a38 	vldr	s15, [pc, #224]	; 80077c0 <__kernel_rem_pio2f+0x310>
 80076e0:	2100      	movs	r1, #0
 80076e2:	e0bb      	b.n	800785c <__kernel_rem_pio2f+0x3ac>
 80076e4:	f04f 0b02 	mov.w	fp, #2
 80076e8:	e78a      	b.n	8007600 <__kernel_rem_pio2f+0x150>
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	b948      	cbnz	r0, 8007702 <__kernel_rem_pio2f+0x252>
 80076ee:	b11a      	cbz	r2, 80076f8 <__kernel_rem_pio2f+0x248>
 80076f0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f10e 0e01 	add.w	lr, lr, #1
 80076fc:	3304      	adds	r3, #4
 80076fe:	4610      	mov	r0, r2
 8007700:	e784      	b.n	800760c <__kernel_rem_pio2f+0x15c>
 8007702:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	4602      	mov	r2, r0
 800770a:	e7f5      	b.n	80076f8 <__kernel_rem_pio2f+0x248>
 800770c:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007710:	ab06      	add	r3, sp, #24
 8007712:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800771a:	aa06      	add	r2, sp, #24
 800771c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007720:	e77d      	b.n	800761e <__kernel_rem_pio2f+0x16e>
 8007722:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007726:	ab06      	add	r3, sp, #24
 8007728:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800772c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007730:	e7f3      	b.n	800771a <__kernel_rem_pio2f+0x26a>
 8007732:	a906      	add	r1, sp, #24
 8007734:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007738:	f10c 3cff 	add.w	ip, ip, #4294967295
 800773c:	4302      	orrs	r2, r0
 800773e:	e7ad      	b.n	800769c <__kernel_rem_pio2f+0x1ec>
 8007740:	3001      	adds	r0, #1
 8007742:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007746:	2a00      	cmp	r2, #0
 8007748:	d0fa      	beq.n	8007740 <__kernel_rem_pio2f+0x290>
 800774a:	a91a      	add	r1, sp, #104	; 0x68
 800774c:	eb0a 0208 	add.w	r2, sl, r8
 8007750:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007754:	f10a 0301 	add.w	r3, sl, #1
 8007758:	eb0a 0100 	add.w	r1, sl, r0
 800775c:	4299      	cmp	r1, r3
 800775e:	da04      	bge.n	800776a <__kernel_rem_pio2f+0x2ba>
 8007760:	468a      	mov	sl, r1
 8007762:	e70e      	b.n	8007582 <__kernel_rem_pio2f+0xd2>
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	2001      	movs	r0, #1
 8007768:	e7eb      	b.n	8007742 <__kernel_rem_pio2f+0x292>
 800776a:	9803      	ldr	r0, [sp, #12]
 800776c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007770:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007774:	9000      	str	r0, [sp, #0]
 8007776:	ee07 0a90 	vmov	s15, r0
 800777a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800777e:	2000      	movs	r0, #0
 8007780:	ece2 7a01 	vstmia	r2!, {s15}
 8007784:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80077c0 <__kernel_rem_pio2f+0x310>
 8007788:	4696      	mov	lr, r2
 800778a:	4548      	cmp	r0, r9
 800778c:	dd06      	ble.n	800779c <__kernel_rem_pio2f+0x2ec>
 800778e:	a842      	add	r0, sp, #264	; 0x108
 8007790:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007794:	edc0 7a00 	vstr	s15, [r0]
 8007798:	3301      	adds	r3, #1
 800779a:	e7df      	b.n	800775c <__kernel_rem_pio2f+0x2ac>
 800779c:	ecfc 6a01 	vldmia	ip!, {s13}
 80077a0:	ed3e 7a01 	vldmdb	lr!, {s14}
 80077a4:	3001      	adds	r0, #1
 80077a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80077aa:	e7ee      	b.n	800778a <__kernel_rem_pio2f+0x2da>
 80077ac:	3b01      	subs	r3, #1
 80077ae:	e779      	b.n	80076a4 <__kernel_rem_pio2f+0x1f4>
 80077b0:	080080d0 	.word	0x080080d0
 80077b4:	080080a4 	.word	0x080080a4
 80077b8:	43800000 	.word	0x43800000
 80077bc:	3b800000 	.word	0x3b800000
 80077c0:	00000000 	.word	0x00000000
 80077c4:	9b02      	ldr	r3, [sp, #8]
 80077c6:	eeb0 0a48 	vmov.f32	s0, s16
 80077ca:	1b98      	subs	r0, r3, r6
 80077cc:	f000 f98c 	bl	8007ae8 <scalbnf>
 80077d0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80077b8 <__kernel_rem_pio2f+0x308>
 80077d4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80077d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077dc:	db1b      	blt.n	8007816 <__kernel_rem_pio2f+0x366>
 80077de:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80077bc <__kernel_rem_pio2f+0x30c>
 80077e2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80077e6:	aa06      	add	r2, sp, #24
 80077e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077ec:	a906      	add	r1, sp, #24
 80077ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077f2:	3408      	adds	r4, #8
 80077f4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80077f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007800:	ee10 3a10 	vmov	r3, s0
 8007804:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007808:	ee17 2a90 	vmov	r2, s15
 800780c:	f10a 0301 	add.w	r3, sl, #1
 8007810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007814:	e74c      	b.n	80076b0 <__kernel_rem_pio2f+0x200>
 8007816:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800781a:	aa06      	add	r2, sp, #24
 800781c:	ee10 3a10 	vmov	r3, s0
 8007820:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007824:	4653      	mov	r3, sl
 8007826:	e743      	b.n	80076b0 <__kernel_rem_pio2f+0x200>
 8007828:	aa42      	add	r2, sp, #264	; 0x108
 800782a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800782e:	aa06      	add	r2, sp, #24
 8007830:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007834:	9201      	str	r2, [sp, #4]
 8007836:	ee07 2a90 	vmov	s15, r2
 800783a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800783e:	3901      	subs	r1, #1
 8007840:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007844:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007848:	edc0 7a00 	vstr	s15, [r0]
 800784c:	e73a      	b.n	80076c4 <__kernel_rem_pio2f+0x214>
 800784e:	ecf2 6a01 	vldmia	r2!, {s13}
 8007852:	ecb6 7a01 	vldmia	r6!, {s14}
 8007856:	eee6 7a87 	vfma.f32	s15, s13, s14
 800785a:	3101      	adds	r1, #1
 800785c:	42b9      	cmp	r1, r7
 800785e:	dc01      	bgt.n	8007864 <__kernel_rem_pio2f+0x3b4>
 8007860:	428c      	cmp	r4, r1
 8007862:	daf4      	bge.n	800784e <__kernel_rem_pio2f+0x39e>
 8007864:	aa56      	add	r2, sp, #344	; 0x158
 8007866:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800786a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800786e:	3801      	subs	r0, #1
 8007870:	3401      	adds	r4, #1
 8007872:	e72c      	b.n	80076ce <__kernel_rem_pio2f+0x21e>
 8007874:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007876:	2a02      	cmp	r2, #2
 8007878:	dc0a      	bgt.n	8007890 <__kernel_rem_pio2f+0x3e0>
 800787a:	2a00      	cmp	r2, #0
 800787c:	dc61      	bgt.n	8007942 <__kernel_rem_pio2f+0x492>
 800787e:	d03c      	beq.n	80078fa <__kernel_rem_pio2f+0x44a>
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	f003 0007 	and.w	r0, r3, #7
 8007886:	b057      	add	sp, #348	; 0x15c
 8007888:	ecbd 8b04 	vpop	{d8-d9}
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007892:	2a03      	cmp	r2, #3
 8007894:	d1f4      	bne.n	8007880 <__kernel_rem_pio2f+0x3d0>
 8007896:	aa2e      	add	r2, sp, #184	; 0xb8
 8007898:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800789c:	4608      	mov	r0, r1
 800789e:	461c      	mov	r4, r3
 80078a0:	2c00      	cmp	r4, #0
 80078a2:	f1a0 0004 	sub.w	r0, r0, #4
 80078a6:	dc59      	bgt.n	800795c <__kernel_rem_pio2f+0x4ac>
 80078a8:	4618      	mov	r0, r3
 80078aa:	2801      	cmp	r0, #1
 80078ac:	f1a1 0104 	sub.w	r1, r1, #4
 80078b0:	dc64      	bgt.n	800797c <__kernel_rem_pio2f+0x4cc>
 80078b2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80077c0 <__kernel_rem_pio2f+0x310>
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	dc70      	bgt.n	800799c <__kernel_rem_pio2f+0x4ec>
 80078ba:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80078be:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80078c2:	f1bb 0f00 	cmp.w	fp, #0
 80078c6:	d172      	bne.n	80079ae <__kernel_rem_pio2f+0x4fe>
 80078c8:	edc5 6a00 	vstr	s13, [r5]
 80078cc:	ed85 7a01 	vstr	s14, [r5, #4]
 80078d0:	edc5 7a02 	vstr	s15, [r5, #8]
 80078d4:	e7d4      	b.n	8007880 <__kernel_rem_pio2f+0x3d0>
 80078d6:	aa2e      	add	r2, sp, #184	; 0xb8
 80078d8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80078dc:	ed91 7a00 	vldr	s14, [r1]
 80078e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078e4:	3b01      	subs	r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	daf5      	bge.n	80078d6 <__kernel_rem_pio2f+0x426>
 80078ea:	f1bb 0f00 	cmp.w	fp, #0
 80078ee:	d001      	beq.n	80078f4 <__kernel_rem_pio2f+0x444>
 80078f0:	eef1 7a67 	vneg.f32	s15, s15
 80078f4:	edc5 7a00 	vstr	s15, [r5]
 80078f8:	e7c2      	b.n	8007880 <__kernel_rem_pio2f+0x3d0>
 80078fa:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80077c0 <__kernel_rem_pio2f+0x310>
 80078fe:	e7f2      	b.n	80078e6 <__kernel_rem_pio2f+0x436>
 8007900:	aa2e      	add	r2, sp, #184	; 0xb8
 8007902:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007906:	edd0 7a00 	vldr	s15, [r0]
 800790a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800790e:	3901      	subs	r1, #1
 8007910:	2900      	cmp	r1, #0
 8007912:	daf5      	bge.n	8007900 <__kernel_rem_pio2f+0x450>
 8007914:	f1bb 0f00 	cmp.w	fp, #0
 8007918:	d017      	beq.n	800794a <__kernel_rem_pio2f+0x49a>
 800791a:	eef1 7a47 	vneg.f32	s15, s14
 800791e:	edc5 7a00 	vstr	s15, [r5]
 8007922:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800792a:	a82f      	add	r0, sp, #188	; 0xbc
 800792c:	2101      	movs	r1, #1
 800792e:	428b      	cmp	r3, r1
 8007930:	da0e      	bge.n	8007950 <__kernel_rem_pio2f+0x4a0>
 8007932:	f1bb 0f00 	cmp.w	fp, #0
 8007936:	d001      	beq.n	800793c <__kernel_rem_pio2f+0x48c>
 8007938:	eef1 7a67 	vneg.f32	s15, s15
 800793c:	edc5 7a01 	vstr	s15, [r5, #4]
 8007940:	e79e      	b.n	8007880 <__kernel_rem_pio2f+0x3d0>
 8007942:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80077c0 <__kernel_rem_pio2f+0x310>
 8007946:	4619      	mov	r1, r3
 8007948:	e7e2      	b.n	8007910 <__kernel_rem_pio2f+0x460>
 800794a:	eef0 7a47 	vmov.f32	s15, s14
 800794e:	e7e6      	b.n	800791e <__kernel_rem_pio2f+0x46e>
 8007950:	ecb0 7a01 	vldmia	r0!, {s14}
 8007954:	3101      	adds	r1, #1
 8007956:	ee77 7a87 	vadd.f32	s15, s15, s14
 800795a:	e7e8      	b.n	800792e <__kernel_rem_pio2f+0x47e>
 800795c:	edd0 7a00 	vldr	s15, [r0]
 8007960:	edd0 6a01 	vldr	s13, [r0, #4]
 8007964:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007968:	3c01      	subs	r4, #1
 800796a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800796e:	ed80 7a00 	vstr	s14, [r0]
 8007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007976:	edc0 7a01 	vstr	s15, [r0, #4]
 800797a:	e791      	b.n	80078a0 <__kernel_rem_pio2f+0x3f0>
 800797c:	edd1 7a00 	vldr	s15, [r1]
 8007980:	edd1 6a01 	vldr	s13, [r1, #4]
 8007984:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007988:	3801      	subs	r0, #1
 800798a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800798e:	ed81 7a00 	vstr	s14, [r1]
 8007992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007996:	edc1 7a01 	vstr	s15, [r1, #4]
 800799a:	e786      	b.n	80078aa <__kernel_rem_pio2f+0x3fa>
 800799c:	aa2e      	add	r2, sp, #184	; 0xb8
 800799e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80079a2:	ed91 7a00 	vldr	s14, [r1]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079ac:	e783      	b.n	80078b6 <__kernel_rem_pio2f+0x406>
 80079ae:	eef1 6a66 	vneg.f32	s13, s13
 80079b2:	eeb1 7a47 	vneg.f32	s14, s14
 80079b6:	edc5 6a00 	vstr	s13, [r5]
 80079ba:	ed85 7a01 	vstr	s14, [r5, #4]
 80079be:	eef1 7a67 	vneg.f32	s15, s15
 80079c2:	e785      	b.n	80078d0 <__kernel_rem_pio2f+0x420>

080079c4 <__kernel_sinf>:
 80079c4:	ee10 3a10 	vmov	r3, s0
 80079c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079cc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80079d0:	da04      	bge.n	80079dc <__kernel_sinf+0x18>
 80079d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80079d6:	ee17 3a90 	vmov	r3, s15
 80079da:	b35b      	cbz	r3, 8007a34 <__kernel_sinf+0x70>
 80079dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80079e0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007a38 <__kernel_sinf+0x74>
 80079e4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007a3c <__kernel_sinf+0x78>
 80079e8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80079ec:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007a40 <__kernel_sinf+0x7c>
 80079f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80079f4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007a44 <__kernel_sinf+0x80>
 80079f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80079fc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007a48 <__kernel_sinf+0x84>
 8007a00:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007a04:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007a08:	b930      	cbnz	r0, 8007a18 <__kernel_sinf+0x54>
 8007a0a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007a4c <__kernel_sinf+0x88>
 8007a0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007a12:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007a16:	4770      	bx	lr
 8007a18:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007a1c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007a20:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007a24:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007a28:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007a50 <__kernel_sinf+0x8c>
 8007a2c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007a30:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	2f2ec9d3 	.word	0x2f2ec9d3
 8007a3c:	b2d72f34 	.word	0xb2d72f34
 8007a40:	3638ef1b 	.word	0x3638ef1b
 8007a44:	b9500d01 	.word	0xb9500d01
 8007a48:	3c088889 	.word	0x3c088889
 8007a4c:	be2aaaab 	.word	0xbe2aaaab
 8007a50:	3e2aaaab 	.word	0x3e2aaaab

08007a54 <fabsf>:
 8007a54:	ee10 3a10 	vmov	r3, s0
 8007a58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a5c:	ee00 3a10 	vmov	s0, r3
 8007a60:	4770      	bx	lr
	...

08007a64 <floorf>:
 8007a64:	ee10 3a10 	vmov	r3, s0
 8007a68:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007a6c:	3a7f      	subs	r2, #127	; 0x7f
 8007a6e:	2a16      	cmp	r2, #22
 8007a70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a74:	dc2a      	bgt.n	8007acc <floorf+0x68>
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	da11      	bge.n	8007a9e <floorf+0x3a>
 8007a7a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007adc <floorf+0x78>
 8007a7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007a82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8a:	dd05      	ble.n	8007a98 <floorf+0x34>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	da23      	bge.n	8007ad8 <floorf+0x74>
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <floorf+0x7c>)
 8007a92:	2900      	cmp	r1, #0
 8007a94:	bf18      	it	ne
 8007a96:	4613      	movne	r3, r2
 8007a98:	ee00 3a10 	vmov	s0, r3
 8007a9c:	4770      	bx	lr
 8007a9e:	4911      	ldr	r1, [pc, #68]	; (8007ae4 <floorf+0x80>)
 8007aa0:	4111      	asrs	r1, r2
 8007aa2:	420b      	tst	r3, r1
 8007aa4:	d0fa      	beq.n	8007a9c <floorf+0x38>
 8007aa6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007adc <floorf+0x78>
 8007aaa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007aae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab6:	ddef      	ble.n	8007a98 <floorf+0x34>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfbe      	ittt	lt
 8007abc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007ac0:	fa40 f202 	asrlt.w	r2, r0, r2
 8007ac4:	189b      	addlt	r3, r3, r2
 8007ac6:	ea23 0301 	bic.w	r3, r3, r1
 8007aca:	e7e5      	b.n	8007a98 <floorf+0x34>
 8007acc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007ad0:	d3e4      	bcc.n	8007a9c <floorf+0x38>
 8007ad2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ad6:	4770      	bx	lr
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e7dd      	b.n	8007a98 <floorf+0x34>
 8007adc:	7149f2ca 	.word	0x7149f2ca
 8007ae0:	bf800000 	.word	0xbf800000
 8007ae4:	007fffff 	.word	0x007fffff

08007ae8 <scalbnf>:
 8007ae8:	ee10 3a10 	vmov	r3, s0
 8007aec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007af0:	d025      	beq.n	8007b3e <scalbnf+0x56>
 8007af2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007af6:	d302      	bcc.n	8007afe <scalbnf+0x16>
 8007af8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007afc:	4770      	bx	lr
 8007afe:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007b02:	d122      	bne.n	8007b4a <scalbnf+0x62>
 8007b04:	4b2a      	ldr	r3, [pc, #168]	; (8007bb0 <scalbnf+0xc8>)
 8007b06:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007bb4 <scalbnf+0xcc>
 8007b0a:	4298      	cmp	r0, r3
 8007b0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b10:	db16      	blt.n	8007b40 <scalbnf+0x58>
 8007b12:	ee10 3a10 	vmov	r3, s0
 8007b16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007b1a:	3a19      	subs	r2, #25
 8007b1c:	4402      	add	r2, r0
 8007b1e:	2afe      	cmp	r2, #254	; 0xfe
 8007b20:	dd15      	ble.n	8007b4e <scalbnf+0x66>
 8007b22:	ee10 3a10 	vmov	r3, s0
 8007b26:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007bb8 <scalbnf+0xd0>
 8007b2a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007bbc <scalbnf+0xd4>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	eeb0 7a67 	vmov.f32	s14, s15
 8007b34:	bfb8      	it	lt
 8007b36:	eef0 7a66 	vmovlt.f32	s15, s13
 8007b3a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007b3e:	4770      	bx	lr
 8007b40:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007bc0 <scalbnf+0xd8>
 8007b44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b48:	4770      	bx	lr
 8007b4a:	0dd2      	lsrs	r2, r2, #23
 8007b4c:	e7e6      	b.n	8007b1c <scalbnf+0x34>
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	dd06      	ble.n	8007b60 <scalbnf+0x78>
 8007b52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b56:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007b5a:	ee00 3a10 	vmov	s0, r3
 8007b5e:	4770      	bx	lr
 8007b60:	f112 0f16 	cmn.w	r2, #22
 8007b64:	da1a      	bge.n	8007b9c <scalbnf+0xb4>
 8007b66:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007b6a:	4298      	cmp	r0, r3
 8007b6c:	ee10 3a10 	vmov	r3, s0
 8007b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b74:	dd0a      	ble.n	8007b8c <scalbnf+0xa4>
 8007b76:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007bb8 <scalbnf+0xd0>
 8007b7a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007bbc <scalbnf+0xd4>
 8007b7e:	eef0 7a40 	vmov.f32	s15, s0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf18      	it	ne
 8007b86:	eeb0 0a47 	vmovne.f32	s0, s14
 8007b8a:	e7db      	b.n	8007b44 <scalbnf+0x5c>
 8007b8c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007bc0 <scalbnf+0xd8>
 8007b90:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007bc4 <scalbnf+0xdc>
 8007b94:	eef0 7a40 	vmov.f32	s15, s0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	e7f3      	b.n	8007b84 <scalbnf+0x9c>
 8007b9c:	3219      	adds	r2, #25
 8007b9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ba2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007ba6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007bc8 <scalbnf+0xe0>
 8007baa:	ee07 3a10 	vmov	s14, r3
 8007bae:	e7c4      	b.n	8007b3a <scalbnf+0x52>
 8007bb0:	ffff3cb0 	.word	0xffff3cb0
 8007bb4:	4c000000 	.word	0x4c000000
 8007bb8:	7149f2ca 	.word	0x7149f2ca
 8007bbc:	f149f2ca 	.word	0xf149f2ca
 8007bc0:	0da24260 	.word	0x0da24260
 8007bc4:	8da24260 	.word	0x8da24260
 8007bc8:	33000000 	.word	0x33000000

08007bcc <_init>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	bf00      	nop
 8007bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd2:	bc08      	pop	{r3}
 8007bd4:	469e      	mov	lr, r3
 8007bd6:	4770      	bx	lr

08007bd8 <_fini>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr
