
PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f0  080088f0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088f8  080088f8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088f8  080088f8  000188f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088fc  080088fc  000188fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011c00  20000084  08008984  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011c84  08008984  00021c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001359c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5a  00000000  00000000  00033650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000362b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  000372e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245eb  00000000  00000000  000381e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001355b  00000000  00000000  0005c7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfc00  00000000  00000000  0006fd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f92e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd0  00000000  00000000  0014f984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008478 	.word	0x08008478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08008478 	.word	0x08008478

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_uldivmod>:
 8000a3c:	b953      	cbnz	r3, 8000a54 <__aeabi_uldivmod+0x18>
 8000a3e:	b94a      	cbnz	r2, 8000a54 <__aeabi_uldivmod+0x18>
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf08      	it	eq
 8000a44:	2800      	cmpeq	r0, #0
 8000a46:	bf1c      	itt	ne
 8000a48:	f04f 31ff 	movne.w	r1, #4294967295
 8000a4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a50:	f000 b96e 	b.w	8000d30 <__aeabi_idiv0>
 8000a54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a5c:	f000 f806 	bl	8000a6c <__udivmoddi4>
 8000a60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <__udivmoddi4>:
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	9d08      	ldr	r5, [sp, #32]
 8000a72:	4604      	mov	r4, r0
 8000a74:	468c      	mov	ip, r1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8083 	bne.w	8000b82 <__udivmoddi4+0x116>
 8000a7c:	428a      	cmp	r2, r1
 8000a7e:	4617      	mov	r7, r2
 8000a80:	d947      	bls.n	8000b12 <__udivmoddi4+0xa6>
 8000a82:	fab2 f282 	clz	r2, r2
 8000a86:	b142      	cbz	r2, 8000a9a <__udivmoddi4+0x2e>
 8000a88:	f1c2 0020 	rsb	r0, r2, #32
 8000a8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a90:	4091      	lsls	r1, r2
 8000a92:	4097      	lsls	r7, r2
 8000a94:	ea40 0c01 	orr.w	ip, r0, r1
 8000a98:	4094      	lsls	r4, r2
 8000a9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a9e:	0c23      	lsrs	r3, r4, #16
 8000aa0:	fbbc f6f8 	udiv	r6, ip, r8
 8000aa4:	fa1f fe87 	uxth.w	lr, r7
 8000aa8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ab4:	4299      	cmp	r1, r3
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x60>
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000abe:	f080 8119 	bcs.w	8000cf4 <__udivmoddi4+0x288>
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	f240 8116 	bls.w	8000cf4 <__udivmoddi4+0x288>
 8000ac8:	3e02      	subs	r6, #2
 8000aca:	443b      	add	r3, r7
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ad8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000adc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d909      	bls.n	8000af8 <__udivmoddi4+0x8c>
 8000ae4:	193c      	adds	r4, r7, r4
 8000ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aea:	f080 8105 	bcs.w	8000cf8 <__udivmoddi4+0x28c>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	f240 8102 	bls.w	8000cf8 <__udivmoddi4+0x28c>
 8000af4:	3802      	subs	r0, #2
 8000af6:	443c      	add	r4, r7
 8000af8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000afc:	eba4 040e 	sub.w	r4, r4, lr
 8000b00:	2600      	movs	r6, #0
 8000b02:	b11d      	cbz	r5, 8000b0c <__udivmoddi4+0xa0>
 8000b04:	40d4      	lsrs	r4, r2
 8000b06:	2300      	movs	r3, #0
 8000b08:	e9c5 4300 	strd	r4, r3, [r5]
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	b902      	cbnz	r2, 8000b16 <__udivmoddi4+0xaa>
 8000b14:	deff      	udf	#255	; 0xff
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d150      	bne.n	8000bc0 <__udivmoddi4+0x154>
 8000b1e:	1bcb      	subs	r3, r1, r7
 8000b20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b24:	fa1f f887 	uxth.w	r8, r7
 8000b28:	2601      	movs	r6, #1
 8000b2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b2e:	0c21      	lsrs	r1, r4, #16
 8000b30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b38:	fb08 f30c 	mul.w	r3, r8, ip
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0xe4>
 8000b40:	1879      	adds	r1, r7, r1
 8000b42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0xe2>
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	f200 80e9 	bhi.w	8000d20 <__udivmoddi4+0x2b4>
 8000b4e:	4684      	mov	ip, r0
 8000b50:	1ac9      	subs	r1, r1, r3
 8000b52:	b2a3      	uxth	r3, r4
 8000b54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b60:	fb08 f800 	mul.w	r8, r8, r0
 8000b64:	45a0      	cmp	r8, r4
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x10c>
 8000b68:	193c      	adds	r4, r7, r4
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x10a>
 8000b70:	45a0      	cmp	r8, r4
 8000b72:	f200 80d9 	bhi.w	8000d28 <__udivmoddi4+0x2bc>
 8000b76:	4618      	mov	r0, r3
 8000b78:	eba4 0408 	sub.w	r4, r4, r8
 8000b7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b80:	e7bf      	b.n	8000b02 <__udivmoddi4+0x96>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0x12e>
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	f000 80b1 	beq.w	8000cee <__udivmoddi4+0x282>
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b92:	4630      	mov	r0, r6
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f683 	clz	r6, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d14a      	bne.n	8000c38 <__udivmoddi4+0x1cc>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0x140>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80b8 	bhi.w	8000d1c <__udivmoddi4+0x2b0>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0103 	sbc.w	r1, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d0a8      	beq.n	8000b0c <__udivmoddi4+0xa0>
 8000bba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000bc0:	f1c2 0320 	rsb	r3, r2, #32
 8000bc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bc8:	4097      	lsls	r7, r2
 8000bca:	fa01 f002 	lsl.w	r0, r1, r2
 8000bce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd2:	40d9      	lsrs	r1, r3
 8000bd4:	4330      	orrs	r0, r6
 8000bd6:	0c03      	lsrs	r3, r0, #16
 8000bd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bdc:	fa1f f887 	uxth.w	r8, r7
 8000be0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb06 f108 	mul.w	r1, r6, r8
 8000bec:	4299      	cmp	r1, r3
 8000bee:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x19c>
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bfa:	f080 808d 	bcs.w	8000d18 <__udivmoddi4+0x2ac>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 808a 	bls.w	8000d18 <__udivmoddi4+0x2ac>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	443b      	add	r3, r7
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b281      	uxth	r1, r0
 8000c0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb00 f308 	mul.w	r3, r0, r8
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x1c4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c26:	d273      	bcs.n	8000d10 <__udivmoddi4+0x2a4>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d971      	bls.n	8000d10 <__udivmoddi4+0x2a4>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4439      	add	r1, r7
 8000c30:	1acb      	subs	r3, r1, r3
 8000c32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c36:	e778      	b.n	8000b2a <__udivmoddi4+0xbe>
 8000c38:	f1c6 0c20 	rsb	ip, r6, #32
 8000c3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c44:	431c      	orrs	r4, r3
 8000c46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c56:	431f      	orrs	r7, r3
 8000c58:	0c3b      	lsrs	r3, r7, #16
 8000c5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c5e:	fa1f f884 	uxth.w	r8, r4
 8000c62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c6e:	458a      	cmp	sl, r1
 8000c70:	fa02 f206 	lsl.w	r2, r2, r6
 8000c74:	fa00 f306 	lsl.w	r3, r0, r6
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x220>
 8000c7a:	1861      	adds	r1, r4, r1
 8000c7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c80:	d248      	bcs.n	8000d14 <__udivmoddi4+0x2a8>
 8000c82:	458a      	cmp	sl, r1
 8000c84:	d946      	bls.n	8000d14 <__udivmoddi4+0x2a8>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4421      	add	r1, r4
 8000c8c:	eba1 010a 	sub.w	r1, r1, sl
 8000c90:	b2bf      	uxth	r7, r7
 8000c92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c9e:	fb00 f808 	mul.w	r8, r0, r8
 8000ca2:	45b8      	cmp	r8, r7
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x24a>
 8000ca6:	19e7      	adds	r7, r4, r7
 8000ca8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cac:	d22e      	bcs.n	8000d0c <__udivmoddi4+0x2a0>
 8000cae:	45b8      	cmp	r8, r7
 8000cb0:	d92c      	bls.n	8000d0c <__udivmoddi4+0x2a0>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4427      	add	r7, r4
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	eba7 0708 	sub.w	r7, r7, r8
 8000cbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000cc2:	454f      	cmp	r7, r9
 8000cc4:	46c6      	mov	lr, r8
 8000cc6:	4649      	mov	r1, r9
 8000cc8:	d31a      	bcc.n	8000d00 <__udivmoddi4+0x294>
 8000cca:	d017      	beq.n	8000cfc <__udivmoddi4+0x290>
 8000ccc:	b15d      	cbz	r5, 8000ce6 <__udivmoddi4+0x27a>
 8000cce:	ebb3 020e 	subs.w	r2, r3, lr
 8000cd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cda:	40f2      	lsrs	r2, r6
 8000cdc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce0:	40f7      	lsrs	r7, r6
 8000ce2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	462e      	mov	r6, r5
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	e70b      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	e6e9      	b.n	8000acc <__udivmoddi4+0x60>
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	e6fd      	b.n	8000af8 <__udivmoddi4+0x8c>
 8000cfc:	4543      	cmp	r3, r8
 8000cfe:	d2e5      	bcs.n	8000ccc <__udivmoddi4+0x260>
 8000d00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d04:	eb69 0104 	sbc.w	r1, r9, r4
 8000d08:	3801      	subs	r0, #1
 8000d0a:	e7df      	b.n	8000ccc <__udivmoddi4+0x260>
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	e7d2      	b.n	8000cb6 <__udivmoddi4+0x24a>
 8000d10:	4660      	mov	r0, ip
 8000d12:	e78d      	b.n	8000c30 <__udivmoddi4+0x1c4>
 8000d14:	4681      	mov	r9, r0
 8000d16:	e7b9      	b.n	8000c8c <__udivmoddi4+0x220>
 8000d18:	4666      	mov	r6, ip
 8000d1a:	e775      	b.n	8000c08 <__udivmoddi4+0x19c>
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e74a      	b.n	8000bb6 <__udivmoddi4+0x14a>
 8000d20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d24:	4439      	add	r1, r7
 8000d26:	e713      	b.n	8000b50 <__udivmoddi4+0xe4>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	443c      	add	r4, r7
 8000d2c:	e724      	b.n	8000b78 <__udivmoddi4+0x10c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d38:	f001 fa0e 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3c:	f000 f862 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d40:	f000 fad6 	bl	80012f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d44:	f000 fab4 	bl	80012b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d48:	f000 fa88 	bl	800125c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d4c:	f000 f8cc 	bl	8000ee8 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000d50:	f000 fa3a 	bl	80011c8 <MX_TIM10_Init>
  MX_DAC_Init();
 8000d54:	f000 f9be 	bl	80010d4 <MX_DAC_Init>
  MX_ADC2_Init();
 8000d58:	f000 f918 	bl	8000f8c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d5c:	f000 f968 	bl	8001030 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000d60:	f000 f9e2 	bl	8001128 <MX_TIM1_Init>

  // DAC DMA
//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)&adcBuf[0], sizeof(adcReading0), DAC_ALIGN_12B_R);//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)testArray, sizeof(testArray)/sizeof(uint16_t), DAC_ALIGN_12B_R);

  // Timer interrupt start
  HAL_TIM_Base_Start_IT(&htim10);
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <main+0xac>)
 8000d66:	f003 fd5d 	bl	8004824 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8000d6a:	481e      	ldr	r0, [pc, #120]	; (8000de4 <main+0xb0>)
 8000d6c:	f003 fcf2 	bl	8004754 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// External trigger in (from waveforms)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 8000d70:	2108      	movs	r1, #8
 8000d72:	481d      	ldr	r0, [pc, #116]	; (8000de8 <main+0xb4>)
 8000d74:	f002 feb2 	bl	8003adc <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <main+0x50>
		ringBufTrigger2 = 1;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <main+0xb8>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
	}

	// Reset from button
	if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000d84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d88:	4817      	ldr	r0, [pc, #92]	; (8000de8 <main+0xb4>)
 8000d8a:	f002 fea7 	bl	8003adc <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10c      	bne.n	8000dae <main+0x7a>
		ringBufFlag = 0;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <main+0xbc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
		ringBufTrigger2 = 0;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <main+0xb8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
		ringBufPrintDone = 0;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <main+0xc0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]

		ringBufReset = 1;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <main+0xc4>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e002      	b.n	8000db4 <main+0x80>
	}
	else {
		ringBufReset = 0;
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <main+0xc4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	}


	if (ringBufFlag && !ringBufPrintDone) {
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <main+0xbc>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0d9      	beq.n	8000d70 <main+0x3c>
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <main+0xc0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1d5      	bne.n	8000d70 <main+0x3c>
		ringBufPrintDone = print_ring_buf_v2(RING_BUF_LEN, ringBuf, readStart);
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <main+0xc8>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <main+0xcc>)
 8000dcc:	f648 00b8 	movw	r0, #35000	; 0x88b8
 8000dd0:	f000 fe5c 	bl	8001a8c <print_ring_buf_v2>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <main+0xc0>)
 8000dda:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 8000ddc:	e7c8      	b.n	8000d70 <main+0x3c>
 8000dde:	bf00      	nop
 8000de0:	20000880 	.word	0x20000880
 8000de4:	20011ba8 	.word	0x20011ba8
 8000de8:	40020800 	.word	0x40020800
 8000dec:	200000a0 	.word	0x200000a0
 8000df0:	200000a1 	.word	0x200000a1
 8000df4:	200000a2 	.word	0x200000a2
 8000df8:	200000a3 	.word	0x200000a3
 8000dfc:	20011c64 	.word	0x20011c64
 8000e00:	20000a24 	.word	0x20000a24

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	; 0x50
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2234      	movs	r2, #52	; 0x34
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 fd84 	bl	8006920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <SystemClock_Config+0xdc>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	2300      	movs	r3, #0
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <SystemClock_Config+0xe0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e78:	23b4      	movs	r3, #180	; 0xb4
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 f973 	bl	8004178 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e98:	f000 fe94 	bl	8001bc4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e9c:	f002 fe50 	bl	8003b40 <HAL_PWREx_EnableOverDrive>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ea6:	f000 fe8d 	bl	8001bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2105      	movs	r1, #5
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 fe89 	bl	8003be0 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ed4:	f000 fe76 	bl	8001bc4 <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <MX_ADC1_Init+0x9c>)
 8000efe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <MX_ADC1_Init+0xa0>)
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f4a:	f001 f977 	bl	800223c <HAL_ADC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 fe36 	bl	8001bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_ADC1_Init+0x98>)
 8000f6a:	f001 fc75 	bl	8002858 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f74:	f000 fe26 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000908 	.word	0x20000908
 8000f84:	40012000 	.word	0x40012000
 8000f88:	0f000001 	.word	0x0f000001

08000f8c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <MX_ADC2_Init+0x9c>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000faa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <MX_ADC2_Init+0xa0>)
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_ADC2_Init+0x98>)
 8000fee:	f001 f925 	bl	800223c <HAL_ADC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000ff8:	f000 fde4 	bl	8001bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_ADC2_Init+0x98>)
 800100e:	f001 fc23 	bl	8002858 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001018:	f000 fdd4 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000834 	.word	0x20000834
 8001028:	40012100 	.word	0x40012100
 800102c:	0f000001 	.word	0x0f000001

08001030 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_ADC3_Init+0x98>)
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <MX_ADC3_Init+0x9c>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ADC3_Init+0x98>)
 800104a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_ADC3_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_ADC3_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_ADC3_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_ADC3_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_ADC3_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_ADC3_Init+0x98>)
 8001072:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_ADC3_Init+0xa0>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC3_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_ADC3_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_ADC3_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_ADC3_Init+0x98>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_ADC3_Init+0x98>)
 8001092:	f001 f8d3 	bl	800223c <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800109c:	f000 fd92 	bl	8001bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010a0:	230a      	movs	r3, #10
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_ADC3_Init+0x98>)
 80010b2:	f001 fbd1 	bl	8002858 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80010bc:	f000 fd82 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000954 	.word	0x20000954
 80010cc:	40012200 	.word	0x40012200
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_DAC_Init+0x4c>)
 80010e4:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <MX_DAC_Init+0x50>)
 80010e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <MX_DAC_Init+0x4c>)
 80010ea:	f001 fefe 	bl	8002eea <HAL_DAC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010f4:	f000 fd66 	bl	8001bc4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <MX_DAC_Init+0x4c>)
 8001108:	f001 ff88 	bl	800301c <HAL_DAC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001112:	f000 fd57 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000a10 	.word	0x20000a10
 8001124:	40007400 	.word	0x40007400

08001128 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_TIM1_Init+0x98>)
 8001146:	4a1f      	ldr	r2, [pc, #124]	; (80011c4 <MX_TIM1_Init+0x9c>)
 8001148:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_TIM1_Init+0x98>)
 800114c:	2211      	movs	r2, #17
 800114e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_TIM1_Init+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_TIM1_Init+0x98>)
 8001158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_TIM1_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_TIM1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_TIM1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <MX_TIM1_Init+0x98>)
 8001172:	f003 fa9f 	bl	80046b4 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800117c:	f000 fd22 	bl	8001bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_TIM1_Init+0x98>)
 800118e:	f003 fd73 	bl	8004c78 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001198:	f000 fd14 	bl	8001bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_TIM1_Init+0x98>)
 80011aa:	f004 f93b 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011b4:	f000 fd06 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20011ba8 	.word	0x20011ba8
 80011c4:	40010000 	.word	0x40010000

080011c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_TIM10_Init+0x8c>)
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <MX_TIM10_Init+0x90>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 180-1;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_TIM10_Init+0x8c>)
 80011e8:	22b3      	movs	r2, #179	; 0xb3
 80011ea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM10_Init+0x8c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_TIM10_Init+0x8c>)
 80011f4:	2263      	movs	r2, #99	; 0x63
 80011f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_TIM10_Init+0x8c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_TIM10_Init+0x8c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <MX_TIM10_Init+0x8c>)
 8001206:	f003 fa55 	bl	80046b4 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 fcd8 	bl	8001bc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8001214:	480f      	ldr	r0, [pc, #60]	; (8001254 <MX_TIM10_Init+0x8c>)
 8001216:	f003 fb75 	bl	8004904 <HAL_TIM_OC_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001220:	f000 fcd0 	bl	8001bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_TIM10_Init+0x8c>)
 800123c:	f003 fcc4 	bl	8004bc8 <HAL_TIM_OC_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001246:	f000 fcbd 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000880 	.word	0x20000880
 8001258:	40014400 	.word	0x40014400

0800125c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_USART2_UART_Init+0x50>)
 8001264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_USART2_UART_Init+0x4c>)
 8001294:	f004 f956 	bl	8005544 <HAL_UART_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129e:	f000 fc91 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20011c20 	.word	0x20011c20
 80012ac:	40004400 	.word	0x40004400

080012b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_DMA_Init+0x3c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <MX_DMA_Init+0x3c>)
 80012c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_DMA_Init+0x3c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2011      	movs	r0, #17
 80012d8:	f001 fdd1 	bl	8002e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012dc:	2011      	movs	r0, #17
 80012de:	f001 fdea 	bl	8002eb6 <HAL_NVIC_EnableIRQ>

}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <MX_GPIO_Init+0x138>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a46      	ldr	r2, [pc, #280]	; (8001428 <MX_GPIO_Init+0x138>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b44      	ldr	r3, [pc, #272]	; (8001428 <MX_GPIO_Init+0x138>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b40      	ldr	r3, [pc, #256]	; (8001428 <MX_GPIO_Init+0x138>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a3f      	ldr	r2, [pc, #252]	; (8001428 <MX_GPIO_Init+0x138>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <MX_GPIO_Init+0x138>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <MX_GPIO_Init+0x138>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a38      	ldr	r2, [pc, #224]	; (8001428 <MX_GPIO_Init+0x138>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <MX_GPIO_Init+0x138>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <MX_GPIO_Init+0x138>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a31      	ldr	r2, [pc, #196]	; (8001428 <MX_GPIO_Init+0x138>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <MX_GPIO_Init+0x138>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2120      	movs	r1, #32
 800137a:	482c      	ldr	r0, [pc, #176]	; (800142c <MX_GPIO_Init+0x13c>)
 800137c:	f002 fbc6 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	482a      	ldr	r0, [pc, #168]	; (8001430 <MX_GPIO_Init+0x140>)
 8001386:	f002 fbc1 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001390:	4828      	ldr	r0, [pc, #160]	; (8001434 <MX_GPIO_Init+0x144>)
 8001392:	f002 fbbb 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4822      	ldr	r0, [pc, #136]	; (8001434 <MX_GPIO_Init+0x144>)
 80013ac:	f002 fa02 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013b0:	2308      	movs	r3, #8
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <MX_GPIO_Init+0x144>)
 80013c4:	f002 f9f6 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013c8:	2320      	movs	r3, #32
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4813      	ldr	r0, [pc, #76]	; (800142c <MX_GPIO_Init+0x13c>)
 80013e0:	f002 f9e8 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_GPIO_Init+0x140>)
 80013fc:	f002 f9da 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001400:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_GPIO_Init+0x144>)
 800141a:	f002 f9cb 	bl	80037b4 <HAL_GPIO_Init>

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800

08001438 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//}

// Timer 10 (TIM10) interrupt:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af02      	add	r7, sp, #8
 800143e:	6078      	str	r0, [r7, #4]
  if (htim == &htim10)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4ab3      	ldr	r2, [pc, #716]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	f040 82ce 	bne.w	80019e6 <HAL_TIM_PeriodElapsedCallback+0x5ae>
    // Variables declared globally for easier debugging.
    //    static float angleDq, alpha1, beta1, Vq, Vd, alpha2, beta2, cosGrid, sinGrid;
    // PLL variables end

	// Set pin: Start timer
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	48b1      	ldr	r0, [pc, #708]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001450:	f002 fb5c 	bl	8003b0c <HAL_GPIO_WritePin>

    // ADCs
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001454:	4bb0      	ldr	r3, [pc, #704]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	b21a      	sxth	r2, r3
 800145c:	4baf      	ldr	r3, [pc, #700]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800145e:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2120      	movs	r1, #32
 8001464:	48ab      	ldr	r0, [pc, #684]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001466:	f002 fb51 	bl	8003b0c <HAL_GPIO_WritePin>

    // ADC 1
    HAL_ADC_Start(&hadc1);
 800146a:	48ad      	ldr	r0, [pc, #692]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800146c:	f000 ff2a 	bl	80022c4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	48aa      	ldr	r0, [pc, #680]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001476:	f000 fff7 	bl	8002468 <HAL_ADC_PollForConversion>
    adcValue1 = HAL_ADC_GetValue(&hadc1);
 800147a:	48a9      	ldr	r0, [pc, #676]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800147c:	f001 f9c0 	bl	8002800 <HAL_ADC_GetValue>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	4ba7      	ldr	r3, [pc, #668]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001486:	801a      	strh	r2, [r3, #0]

    // ADC 2
    HAL_ADC_Start(&hadc2);
 8001488:	48a7      	ldr	r0, [pc, #668]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800148a:	f000 ff1b 	bl	80022c4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800148e:	f04f 31ff 	mov.w	r1, #4294967295
 8001492:	48a5      	ldr	r0, [pc, #660]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001494:	f000 ffe8 	bl	8002468 <HAL_ADC_PollForConversion>
    adcValue2 = HAL_ADC_GetValue(&hadc2);
 8001498:	48a3      	ldr	r0, [pc, #652]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800149a:	f001 f9b1 	bl	8002800 <HAL_ADC_GetValue>
 800149e:	4603      	mov	r3, r0
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4ba2      	ldr	r3, [pc, #648]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80014a4:	801a      	strh	r2, [r3, #0]

	// ADC 3
    HAL_ADC_Start(&hadc3);
 80014a6:	48a2      	ldr	r0, [pc, #648]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80014a8:	f000 ff0c 	bl	80022c4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	489f      	ldr	r0, [pc, #636]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80014b2:	f000 ffd9 	bl	8002468 <HAL_ADC_PollForConversion>

    adcValue3 = HAL_ADC_GetValue(&hadc3);
 80014b6:	489e      	ldr	r0, [pc, #632]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80014b8:	f001 f9a2 	bl	8002800 <HAL_ADC_GetValue>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b9c      	ldr	r3, [pc, #624]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80014c2:	801a      	strh	r2, [r3, #0]
    timingArray[0] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80014c4:	4b94      	ldr	r3, [pc, #592]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b93      	ldr	r3, [pc, #588]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	b21a      	sxth	r2, r3
 80014da:	4b97      	ldr	r3, [pc, #604]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80014dc:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2120      	movs	r1, #32
 80014e2:	488c      	ldr	r0, [pc, #560]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80014e4:	f002 fb12 	bl	8003b0c <HAL_GPIO_WritePin>

    // Scaling of ADC input signals
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80014e8:	4b8b      	ldr	r3, [pc, #556]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b8a      	ldr	r3, [pc, #552]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80014f2:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2120      	movs	r1, #32
 80014f8:	4886      	ldr	r0, [pc, #536]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80014fa:	f002 fb07 	bl	8003b0c <HAL_GPIO_WritePin>

    phaseA = (float)adcValue1/(0xFFF+1)*3.3f - 1.65f;
 80014fe:	4b89      	ldr	r3, [pc, #548]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800150a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800173c <HAL_TIM_PeriodElapsedCallback+0x304>
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001740 <HAL_TIM_PeriodElapsedCallback+0x308>
 8001516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001744 <HAL_TIM_PeriodElapsedCallback+0x30c>
 800151e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
    phaseB = (float)adcValue2/(0xFFF+1)*3.3f - 1.65f;
 8001528:	4b80      	ldr	r3, [pc, #512]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001534:	eddf 6a81 	vldr	s13, [pc, #516]	; 800173c <HAL_TIM_PeriodElapsedCallback+0x304>
 8001538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001740 <HAL_TIM_PeriodElapsedCallback+0x308>
 8001540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001544:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001744 <HAL_TIM_PeriodElapsedCallback+0x30c>
 8001548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800154c:	4b7f      	ldr	r3, [pc, #508]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800154e:	edc3 7a00 	vstr	s15, [r3]
    phaseC = (float)adcValue3/(0xFFF+1)*3.3f - 1.65f;
 8001552:	4b78      	ldr	r3, [pc, #480]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800155e:	eddf 6a77 	vldr	s13, [pc, #476]	; 800173c <HAL_TIM_PeriodElapsedCallback+0x304>
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001740 <HAL_TIM_PeriodElapsedCallback+0x308>
 800156a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001744 <HAL_TIM_PeriodElapsedCallback+0x30c>
 8001572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001576:	4b76      	ldr	r3, [pc, #472]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001578:	edc3 7a00 	vstr	s15, [r3]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2120      	movs	r1, #32
 8001580:	4864      	ldr	r0, [pc, #400]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001582:	f002 fac3 	bl	8003b0c <HAL_GPIO_WritePin>
    timingArray[1] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001586:	4b64      	ldr	r3, [pc, #400]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	b29b      	uxth	r3, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800159e:	805a      	strh	r2, [r3, #2]

    // PLL Start
    //--------------------------------------------------------------------------------------------
    angleDq = angleDq + T_SAMPLE*F_RAD;
 80015a0:	4b6c      	ldr	r3, [pc, #432]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001758 <HAL_TIM_PeriodElapsedCallback+0x320>
 80015aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015ae:	4b69      	ldr	r3, [pc, #420]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015b0:	edc3 7a00 	vstr	s15, [r3]
    if (angleDq > TWO_PI)
 80015b4:	4b67      	ldr	r3, [pc, #412]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f90f 	bl	80007dc <__aeabi_f2d>
 80015be:	a352      	add	r3, pc, #328	; (adr r3, 8001708 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff f9e0 	bl	8000988 <__aeabi_dcmpgt>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d012      	beq.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x1bc>
    {
    	angleDq = angleDq - TWO_PI;
 80015ce:	4b61      	ldr	r3, [pc, #388]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f902 	bl	80007dc <__aeabi_f2d>
 80015d8:	a34b      	add	r3, pc, #300	; (adr r3, 8001708 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7fe ff9d 	bl	800051c <__aeabi_dsub>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff f9d7 	bl	800099c <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a58      	ldr	r2, [pc, #352]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015f2:	6013      	str	r3, [r2, #0]
    //    phaseA = sinf(angleDq);
    //	phaseB = sinf(angleDq-RAD_120);
    //	phaseC = sinf(angleDq+RAD_120);

	// abc -> alpha beta
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80015fe:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2120      	movs	r1, #32
 8001604:	4843      	ldr	r0, [pc, #268]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001606:	f002 fa81 	bl	8003b0c <HAL_GPIO_WritePin>

    abc_to_alphabeta(phaseA, phaseB, phaseC, &alpha1, &beta1);
 800160a:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	4b4e      	ldr	r3, [pc, #312]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001612:	ed93 7a00 	vldr	s14, [r3]
 8001616:	4b4e      	ldr	r3, [pc, #312]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001618:	edd3 6a00 	vldr	s13, [r3]
 800161c:	494f      	ldr	r1, [pc, #316]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800161e:	4850      	ldr	r0, [pc, #320]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001620:	eeb0 1a66 	vmov.f32	s2, s13
 8001624:	eef0 0a47 	vmov.f32	s1, s14
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	f004 fe04 	bl	8006238 <abc_to_alphabeta>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2120      	movs	r1, #32
 8001634:	4837      	ldr	r0, [pc, #220]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001636:	f002 fa69 	bl	8003b0c <HAL_GPIO_WritePin>
    timingArray[2] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	b29b      	uxth	r3, r3
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	b21a      	sxth	r2, r3
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001652:	809a      	strh	r2, [r3, #4]

    // alpha beta -> DQ
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001654:	4b30      	ldr	r3, [pc, #192]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	b21a      	sxth	r2, r3
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800165e:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2120      	movs	r1, #32
 8001664:	482b      	ldr	r0, [pc, #172]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001666:	f002 fa51 	bl	8003b0c <HAL_GPIO_WritePin>

    alphabeta_to_dq(alpha1, beta1, angleDq, &Vd, &Vq);
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001672:	ed93 7a00 	vldr	s14, [r3]
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001678:	edd3 6a00 	vldr	s13, [r3]
 800167c:	4939      	ldr	r1, [pc, #228]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001680:	eeb0 1a66 	vmov.f32	s2, s13
 8001684:	eef0 0a47 	vmov.f32	s1, s14
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	f004 fe20 	bl	80062d0 <alphabeta_to_dq>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2120      	movs	r1, #32
 8001694:	481f      	ldr	r0, [pc, #124]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001696:	f002 fa39 	bl	8003b0c <HAL_GPIO_WritePin>
    timingArray[3] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016b2:	80da      	strh	r2, [r3, #6]

    // MAF
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80016be:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2120      	movs	r1, #32
 80016c4:	4813      	ldr	r0, [pc, #76]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80016c6:	f002 fa21 	bl	8003b0c <HAL_GPIO_WritePin>

	maf(&Vd, &Vq, &VdMaf, &VqMaf);
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016cc:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016ce:	4925      	ldr	r1, [pc, #148]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016d0:	4825      	ldr	r0, [pc, #148]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016d2:	f004 fd3f 	bl	8006154 <maf>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2120      	movs	r1, #32
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80016dc:	f002 fa16 	bl	8003b0c <HAL_GPIO_WritePin>
	timingArray[4] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016f8:	811a      	strh	r2, [r3, #8]

	// DQ -> alpha beta
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	e038      	b.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x33c>
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	54442c46 	.word	0x54442c46
 800170c:	401921fb 	.word	0x401921fb
 8001710:	20000880 	.word	0x20000880
 8001714:	40020800 	.word	0x40020800
 8001718:	20011ba8 	.word	0x20011ba8
 800171c:	20011bf4 	.word	0x20011bf4
 8001720:	20000908 	.word	0x20000908
 8001724:	20011ba0 	.word	0x20011ba0
 8001728:	20000834 	.word	0x20000834
 800172c:	200008f0 	.word	0x200008f0
 8001730:	20000954 	.word	0x20000954
 8001734:	20000830 	.word	0x20000830
 8001738:	200008dc 	.word	0x200008dc
 800173c:	45800000 	.word	0x45800000
 8001740:	40533333 	.word	0x40533333
 8001744:	3fd33333 	.word	0x3fd33333
 8001748:	200008c8 	.word	0x200008c8
 800174c:	20011c18 	.word	0x20011c18
 8001750:	20011b94 	.word	0x20011b94
 8001754:	20011c6c 	.word	0x20011c6c
 8001758:	3d00adfd 	.word	0x3d00adfd
 800175c:	20011bf8 	.word	0x20011bf8
 8001760:	200008d4 	.word	0x200008d4
 8001764:	200008d8 	.word	0x200008d8
 8001768:	200008cc 	.word	0x200008cc
 800176c:	20011b98 	.word	0x20011b98
 8001770:	2000087c 	.word	0x2000087c
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b9e      	ldr	r3, [pc, #632]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001778:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	2120      	movs	r1, #32
 800177e:	489d      	ldr	r0, [pc, #628]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001780:	f002 f9c4 	bl	8003b0c <HAL_GPIO_WritePin>

    dq_to_alphabeta(VdMaf, VqMaf, angleDq, &alpha2, &beta2);
 8001784:	4b9c      	ldr	r3, [pc, #624]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	4b9b      	ldr	r3, [pc, #620]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001792:	edd3 6a00 	vldr	s13, [r3]
 8001796:	499b      	ldr	r1, [pc, #620]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001798:	489b      	ldr	r0, [pc, #620]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800179a:	eeb0 1a66 	vmov.f32	s2, s13
 800179e:	eef0 0a47 	vmov.f32	s1, s14
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	f004 fdda 	bl	800635e <dq_to_alphabeta>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2120      	movs	r1, #32
 80017ae:	4891      	ldr	r0, [pc, #580]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80017b0:	f002 f9ac 	bl	8003b0c <HAL_GPIO_WritePin>
	timingArray[5] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80017b4:	4b95      	ldr	r3, [pc, #596]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b91      	ldr	r3, [pc, #580]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80017cc:	815a      	strh	r2, [r3, #10]


	// sinGrid & cosGrid
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80017ce:	4b8f      	ldr	r3, [pc, #572]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	4b86      	ldr	r3, [pc, #536]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80017d8:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	2120      	movs	r1, #32
 80017de:	4885      	ldr	r0, [pc, #532]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80017e0:	f002 f994 	bl	8003b0c <HAL_GPIO_WritePin>

    cos_sin_grid(alpha2, beta2, &cosGrid, &sinGrid);
 80017e4:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	4988      	ldr	r1, [pc, #544]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80017f2:	4889      	ldr	r0, [pc, #548]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80017f4:	eef0 0a47 	vmov.f32	s1, s14
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	f004 fdf4 	bl	80063e8 <cos_sin_grid>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2120      	movs	r1, #32
 8001804:	487b      	ldr	r0, [pc, #492]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001806:	f002 f981 	bl	8003b0c <HAL_GPIO_WritePin>
    timingArray[6] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 800180a:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	b29b      	uxth	r3, r3
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b29b      	uxth	r3, r3
 800181e:	b21a      	sxth	r2, r3
 8001820:	4b7b      	ldr	r3, [pc, #492]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001822:	819a      	strh	r2, [r3, #12]

    // Phase detector
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001824:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	b21a      	sxth	r2, r3
 800182c:	4b70      	ldr	r3, [pc, #448]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800182e:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2120      	movs	r1, #32
 8001834:	486f      	ldr	r0, [pc, #444]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001836:	f002 f969 	bl	8003b0c <HAL_GPIO_WritePin>

    phaseError = phase_detector(cosGrid, sinGrid, anglePllComp);
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	4b74      	ldr	r3, [pc, #464]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001842:	ed93 7a00 	vldr	s14, [r3]
 8001846:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001848:	edd3 6a00 	vldr	s13, [r3]
 800184c:	eeb0 1a66 	vmov.f32	s2, s13
 8001850:	eef0 0a47 	vmov.f32	s1, s14
 8001854:	eeb0 0a67 	vmov.f32	s0, s15
 8001858:	f004 ff2c 	bl	80066b4 <phase_detector>
 800185c:	eef0 7a40 	vmov.f32	s15, s0
 8001860:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001862:	edc3 7a00 	vstr	s15, [r3]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2120      	movs	r1, #32
 800186a:	4862      	ldr	r0, [pc, #392]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800186c:	f002 f94e 	bl	8003b0c <HAL_GPIO_WritePin>
    timingArray[7] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	b29a      	uxth	r2, r3
 8001878:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800187a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187e:	b29b      	uxth	r3, r3
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	b29b      	uxth	r3, r3
 8001884:	b21a      	sxth	r2, r3
 8001886:	4b62      	ldr	r3, [pc, #392]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001888:	81da      	strh	r2, [r3, #14]

    // PI-regulator
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 800188a:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	b21a      	sxth	r2, r3
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001894:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2120      	movs	r1, #32
 800189a:	4856      	ldr	r0, [pc, #344]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800189c:	f002 f936 	bl	8003b0c <HAL_GPIO_WritePin>

    pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE, &anglePll, &anglePllComp);
 80018a0:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	4b5e      	ldr	r3, [pc, #376]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80018ae:	edd3 6a00 	vldr	s13, [r3]
 80018b2:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80018b4:	ed93 6a00 	vldr	s12, [r3]
 80018b8:	4958      	ldr	r1, [pc, #352]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80018ba:	485d      	ldr	r0, [pc, #372]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80018bc:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8001a34 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 80018c0:	eeb0 2a46 	vmov.f32	s4, s12
 80018c4:	eef0 1a66 	vmov.f32	s3, s13
 80018c8:	eeb0 1a47 	vmov.f32	s2, s14
 80018cc:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8001a38 <HAL_TIM_PeriodElapsedCallback+0x600>
 80018d0:	eeb0 0a67 	vmov.f32	s0, s15
 80018d4:	f004 fdd8 	bl	8006488 <pi_regulator>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2120      	movs	r1, #32
 80018dc:	4845      	ldr	r0, [pc, #276]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80018de:	f002 f915 	bl	8003b0c <HAL_GPIO_WritePin>
    timingArray[8] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80018ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80018fa:	821a      	strh	r2, [r3, #16]
//    varDac = varDac + 0.1f;
//    if (varDac > 3.2f) {
//    	varDac = 0.1;
//    }
    // DAC
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2120      	movs	r1, #32
 8001900:	483c      	ldr	r0, [pc, #240]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001902:	f002 f903 	bl	8003b0c <HAL_GPIO_WritePin>
    varDac  =  (anglePll*0.47f + 0.1f);	// +1 for offset for negative values, /3.3 for scaling
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001a3c <HAL_TIM_PeriodElapsedCallback+0x604>
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001a40 <HAL_TIM_PeriodElapsedCallback+0x608>
 8001918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800191c:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800191e:	edc3 7a00 	vstr	s15, [r3]
    varDacComp = dac_offset(varDac, -0.0084f, 0.0054f);	// Inverse DAC offset
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8001a48 <HAL_TIM_PeriodElapsedCallback+0x610>
 800192c:	eddf 0a47 	vldr	s1, [pc, #284]	; 8001a4c <HAL_TIM_PeriodElapsedCallback+0x614>
 8001930:	eeb0 0a67 	vmov.f32	s0, s15
 8001934:	f004 ffac 	bl	8006890 <dac_offset>
 8001938:	eef0 7a40 	vmov.f32	s15, s0
 800193c:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800193e:	edc3 7a00 	vstr	s15, [r3]
    varDacScaled = varDacComp * DAC_SCALING;			// Scaled from voltage to digital value
 8001942:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001a54 <HAL_TIM_PeriodElapsedCallback+0x61c>
 800194c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001950:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001a58 <HAL_TIM_PeriodElapsedCallback+0x620>
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x624>)
 800195a:	edc3 7a00 	vstr	s15, [r3]
    dac_out = (uint16_t)varDacScaled; 					// Convert from float to uint16_t
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001968:	ee17 3a90 	vmov	r3, s15
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001970:	801a      	strh	r2, [r3, #0]

    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 8001972:	2100      	movs	r1, #0
 8001974:	483b      	ldr	r0, [pc, #236]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001976:	f001 fada 	bl	8002f2e <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_out); // Set dac to digital value
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	4838      	ldr	r0, [pc, #224]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001984:	f001 fb25 	bl	8002fd2 <HAL_DAC_SetValue>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2120      	movs	r1, #32
 800198c:	4819      	ldr	r0, [pc, #100]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800198e:	f002 f8bd 	bl	8003b0c <HAL_GPIO_WritePin>
    ringBufData[6] 	= ((float)	VqMaf 			* (float)RING_BUF_SCALING);
    ringBufData[7]  = ((float)	anglePll 		* (float)RING_BUF_SCALING);
*/

    // Ring buffer for mini acceptance test @ 10 kHz:
    ringBufData[0]  = ((float)	anglePll 		* (float)RING_BUF_SCALING);
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001a68 <HAL_TIM_PeriodElapsedCallback+0x630>
 800199c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a4:	ee17 3a90 	vmov	r3, s15
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80019ac:	801a      	strh	r2, [r3, #0]
//    ringBufData[22] = timingArray[5];
//    ringBufData[23] = timingArray[6];
//    ringBufData[24] = timingArray[7];
//    ringBufData[25] = timingArray[8];

    ringBufFlag = circular_buffer(RING_BUF_LEN, ringBuf, ringBufData, ringBufTrigger2, ringBufReset, RING_BUF_SPLIT, &readStart);
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4930      	ldr	r1, [pc, #192]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80019b8:	9101      	str	r1, [sp, #4]
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001a7c <HAL_TIM_PeriodElapsedCallback+0x644>
 80019c0:	4613      	mov	r3, r2
 80019c2:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80019c4:	492e      	ldr	r1, [pc, #184]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80019c6:	f648 00b8 	movw	r0, #35000	; 0x88b8
 80019ca:	f004 fe9b 	bl	8006704 <circular_buffer>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80019d4:	701a      	strb	r2, [r3, #0]
	{
	  count++;
	}
	else
	{
	  count = 0;
 80019d6:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x650>)
 80019d8:	2200      	movs	r2, #0
 80019da:	801a      	strh	r2, [r3, #0]
	}


	// Reset pin: Stop timer
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2140      	movs	r1, #64	; 0x40
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80019e2:	f002 f893 	bl	8003b0c <HAL_GPIO_WritePin>
  }
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20011bf4 	.word	0x20011bf4
 80019f4:	40020800 	.word	0x40020800
 80019f8:	2000087c 	.word	0x2000087c
 80019fc:	20011b98 	.word	0x20011b98
 8001a00:	20011c6c 	.word	0x20011c6c
 8001a04:	2000082c 	.word	0x2000082c
 8001a08:	20000950 	.word	0x20000950
 8001a0c:	20011ba8 	.word	0x20011ba8
 8001a10:	200008dc 	.word	0x200008dc
 8001a14:	20011b9c 	.word	0x20011b9c
 8001a18:	20011ba4 	.word	0x20011ba4
 8001a1c:	20011bf0 	.word	0x20011bf0
 8001a20:	200008d0 	.word	0x200008d0
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20011c1c 	.word	0x20011c1c
 8001a34:	38d1b717 	.word	0x38d1b717
 8001a38:	439d1463 	.word	0x439d1463
 8001a3c:	3ef0a3d7 	.word	0x3ef0a3d7
 8001a40:	3dcccccd 	.word	0x3dcccccd
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	3bb0f27c 	.word	0x3bb0f27c
 8001a4c:	bc09a027 	.word	0xbc09a027
 8001a50:	200000a4 	.word	0x200000a4
 8001a54:	45800000 	.word	0x45800000
 8001a58:	40533333 	.word	0x40533333
 8001a5c:	20011c68 	.word	0x20011c68
 8001a60:	20011bfc 	.word	0x20011bfc
 8001a64:	20000a10 	.word	0x20000a10
 8001a68:	459c4000 	.word	0x459c4000
 8001a6c:	20011c00 	.word	0x20011c00
 8001a70:	200000a0 	.word	0x200000a0
 8001a74:	200000a3 	.word	0x200000a3
 8001a78:	20011c64 	.word	0x20011c64
 8001a7c:	00000000 	.word	0x00000000
 8001a80:	20000a24 	.word	0x20000a24
 8001a84:	200000a1 	.word	0x200000a1
 8001a88:	200000a8 	.word	0x200000a8

08001a8c <print_ring_buf_v2>:
//  Description :   prints the ring buffer values
//  Parameters  :   uint16_t bufferSize: The amount of sampling points that the circularBuffer can contain
//                  uint16_t circularBuffer: Pointer to circular buffer array
//                  uint16_t readStart: starting index of the circular buffer
//  Returns     :	none
uint8_t print_ring_buf_v2(uint16_t bufferSize, int16_t circularBuffer[][RING_BUF_SIZE], uint16_t readStart) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	80fb      	strh	r3, [r7, #6]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	80bb      	strh	r3, [r7, #4]
    static uint16_t pos			=	0;		// Track position of array

    static char msg[250];	// Initialize string to be written to USART

    // Initialize readIndex to readStart
    if (!init) {
 8001a9c:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <print_ring_buf_v2+0x118>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <print_ring_buf_v2+0x24>
        readIndex = readStart;
 8001aa4:	4a40      	ldr	r2, [pc, #256]	; (8001ba8 <print_ring_buf_v2+0x11c>)
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	8013      	strh	r3, [r2, #0]
        init = 1;
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <print_ring_buf_v2+0x118>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
    }

//	sprintf(msg, "phaseA, phaseB, phaseC, alpha1, beta1, Vd, Vq, VdMaf, VqMaf, alpha2, beta2, cosGrid, sinGrid, phaseError, anglePll, anglePllComp, angleDq, t_adc, t_3p_sin, t_abc_ab, t_ab_dq, t_maf, t_dq_ab, t_sin_cos, t_phase_d, t_pi_regulator \r\n");
//    sprintf(msg, "phaseA, phaseB, phaseC, alpha1, beta1, Vd, Vq, VdMaf, VqMaf, alpha2, beta2, cosGrid, sinGrid, phaseError, anglePll, anglePllComp, angleDq\r\n");
//    sprintf(msg, "phaseA, phaseB, phaseC, Vd, Vq, VdMaf, VqMaf, anglePll\r\n");
    sprintf(msg, "anglePll\r\n");
 8001ab0:	493e      	ldr	r1, [pc, #248]	; (8001bac <print_ring_buf_v2+0x120>)
 8001ab2:	483f      	ldr	r0, [pc, #252]	; (8001bb0 <print_ring_buf_v2+0x124>)
 8001ab4:	f004 ff3c 	bl	8006930 <siprintf>

//    sprintf(msg, "phaseA, phaseB, phaseC, VdMaf, VqMaf, cosGrid, sinGrid, phaseError, anglePll, angleDq\r\n");

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001ab8:	483d      	ldr	r0, [pc, #244]	; (8001bb0 <print_ring_buf_v2+0x124>)
 8001aba:	f7fe fba9 	bl	8000210 <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	493a      	ldr	r1, [pc, #232]	; (8001bb0 <print_ring_buf_v2+0x124>)
 8001ac8:	483a      	ldr	r0, [pc, #232]	; (8001bb4 <print_ring_buf_v2+0x128>)
 8001aca:	f003 fd88 	bl	80055de <HAL_UART_Transmit>


    for (int i = 0; i < bufferSize; i++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e05d      	b.n	8001b90 <print_ring_buf_v2+0x104>
    {
        //printf("Buffervalue at index [%d] = %d\n", readIndex, circularBuffer[readIndex]);

//    	sprintf(msg, "%d, %d, %d, %d\r\n", circularBuffer[readIndex][0], circularBuffer[readIndex][1],
//									circularBuffer[readIndex][2], circularBuffer[readIndex][3]);	// Update message for usart print
    	for (int n = 0; n < (RING_BUF_SIZE); n++) {
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	e038      	b.n	8001b4c <print_ring_buf_v2+0xc0>

    		if (n < RING_BUF_SIZE-1) {
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da19      	bge.n	8001b14 <print_ring_buf_v2+0x88>
    			pos += sprintf(&msg[pos], "%d, ", circularBuffer[readIndex][n]);
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <print_ring_buf_v2+0x12c>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <print_ring_buf_v2+0x124>)
 8001ae8:	18d0      	adds	r0, r2, r3
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <print_ring_buf_v2+0x11c>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001afa:	461a      	mov	r2, r3
 8001afc:	492f      	ldr	r1, [pc, #188]	; (8001bbc <print_ring_buf_v2+0x130>)
 8001afe:	f004 ff17 	bl	8006930 <siprintf>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <print_ring_buf_v2+0x12c>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <print_ring_buf_v2+0x12c>)
 8001b10:	801a      	strh	r2, [r3, #0]
 8001b12:	e018      	b.n	8001b46 <print_ring_buf_v2+0xba>
    		}
    		else {
    			pos += sprintf(&msg[pos], "%d\r\n", circularBuffer[readIndex][n]);
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <print_ring_buf_v2+0x12c>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <print_ring_buf_v2+0x124>)
 8001b1c:	18d0      	adds	r0, r2, r3
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <print_ring_buf_v2+0x11c>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4923      	ldr	r1, [pc, #140]	; (8001bc0 <print_ring_buf_v2+0x134>)
 8001b32:	f004 fefd 	bl	8006930 <siprintf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <print_ring_buf_v2+0x12c>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <print_ring_buf_v2+0x12c>)
 8001b44:	801a      	strh	r2, [r3, #0]
    	for (int n = 0; n < (RING_BUF_SIZE); n++) {
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	ddc3      	ble.n	8001ada <print_ring_buf_v2+0x4e>
											circularBuffer[readIndex][24], circularBuffer[readIndex][25]);	// Update message for usart print

    	// sprintf(msg, "[%d] = %d\r\n", readIndex, circularBuffer[readIndex]);	// Update message for usart print
		*/

    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001b52:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <print_ring_buf_v2+0x124>)
 8001b54:	f7fe fb5c 	bl	8000210 <strlen>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	4913      	ldr	r1, [pc, #76]	; (8001bb0 <print_ring_buf_v2+0x124>)
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <print_ring_buf_v2+0x128>)
 8001b64:	f003 fd3b 	bl	80055de <HAL_UART_Transmit>
    	/*
    	huart2.Instance->CR3 |= USART_CR3_DMAT;
    	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg,
    							(uint32_t)&huart2.Instance->DR, strlen(msg));
		*/
    	pos = 0;	// Reset pos
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <print_ring_buf_v2+0x12c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
        readIndex++;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <print_ring_buf_v2+0x11c>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <print_ring_buf_v2+0x11c>)
 8001b78:	801a      	strh	r2, [r3, #0]
        if (readIndex > (bufferSize-1)) {
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <print_ring_buf_v2+0x11c>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	88fa      	ldrh	r2, [r7, #6]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d802      	bhi.n	8001b8a <print_ring_buf_v2+0xfe>
            readIndex = 0;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <print_ring_buf_v2+0x11c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferSize; i++)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	db9d      	blt.n	8001ad4 <print_ring_buf_v2+0x48>
        }
    }
    return 1;
 8001b98:	2301      	movs	r3, #1

}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200000aa 	.word	0x200000aa
 8001ba8:	200000ac 	.word	0x200000ac
 8001bac:	08008490 	.word	0x08008490
 8001bb0:	200000b0 	.word	0x200000b0
 8001bb4:	20011c20 	.word	0x20011c20
 8001bb8:	200001aa 	.word	0x200001aa
 8001bbc:	0800849c 	.word	0x0800849c
 8001bc0:	080084a4 	.word	0x080084a4

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <Error_Handler+0x8>
	...

08001bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <HAL_MspInit+0x4c>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	; 0x38
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_ADC_MspInit+0x164>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d130      	bne.n	8001ca4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a4f      	ldr	r2, [pc, #316]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	483f      	ldr	r0, [pc, #252]	; (8001d8c <HAL_ADC_MspInit+0x16c>)
 8001c8e:	f001 fd91 	bl	80037b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2012      	movs	r0, #18
 8001c98:	f001 f8f1 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c9c:	2012      	movs	r0, #18
 8001c9e:	f001 f90a 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ca2:	e06a      	b.n	8001d7a <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <HAL_ADC_MspInit+0x170>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d130      	bne.n	8001d10 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a34      	ldr	r2, [pc, #208]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a2d      	ldr	r2, [pc, #180]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cea:	2303      	movs	r3, #3
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4824      	ldr	r0, [pc, #144]	; (8001d8c <HAL_ADC_MspInit+0x16c>)
 8001cfa:	f001 fd5b 	bl	80037b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2012      	movs	r0, #18
 8001d04:	f001 f8bb 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d08:	2012      	movs	r0, #18
 8001d0a:	f001 f8d4 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
}
 8001d0e:	e034      	b.n	8001d7a <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_ADC_MspInit+0x174>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12f      	bne.n	8001d7a <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001d24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_ADC_MspInit+0x168>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d52:	2301      	movs	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d56:	2303      	movs	r3, #3
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <HAL_ADC_MspInit+0x178>)
 8001d66:	f001 fd25 	bl	80037b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2012      	movs	r0, #18
 8001d70:	f001 f885 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d74:	2012      	movs	r0, #18
 8001d76:	f001 f89e 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3738      	adds	r7, #56	; 0x38
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40012000 	.word	0x40012000
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40012100 	.word	0x40012100
 8001d94:	40012200 	.word	0x40012200
 8001d98:	40020800 	.word	0x40020800

08001d9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_DAC_MspInit+0x7c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d127      	bne.n	8001e0e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_DAC_MspInit+0x80>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <HAL_DAC_MspInit+0x80>)
 8001dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_DAC_MspInit+0x80>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_DAC_MspInit+0x80>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_DAC_MspInit+0x80>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_DAC_MspInit+0x80>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001df6:	2310      	movs	r3, #16
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <HAL_DAC_MspInit+0x84>)
 8001e0a:	f001 fcd3 	bl	80037b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40007400 	.word	0x40007400
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020000 	.word	0x40020000

08001e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_TIM_Base_MspInit+0x80>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d116      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_TIM_Base_MspInit+0x84>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <HAL_TIM_Base_MspInit+0x84>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_TIM_Base_MspInit+0x84>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2019      	movs	r0, #25
 8001e58:	f001 f811 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e5c:	2019      	movs	r0, #25
 8001e5e:	f001 f82a 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001e62:	e01a      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_TIM_Base_MspInit+0x88>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d115      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_TIM_Base_MspInit+0x84>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_TIM_Base_MspInit+0x84>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_TIM_Base_MspInit+0x84>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2019      	movs	r0, #25
 8001e90:	f000 fff5 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e94:	2019      	movs	r0, #25
 8001e96:	f001 f80e 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40014400 	.word	0x40014400

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a34      	ldr	r2, [pc, #208]	; (8001fa0 <HAL_UART_MspInit+0xf0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d161      	bne.n	8001f96 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_UART_MspInit+0xf4>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a32      	ldr	r2, [pc, #200]	; (8001fa4 <HAL_UART_MspInit+0xf4>)
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_UART_MspInit+0xf4>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <HAL_UART_MspInit+0xf4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <HAL_UART_MspInit+0xf4>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_UART_MspInit+0xf4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4820      	ldr	r0, [pc, #128]	; (8001fa8 <HAL_UART_MspInit+0xf8>)
 8001f26:	f001 fc45 	bl	80037b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f2c:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <HAL_UART_MspInit+0x100>)
 8001f2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f36:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f3a:	2240      	movs	r2, #64	; 0x40
 8001f3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4c:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f6a:	4810      	ldr	r0, [pc, #64]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f6c:	f001 f8a6 	bl	80030bc <HAL_DMA_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001f76:	f7ff fe25 	bl	8001bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_UART_MspInit+0xfc>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2026      	movs	r0, #38	; 0x26
 8001f8c:	f000 ff77 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f90:	2026      	movs	r0, #38	; 0x26
 8001f92:	f000 ff90 	bl	8002eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	; 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40004400 	.word	0x40004400
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	2000099c 	.word	0x2000099c
 8001fb0:	400260a0 	.word	0x400260a0

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <NMI_Handler+0x4>

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 f8fc 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <DMA1_Stream6_IRQHandler+0x10>)
 800200e:	f001 f995 	bl	800333c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000099c 	.word	0x2000099c

0800201c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <ADC_IRQHandler+0x1c>)
 8002022:	f000 faac 	bl	800257e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <ADC_IRQHandler+0x20>)
 8002028:	f000 faa9 	bl	800257e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <ADC_IRQHandler+0x24>)
 800202e:	f000 faa6 	bl	800257e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000908 	.word	0x20000908
 800203c:	20000834 	.word	0x20000834
 8002040:	20000954 	.word	0x20000954

08002044 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4803      	ldr	r0, [pc, #12]	; (8002058 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800204a:	f002 fcb4 	bl	80049b6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800204e:	4803      	ldr	r0, [pc, #12]	; (800205c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002050:	f002 fcb1 	bl	80049b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20011ba8 	.word	0x20011ba8
 800205c:	20000880 	.word	0x20000880

08002060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <USART2_IRQHandler+0x10>)
 8002066:	f003 fb4d 	bl	8005704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20011c20 	.word	0x20011c20

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f004 fc12 	bl	80068cc <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20020000 	.word	0x20020000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	200001ac 	.word	0x200001ac
 80020dc:	20011c88 	.word	0x20011c88

080020e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <SystemInit+0x20>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <SystemInit+0x20>)
 80020ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800210a:	490e      	ldr	r1, [pc, #56]	; (8002144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002120:	4c0b      	ldr	r4, [pc, #44]	; (8002150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212e:	f7ff ffd7 	bl	80020e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f004 fbd1 	bl	80068d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7fe fdfd 	bl	8000d34 <main>
  bx  lr    
 800213a:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 800213c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002148:	08008900 	.word	0x08008900
  ldr r2, =_sbss
 800214c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002150:	20011c84 	.word	0x20011c84

08002154 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <CAN1_RX0_IRQHandler>
	...

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <HAL_Init+0x40>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <HAL_Init+0x40>)
 800216e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <HAL_Init+0x40>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 fe71 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002186:	2000      	movs	r0, #0
 8002188:	f000 f808 	bl	800219c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800218c:	f7ff fd20 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x58>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fe89 	bl	8002ed2 <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 fe51 	bl	8002e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_InitTick+0x5c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000010 	.word	0x20000010
 80021f4:	20000018 	.word	0x20000018
 80021f8:	20000014 	.word	0x20000014

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000018 	.word	0x20000018
 8002220:	20011c70 	.word	0x20011c70

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20011c70 	.word	0x20011c70

0800223c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e033      	b.n	80022ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fce0 	bl	8001c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002282:	f023 0302 	bic.w	r3, r3, #2
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fc14 	bl	8002abc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_ADC_Start+0x1a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0b2      	b.n	8002444 <HAL_ADC_Start+0x180>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d018      	beq.n	8002326 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002304:	4b52      	ldr	r3, [pc, #328]	; (8002450 <HAL_ADC_Start+0x18c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_ADC_Start+0x190>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9a      	lsrs	r2, r3, #18
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002318:	e002      	b.n	8002320 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d17a      	bne.n	800242a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800235e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	d106      	bne.n	8002382 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	f023 0206 	bic.w	r2, r3, #6
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
 8002380:	e002      	b.n	8002388 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_ADC_Start+0x194>)
 8002392:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800239c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d12a      	bne.n	8002400 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2b      	ldr	r2, [pc, #172]	; (800245c <HAL_ADC_Start+0x198>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d015      	beq.n	80023e0 <HAL_ADC_Start+0x11c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a29      	ldr	r2, [pc, #164]	; (8002460 <HAL_ADC_Start+0x19c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_Start+0x106>
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <HAL_ADC_Start+0x194>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a25      	ldr	r2, [pc, #148]	; (8002464 <HAL_ADC_Start+0x1a0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d136      	bne.n	8002442 <HAL_ADC_Start+0x17e>
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_ADC_Start+0x194>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d130      	bne.n	8002442 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d129      	bne.n	8002442 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	e020      	b.n	8002442 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a15      	ldr	r2, [pc, #84]	; (800245c <HAL_ADC_Start+0x198>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11b      	bne.n	8002442 <HAL_ADC_Start+0x17e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d114      	bne.n	8002442 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e00b      	b.n	8002442 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	20000010 	.word	0x20000010
 8002454:	431bde83 	.word	0x431bde83
 8002458:	40012300 	.word	0x40012300
 800245c:	40012000 	.word	0x40012000
 8002460:	40012100 	.word	0x40012100
 8002464:	40012200 	.word	0x40012200

08002468 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002484:	d113      	bne.n	80024ae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002494:	d10b      	bne.n	80024ae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e063      	b.n	8002576 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024ae:	f7ff feb9 	bl	8002224 <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024b4:	e021      	b.n	80024fa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d01d      	beq.n	80024fa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_ADC_PollForConversion+0x6c>
 80024c4:	f7ff feae 	bl	8002224 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d212      	bcs.n	80024fa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d00b      	beq.n	80024fa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0204 	orr.w	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e03d      	b.n	8002576 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	d1d6      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0212 	mvn.w	r2, #18
 8002510:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d123      	bne.n	8002574 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002530:	2b00      	cmp	r3, #0
 8002532:	d11f      	bne.n	8002574 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b02      	cmp	r3, #2
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	bf0c      	ite	eq
 80025b2:	2301      	moveq	r3, #1
 80025b4:	2300      	movne	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d049      	beq.n	8002654 <HAL_ADC_IRQHandler+0xd6>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d046      	beq.n	8002654 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d12b      	bne.n	8002644 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d127      	bne.n	8002644 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800260c:	2b00      	cmp	r3, #0
 800260e:	d119      	bne.n	8002644 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0220 	bic.w	r2, r2, #32
 800261e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f8e8 	bl	800281a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f06f 0212 	mvn.w	r2, #18
 8002652:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d057      	beq.n	8002736 <HAL_ADC_IRQHandler+0x1b8>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d054      	beq.n	8002736 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d139      	bne.n	8002726 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12b      	bne.n	8002726 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d124      	bne.n	8002726 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11d      	bne.n	8002726 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d119      	bne.n	8002726 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002700:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fac4 	bl	8002cb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 020c 	mvn.w	r2, #12
 8002734:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d017      	beq.n	8002798 <HAL_ADC_IRQHandler+0x21a>
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d014      	beq.n	8002798 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d10d      	bne.n	8002798 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f850 	bl	800282e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0201 	mvn.w	r2, #1
 8002796:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x27a>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d012      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f06f 0220 	mvn.w	r2, #32
 80027e6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f82a 	bl	8002842 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f06f 0220 	mvn.w	r2, #32
 80027f6:	601a      	str	r2, [r3, #0]
  }
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x1c>
 8002870:	2302      	movs	r3, #2
 8002872:	e113      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x244>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b09      	cmp	r3, #9
 8002882:	d925      	bls.n	80028d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68d9      	ldr	r1, [r3, #12]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	3b1e      	subs	r3, #30
 800289a:	2207      	movs	r2, #7
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43da      	mvns	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	400a      	ands	r2, r1
 80028a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68d9      	ldr	r1, [r3, #12]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	4603      	mov	r3, r0
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4403      	add	r3, r0
 80028c2:	3b1e      	subs	r3, #30
 80028c4:	409a      	lsls	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	e022      	b.n	8002916 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6919      	ldr	r1, [r3, #16]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	2207      	movs	r2, #7
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	400a      	ands	r2, r1
 80028f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6919      	ldr	r1, [r3, #16]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	4603      	mov	r3, r0
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4403      	add	r3, r0
 800290c:	409a      	lsls	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b06      	cmp	r3, #6
 800291c:	d824      	bhi.n	8002968 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	3b05      	subs	r3, #5
 8002930:	221f      	movs	r2, #31
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	400a      	ands	r2, r1
 800293e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	4618      	mov	r0, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b05      	subs	r3, #5
 800295a:	fa00 f203 	lsl.w	r2, r0, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
 8002966:	e04c      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d824      	bhi.n	80029ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	3b23      	subs	r3, #35	; 0x23
 8002982:	221f      	movs	r2, #31
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43da      	mvns	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	400a      	ands	r2, r1
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3b23      	subs	r3, #35	; 0x23
 80029ac:	fa00 f203 	lsl.w	r2, r0, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
 80029b8:	e023      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b41      	subs	r3, #65	; 0x41
 80029cc:	221f      	movs	r2, #31
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	400a      	ands	r2, r1
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	3b41      	subs	r3, #65	; 0x41
 80029f6:	fa00 f203 	lsl.w	r2, r0, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a02:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <HAL_ADC_ConfigChannel+0x250>)
 8002a04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a28      	ldr	r2, [pc, #160]	; (8002aac <HAL_ADC_ConfigChannel+0x254>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10f      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1d8>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b12      	cmp	r3, #18
 8002a16:	d10b      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_ADC_ConfigChannel+0x254>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d12b      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x23a>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_ADC_ConfigChannel+0x258>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <HAL_ADC_ConfigChannel+0x1f4>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b11      	cmp	r3, #17
 8002a4a:	d122      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <HAL_ADC_ConfigChannel+0x258>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d111      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_ADC_ConfigChannel+0x25c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_ADC_ConfigChannel+0x260>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	0c9a      	lsrs	r2, r3, #18
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a84:	e002      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f9      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40012300 	.word	0x40012300
 8002aac:	40012000 	.word	0x40012000
 8002ab0:	10000012 	.word	0x10000012
 8002ab4:	20000010 	.word	0x20000010
 8002ab8:	431bde83 	.word	0x431bde83

08002abc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac4:	4b79      	ldr	r3, [pc, #484]	; (8002cac <ADC_Init+0x1f0>)
 8002ac6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	021a      	lsls	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <ADC_Init+0x1f4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d022      	beq.n	8002b9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6899      	ldr	r1, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	e00f      	b.n	8002bba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0202 	bic.w	r2, r2, #2
 8002bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6899      	ldr	r1, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7e1b      	ldrb	r3, [r3, #24]
 8002bd4:	005a      	lsls	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01b      	beq.n	8002c20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	3b01      	subs	r3, #1
 8002c14:	035a      	lsls	r2, r3, #13
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	e007      	b.n	8002c30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	051a      	lsls	r2, r3, #20
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c72:	025a      	lsls	r2, r3, #9
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6899      	ldr	r1, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	029a      	lsls	r2, r3, #10
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40012300 	.word	0x40012300
 8002cb0:	0f000001 	.word	0x0f000001

08002cb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4907      	ldr	r1, [pc, #28]	; (8002d64 <__NVIC_EnableIRQ+0x38>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	; (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	; (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
         );
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d301      	bcc.n	8002e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00f      	b.n	8002e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <SysTick_Config+0x40>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e42:	210f      	movs	r1, #15
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f7ff ff8e 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <SysTick_Config+0x40>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SysTick_Config+0x40>)
 8002e54:	2207      	movs	r2, #7
 8002e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff29 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e90:	f7ff ff3e 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f7ff ff8e 	bl	8002dbc <NVIC_EncodePriority>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff5d 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff31 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ffa2 	bl	8002e24 <SysTick_Config>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e014      	b.n	8002f26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	791b      	ldrb	r3, [r3, #4]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fe ff45 	bl	8001d9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	795b      	ldrb	r3, [r3, #5]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_DAC_Start+0x16>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e040      	b.n	8002fc6 <HAL_DAC_Start+0x98>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10f      	bne.n	8002f8e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002f78:	2b3c      	cmp	r3, #60	; 0x3c
 8002f7a:	d11d      	bne.n	8002fb8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	e014      	b.n	8002fb8 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	213c      	movs	r1, #60	; 0x3c
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0202 	orr.w	r2, r2, #2
 8002fb6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b087      	sub	sp, #28
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e004      	b.n	8003006 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	3314      	adds	r3, #20
 8003004:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	461a      	mov	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	795b      	ldrb	r3, [r3, #5]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_DAC_ConfigChannel+0x18>
 8003030:	2302      	movs	r3, #2
 8003032:	e03c      	b.n	80030ae <HAL_DAC_ConfigChannel+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2202      	movs	r2, #2
 800303e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4013      	ands	r3, r2
 800305c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	22c0      	movs	r2, #192	; 0xc0
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	400a      	ands	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff f8ac 	bl	8002224 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e099      	b.n	800320c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f8:	e00f      	b.n	800311a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030fa:	f7ff f893 	bl	8002224 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b05      	cmp	r3, #5
 8003106:	d908      	bls.n	800311a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e078      	b.n	800320c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e8      	bne.n	80030fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4b38      	ldr	r3, [pc, #224]	; (8003214 <HAL_DMA_Init+0x158>)
 8003134:	4013      	ands	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2b04      	cmp	r3, #4
 8003172:	d107      	bne.n	8003184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4313      	orrs	r3, r2
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d117      	bne.n	80031de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00e      	beq.n	80031de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa7b 	bl	80036bc <DMA_CheckFifoParam>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031da:	2301      	movs	r3, #1
 80031dc:	e016      	b.n	800320c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa32 	bl	8003650 <DMA_CalcBaseAndBitshift>
 80031ec:	4603      	mov	r3, r0
 80031ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	223f      	movs	r2, #63	; 0x3f
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	f010803f 	.word	0xf010803f

08003218 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003226:	f7fe fffd 	bl	8002224 <HAL_GetTick>
 800322a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d008      	beq.n	800324a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e052      	b.n	80032f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0216 	bic.w	r2, r2, #22
 8003258:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003268:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <HAL_DMA_Abort+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0208 	bic.w	r2, r2, #8
 8003288:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329a:	e013      	b.n	80032c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800329c:	f7fe ffc2 	bl	8002224 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d90c      	bls.n	80032c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2203      	movs	r2, #3
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e015      	b.n	80032f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e4      	bne.n	800329c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	223f      	movs	r2, #63	; 0x3f
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d004      	beq.n	8003316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e00c      	b.n	8003330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2205      	movs	r2, #5
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003348:	4b92      	ldr	r3, [pc, #584]	; (8003594 <HAL_DMA_IRQHandler+0x258>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a92      	ldr	r2, [pc, #584]	; (8003598 <HAL_DMA_IRQHandler+0x25c>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0a9b      	lsrs	r3, r3, #10
 8003354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	2208      	movs	r2, #8
 8003368:	409a      	lsls	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01a      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d013      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0204 	bic.w	r2, r2, #4
 800338e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	2208      	movs	r2, #8
 8003396:	409a      	lsls	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f043 0201 	orr.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d012      	beq.n	80033de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	2201      	movs	r2, #1
 80033cc:	409a      	lsls	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	f043 0202 	orr.w	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	2204      	movs	r2, #4
 80033e4:	409a      	lsls	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	2204      	movs	r2, #4
 8003402:	409a      	lsls	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340c:	f043 0204 	orr.w	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	2210      	movs	r2, #16
 800341a:	409a      	lsls	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d043      	beq.n	80034ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d03c      	beq.n	80034ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	2210      	movs	r2, #16
 8003438:	409a      	lsls	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d018      	beq.n	800347e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d108      	bne.n	800346c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d024      	beq.n	80034ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
 800346a:	e01f      	b.n	80034ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e016      	b.n	80034ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0208 	bic.w	r2, r2, #8
 800349a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	2220      	movs	r2, #32
 80034b2:	409a      	lsls	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 808e 	beq.w	80035da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8086 	beq.w	80035da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2220      	movs	r2, #32
 80034d4:	409a      	lsls	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d136      	bne.n	8003554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0216 	bic.w	r2, r2, #22
 80034f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d103      	bne.n	8003516 <HAL_DMA_IRQHandler+0x1da>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0208 	bic.w	r2, r2, #8
 8003524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352a:	223f      	movs	r2, #63	; 0x3f
 800352c:	409a      	lsls	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	2b00      	cmp	r3, #0
 8003548:	d07d      	beq.n	8003646 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
        }
        return;
 8003552:	e078      	b.n	8003646 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01c      	beq.n	800359c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	2b00      	cmp	r3, #0
 8003576:	d030      	beq.n	80035da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
 8003580:	e02b      	b.n	80035da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d027      	beq.n	80035da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e022      	b.n	80035da <HAL_DMA_IRQHandler+0x29e>
 8003594:	20000010 	.word	0x20000010
 8003598:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0210 	bic.w	r2, r2, #16
 80035b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d032      	beq.n	8003648 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d022      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2205      	movs	r2, #5
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3301      	adds	r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	429a      	cmp	r2, r3
 8003610:	d307      	bcc.n	8003622 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f2      	bne.n	8003606 <HAL_DMA_IRQHandler+0x2ca>
 8003620:	e000      	b.n	8003624 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003622:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
 8003644:	e000      	b.n	8003648 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003646:	bf00      	nop
    }
  }
}
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop

08003650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	3b10      	subs	r3, #16
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <DMA_CalcBaseAndBitshift+0x68>)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d909      	bls.n	8003692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	1d1a      	adds	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	659a      	str	r2, [r3, #88]	; 0x58
 8003690:	e007      	b.n	80036a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	aaaaaaab 	.word	0xaaaaaaab
 80036b8:	080084c4 	.word	0x080084c4

080036bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11f      	bne.n	8003716 <DMA_CheckFifoParam+0x5a>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d856      	bhi.n	800378a <DMA_CheckFifoParam+0xce>
 80036dc:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <DMA_CheckFifoParam+0x28>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	080036f5 	.word	0x080036f5
 80036e8:	08003707 	.word	0x08003707
 80036ec:	080036f5 	.word	0x080036f5
 80036f0:	0800378b 	.word	0x0800378b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d046      	beq.n	800378e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003704:	e043      	b.n	800378e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800370e:	d140      	bne.n	8003792 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003714:	e03d      	b.n	8003792 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371e:	d121      	bne.n	8003764 <DMA_CheckFifoParam+0xa8>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d837      	bhi.n	8003796 <DMA_CheckFifoParam+0xda>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <DMA_CheckFifoParam+0x70>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	0800373d 	.word	0x0800373d
 8003730:	08003743 	.word	0x08003743
 8003734:	0800373d 	.word	0x0800373d
 8003738:	08003755 	.word	0x08003755
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      break;
 8003740:	e030      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d025      	beq.n	800379a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003752:	e022      	b.n	800379a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800375c:	d11f      	bne.n	800379e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003762:	e01c      	b.n	800379e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d903      	bls.n	8003772 <DMA_CheckFifoParam+0xb6>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d003      	beq.n	8003778 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003770:	e018      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
      break;
 8003776:	e015      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      break;
 8003788:	e00b      	b.n	80037a2 <DMA_CheckFifoParam+0xe6>
      break;
 800378a:	bf00      	nop
 800378c:	e00a      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
      break;
 800378e:	bf00      	nop
 8003790:	e008      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003792:	bf00      	nop
 8003794:	e006      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003796:	bf00      	nop
 8003798:	e004      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
 800379c:	e002      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
    }
  } 
  
  return status; 
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop

080037b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e165      	b.n	8003a9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037d0:	2201      	movs	r2, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	f040 8154 	bne.w	8003a96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d005      	beq.n	8003806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003802:	2b02      	cmp	r3, #2
 8003804:	d130      	bne.n	8003868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	2203      	movs	r2, #3
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800383c:	2201      	movs	r2, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 0201 	and.w	r2, r3, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b03      	cmp	r3, #3
 8003872:	d017      	beq.n	80038a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d123      	bne.n	80038f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	08da      	lsrs	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3208      	adds	r2, #8
 80038b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	220f      	movs	r2, #15
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	08da      	lsrs	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3208      	adds	r2, #8
 80038f2:	69b9      	ldr	r1, [r7, #24]
 80038f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0203 	and.w	r2, r3, #3
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ae 	beq.w	8003a96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	4b5d      	ldr	r3, [pc, #372]	; (8003ab4 <HAL_GPIO_Init+0x300>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	4a5c      	ldr	r2, [pc, #368]	; (8003ab4 <HAL_GPIO_Init+0x300>)
 8003944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003948:	6453      	str	r3, [r2, #68]	; 0x44
 800394a:	4b5a      	ldr	r3, [pc, #360]	; (8003ab4 <HAL_GPIO_Init+0x300>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003956:	4a58      	ldr	r2, [pc, #352]	; (8003ab8 <HAL_GPIO_Init+0x304>)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	3302      	adds	r3, #2
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	220f      	movs	r2, #15
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4f      	ldr	r2, [pc, #316]	; (8003abc <HAL_GPIO_Init+0x308>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d025      	beq.n	80039ce <HAL_GPIO_Init+0x21a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4e      	ldr	r2, [pc, #312]	; (8003ac0 <HAL_GPIO_Init+0x30c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01f      	beq.n	80039ca <HAL_GPIO_Init+0x216>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4d      	ldr	r2, [pc, #308]	; (8003ac4 <HAL_GPIO_Init+0x310>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d019      	beq.n	80039c6 <HAL_GPIO_Init+0x212>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4c      	ldr	r2, [pc, #304]	; (8003ac8 <HAL_GPIO_Init+0x314>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_GPIO_Init+0x20e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4b      	ldr	r2, [pc, #300]	; (8003acc <HAL_GPIO_Init+0x318>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00d      	beq.n	80039be <HAL_GPIO_Init+0x20a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4a      	ldr	r2, [pc, #296]	; (8003ad0 <HAL_GPIO_Init+0x31c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <HAL_GPIO_Init+0x206>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a49      	ldr	r2, [pc, #292]	; (8003ad4 <HAL_GPIO_Init+0x320>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_GPIO_Init+0x202>
 80039b2:	2306      	movs	r3, #6
 80039b4:	e00c      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039b6:	2307      	movs	r3, #7
 80039b8:	e00a      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039ba:	2305      	movs	r3, #5
 80039bc:	e008      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039be:	2304      	movs	r3, #4
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039ce:	2300      	movs	r3, #0
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e0:	4935      	ldr	r1, [pc, #212]	; (8003ab8 <HAL_GPIO_Init+0x304>)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ee:	4b3a      	ldr	r3, [pc, #232]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a12:	4a31      	ldr	r2, [pc, #196]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a18:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a42:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a66:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a90:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	f67f ae96 	bls.w	80037d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40021400 	.word	0x40021400
 8003ad4:	40021800 	.word	0x40021800
 8003ad8:	40013c00 	.word	0x40013c00

08003adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e001      	b.n	8003afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b1c:	787b      	ldrb	r3, [r7, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b28:	e003      	b.n	8003b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	041a      	lsls	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	619a      	str	r2, [r3, #24]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b6c:	f7fe fb5a 	bl	8002224 <HAL_GetTick>
 8003b70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b72:	e009      	b.n	8003b88 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b74:	f7fe fb56 	bl	8002224 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b82:	d901      	bls.n	8003b88 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e01f      	b.n	8003bc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d1ee      	bne.n	8003b74 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b9c:	f7fe fb42 	bl	8002224 <HAL_GetTick>
 8003ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ba2:	e009      	b.n	8003bb8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ba4:	f7fe fb3e 	bl	8002224 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb2:	d901      	bls.n	8003bb8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e007      	b.n	8003bc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	420e0040 	.word	0x420e0040
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	420e0044 	.word	0x420e0044

08003be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0cc      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b68      	ldr	r3, [pc, #416]	; (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d90c      	bls.n	8003c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b65      	ldr	r3, [pc, #404]	; (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b63      	ldr	r3, [pc, #396]	; (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0b8      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c34:	4b59      	ldr	r3, [pc, #356]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c4c:	4b53      	ldr	r3, [pc, #332]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a52      	ldr	r2, [pc, #328]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	494d      	ldr	r1, [pc, #308]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d044      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d119      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e07f      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d003      	beq.n	8003c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d107      	bne.n	8003cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9e:	4b3f      	ldr	r3, [pc, #252]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e06f      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cae:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e067      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cbe:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f023 0203 	bic.w	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4934      	ldr	r1, [pc, #208]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd0:	f7fe faa8 	bl	8002224 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd8:	f7fe faa4 	bl	8002224 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e04f      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 020c 	and.w	r2, r3, #12
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d1eb      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d20c      	bcs.n	8003d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e032      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d34:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4916      	ldr	r1, [pc, #88]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	490e      	ldr	r1, [pc, #56]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d66:	f000 f855 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	490a      	ldr	r1, [pc, #40]	; (8003da0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	5ccb      	ldrb	r3, [r1, r3]
 8003d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7e:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fa08 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023c00 	.word	0x40023c00
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	080084ac 	.word	0x080084ac
 8003da4:	20000010 	.word	0x20000010
 8003da8:	20000014 	.word	0x20000014

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000010 	.word	0x20000010

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	080084bc 	.word	0x080084bc

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	080084bc 	.word	0x080084bc

08003e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e18:	b088      	sub	sp, #32
 8003e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e30:	4bce      	ldr	r3, [pc, #824]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	f200 818d 	bhi.w	8004158 <HAL_RCC_GetSysClockFreq+0x344>
 8003e3e:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <HAL_RCC_GetSysClockFreq+0x30>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08004159 	.word	0x08004159
 8003e4c:	08004159 	.word	0x08004159
 8003e50:	08004159 	.word	0x08004159
 8003e54:	08003e7f 	.word	0x08003e7f
 8003e58:	08004159 	.word	0x08004159
 8003e5c:	08004159 	.word	0x08004159
 8003e60:	08004159 	.word	0x08004159
 8003e64:	08003e85 	.word	0x08003e85
 8003e68:	08004159 	.word	0x08004159
 8003e6c:	08004159 	.word	0x08004159
 8003e70:	08004159 	.word	0x08004159
 8003e74:	08003ff9 	.word	0x08003ff9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e78:	4bbd      	ldr	r3, [pc, #756]	; (8004170 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e7a:	61bb      	str	r3, [r7, #24]
       break;
 8003e7c:	e16f      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7e:	4bbd      	ldr	r3, [pc, #756]	; (8004174 <HAL_RCC_GetSysClockFreq+0x360>)
 8003e80:	61bb      	str	r3, [r7, #24]
      break;
 8003e82:	e16c      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e84:	4bb9      	ldr	r3, [pc, #740]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e8c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8e:	4bb7      	ldr	r3, [pc, #732]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d053      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4bb4      	ldr	r3, [pc, #720]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	ea02 0400 	and.w	r4, r2, r0
 8003eb2:	603c      	str	r4, [r7, #0]
 8003eb4:	400b      	ands	r3, r1
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	014b      	lsls	r3, r1, #5
 8003eca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ece:	0142      	lsls	r2, r0, #5
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	1ac0      	subs	r0, r0, r3
 8003ed8:	462b      	mov	r3, r5
 8003eda:	eb61 0103 	sbc.w	r1, r1, r3
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	018b      	lsls	r3, r1, #6
 8003ee8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003eec:	0182      	lsls	r2, r0, #6
 8003eee:	1a12      	subs	r2, r2, r0
 8003ef0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	f04f 0100 	mov.w	r1, #0
 8003efc:	00d9      	lsls	r1, r3, #3
 8003efe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f02:	00d0      	lsls	r0, r2, #3
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4621      	mov	r1, r4
 8003f0a:	1852      	adds	r2, r2, r1
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	eb43 0101 	adc.w	r1, r3, r1
 8003f12:	460b      	mov	r3, r1
 8003f14:	f04f 0000 	mov.w	r0, #0
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	0259      	lsls	r1, r3, #9
 8003f1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f22:	0250      	lsls	r0, r2, #9
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	f7fc fd82 	bl	8000a3c <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	e04c      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b8a      	ldr	r3, [pc, #552]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	ea02 0a00 	and.w	sl, r2, r0
 8003f5a:	ea03 0b01 	and.w	fp, r3, r1
 8003f5e:	4650      	mov	r0, sl
 8003f60:	4659      	mov	r1, fp
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	014b      	lsls	r3, r1, #5
 8003f6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f70:	0142      	lsls	r2, r0, #5
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	ebb0 000a 	subs.w	r0, r0, sl
 8003f7a:	eb61 010b 	sbc.w	r1, r1, fp
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	018b      	lsls	r3, r1, #6
 8003f88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f8c:	0182      	lsls	r2, r0, #6
 8003f8e:	1a12      	subs	r2, r2, r0
 8003f90:	eb63 0301 	sbc.w	r3, r3, r1
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	00d9      	lsls	r1, r3, #3
 8003f9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa2:	00d0      	lsls	r0, r2, #3
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	eb12 020a 	adds.w	r2, r2, sl
 8003fac:	eb43 030b 	adc.w	r3, r3, fp
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	f04f 0100 	mov.w	r1, #0
 8003fb8:	0299      	lsls	r1, r3, #10
 8003fba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fbe:	0290      	lsls	r0, r2, #10
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	f7fc fd34 	bl	8000a3c <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4613      	mov	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fdc:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	61bb      	str	r3, [r7, #24]
      break;
 8003ff6:	e0b2      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff8:	4b5c      	ldr	r3, [pc, #368]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004000:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004002:	4b5a      	ldr	r3, [pc, #360]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04d      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400e:	4b57      	ldr	r3, [pc, #348]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	461a      	mov	r2, r3
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	ea02 0800 	and.w	r8, r2, r0
 8004026:	ea03 0901 	and.w	r9, r3, r1
 800402a:	4640      	mov	r0, r8
 800402c:	4649      	mov	r1, r9
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	014b      	lsls	r3, r1, #5
 8004038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800403c:	0142      	lsls	r2, r0, #5
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	ebb0 0008 	subs.w	r0, r0, r8
 8004046:	eb61 0109 	sbc.w	r1, r1, r9
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	018b      	lsls	r3, r1, #6
 8004054:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004058:	0182      	lsls	r2, r0, #6
 800405a:	1a12      	subs	r2, r2, r0
 800405c:	eb63 0301 	sbc.w	r3, r3, r1
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	00d9      	lsls	r1, r3, #3
 800406a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800406e:	00d0      	lsls	r0, r2, #3
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	eb12 0208 	adds.w	r2, r2, r8
 8004078:	eb43 0309 	adc.w	r3, r3, r9
 800407c:	f04f 0000 	mov.w	r0, #0
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	0259      	lsls	r1, r3, #9
 8004086:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800408a:	0250      	lsls	r0, r2, #9
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	461a      	mov	r2, r3
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	f7fc fcce 	bl	8000a3c <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4613      	mov	r3, r2
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e04a      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	099b      	lsrs	r3, r3, #6
 80040b0:	461a      	mov	r2, r3
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	ea02 0400 	and.w	r4, r2, r0
 80040c2:	ea03 0501 	and.w	r5, r3, r1
 80040c6:	4620      	mov	r0, r4
 80040c8:	4629      	mov	r1, r5
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	014b      	lsls	r3, r1, #5
 80040d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040d8:	0142      	lsls	r2, r0, #5
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	1b00      	subs	r0, r0, r4
 80040e0:	eb61 0105 	sbc.w	r1, r1, r5
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	018b      	lsls	r3, r1, #6
 80040ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040f2:	0182      	lsls	r2, r0, #6
 80040f4:	1a12      	subs	r2, r2, r0
 80040f6:	eb63 0301 	sbc.w	r3, r3, r1
 80040fa:	f04f 0000 	mov.w	r0, #0
 80040fe:	f04f 0100 	mov.w	r1, #0
 8004102:	00d9      	lsls	r1, r3, #3
 8004104:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004108:	00d0      	lsls	r0, r2, #3
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	1912      	adds	r2, r2, r4
 8004110:	eb45 0303 	adc.w	r3, r5, r3
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	0299      	lsls	r1, r3, #10
 800411e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004122:	0290      	lsls	r0, r2, #10
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	461a      	mov	r2, r3
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	f7fc fc82 	bl	8000a3c <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4613      	mov	r3, r2
 800413e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <HAL_RCC_GetSysClockFreq+0x358>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	0f1b      	lsrs	r3, r3, #28
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	61bb      	str	r3, [r7, #24]
      break;
 8004156:	e002      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetSysClockFreq+0x35c>)
 800415a:	61bb      	str	r3, [r7, #24]
      break;
 800415c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800415e:	69bb      	ldr	r3, [r7, #24]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	00f42400 	.word	0x00f42400
 8004174:	007a1200 	.word	0x007a1200

08004178 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e28d      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8083 	beq.w	800429e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004198:	4b94      	ldr	r3, [pc, #592]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d019      	beq.n	80041d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041a4:	4b91      	ldr	r3, [pc, #580]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041b0:	4b8e      	ldr	r3, [pc, #568]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041bc:	d00c      	beq.n	80041d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b8b      	ldr	r3, [pc, #556]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d112      	bne.n	80041f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ca:	4b88      	ldr	r3, [pc, #544]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	4b84      	ldr	r3, [pc, #528]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d05b      	beq.n	800429c <HAL_RCC_OscConfig+0x124>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d157      	bne.n	800429c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e25a      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f8:	d106      	bne.n	8004208 <HAL_RCC_OscConfig+0x90>
 80041fa:	4b7c      	ldr	r3, [pc, #496]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7b      	ldr	r2, [pc, #492]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e01d      	b.n	8004244 <HAL_RCC_OscConfig+0xcc>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0xb4>
 8004212:	4b76      	ldr	r3, [pc, #472]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a75      	ldr	r2, [pc, #468]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b73      	ldr	r3, [pc, #460]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a72      	ldr	r2, [pc, #456]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e00b      	b.n	8004244 <HAL_RCC_OscConfig+0xcc>
 800422c:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6e      	ldr	r2, [pc, #440]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4b6c      	ldr	r3, [pc, #432]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6b      	ldr	r2, [pc, #428]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 800423e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd ffea 	bl	8002224 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004254:	f7fd ffe6 	bl	8002224 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e21f      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0xdc>
 8004272:	e014      	b.n	800429e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd ffd6 	bl	8002224 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd ffd2 	bl	8002224 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e20b      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	4b57      	ldr	r3, [pc, #348]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x104>
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d06f      	beq.n	800438a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042aa:	4b50      	ldr	r3, [pc, #320]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d017      	beq.n	80042e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042b6:	4b4d      	ldr	r3, [pc, #308]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d105      	bne.n	80042ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042c2:	4b4a      	ldr	r3, [pc, #296]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d11c      	bne.n	8004314 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042da:	4b44      	ldr	r3, [pc, #272]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	4b41      	ldr	r3, [pc, #260]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x186>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e1d3      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4937      	ldr	r1, [pc, #220]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	e03a      	b.n	800438a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431c:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_OscConfig+0x278>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004322:	f7fd ff7f 	bl	8002224 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432a:	f7fd ff7b 	bl	8002224 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e1b4      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b28      	ldr	r3, [pc, #160]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4925      	ldr	r1, [pc, #148]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]
 800435c:	e015      	b.n	800438a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_RCC_OscConfig+0x278>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fd ff5e 	bl	8002224 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436c:	f7fd ff5a 	bl	8002224 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e193      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d036      	beq.n	8004404 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d016      	beq.n	80043cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439e:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fd ff3e 	bl	8002224 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ac:	f7fd ff3a 	bl	8002224 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e173      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80043c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x234>
 80043ca:	e01b      	b.n	8004404 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCC_OscConfig+0x27c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fd ff27 	bl	8002224 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d8:	e00e      	b.n	80043f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043da:	f7fd ff23 	bl	8002224 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d907      	bls.n	80043f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e15c      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
 80043ec:	40023800 	.word	0x40023800
 80043f0:	42470000 	.word	0x42470000
 80043f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	4b8a      	ldr	r3, [pc, #552]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ea      	bne.n	80043da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8097 	beq.w	8004540 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004416:	4b83      	ldr	r3, [pc, #524]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10f      	bne.n	8004442 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	4b7f      	ldr	r3, [pc, #508]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4a7e      	ldr	r2, [pc, #504]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	6413      	str	r3, [r2, #64]	; 0x40
 8004432:	4b7c      	ldr	r3, [pc, #496]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004442:	4b79      	ldr	r3, [pc, #484]	; (8004628 <HAL_RCC_OscConfig+0x4b0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d118      	bne.n	8004480 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444e:	4b76      	ldr	r3, [pc, #472]	; (8004628 <HAL_RCC_OscConfig+0x4b0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a75      	ldr	r2, [pc, #468]	; (8004628 <HAL_RCC_OscConfig+0x4b0>)
 8004454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445a:	f7fd fee3 	bl	8002224 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004462:	f7fd fedf 	bl	8002224 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e118      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <HAL_RCC_OscConfig+0x4b0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x31e>
 8004488:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	4a65      	ldr	r2, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6713      	str	r3, [r2, #112]	; 0x70
 8004494:	e01c      	b.n	80044d0 <HAL_RCC_OscConfig+0x358>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b05      	cmp	r3, #5
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x340>
 800449e:	4b61      	ldr	r3, [pc, #388]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	4a60      	ldr	r2, [pc, #384]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	f043 0304 	orr.w	r3, r3, #4
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70
 80044aa:	4b5e      	ldr	r3, [pc, #376]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a5d      	ldr	r2, [pc, #372]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
 80044b6:	e00b      	b.n	80044d0 <HAL_RCC_OscConfig+0x358>
 80044b8:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	4a59      	ldr	r2, [pc, #356]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	6713      	str	r3, [r2, #112]	; 0x70
 80044c4:	4b57      	ldr	r3, [pc, #348]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a56      	ldr	r2, [pc, #344]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044ca:	f023 0304 	bic.w	r3, r3, #4
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d015      	beq.n	8004504 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d8:	f7fd fea4 	bl	8002224 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7fd fea0 	bl	8002224 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0d7      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	4b4b      	ldr	r3, [pc, #300]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ee      	beq.n	80044e0 <HAL_RCC_OscConfig+0x368>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fd fe8e 	bl	8002224 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fd fe8a 	bl	8002224 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0c1      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004522:	4b40      	ldr	r3, [pc, #256]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ee      	bne.n	800450c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d105      	bne.n	8004540 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004534:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4a3a      	ldr	r2, [pc, #232]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 800453a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80ad 	beq.w	80046a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800454a:	4b36      	ldr	r3, [pc, #216]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b08      	cmp	r3, #8
 8004554:	d060      	beq.n	8004618 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d145      	bne.n	80045ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	4b33      	ldr	r3, [pc, #204]	; (800462c <HAL_RCC_OscConfig+0x4b4>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd fe5e 	bl	8002224 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456c:	f7fd fe5a 	bl	8002224 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e093      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	4b29      	ldr	r3, [pc, #164]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	3b01      	subs	r3, #1
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	491b      	ldr	r1, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_RCC_OscConfig+0x4b4>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fd fe2f 	bl	8002224 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fd fe2b 	bl	8002224 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e064      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x452>
 80045e8:	e05c      	b.n	80046a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <HAL_RCC_OscConfig+0x4b4>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fd fe18 	bl	8002224 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd fe14 	bl	8002224 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e04d      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <HAL_RCC_OscConfig+0x4ac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x480>
 8004616:	e045      	b.n	80046a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d107      	bne.n	8004630 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e040      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
 8004624:	40023800 	.word	0x40023800
 8004628:	40007000 	.word	0x40007000
 800462c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <HAL_RCC_OscConfig+0x538>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d030      	beq.n	80046a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d129      	bne.n	80046a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d122      	bne.n	80046a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004660:	4013      	ands	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004668:	4293      	cmp	r3, r2
 800466a:	d119      	bne.n	80046a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	3b01      	subs	r3, #1
 800467a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d10f      	bne.n	80046a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800

080046b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e041      	b.n	800474a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fd fba2 	bl	8001e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 fbac 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d001      	beq.n	800476c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e046      	b.n	80047fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a23      	ldr	r2, [pc, #140]	; (8004808 <HAL_TIM_Base_Start+0xb4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <HAL_TIM_Base_Start+0x70>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d01d      	beq.n	80047c4 <HAL_TIM_Base_Start+0x70>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1f      	ldr	r2, [pc, #124]	; (800480c <HAL_TIM_Base_Start+0xb8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <HAL_TIM_Base_Start+0x70>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <HAL_TIM_Base_Start+0xbc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <HAL_TIM_Base_Start+0x70>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <HAL_TIM_Base_Start+0xc0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_TIM_Base_Start+0x70>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_TIM_Base_Start+0xc4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_TIM_Base_Start+0x70>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <HAL_TIM_Base_Start+0xc8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_TIM_Base_Start+0x70>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_TIM_Base_Start+0xcc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d111      	bne.n	80047e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b06      	cmp	r3, #6
 80047d4:	d010      	beq.n	80047f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	e007      	b.n	80047f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40010400 	.word	0x40010400
 800481c:	40014000 	.word	0x40014000
 8004820:	40001800 	.word	0x40001800

08004824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e04e      	b.n	80048da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d022      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x80>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d01d      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x80>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <HAL_TIM_Base_Start_IT+0xc8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d018      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x80>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x80>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00e      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x80>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d009      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x80>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a19      	ldr	r2, [pc, #100]	; (80048fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x80>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a18      	ldr	r2, [pc, #96]	; (8004900 <HAL_TIM_Base_Start_IT+0xdc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d111      	bne.n	80048c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d010      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	e007      	b.n	80048d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40010400 	.word	0x40010400
 80048fc:	40014000 	.word	0x40014000
 8004900:	40001800 	.word	0x40001800

08004904 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e041      	b.n	800499a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f839 	bl	80049a2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 fa84 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d122      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d11b      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0202 	mvn.w	r2, #2
 80049e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa0b 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 80049fe:	e005      	b.n	8004a0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f9fd 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa0e 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d122      	bne.n	8004a66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d11b      	bne.n	8004a66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0204 	mvn.w	r2, #4
 8004a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9e1 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004a52:	e005      	b.n	8004a60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f9d3 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9e4 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d122      	bne.n	8004aba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d11b      	bne.n	8004aba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f06f 0208 	mvn.w	r2, #8
 8004a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f9b7 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004aa6:	e005      	b.n	8004ab4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f9a9 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9ba 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d122      	bne.n	8004b0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d11b      	bne.n	8004b0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0210 	mvn.w	r2, #16
 8004ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f98d 	bl	8004e14 <HAL_TIM_IC_CaptureCallback>
 8004afa:	e005      	b.n	8004b08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f97f 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f990 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10e      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f06f 0201 	mvn.w	r2, #1
 8004b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc fc7f 	bl	8001438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d10e      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d107      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fce5 	bl	8005530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d10e      	bne.n	8004b92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d107      	bne.n	8004b92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f955 	bl	8004e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d10e      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d107      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f06f 0220 	mvn.w	r2, #32
 8004bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fcaf 	bl	800551c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e046      	b.n	8004c70 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d839      	bhi.n	8004c64 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004c65 	.word	0x08004c65
 8004c04:	08004c65 	.word	0x08004c65
 8004c08:	08004c3b 	.word	0x08004c3b
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c49 	.word	0x08004c49
 8004c1c:	08004c65 	.word	0x08004c65
 8004c20:	08004c65 	.word	0x08004c65
 8004c24:	08004c65 	.word	0x08004c65
 8004c28:	08004c57 	.word	0x08004c57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f9ac 	bl	8004f90 <TIM_OC1_SetConfig>
      break;
 8004c38:	e015      	b.n	8004c66 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fa15 	bl	8005070 <TIM_OC2_SetConfig>
      break;
 8004c46:	e00e      	b.n	8004c66 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fa84 	bl	800515c <TIM_OC3_SetConfig>
      break;
 8004c54:	e007      	b.n	8004c66 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 faf1 	bl	8005244 <TIM_OC4_SetConfig>
      break;
 8004c62:	e000      	b.n	8004c66 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIM_ConfigClockSource+0x18>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e0b3      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x180>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc8:	d03e      	beq.n	8004d48 <HAL_TIM_ConfigClockSource+0xd0>
 8004cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cce:	f200 8087 	bhi.w	8004de0 <HAL_TIM_ConfigClockSource+0x168>
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd6:	f000 8085 	beq.w	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	d87f      	bhi.n	8004de0 <HAL_TIM_ConfigClockSource+0x168>
 8004ce0:	2b70      	cmp	r3, #112	; 0x70
 8004ce2:	d01a      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0xa2>
 8004ce4:	2b70      	cmp	r3, #112	; 0x70
 8004ce6:	d87b      	bhi.n	8004de0 <HAL_TIM_ConfigClockSource+0x168>
 8004ce8:	2b60      	cmp	r3, #96	; 0x60
 8004cea:	d050      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x116>
 8004cec:	2b60      	cmp	r3, #96	; 0x60
 8004cee:	d877      	bhi.n	8004de0 <HAL_TIM_ConfigClockSource+0x168>
 8004cf0:	2b50      	cmp	r3, #80	; 0x50
 8004cf2:	d03c      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0xf6>
 8004cf4:	2b50      	cmp	r3, #80	; 0x50
 8004cf6:	d873      	bhi.n	8004de0 <HAL_TIM_ConfigClockSource+0x168>
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d058      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x136>
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d86f      	bhi.n	8004de0 <HAL_TIM_ConfigClockSource+0x168>
 8004d00:	2b30      	cmp	r3, #48	; 0x30
 8004d02:	d064      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x156>
 8004d04:	2b30      	cmp	r3, #48	; 0x30
 8004d06:	d86b      	bhi.n	8004de0 <HAL_TIM_ConfigClockSource+0x168>
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d060      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x156>
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d867      	bhi.n	8004de0 <HAL_TIM_ConfigClockSource+0x168>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d05c      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x156>
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d05a      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d18:	e062      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6899      	ldr	r1, [r3, #8]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f000 fb5b 	bl	80053e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	609a      	str	r2, [r3, #8]
      break;
 8004d46:	e04e      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	6899      	ldr	r1, [r3, #8]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f000 fb44 	bl	80053e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d6a:	609a      	str	r2, [r3, #8]
      break;
 8004d6c:	e03b      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 fab8 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2150      	movs	r1, #80	; 0x50
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fb11 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e02b      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 fad7 	bl	800534e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2160      	movs	r1, #96	; 0x60
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fb01 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004dac:	e01b      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f000 fa98 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2140      	movs	r1, #64	; 0x40
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 faf1 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004dcc:	e00b      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f000 fae8 	bl	80053ae <TIM_ITRx_SetConfig>
        break;
 8004dde:	e002      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004de4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a40      	ldr	r2, [pc, #256]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d00f      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3d      	ldr	r2, [pc, #244]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a3a      	ldr	r2, [pc, #232]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d027      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d023      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d017      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <TIM_Base_SetConfig+0x128>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <TIM_Base_SetConfig+0x130>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <TIM_Base_SetConfig+0x134>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a24      	ldr	r2, [pc, #144]	; (8004f88 <TIM_Base_SetConfig+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a23      	ldr	r2, [pc, #140]	; (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40001800 	.word	0x40001800
 8004f88:	40001c00 	.word	0x40001c00
 8004f8c:	40002000 	.word	0x40002000

08004f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0201 	bic.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 0302 	bic.w	r3, r3, #2
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a20      	ldr	r2, [pc, #128]	; (8005068 <TIM_OC1_SetConfig+0xd8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x64>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <TIM_OC1_SetConfig+0xdc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <TIM_OC1_SetConfig+0xd8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_OC1_SetConfig+0x8e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <TIM_OC1_SetConfig+0xdc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d111      	bne.n	8005042 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40010000 	.word	0x40010000
 800506c:	40010400 	.word	0x40010400

08005070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f023 0210 	bic.w	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a22      	ldr	r2, [pc, #136]	; (8005154 <TIM_OC2_SetConfig+0xe4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_OC2_SetConfig+0x68>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a21      	ldr	r2, [pc, #132]	; (8005158 <TIM_OC2_SetConfig+0xe8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10d      	bne.n	80050f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <TIM_OC2_SetConfig+0xe4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC2_SetConfig+0x94>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a16      	ldr	r2, [pc, #88]	; (8005158 <TIM_OC2_SetConfig+0xe8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d113      	bne.n	800512c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40010400 	.word	0x40010400

0800515c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a21      	ldr	r2, [pc, #132]	; (800523c <TIM_OC3_SetConfig+0xe0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_OC3_SetConfig+0x66>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a20      	ldr	r2, [pc, #128]	; (8005240 <TIM_OC3_SetConfig+0xe4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10d      	bne.n	80051de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a16      	ldr	r2, [pc, #88]	; (800523c <TIM_OC3_SetConfig+0xe0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <TIM_OC3_SetConfig+0x92>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <TIM_OC3_SetConfig+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d113      	bne.n	8005216 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	621a      	str	r2, [r3, #32]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40010000 	.word	0x40010000
 8005240:	40010400 	.word	0x40010400

08005244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800528e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	031b      	lsls	r3, r3, #12
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <TIM_OC4_SetConfig+0xa4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC4_SetConfig+0x68>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a11      	ldr	r2, [pc, #68]	; (80052ec <TIM_OC4_SetConfig+0xa8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d109      	bne.n	80052c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40010400 	.word	0x40010400

080052f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800531a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 030a 	bic.w	r3, r3, #10
 800532c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f023 0210 	bic.w	r2, r3, #16
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800538a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f043 0307 	orr.w	r3, r3, #7
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	431a      	orrs	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e05a      	b.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a21      	ldr	r2, [pc, #132]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005488:	d01d      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1a      	ldr	r2, [pc, #104]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10c      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40010400 	.word	0x40010400
 8005514:	40014000 	.word	0x40014000
 8005518:	40001800 	.word	0x40001800

0800551c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e03f      	b.n	80055d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc fca0 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	; 0x24
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fc1b 	bl	8005dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800559c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b08a      	sub	sp, #40	; 0x28
 80055e2:	af02      	add	r7, sp, #8
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d17c      	bne.n	80056f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_UART_Transmit+0x2c>
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e075      	b.n	80056fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_UART_Transmit+0x3e>
 8005618:	2302      	movs	r3, #2
 800561a:	e06e      	b.n	80056fa <HAL_UART_Transmit+0x11c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2221      	movs	r2, #33	; 0x21
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005632:	f7fc fdf7 	bl	8002224 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	88fa      	ldrh	r2, [r7, #6]
 8005642:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564c:	d108      	bne.n	8005660 <HAL_UART_Transmit+0x82>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	e003      	b.n	8005668 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005670:	e02a      	b.n	80056c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	2180      	movs	r1, #128	; 0x80
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fa17 	bl	8005ab0 <UART_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e036      	b.n	80056fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10b      	bne.n	80056aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	3302      	adds	r3, #2
 80056a6:	61bb      	str	r3, [r7, #24]
 80056a8:	e007      	b.n	80056ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	781a      	ldrb	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	3301      	adds	r3, #1
 80056b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1cf      	bne.n	8005672 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	2140      	movs	r1, #64	; 0x40
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f9e7 	bl	8005ab0 <UART_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e006      	b.n	80056fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08a      	sub	sp, #40	; 0x28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10d      	bne.n	8005756 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_UART_IRQHandler+0x52>
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 faa1 	bl	8005c96 <UART_Receive_IT>
      return;
 8005754:	e17c      	b.n	8005a50 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80b1 	beq.w	80058c0 <HAL_UART_IRQHandler+0x1bc>
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_UART_IRQHandler+0x70>
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 80a6 	beq.w	80058c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_UART_IRQHandler+0x90>
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_UART_IRQHandler+0xb0>
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f043 0202 	orr.w	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_UART_IRQHandler+0xd0>
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	f043 0204 	orr.w	r2, r3, #4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00f      	beq.n	80057fe <HAL_UART_IRQHandler+0xfa>
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <HAL_UART_IRQHandler+0xee>
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f043 0208 	orr.w	r2, r3, #8
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 811f 	beq.w	8005a46 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_UART_IRQHandler+0x11e>
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fa3a 	bl	8005c96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <HAL_UART_IRQHandler+0x146>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d031      	beq.n	80058ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f97a 	bl	8005b44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d123      	bne.n	80058a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	d013      	beq.n	800589e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	4a77      	ldr	r2, [pc, #476]	; (8005a58 <HAL_UART_IRQHandler+0x354>)
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4618      	mov	r0, r3
 8005884:	f7fd fd38 	bl	80032f8 <HAL_DMA_Abort_IT>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005898:	4610      	mov	r0, r2
 800589a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e00e      	b.n	80058bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8f0 	bl	8005a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	e00a      	b.n	80058bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8ec 	bl	8005a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	e006      	b.n	80058bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8e8 	bl	8005a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058ba:	e0c4      	b.n	8005a46 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	bf00      	nop
    return;
 80058be:	e0c2      	b.n	8005a46 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	f040 80a2 	bne.w	8005a0e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 809c 	beq.w	8005a0e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8096 	beq.w	8005a0e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d14f      	bne.n	80059a6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005910:	8a3b      	ldrh	r3, [r7, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8099 	beq.w	8005a4a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800591c:	8a3a      	ldrh	r2, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	f080 8093 	bcs.w	8005a4a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8a3a      	ldrh	r2, [r7, #16]
 8005928:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005934:	d02b      	beq.n	800598e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005944:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005964:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0210 	bic.w	r2, r2, #16
 8005982:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	4618      	mov	r0, r3
 800598a:	f7fd fc45 	bl	8003218 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005996:	b29b      	uxth	r3, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	b29b      	uxth	r3, r3
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f87a 	bl	8005a98 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80059a4:	e051      	b.n	8005a4a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d047      	beq.n	8005a4e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80059be:	8a7b      	ldrh	r3, [r7, #18]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d044      	beq.n	8005a4e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059d2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0210 	bic.w	r2, r2, #16
 8005a00:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a02:	8a7b      	ldrh	r3, [r7, #18]
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f846 	bl	8005a98 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a0c:	e01f      	b.n	8005a4e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_UART_IRQHandler+0x326>
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8cf 	bl	8005bc6 <UART_Transmit_IT>
    return;
 8005a28:	e012      	b.n	8005a50 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00d      	beq.n	8005a50 <HAL_UART_IRQHandler+0x34c>
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f911 	bl	8005c66 <UART_EndTransmit_IT>
    return;
 8005a44:	e004      	b.n	8005a50 <HAL_UART_IRQHandler+0x34c>
    return;
 8005a46:	bf00      	nop
 8005a48:	e002      	b.n	8005a50 <HAL_UART_IRQHandler+0x34c>
      return;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <HAL_UART_IRQHandler+0x34c>
      return;
 8005a4e:	bf00      	nop
  }
}
 8005a50:	3728      	adds	r7, #40	; 0x28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	08005b9f 	.word	0x08005b9f

08005a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac0:	e02c      	b.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d028      	beq.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ad0:	f7fc fba8 	bl	8002224 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d21d      	bcs.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0201 	bic.w	r2, r2, #1
 8005afe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e00f      	b.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4013      	ands	r3, r2
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	bf0c      	ite	eq
 8005b2c:	2301      	moveq	r3, #1
 8005b2e:	2300      	movne	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d0c3      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0201 	bic.w	r2, r2, #1
 8005b6a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0210 	bic.w	r2, r2, #16
 8005b82:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff ff63 	bl	8005a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b21      	cmp	r3, #33	; 0x21
 8005bd8:	d13e      	bne.n	8005c58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be2:	d114      	bne.n	8005c0e <UART_Transmit_IT+0x48>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d110      	bne.n	8005c0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	1c9a      	adds	r2, r3, #2
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	621a      	str	r2, [r3, #32]
 8005c0c:	e008      	b.n	8005c20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	1c59      	adds	r1, r3, #1
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6211      	str	r1, [r2, #32]
 8005c18:	781a      	ldrb	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10f      	bne.n	8005c54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e000      	b.n	8005c5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff fee8 	bl	8005a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b22      	cmp	r3, #34	; 0x22
 8005ca8:	f040 8087 	bne.w	8005dba <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb4:	d117      	bne.n	8005ce6 <UART_Receive_IT+0x50>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d113      	bne.n	8005ce6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	1c9a      	adds	r2, r3, #2
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ce4:	e026      	b.n	8005d34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf8:	d007      	beq.n	8005d0a <UART_Receive_IT+0x74>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <UART_Receive_IT+0x82>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	e008      	b.n	8005d2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	4619      	mov	r1, r3
 8005d42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d136      	bne.n	8005db6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0220 	bic.w	r2, r2, #32
 8005d56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10e      	bne.n	8005da6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0210 	bic.w	r2, r2, #16
 8005d96:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fe7a 	bl	8005a98 <HAL_UARTEx_RxEventCallback>
 8005da4:	e002      	b.n	8005dac <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fe62 	bl	8005a70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e002      	b.n	8005dbc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	b09f      	sub	sp, #124	; 0x7c
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dda:	68d9      	ldr	r1, [r3, #12]
 8005ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	ea40 0301 	orr.w	r3, r0, r1
 8005de4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e08:	f021 010c 	bic.w	r1, r1, #12
 8005e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e12:	430b      	orrs	r3, r1
 8005e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e22:	6999      	ldr	r1, [r3, #24]
 8005e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	ea40 0301 	orr.w	r3, r0, r1
 8005e2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	4bc5      	ldr	r3, [pc, #788]	; (8006148 <UART_SetConfig+0x384>)
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d004      	beq.n	8005e42 <UART_SetConfig+0x7e>
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4bc3      	ldr	r3, [pc, #780]	; (800614c <UART_SetConfig+0x388>)
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d103      	bne.n	8005e4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e42:	f7fd ffd3 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8005e46:	6778      	str	r0, [r7, #116]	; 0x74
 8005e48:	e002      	b.n	8005e50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e4a:	f7fd ffbb 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8005e4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e58:	f040 80b6 	bne.w	8005fc8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e5e:	461c      	mov	r4, r3
 8005e60:	f04f 0500 	mov.w	r5, #0
 8005e64:	4622      	mov	r2, r4
 8005e66:	462b      	mov	r3, r5
 8005e68:	1891      	adds	r1, r2, r2
 8005e6a:	6439      	str	r1, [r7, #64]	; 0x40
 8005e6c:	415b      	adcs	r3, r3
 8005e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e74:	1912      	adds	r2, r2, r4
 8005e76:	eb45 0303 	adc.w	r3, r5, r3
 8005e7a:	f04f 0000 	mov.w	r0, #0
 8005e7e:	f04f 0100 	mov.w	r1, #0
 8005e82:	00d9      	lsls	r1, r3, #3
 8005e84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e88:	00d0      	lsls	r0, r2, #3
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	1911      	adds	r1, r2, r4
 8005e90:	6639      	str	r1, [r7, #96]	; 0x60
 8005e92:	416b      	adcs	r3, r5
 8005e94:	667b      	str	r3, [r7, #100]	; 0x64
 8005e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	1891      	adds	r1, r2, r2
 8005ea2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ea4:	415b      	adcs	r3, r3
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005eac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005eb0:	f7fa fdc4 	bl	8000a3c <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4ba5      	ldr	r3, [pc, #660]	; (8006150 <UART_SetConfig+0x38c>)
 8005eba:	fba3 2302 	umull	r2, r3, r3, r2
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	011e      	lsls	r6, r3, #4
 8005ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec4:	461c      	mov	r4, r3
 8005ec6:	f04f 0500 	mov.w	r5, #0
 8005eca:	4622      	mov	r2, r4
 8005ecc:	462b      	mov	r3, r5
 8005ece:	1891      	adds	r1, r2, r2
 8005ed0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ed2:	415b      	adcs	r3, r3
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005eda:	1912      	adds	r2, r2, r4
 8005edc:	eb45 0303 	adc.w	r3, r5, r3
 8005ee0:	f04f 0000 	mov.w	r0, #0
 8005ee4:	f04f 0100 	mov.w	r1, #0
 8005ee8:	00d9      	lsls	r1, r3, #3
 8005eea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eee:	00d0      	lsls	r0, r2, #3
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	1911      	adds	r1, r2, r4
 8005ef6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ef8:	416b      	adcs	r3, r5
 8005efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	461a      	mov	r2, r3
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	1891      	adds	r1, r2, r2
 8005f08:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f0a:	415b      	adcs	r3, r3
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f16:	f7fa fd91 	bl	8000a3c <__aeabi_uldivmod>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4b8c      	ldr	r3, [pc, #560]	; (8006150 <UART_SetConfig+0x38c>)
 8005f20:	fba3 1302 	umull	r1, r3, r3, r2
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	2164      	movs	r1, #100	; 0x64
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	3332      	adds	r3, #50	; 0x32
 8005f32:	4a87      	ldr	r2, [pc, #540]	; (8006150 <UART_SetConfig+0x38c>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f40:	441e      	add	r6, r3
 8005f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f44:	4618      	mov	r0, r3
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	1894      	adds	r4, r2, r2
 8005f50:	623c      	str	r4, [r7, #32]
 8005f52:	415b      	adcs	r3, r3
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
 8005f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f5a:	1812      	adds	r2, r2, r0
 8005f5c:	eb41 0303 	adc.w	r3, r1, r3
 8005f60:	f04f 0400 	mov.w	r4, #0
 8005f64:	f04f 0500 	mov.w	r5, #0
 8005f68:	00dd      	lsls	r5, r3, #3
 8005f6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f6e:	00d4      	lsls	r4, r2, #3
 8005f70:	4622      	mov	r2, r4
 8005f72:	462b      	mov	r3, r5
 8005f74:	1814      	adds	r4, r2, r0
 8005f76:	653c      	str	r4, [r7, #80]	; 0x50
 8005f78:	414b      	adcs	r3, r1
 8005f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	461a      	mov	r2, r3
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	1891      	adds	r1, r2, r2
 8005f88:	61b9      	str	r1, [r7, #24]
 8005f8a:	415b      	adcs	r3, r3
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f96:	f7fa fd51 	bl	8000a3c <__aeabi_uldivmod>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4b6c      	ldr	r3, [pc, #432]	; (8006150 <UART_SetConfig+0x38c>)
 8005fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	2164      	movs	r1, #100	; 0x64
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	3332      	adds	r3, #50	; 0x32
 8005fb2:	4a67      	ldr	r2, [pc, #412]	; (8006150 <UART_SetConfig+0x38c>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f003 0207 	and.w	r2, r3, #7
 8005fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4432      	add	r2, r6
 8005fc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fc6:	e0b9      	b.n	800613c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fca:	461c      	mov	r4, r3
 8005fcc:	f04f 0500 	mov.w	r5, #0
 8005fd0:	4622      	mov	r2, r4
 8005fd2:	462b      	mov	r3, r5
 8005fd4:	1891      	adds	r1, r2, r2
 8005fd6:	6139      	str	r1, [r7, #16]
 8005fd8:	415b      	adcs	r3, r3
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fe0:	1912      	adds	r2, r2, r4
 8005fe2:	eb45 0303 	adc.w	r3, r5, r3
 8005fe6:	f04f 0000 	mov.w	r0, #0
 8005fea:	f04f 0100 	mov.w	r1, #0
 8005fee:	00d9      	lsls	r1, r3, #3
 8005ff0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ff4:	00d0      	lsls	r0, r2, #3
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	eb12 0804 	adds.w	r8, r2, r4
 8005ffe:	eb43 0905 	adc.w	r9, r3, r5
 8006002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4618      	mov	r0, r3
 8006008:	f04f 0100 	mov.w	r1, #0
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	008b      	lsls	r3, r1, #2
 8006016:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800601a:	0082      	lsls	r2, r0, #2
 800601c:	4640      	mov	r0, r8
 800601e:	4649      	mov	r1, r9
 8006020:	f7fa fd0c 	bl	8000a3c <__aeabi_uldivmod>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4b49      	ldr	r3, [pc, #292]	; (8006150 <UART_SetConfig+0x38c>)
 800602a:	fba3 2302 	umull	r2, r3, r3, r2
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	011e      	lsls	r6, r3, #4
 8006032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006034:	4618      	mov	r0, r3
 8006036:	f04f 0100 	mov.w	r1, #0
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	1894      	adds	r4, r2, r2
 8006040:	60bc      	str	r4, [r7, #8]
 8006042:	415b      	adcs	r3, r3
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800604a:	1812      	adds	r2, r2, r0
 800604c:	eb41 0303 	adc.w	r3, r1, r3
 8006050:	f04f 0400 	mov.w	r4, #0
 8006054:	f04f 0500 	mov.w	r5, #0
 8006058:	00dd      	lsls	r5, r3, #3
 800605a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800605e:	00d4      	lsls	r4, r2, #3
 8006060:	4622      	mov	r2, r4
 8006062:	462b      	mov	r3, r5
 8006064:	1814      	adds	r4, r2, r0
 8006066:	64bc      	str	r4, [r7, #72]	; 0x48
 8006068:	414b      	adcs	r3, r1
 800606a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	4618      	mov	r0, r3
 8006072:	f04f 0100 	mov.w	r1, #0
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	008b      	lsls	r3, r1, #2
 8006080:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006084:	0082      	lsls	r2, r0, #2
 8006086:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800608a:	f7fa fcd7 	bl	8000a3c <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <UART_SetConfig+0x38c>)
 8006094:	fba3 1302 	umull	r1, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	2164      	movs	r1, #100	; 0x64
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	3332      	adds	r3, #50	; 0x32
 80060a6:	4a2a      	ldr	r2, [pc, #168]	; (8006150 <UART_SetConfig+0x38c>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060b2:	441e      	add	r6, r3
 80060b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b6:	4618      	mov	r0, r3
 80060b8:	f04f 0100 	mov.w	r1, #0
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	1894      	adds	r4, r2, r2
 80060c2:	603c      	str	r4, [r7, #0]
 80060c4:	415b      	adcs	r3, r3
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060cc:	1812      	adds	r2, r2, r0
 80060ce:	eb41 0303 	adc.w	r3, r1, r3
 80060d2:	f04f 0400 	mov.w	r4, #0
 80060d6:	f04f 0500 	mov.w	r5, #0
 80060da:	00dd      	lsls	r5, r3, #3
 80060dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060e0:	00d4      	lsls	r4, r2, #3
 80060e2:	4622      	mov	r2, r4
 80060e4:	462b      	mov	r3, r5
 80060e6:	eb12 0a00 	adds.w	sl, r2, r0
 80060ea:	eb43 0b01 	adc.w	fp, r3, r1
 80060ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f04f 0100 	mov.w	r1, #0
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	008b      	lsls	r3, r1, #2
 8006102:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006106:	0082      	lsls	r2, r0, #2
 8006108:	4650      	mov	r0, sl
 800610a:	4659      	mov	r1, fp
 800610c:	f7fa fc96 	bl	8000a3c <__aeabi_uldivmod>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <UART_SetConfig+0x38c>)
 8006116:	fba3 1302 	umull	r1, r3, r3, r2
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	2164      	movs	r1, #100	; 0x64
 800611e:	fb01 f303 	mul.w	r3, r1, r3
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	3332      	adds	r3, #50	; 0x32
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <UART_SetConfig+0x38c>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	f003 020f 	and.w	r2, r3, #15
 8006134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4432      	add	r2, r6
 800613a:	609a      	str	r2, [r3, #8]
}
 800613c:	bf00      	nop
 800613e:	377c      	adds	r7, #124	; 0x7c
 8006140:	46bd      	mov	sp, r7
 8006142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006146:	bf00      	nop
 8006148:	40011000 	.word	0x40011000
 800614c:	40011400 	.word	0x40011400
 8006150:	51eb851f 	.word	0x51eb851f

08006154 <maf>:
//  Parameters  :   float *nextSampleD		-
//					float *nextSampleQ		-
//  Returns     :   indirect : float *mafD	-
//							   float *mafQ	-
void maf(float *nextSampleD, float *nextSampleQ, float *mafD, float *mafQ)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
	static int pos;
	static float sampleArrD[MAF_LEN], sampleArrQ[MAF_LEN], sumD, sumQ;

	sumD = sumD - sampleArrD[pos] + *nextSampleD;
 8006162:	4b2f      	ldr	r3, [pc, #188]	; (8006220 <maf+0xcc>)
 8006164:	ed93 7a00 	vldr	s14, [r3]
 8006168:	4b2e      	ldr	r3, [pc, #184]	; (8006224 <maf+0xd0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2e      	ldr	r2, [pc, #184]	; (8006228 <maf+0xd4>)
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	edd3 7a00 	vldr	s15, [r3]
 8006176:	ee37 7a67 	vsub.f32	s14, s14, s15
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	edd3 7a00 	vldr	s15, [r3]
 8006180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006184:	4b26      	ldr	r3, [pc, #152]	; (8006220 <maf+0xcc>)
 8006186:	edc3 7a00 	vstr	s15, [r3]
	sumQ = sumQ - sampleArrQ[pos] + *nextSampleQ;
 800618a:	4b28      	ldr	r3, [pc, #160]	; (800622c <maf+0xd8>)
 800618c:	ed93 7a00 	vldr	s14, [r3]
 8006190:	4b24      	ldr	r3, [pc, #144]	; (8006224 <maf+0xd0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a26      	ldr	r2, [pc, #152]	; (8006230 <maf+0xdc>)
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	edd3 7a00 	vldr	s15, [r3]
 800619e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	edd3 7a00 	vldr	s15, [r3]
 80061a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ac:	4b1f      	ldr	r3, [pc, #124]	; (800622c <maf+0xd8>)
 80061ae:	edc3 7a00 	vstr	s15, [r3]

	sampleArrD[pos] = *nextSampleD;
 80061b2:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <maf+0xd0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	491b      	ldr	r1, [pc, #108]	; (8006228 <maf+0xd4>)
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	601a      	str	r2, [r3, #0]
	sampleArrQ[pos] = *nextSampleQ;
 80061c2:	4b18      	ldr	r3, [pc, #96]	; (8006224 <maf+0xd0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	4919      	ldr	r1, [pc, #100]	; (8006230 <maf+0xdc>)
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	601a      	str	r2, [r3, #0]

	pos++;
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <maf+0xd0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3301      	adds	r3, #1
 80061d8:	4a12      	ldr	r2, [pc, #72]	; (8006224 <maf+0xd0>)
 80061da:	6013      	str	r3, [r2, #0]
	if (pos >= MAF_LEN) {
 80061dc:	4b11      	ldr	r3, [pc, #68]	; (8006224 <maf+0xd0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2bc7      	cmp	r3, #199	; 0xc7
 80061e2:	dd02      	ble.n	80061ea <maf+0x96>
		pos = 0;
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <maf+0xd0>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
	}

	*mafD = sumD/(float)MAF_LEN;
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <maf+0xcc>)
 80061ec:	ed93 7a00 	vldr	s14, [r3]
 80061f0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8006234 <maf+0xe0>
 80061f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	edc3 7a00 	vstr	s15, [r3]
	*mafQ = sumQ/(float)MAF_LEN;
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <maf+0xd8>)
 8006200:	ed93 7a00 	vldr	s14, [r3]
 8006204:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006234 <maf+0xe0>
 8006208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	edc3 7a00 	vstr	s15, [r3]
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	200001b0 	.word	0x200001b0
 8006224:	200001b4 	.word	0x200001b4
 8006228:	200001b8 	.word	0x200001b8
 800622c:	200004d8 	.word	0x200004d8
 8006230:	200004dc 	.word	0x200004dc
 8006234:	43480000 	.word	0x43480000

08006238 <abc_to_alphabeta>:
//					float b					- Phase B
//					float c					- Phace C
//  Returns     :   indirect : float *alpha	- Alpha
//							   float *beta	- Beta
void abc_to_alphabeta(float a, float b, float c, float *alpha, float *beta)
{
 8006238:	b480      	push	{r7}
 800623a:	b08b      	sub	sp, #44	; 0x2c
 800623c:	af00      	add	r7, sp, #0
 800623e:	ed87 0a05 	vstr	s0, [r7, #20]
 8006242:	edc7 0a04 	vstr	s1, [r7, #16]
 8006246:	ed87 1a03 	vstr	s2, [r7, #12]
 800624a:	60b8      	str	r0, [r7, #8]
 800624c:	6079      	str	r1, [r7, #4]
	// constants
	const float two_thirds = 2.0f/3.0f;
 800624e:	4b1d      	ldr	r3, [pc, #116]	; (80062c4 <abc_to_alphabeta+0x8c>)
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
	const float one_third = 1.0f/3.0f;
 8006252:	4b1d      	ldr	r3, [pc, #116]	; (80062c8 <abc_to_alphabeta+0x90>)
 8006254:	623b      	str	r3, [r7, #32]
	const float sqrt3_div_2 = sqrt(3.0f)/2.0f;
 8006256:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <abc_to_alphabeta+0x94>)
 8006258:	61fb      	str	r3, [r7, #28]

	// calculation
    *alpha =  two_thirds*a - one_third*b - one_third*c;
 800625a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800625e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006266:	edd7 6a08 	vldr	s13, [r7, #32]
 800626a:	edd7 7a04 	vldr	s15, [r7, #16]
 800626e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006272:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006276:	edd7 6a08 	vldr	s13, [r7, #32]
 800627a:	edd7 7a03 	vldr	s15, [r7, #12]
 800627e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	edc3 7a00 	vstr	s15, [r3]
    *beta = two_thirds * (sqrt3_div_2*b - sqrt3_div_2*c);
 800628c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006290:	edd7 7a04 	vldr	s15, [r7, #16]
 8006294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006298:	edd7 6a07 	vldr	s13, [r7, #28]
 800629c:	edd7 7a03 	vldr	s15, [r7, #12]
 80062a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80062ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	edc3 7a00 	vstr	s15, [r3]
}
 80062b6:	bf00      	nop
 80062b8:	372c      	adds	r7, #44	; 0x2c
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	3f2aaaab 	.word	0x3f2aaaab
 80062c8:	3eaaaaab 	.word	0x3eaaaaab
 80062cc:	3f5db3d7 	.word	0x3f5db3d7

080062d0 <alphabeta_to_dq>:
//					float beta			- Beta
//					float angle			- The angle of the dq-transformation
//  Returns     :   indirect : float *d	- The 'direct' part of the dq transformation
//							 : float *q	- The 'quadrature' part of the dq transformation
void alphabeta_to_dq(float alpha, float beta, float angle, float *d, float *q)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	ed2d 8b02 	vpush	{d8}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	ed87 0a05 	vstr	s0, [r7, #20]
 80062de:	edc7 0a04 	vstr	s1, [r7, #16]
 80062e2:	ed87 1a03 	vstr	s2, [r7, #12]
 80062e6:	60b8      	str	r0, [r7, #8]
 80062e8:	6079      	str	r1, [r7, #4]
	*d = cosf(angle)*alpha + sinf(angle)*beta;
 80062ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80062ee:	f000 ff4d 	bl	800718c <cosf>
 80062f2:	eeb0 7a40 	vmov.f32	s14, s0
 80062f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80062fa:	ee27 8a27 	vmul.f32	s16, s14, s15
 80062fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8006302:	f000 ff83 	bl	800720c <sinf>
 8006306:	eeb0 7a40 	vmov.f32	s14, s0
 800630a:	edd7 7a04 	vldr	s15, [r7, #16]
 800630e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006312:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	edc3 7a00 	vstr	s15, [r3]
	*q = -sinf(angle)*alpha + cosf(angle)*beta;
 800631c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006320:	f000 ff74 	bl	800720c <sinf>
 8006324:	eef0 7a40 	vmov.f32	s15, s0
 8006328:	eeb1 7a67 	vneg.f32	s14, s15
 800632c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006330:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006334:	ed97 0a03 	vldr	s0, [r7, #12]
 8006338:	f000 ff28 	bl	800718c <cosf>
 800633c:	eeb0 7a40 	vmov.f32	s14, s0
 8006340:	edd7 7a04 	vldr	s15, [r7, #16]
 8006344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006348:	ee78 7a27 	vadd.f32	s15, s16, s15
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	edc3 7a00 	vstr	s15, [r3]
}
 8006352:	bf00      	nop
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	ecbd 8b02 	vpop	{d8}
 800635c:	bd80      	pop	{r7, pc}

0800635e <dq_to_alphabeta>:
//					float q					- The 'quadrature' part of the dq transformation
//					float angle				- The dq transformation angle
//  Returns     :   indirect : float *alpha	- Alpha
//							   float *beta	- Beta
void dq_to_alphabeta(float d, float q, float angle, float *alpha, float *beta)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	ed2d 8b02 	vpush	{d8}
 8006364:	b086      	sub	sp, #24
 8006366:	af00      	add	r7, sp, #0
 8006368:	ed87 0a05 	vstr	s0, [r7, #20]
 800636c:	edc7 0a04 	vstr	s1, [r7, #16]
 8006370:	ed87 1a03 	vstr	s2, [r7, #12]
 8006374:	60b8      	str	r0, [r7, #8]
 8006376:	6079      	str	r1, [r7, #4]
	*alpha = cosf(angle)*d - sinf(angle)*q;
 8006378:	ed97 0a03 	vldr	s0, [r7, #12]
 800637c:	f000 ff06 	bl	800718c <cosf>
 8006380:	eeb0 7a40 	vmov.f32	s14, s0
 8006384:	edd7 7a05 	vldr	s15, [r7, #20]
 8006388:	ee27 8a27 	vmul.f32	s16, s14, s15
 800638c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006390:	f000 ff3c 	bl	800720c <sinf>
 8006394:	eeb0 7a40 	vmov.f32	s14, s0
 8006398:	edd7 7a04 	vldr	s15, [r7, #16]
 800639c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	edc3 7a00 	vstr	s15, [r3]
	*beta = sinf(angle)*d + cosf(angle)*q;
 80063aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80063ae:	f000 ff2d 	bl	800720c <sinf>
 80063b2:	eeb0 7a40 	vmov.f32	s14, s0
 80063b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80063ba:	ee27 8a27 	vmul.f32	s16, s14, s15
 80063be:	ed97 0a03 	vldr	s0, [r7, #12]
 80063c2:	f000 fee3 	bl	800718c <cosf>
 80063c6:	eeb0 7a40 	vmov.f32	s14, s0
 80063ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	edc3 7a00 	vstr	s15, [r3]
}
 80063dc:	bf00      	nop
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	ecbd 8b02 	vpop	{d8}
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <cos_sin_grid>:
//  Parameters  :   float alpha					- The alpha from the abc->alpha beta transformation
//					float beta					- The beta from the abc->alpha beta transformation
//  Returns     :   indirect : float *cos_grid	- The cosine to the grid angle
//							   float *sin_grid	- The sine to the grid angle
void cos_sin_grid(float alpha, float beta, float *cos_grid, float *sin_grid)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80063f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
	static float sqrtCalc;

	// 1e-9 is to avoid sqrt and division by zero.
	sqrtCalc = powf((alpha*alpha + beta*beta + 1e-9), -0.5f);
 80063fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80063fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006402:	edd7 7a02 	vldr	s15, [r7, #8]
 8006406:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800640a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800640e:	ee17 0a90 	vmov	r0, s15
 8006412:	f7fa f9e3 	bl	80007dc <__aeabi_f2d>
 8006416:	a319      	add	r3, pc, #100	; (adr r3, 800647c <cos_sin_grid+0x94>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7fa f880 	bl	8000520 <__adddf3>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4610      	mov	r0, r2
 8006426:	4619      	mov	r1, r3
 8006428:	f7fa fab8 	bl	800099c <__aeabi_d2f>
 800642c:	4603      	mov	r3, r0
 800642e:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
 8006432:	ee00 3a10 	vmov	s0, r3
 8006436:	f000 ff2b 	bl	8007290 <powf>
 800643a:	eef0 7a40 	vmov.f32	s15, s0
 800643e:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <cos_sin_grid+0x90>)
 8006440:	edc3 7a00 	vstr	s15, [r3]
	*cos_grid = alpha * sqrtCalc;
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <cos_sin_grid+0x90>)
 8006446:	ed93 7a00 	vldr	s14, [r3]
 800644a:	edd7 7a03 	vldr	s15, [r7, #12]
 800644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	edc3 7a00 	vstr	s15, [r3]
	*sin_grid = beta * sqrtCalc;
 8006458:	4b07      	ldr	r3, [pc, #28]	; (8006478 <cos_sin_grid+0x90>)
 800645a:	ed93 7a00 	vldr	s14, [r3]
 800645e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	edc3 7a00 	vstr	s15, [r3]
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	f3af 8000 	nop.w
 8006478:	200007fc 	.word	0x200007fc
 800647c:	e826d695 	.word	0xe826d695
 8006480:	3e112e0b 	.word	0x3e112e0b
 8006484:	00000000 	.word	0x00000000

08006488 <pi_regulator>:
//					float kPhi					- The k_phi off-nominal frequency angle kompensation constant
//					float Ts					- The sample time, defined by sampling frequency
//  Returns     :   indirect : *anglePll		- The Pll angle in phase with the grid angle
//							   *anglePllComp	- The Pll angle, compensated with kPhi at off-nominal frequencies
void pi_regulator(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts, float *anglePll, float *anglePllComp)
{
 8006488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800648c:	b088      	sub	sp, #32
 800648e:	af00      	add	r7, sp, #0
 8006490:	ed87 0a07 	vstr	s0, [r7, #28]
 8006494:	edc7 0a06 	vstr	s1, [r7, #24]
 8006498:	ed87 1a05 	vstr	s2, [r7, #20]
 800649c:	edc7 1a04 	vstr	s3, [r7, #16]
 80064a0:	ed87 2a03 	vstr	s4, [r7, #12]
 80064a4:	edc7 2a02 	vstr	s5, [r7, #8]
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
    static float phaseError_old, integral_old, angle_old, omega_old, integral, omega;;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 80064ac:	6978      	ldr	r0, [r7, #20]
 80064ae:	f7fa f995 	bl	80007dc <__aeabi_f2d>
 80064b2:	4604      	mov	r4, r0
 80064b4:	460d      	mov	r5, r1
 80064b6:	69f8      	ldr	r0, [r7, #28]
 80064b8:	f7fa f990 	bl	80007dc <__aeabi_f2d>
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	4b75      	ldr	r3, [pc, #468]	; (8006698 <pi_regulator+0x210>)
 80064c2:	f7f9 fefd 	bl	80002c0 <__aeabi_dmul>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4690      	mov	r8, r2
 80064cc:	4699      	mov	r9, r3
 80064ce:	4b73      	ldr	r3, [pc, #460]	; (800669c <pi_regulator+0x214>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fa f982 	bl	80007dc <__aeabi_f2d>
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	4b6e      	ldr	r3, [pc, #440]	; (8006698 <pi_regulator+0x210>)
 80064de:	f7f9 feef 	bl	80002c0 <__aeabi_dmul>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7fa f819 	bl	8000520 <__adddf3>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4620      	mov	r0, r4
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7f9 fee3 	bl	80002c0 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4614      	mov	r4, r2
 8006500:	461d      	mov	r5, r3
 8006502:	68b8      	ldr	r0, [r7, #8]
 8006504:	f7fa f96a 	bl	80007dc <__aeabi_f2d>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
 8006510:	f7f9 fed6 	bl	80002c0 <__aeabi_dmul>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	4b60      	ldr	r3, [pc, #384]	; (80066a0 <pi_regulator+0x218>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f7fa f95b 	bl	80007dc <__aeabi_f2d>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4620      	mov	r0, r4
 800652c:	4629      	mov	r1, r5
 800652e:	f7f9 fff7 	bl	8000520 <__adddf3>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4610      	mov	r0, r2
 8006538:	4619      	mov	r1, r3
 800653a:	f7fa fa2f 	bl	800099c <__aeabi_d2f>
 800653e:	4603      	mov	r3, r0
 8006540:	4a58      	ldr	r2, [pc, #352]	; (80066a4 <pi_regulator+0x21c>)
 8006542:	6013      	str	r3, [r2, #0]
    omega = phaseError*kp + integral + feedForward; 
 8006544:	ed97 7a07 	vldr	s14, [r7, #28]
 8006548:	edd7 7a04 	vldr	s15, [r7, #16]
 800654c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006550:	4b54      	ldr	r3, [pc, #336]	; (80066a4 <pi_regulator+0x21c>)
 8006552:	edd3 7a00 	vldr	s15, [r3]
 8006556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800655a:	edd7 7a06 	vldr	s15, [r7, #24]
 800655e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006562:	4b51      	ldr	r3, [pc, #324]	; (80066a8 <pi_regulator+0x220>)
 8006564:	edc3 7a00 	vstr	s15, [r3]

    *anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old;
 8006568:	4b4f      	ldr	r3, [pc, #316]	; (80066a8 <pi_regulator+0x220>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7fa f935 	bl	80007dc <__aeabi_f2d>
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	4b48      	ldr	r3, [pc, #288]	; (8006698 <pi_regulator+0x210>)
 8006578:	f7f9 fea2 	bl	80002c0 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4614      	mov	r4, r2
 8006582:	461d      	mov	r5, r3
 8006584:	4b49      	ldr	r3, [pc, #292]	; (80066ac <pi_regulator+0x224>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f7fa f927 	bl	80007dc <__aeabi_f2d>
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	4b41      	ldr	r3, [pc, #260]	; (8006698 <pi_regulator+0x210>)
 8006594:	f7f9 fe94 	bl	80002c0 <__aeabi_dmul>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4620      	mov	r0, r4
 800659e:	4629      	mov	r1, r5
 80065a0:	f7f9 ffbe 	bl	8000520 <__adddf3>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	68b8      	ldr	r0, [r7, #8]
 80065ae:	f7fa f915 	bl	80007dc <__aeabi_f2d>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	f7f9 fe81 	bl	80002c0 <__aeabi_dmul>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4614      	mov	r4, r2
 80065c4:	461d      	mov	r5, r3
 80065c6:	4b3a      	ldr	r3, [pc, #232]	; (80066b0 <pi_regulator+0x228>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fa f906 	bl	80007dc <__aeabi_f2d>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4620      	mov	r0, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	f7f9 ffa2 	bl	8000520 <__adddf3>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4610      	mov	r0, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	f7fa f9da 	bl	800099c <__aeabi_d2f>
 80065e8:	4602      	mov	r2, r0
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]

    if (*anglePll > TWO_PI) {
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fa f8f2 	bl	80007dc <__aeabi_f2d>
 80065f8:	a325      	add	r3, pc, #148	; (adr r3, 8006690 <pi_regulator+0x208>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7fa f9c3 	bl	8000988 <__aeabi_dcmpgt>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <pi_regulator+0x1a6>
    		*anglePll = *anglePll - TWO_PI;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f7fa f8e5 	bl	80007dc <__aeabi_f2d>
 8006612:	a31f      	add	r3, pc, #124	; (adr r3, 8006690 <pi_regulator+0x208>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 ff80 	bl	800051c <__aeabi_dsub>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4610      	mov	r0, r2
 8006622:	4619      	mov	r1, r3
 8006624:	f7fa f9ba 	bl	800099c <__aeabi_d2f>
 8006628:	4602      	mov	r2, r0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
    }

    *anglePllComp = *anglePll - (omega - feedForward - phaseError*kp)*kPhi;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	ed93 7a00 	vldr	s14, [r3]
 8006634:	4b1c      	ldr	r3, [pc, #112]	; (80066a8 <pi_regulator+0x220>)
 8006636:	edd3 6a00 	vldr	s13, [r3]
 800663a:	edd7 7a06 	vldr	s15, [r7, #24]
 800663e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006642:	ed97 6a07 	vldr	s12, [r7, #28]
 8006646:	edd7 7a04 	vldr	s15, [r7, #16]
 800664a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800664e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006652:	edd7 7a03 	vldr	s15, [r7, #12]
 8006656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800665a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	edc3 7a00 	vstr	s15, [r3]

    phaseError_old = phaseError;
 8006664:	4a0d      	ldr	r2, [pc, #52]	; (800669c <pi_regulator+0x214>)
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 800666a:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <pi_regulator+0x21c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a0c      	ldr	r2, [pc, #48]	; (80066a0 <pi_regulator+0x218>)
 8006670:	6013      	str	r3, [r2, #0]
    angle_old = *anglePll;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a0e      	ldr	r2, [pc, #56]	; (80066b0 <pi_regulator+0x228>)
 8006678:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <pi_regulator+0x220>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a0b      	ldr	r2, [pc, #44]	; (80066ac <pi_regulator+0x224>)
 8006680:	6013      	str	r3, [r2, #0]
}
 8006682:	bf00      	nop
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800668c:	f3af 8000 	nop.w
 8006690:	54442c46 	.word	0x54442c46
 8006694:	401921fb 	.word	0x401921fb
 8006698:	3fe00000 	.word	0x3fe00000
 800669c:	20000800 	.word	0x20000800
 80066a0:	20000804 	.word	0x20000804
 80066a4:	20000808 	.word	0x20000808
 80066a8:	2000080c 	.word	0x2000080c
 80066ac:	20000810 	.word	0x20000810
 80066b0:	20000814 	.word	0x20000814

080066b4 <phase_detector>:
//  Parameters  :   float cosGrid		- cosine to the grid angle
//					float sinGrid		- sine to the grid angle
//					float anglePllComp	- Compensated pll angle
//  Returns     :   float phaseError	- The difference between grid and pll angle
float phase_detector(float cosGrid, float sinGrid, float anglePllComp)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	ed2d 8b02 	vpush	{d8}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	ed87 0a03 	vstr	s0, [r7, #12]
 80066c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80066c6:	ed87 1a01 	vstr	s2, [r7, #4]
    return sinGrid*cosf(anglePllComp) - cosGrid*sinf(anglePllComp);
 80066ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80066ce:	f000 fd5d 	bl	800718c <cosf>
 80066d2:	eeb0 7a40 	vmov.f32	s14, s0
 80066d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80066da:	ee27 8a27 	vmul.f32	s16, s14, s15
 80066de:	ed97 0a01 	vldr	s0, [r7, #4]
 80066e2:	f000 fd93 	bl	800720c <sinf>
 80066e6:	eeb0 7a40 	vmov.f32	s14, s0
 80066ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f2:	ee78 7a67 	vsub.f32	s15, s16, s15
}
 80066f6:	eeb0 0a67 	vmov.f32	s0, s15
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	ecbd 8b02 	vpop	{d8}
 8006702:	bd80      	pop	{r7, pc}

08006704 <circular_buffer>:
//                  uint8_t event: A flag which, when triggered, sets the ring buffer to fill the last 1-bufSplit% of the buffer
//                  float bufSplit: The percentage of the buffer which is kept in the ring buffer after event trigger.
//  Returns     :   direct : bufferDoneFlag:
//					indirect : *readStart: Where to start reading the ring buffer
uint8_t circular_buffer(uint16_t bufferSize, int16_t circularBuffer[][RING_BUF_SIZE], int16_t *dataInput, uint8_t event, uint8_t reset, float bufSplit, uint16_t *readStart)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	461a      	mov	r2, r3
 8006710:	ed87 0a00 	vstr	s0, [r7]
 8006714:	4603      	mov	r3, r0
 8006716:	81fb      	strh	r3, [r7, #14]
 8006718:	4613      	mov	r3, r2
 800671a:	737b      	strb	r3, [r7, #13]
    static uint8_t	bufferDoneFlag		=	0;	// True when the buffer is full after an event
    static uint8_t	eventLatch			=	0;	// Latches upon event flag going high and resets when buffer is full


    // Latch event, so it doesn't have to be held HIGH
    if (event) {
 800671c:	7b7b      	ldrb	r3, [r7, #13]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <circular_buffer+0x24>
    	eventLatch = 1;
 8006722:	4b54      	ldr	r3, [pc, #336]	; (8006874 <circular_buffer+0x170>)
 8006724:	2201      	movs	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
    }

    if (bufferLength == bufferSize) {
 8006728:	4b53      	ldr	r3, [pc, #332]	; (8006878 <circular_buffer+0x174>)
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	89fa      	ldrh	r2, [r7, #14]
 800672e:	429a      	cmp	r2, r3
 8006730:	d103      	bne.n	800673a <circular_buffer+0x36>
        *readStart = writeIndex;
 8006732:	4b52      	ldr	r3, [pc, #328]	; (800687c <circular_buffer+0x178>)
 8006734:	881a      	ldrh	r2, [r3, #0]
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	801a      	strh	r2, [r3, #0]
    }

    if (reset) {
 800673a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <circular_buffer+0x44>
    	bufferDoneFlag = 0;
 8006742:	4b4f      	ldr	r3, [pc, #316]	; (8006880 <circular_buffer+0x17c>)
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
    }

    if (eventLatch) {
 8006748:	4b4a      	ldr	r3, [pc, #296]	; (8006874 <circular_buffer+0x170>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d056      	beq.n	80067fe <circular_buffer+0xfa>
        if (!eventEntry) {
 8006750:	4b4c      	ldr	r3, [pc, #304]	; (8006884 <circular_buffer+0x180>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d115      	bne.n	8006784 <circular_buffer+0x80>
            // Event has triggered

        	bufferFullEntry = 0;
 8006758:	4b4b      	ldr	r3, [pc, #300]	; (8006888 <circular_buffer+0x184>)
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
            bufferSplitLength = bufSplit * bufferSize;
 800675e:	89fb      	ldrh	r3, [r7, #14]
 8006760:	ee07 3a90 	vmov	s15, r3
 8006764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006768:	edd7 7a00 	vldr	s15, [r7]
 800676c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006774:	ee17 3a90 	vmov	r3, s15
 8006778:	b29a      	uxth	r2, r3
 800677a:	4b44      	ldr	r3, [pc, #272]	; (800688c <circular_buffer+0x188>)
 800677c:	801a      	strh	r2, [r3, #0]
            eventEntry = 1;
 800677e:	4b41      	ldr	r3, [pc, #260]	; (8006884 <circular_buffer+0x180>)
 8006780:	2201      	movs	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
        }

        if (bufferSplitLength == bufferSize) {
 8006784:	4b41      	ldr	r3, [pc, #260]	; (800688c <circular_buffer+0x188>)
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	89fa      	ldrh	r2, [r7, #14]
 800678a:	429a      	cmp	r2, r3
 800678c:	d10d      	bne.n	80067aa <circular_buffer+0xa6>
            if (!bufferFullEntry) {
 800678e:	4b3e      	ldr	r3, [pc, #248]	; (8006888 <circular_buffer+0x184>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <circular_buffer+0x9e>
            	bufferDoneFlag = 1;
 8006796:	4b3a      	ldr	r3, [pc, #232]	; (8006880 <circular_buffer+0x17c>)
 8006798:	2201      	movs	r2, #1
 800679a:	701a      	strb	r2, [r3, #0]
                // Do something?
                bufferFullEntry = 1;
 800679c:	4b3a      	ldr	r3, [pc, #232]	; (8006888 <circular_buffer+0x184>)
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
            }
            // STOP
            eventLatch = 0;
 80067a2:	4b34      	ldr	r3, [pc, #208]	; (8006874 <circular_buffer+0x170>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e04c      	b.n	8006844 <circular_buffer+0x140>
        }
        else {
        	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	e010      	b.n	80067d2 <circular_buffer+0xce>
        	    circularBuffer[writeIndex][i] = dataInput[i];
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	441a      	add	r2, r3
 80067b8:	4b30      	ldr	r3, [pc, #192]	; (800687c <circular_buffer+0x178>)
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	440b      	add	r3, r1
 80067c2:	f9b2 1000 	ldrsh.w	r1, [r2]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	ddeb      	ble.n	80067b0 <circular_buffer+0xac>
        	}
            bufferSplitLength++;
 80067d8:	4b2c      	ldr	r3, [pc, #176]	; (800688c <circular_buffer+0x188>)
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	4b2a      	ldr	r3, [pc, #168]	; (800688c <circular_buffer+0x188>)
 80067e2:	801a      	strh	r2, [r3, #0]
            writeIndex++;
 80067e4:	4b25      	ldr	r3, [pc, #148]	; (800687c <circular_buffer+0x178>)
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	4b23      	ldr	r3, [pc, #140]	; (800687c <circular_buffer+0x178>)
 80067ee:	801a      	strh	r2, [r3, #0]
            bufferLength++;
 80067f0:	4b21      	ldr	r3, [pc, #132]	; (8006878 <circular_buffer+0x174>)
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <circular_buffer+0x174>)
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	e022      	b.n	8006844 <circular_buffer+0x140>
        }
    }
    else {
    	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	e010      	b.n	8006826 <circular_buffer+0x122>
    		circularBuffer[writeIndex][i] = dataInput[i];
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	441a      	add	r2, r3
 800680c:	4b1b      	ldr	r3, [pc, #108]	; (800687c <circular_buffer+0x178>)
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	440b      	add	r3, r1
 8006816:	f9b2 1000 	ldrsh.w	r1, [r2]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3301      	adds	r3, #1
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	ddeb      	ble.n	8006804 <circular_buffer+0x100>
		}

        writeIndex++;
 800682c:	4b13      	ldr	r3, [pc, #76]	; (800687c <circular_buffer+0x178>)
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	4b11      	ldr	r3, [pc, #68]	; (800687c <circular_buffer+0x178>)
 8006836:	801a      	strh	r2, [r3, #0]
        bufferLength++;
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <circular_buffer+0x174>)
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	3301      	adds	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <circular_buffer+0x174>)
 8006842:	801a      	strh	r2, [r3, #0]
    }


    // Reset bufferlength
    if (bufferLength > bufferSize) {
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <circular_buffer+0x174>)
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	89fa      	ldrh	r2, [r7, #14]
 800684a:	429a      	cmp	r2, r3
 800684c:	d202      	bcs.n	8006854 <circular_buffer+0x150>
        bufferLength = bufferSize;
 800684e:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <circular_buffer+0x174>)
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	8013      	strh	r3, [r2, #0]
    }
    // Reset writeindex
    if (writeIndex == bufferSize) {
 8006854:	4b09      	ldr	r3, [pc, #36]	; (800687c <circular_buffer+0x178>)
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	89fa      	ldrh	r2, [r7, #14]
 800685a:	429a      	cmp	r2, r3
 800685c:	d102      	bne.n	8006864 <circular_buffer+0x160>
        writeIndex = 0;
 800685e:	4b07      	ldr	r3, [pc, #28]	; (800687c <circular_buffer+0x178>)
 8006860:	2200      	movs	r2, #0
 8006862:	801a      	strh	r2, [r3, #0]
    }

    return bufferDoneFlag;
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <circular_buffer+0x17c>)
 8006866:	781b      	ldrb	r3, [r3, #0]
}
 8006868:	4618      	mov	r0, r3
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	20000818 	.word	0x20000818
 8006878:	2000081a 	.word	0x2000081a
 800687c:	2000081c 	.word	0x2000081c
 8006880:	2000081e 	.word	0x2000081e
 8006884:	2000081f 	.word	0x2000081f
 8006888:	20000820 	.word	0x20000820
 800688c:	20000822 	.word	0x20000822

08006890 <dac_offset>:

}
*/

float dac_offset(float var, float a, float b)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	ed87 0a03 	vstr	s0, [r7, #12]
 800689a:	edc7 0a02 	vstr	s1, [r7, #8]
 800689e:	ed87 1a01 	vstr	s2, [r7, #4]
	 return var + var * a + b;
 80068a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80068a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80068aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80068b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80068ba:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80068be:	eeb0 0a67 	vmov.f32	s0, s15
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <__errno>:
 80068cc:	4b01      	ldr	r3, [pc, #4]	; (80068d4 <__errno+0x8>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	2000001c 	.word	0x2000001c

080068d8 <__libc_init_array>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4d0d      	ldr	r5, [pc, #52]	; (8006910 <__libc_init_array+0x38>)
 80068dc:	4c0d      	ldr	r4, [pc, #52]	; (8006914 <__libc_init_array+0x3c>)
 80068de:	1b64      	subs	r4, r4, r5
 80068e0:	10a4      	asrs	r4, r4, #2
 80068e2:	2600      	movs	r6, #0
 80068e4:	42a6      	cmp	r6, r4
 80068e6:	d109      	bne.n	80068fc <__libc_init_array+0x24>
 80068e8:	4d0b      	ldr	r5, [pc, #44]	; (8006918 <__libc_init_array+0x40>)
 80068ea:	4c0c      	ldr	r4, [pc, #48]	; (800691c <__libc_init_array+0x44>)
 80068ec:	f001 fdc4 	bl	8008478 <_init>
 80068f0:	1b64      	subs	r4, r4, r5
 80068f2:	10a4      	asrs	r4, r4, #2
 80068f4:	2600      	movs	r6, #0
 80068f6:	42a6      	cmp	r6, r4
 80068f8:	d105      	bne.n	8006906 <__libc_init_array+0x2e>
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006900:	4798      	blx	r3
 8006902:	3601      	adds	r6, #1
 8006904:	e7ee      	b.n	80068e4 <__libc_init_array+0xc>
 8006906:	f855 3b04 	ldr.w	r3, [r5], #4
 800690a:	4798      	blx	r3
 800690c:	3601      	adds	r6, #1
 800690e:	e7f2      	b.n	80068f6 <__libc_init_array+0x1e>
 8006910:	080088f8 	.word	0x080088f8
 8006914:	080088f8 	.word	0x080088f8
 8006918:	080088f8 	.word	0x080088f8
 800691c:	080088fc 	.word	0x080088fc

08006920 <memset>:
 8006920:	4402      	add	r2, r0
 8006922:	4603      	mov	r3, r0
 8006924:	4293      	cmp	r3, r2
 8006926:	d100      	bne.n	800692a <memset+0xa>
 8006928:	4770      	bx	lr
 800692a:	f803 1b01 	strb.w	r1, [r3], #1
 800692e:	e7f9      	b.n	8006924 <memset+0x4>

08006930 <siprintf>:
 8006930:	b40e      	push	{r1, r2, r3}
 8006932:	b500      	push	{lr}
 8006934:	b09c      	sub	sp, #112	; 0x70
 8006936:	ab1d      	add	r3, sp, #116	; 0x74
 8006938:	9002      	str	r0, [sp, #8]
 800693a:	9006      	str	r0, [sp, #24]
 800693c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006940:	4809      	ldr	r0, [pc, #36]	; (8006968 <siprintf+0x38>)
 8006942:	9107      	str	r1, [sp, #28]
 8006944:	9104      	str	r1, [sp, #16]
 8006946:	4909      	ldr	r1, [pc, #36]	; (800696c <siprintf+0x3c>)
 8006948:	f853 2b04 	ldr.w	r2, [r3], #4
 800694c:	9105      	str	r1, [sp, #20]
 800694e:	6800      	ldr	r0, [r0, #0]
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	a902      	add	r1, sp, #8
 8006954:	f000 f868 	bl	8006a28 <_svfiprintf_r>
 8006958:	9b02      	ldr	r3, [sp, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	b01c      	add	sp, #112	; 0x70
 8006960:	f85d eb04 	ldr.w	lr, [sp], #4
 8006964:	b003      	add	sp, #12
 8006966:	4770      	bx	lr
 8006968:	2000001c 	.word	0x2000001c
 800696c:	ffff0208 	.word	0xffff0208

08006970 <__ssputs_r>:
 8006970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	688e      	ldr	r6, [r1, #8]
 8006976:	429e      	cmp	r6, r3
 8006978:	4682      	mov	sl, r0
 800697a:	460c      	mov	r4, r1
 800697c:	4690      	mov	r8, r2
 800697e:	461f      	mov	r7, r3
 8006980:	d838      	bhi.n	80069f4 <__ssputs_r+0x84>
 8006982:	898a      	ldrh	r2, [r1, #12]
 8006984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006988:	d032      	beq.n	80069f0 <__ssputs_r+0x80>
 800698a:	6825      	ldr	r5, [r4, #0]
 800698c:	6909      	ldr	r1, [r1, #16]
 800698e:	eba5 0901 	sub.w	r9, r5, r1
 8006992:	6965      	ldr	r5, [r4, #20]
 8006994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800699c:	3301      	adds	r3, #1
 800699e:	444b      	add	r3, r9
 80069a0:	106d      	asrs	r5, r5, #1
 80069a2:	429d      	cmp	r5, r3
 80069a4:	bf38      	it	cc
 80069a6:	461d      	movcc	r5, r3
 80069a8:	0553      	lsls	r3, r2, #21
 80069aa:	d531      	bpl.n	8006a10 <__ssputs_r+0xa0>
 80069ac:	4629      	mov	r1, r5
 80069ae:	f000 fb47 	bl	8007040 <_malloc_r>
 80069b2:	4606      	mov	r6, r0
 80069b4:	b950      	cbnz	r0, 80069cc <__ssputs_r+0x5c>
 80069b6:	230c      	movs	r3, #12
 80069b8:	f8ca 3000 	str.w	r3, [sl]
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295
 80069c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069cc:	6921      	ldr	r1, [r4, #16]
 80069ce:	464a      	mov	r2, r9
 80069d0:	f000 fabe 	bl	8006f50 <memcpy>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	6126      	str	r6, [r4, #16]
 80069e2:	6165      	str	r5, [r4, #20]
 80069e4:	444e      	add	r6, r9
 80069e6:	eba5 0509 	sub.w	r5, r5, r9
 80069ea:	6026      	str	r6, [r4, #0]
 80069ec:	60a5      	str	r5, [r4, #8]
 80069ee:	463e      	mov	r6, r7
 80069f0:	42be      	cmp	r6, r7
 80069f2:	d900      	bls.n	80069f6 <__ssputs_r+0x86>
 80069f4:	463e      	mov	r6, r7
 80069f6:	4632      	mov	r2, r6
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	4641      	mov	r1, r8
 80069fc:	f000 fab6 	bl	8006f6c <memmove>
 8006a00:	68a3      	ldr	r3, [r4, #8]
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	1b9b      	subs	r3, r3, r6
 8006a06:	4432      	add	r2, r6
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	6022      	str	r2, [r4, #0]
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e7db      	b.n	80069c8 <__ssputs_r+0x58>
 8006a10:	462a      	mov	r2, r5
 8006a12:	f000 fb6f 	bl	80070f4 <_realloc_r>
 8006a16:	4606      	mov	r6, r0
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d1e1      	bne.n	80069e0 <__ssputs_r+0x70>
 8006a1c:	6921      	ldr	r1, [r4, #16]
 8006a1e:	4650      	mov	r0, sl
 8006a20:	f000 fabe 	bl	8006fa0 <_free_r>
 8006a24:	e7c7      	b.n	80069b6 <__ssputs_r+0x46>
	...

08006a28 <_svfiprintf_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	4698      	mov	r8, r3
 8006a2e:	898b      	ldrh	r3, [r1, #12]
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	b09d      	sub	sp, #116	; 0x74
 8006a34:	4607      	mov	r7, r0
 8006a36:	460d      	mov	r5, r1
 8006a38:	4614      	mov	r4, r2
 8006a3a:	d50e      	bpl.n	8006a5a <_svfiprintf_r+0x32>
 8006a3c:	690b      	ldr	r3, [r1, #16]
 8006a3e:	b963      	cbnz	r3, 8006a5a <_svfiprintf_r+0x32>
 8006a40:	2140      	movs	r1, #64	; 0x40
 8006a42:	f000 fafd 	bl	8007040 <_malloc_r>
 8006a46:	6028      	str	r0, [r5, #0]
 8006a48:	6128      	str	r0, [r5, #16]
 8006a4a:	b920      	cbnz	r0, 8006a56 <_svfiprintf_r+0x2e>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e0d1      	b.n	8006bfa <_svfiprintf_r+0x1d2>
 8006a56:	2340      	movs	r3, #64	; 0x40
 8006a58:	616b      	str	r3, [r5, #20]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5e:	2320      	movs	r3, #32
 8006a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a68:	2330      	movs	r3, #48	; 0x30
 8006a6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c14 <_svfiprintf_r+0x1ec>
 8006a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a72:	f04f 0901 	mov.w	r9, #1
 8006a76:	4623      	mov	r3, r4
 8006a78:	469a      	mov	sl, r3
 8006a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a7e:	b10a      	cbz	r2, 8006a84 <_svfiprintf_r+0x5c>
 8006a80:	2a25      	cmp	r2, #37	; 0x25
 8006a82:	d1f9      	bne.n	8006a78 <_svfiprintf_r+0x50>
 8006a84:	ebba 0b04 	subs.w	fp, sl, r4
 8006a88:	d00b      	beq.n	8006aa2 <_svfiprintf_r+0x7a>
 8006a8a:	465b      	mov	r3, fp
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4638      	mov	r0, r7
 8006a92:	f7ff ff6d 	bl	8006970 <__ssputs_r>
 8006a96:	3001      	adds	r0, #1
 8006a98:	f000 80aa 	beq.w	8006bf0 <_svfiprintf_r+0x1c8>
 8006a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a9e:	445a      	add	r2, fp
 8006aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 80a2 	beq.w	8006bf0 <_svfiprintf_r+0x1c8>
 8006aac:	2300      	movs	r3, #0
 8006aae:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab6:	f10a 0a01 	add.w	sl, sl, #1
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	9307      	str	r3, [sp, #28]
 8006abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ac4:	4654      	mov	r4, sl
 8006ac6:	2205      	movs	r2, #5
 8006ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006acc:	4851      	ldr	r0, [pc, #324]	; (8006c14 <_svfiprintf_r+0x1ec>)
 8006ace:	f7f9 fba7 	bl	8000220 <memchr>
 8006ad2:	9a04      	ldr	r2, [sp, #16]
 8006ad4:	b9d8      	cbnz	r0, 8006b0e <_svfiprintf_r+0xe6>
 8006ad6:	06d0      	lsls	r0, r2, #27
 8006ad8:	bf44      	itt	mi
 8006ada:	2320      	movmi	r3, #32
 8006adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae0:	0711      	lsls	r1, r2, #28
 8006ae2:	bf44      	itt	mi
 8006ae4:	232b      	movmi	r3, #43	; 0x2b
 8006ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aea:	f89a 3000 	ldrb.w	r3, [sl]
 8006aee:	2b2a      	cmp	r3, #42	; 0x2a
 8006af0:	d015      	beq.n	8006b1e <_svfiprintf_r+0xf6>
 8006af2:	9a07      	ldr	r2, [sp, #28]
 8006af4:	4654      	mov	r4, sl
 8006af6:	2000      	movs	r0, #0
 8006af8:	f04f 0c0a 	mov.w	ip, #10
 8006afc:	4621      	mov	r1, r4
 8006afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b02:	3b30      	subs	r3, #48	; 0x30
 8006b04:	2b09      	cmp	r3, #9
 8006b06:	d94e      	bls.n	8006ba6 <_svfiprintf_r+0x17e>
 8006b08:	b1b0      	cbz	r0, 8006b38 <_svfiprintf_r+0x110>
 8006b0a:	9207      	str	r2, [sp, #28]
 8006b0c:	e014      	b.n	8006b38 <_svfiprintf_r+0x110>
 8006b0e:	eba0 0308 	sub.w	r3, r0, r8
 8006b12:	fa09 f303 	lsl.w	r3, r9, r3
 8006b16:	4313      	orrs	r3, r2
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	46a2      	mov	sl, r4
 8006b1c:	e7d2      	b.n	8006ac4 <_svfiprintf_r+0x9c>
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	1d19      	adds	r1, r3, #4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	9103      	str	r1, [sp, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfbb      	ittet	lt
 8006b2a:	425b      	neglt	r3, r3
 8006b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8006b30:	9307      	strge	r3, [sp, #28]
 8006b32:	9307      	strlt	r3, [sp, #28]
 8006b34:	bfb8      	it	lt
 8006b36:	9204      	strlt	r2, [sp, #16]
 8006b38:	7823      	ldrb	r3, [r4, #0]
 8006b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3c:	d10c      	bne.n	8006b58 <_svfiprintf_r+0x130>
 8006b3e:	7863      	ldrb	r3, [r4, #1]
 8006b40:	2b2a      	cmp	r3, #42	; 0x2a
 8006b42:	d135      	bne.n	8006bb0 <_svfiprintf_r+0x188>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	1d1a      	adds	r2, r3, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	9203      	str	r2, [sp, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bfb8      	it	lt
 8006b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b54:	3402      	adds	r4, #2
 8006b56:	9305      	str	r3, [sp, #20]
 8006b58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c24 <_svfiprintf_r+0x1fc>
 8006b5c:	7821      	ldrb	r1, [r4, #0]
 8006b5e:	2203      	movs	r2, #3
 8006b60:	4650      	mov	r0, sl
 8006b62:	f7f9 fb5d 	bl	8000220 <memchr>
 8006b66:	b140      	cbz	r0, 8006b7a <_svfiprintf_r+0x152>
 8006b68:	2340      	movs	r3, #64	; 0x40
 8006b6a:	eba0 000a 	sub.w	r0, r0, sl
 8006b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	4303      	orrs	r3, r0
 8006b76:	3401      	adds	r4, #1
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7e:	4826      	ldr	r0, [pc, #152]	; (8006c18 <_svfiprintf_r+0x1f0>)
 8006b80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b84:	2206      	movs	r2, #6
 8006b86:	f7f9 fb4b 	bl	8000220 <memchr>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d038      	beq.n	8006c00 <_svfiprintf_r+0x1d8>
 8006b8e:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <_svfiprintf_r+0x1f4>)
 8006b90:	bb1b      	cbnz	r3, 8006bda <_svfiprintf_r+0x1b2>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	3307      	adds	r3, #7
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	4433      	add	r3, r6
 8006ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba4:	e767      	b.n	8006a76 <_svfiprintf_r+0x4e>
 8006ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006baa:	460c      	mov	r4, r1
 8006bac:	2001      	movs	r0, #1
 8006bae:	e7a5      	b.n	8006afc <_svfiprintf_r+0xd4>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	3401      	adds	r4, #1
 8006bb4:	9305      	str	r3, [sp, #20]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	f04f 0c0a 	mov.w	ip, #10
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc2:	3a30      	subs	r2, #48	; 0x30
 8006bc4:	2a09      	cmp	r2, #9
 8006bc6:	d903      	bls.n	8006bd0 <_svfiprintf_r+0x1a8>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0c5      	beq.n	8006b58 <_svfiprintf_r+0x130>
 8006bcc:	9105      	str	r1, [sp, #20]
 8006bce:	e7c3      	b.n	8006b58 <_svfiprintf_r+0x130>
 8006bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e7f0      	b.n	8006bbc <_svfiprintf_r+0x194>
 8006bda:	ab03      	add	r3, sp, #12
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	462a      	mov	r2, r5
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <_svfiprintf_r+0x1f8>)
 8006be2:	a904      	add	r1, sp, #16
 8006be4:	4638      	mov	r0, r7
 8006be6:	f3af 8000 	nop.w
 8006bea:	1c42      	adds	r2, r0, #1
 8006bec:	4606      	mov	r6, r0
 8006bee:	d1d6      	bne.n	8006b9e <_svfiprintf_r+0x176>
 8006bf0:	89ab      	ldrh	r3, [r5, #12]
 8006bf2:	065b      	lsls	r3, r3, #25
 8006bf4:	f53f af2c 	bmi.w	8006a50 <_svfiprintf_r+0x28>
 8006bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bfa:	b01d      	add	sp, #116	; 0x74
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c00:	ab03      	add	r3, sp, #12
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	462a      	mov	r2, r5
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <_svfiprintf_r+0x1f8>)
 8006c08:	a904      	add	r1, sp, #16
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	f000 f87a 	bl	8006d04 <_printf_i>
 8006c10:	e7eb      	b.n	8006bea <_svfiprintf_r+0x1c2>
 8006c12:	bf00      	nop
 8006c14:	080084cc 	.word	0x080084cc
 8006c18:	080084d6 	.word	0x080084d6
 8006c1c:	00000000 	.word	0x00000000
 8006c20:	08006971 	.word	0x08006971
 8006c24:	080084d2 	.word	0x080084d2

08006c28 <_printf_common>:
 8006c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	4699      	mov	r9, r3
 8006c30:	688a      	ldr	r2, [r1, #8]
 8006c32:	690b      	ldr	r3, [r1, #16]
 8006c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	bfb8      	it	lt
 8006c3c:	4613      	movlt	r3, r2
 8006c3e:	6033      	str	r3, [r6, #0]
 8006c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c44:	4607      	mov	r7, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	b10a      	cbz	r2, 8006c4e <_printf_common+0x26>
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	6033      	str	r3, [r6, #0]
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	0699      	lsls	r1, r3, #26
 8006c52:	bf42      	ittt	mi
 8006c54:	6833      	ldrmi	r3, [r6, #0]
 8006c56:	3302      	addmi	r3, #2
 8006c58:	6033      	strmi	r3, [r6, #0]
 8006c5a:	6825      	ldr	r5, [r4, #0]
 8006c5c:	f015 0506 	ands.w	r5, r5, #6
 8006c60:	d106      	bne.n	8006c70 <_printf_common+0x48>
 8006c62:	f104 0a19 	add.w	sl, r4, #25
 8006c66:	68e3      	ldr	r3, [r4, #12]
 8006c68:	6832      	ldr	r2, [r6, #0]
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	42ab      	cmp	r3, r5
 8006c6e:	dc26      	bgt.n	8006cbe <_printf_common+0x96>
 8006c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c74:	1e13      	subs	r3, r2, #0
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	bf18      	it	ne
 8006c7a:	2301      	movne	r3, #1
 8006c7c:	0692      	lsls	r2, r2, #26
 8006c7e:	d42b      	bmi.n	8006cd8 <_printf_common+0xb0>
 8006c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c84:	4649      	mov	r1, r9
 8006c86:	4638      	mov	r0, r7
 8006c88:	47c0      	blx	r8
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d01e      	beq.n	8006ccc <_printf_common+0xa4>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	68e5      	ldr	r5, [r4, #12]
 8006c92:	6832      	ldr	r2, [r6, #0]
 8006c94:	f003 0306 	and.w	r3, r3, #6
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	bf08      	it	eq
 8006c9c:	1aad      	subeq	r5, r5, r2
 8006c9e:	68a3      	ldr	r3, [r4, #8]
 8006ca0:	6922      	ldr	r2, [r4, #16]
 8006ca2:	bf0c      	ite	eq
 8006ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ca8:	2500      	movne	r5, #0
 8006caa:	4293      	cmp	r3, r2
 8006cac:	bfc4      	itt	gt
 8006cae:	1a9b      	subgt	r3, r3, r2
 8006cb0:	18ed      	addgt	r5, r5, r3
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	341a      	adds	r4, #26
 8006cb6:	42b5      	cmp	r5, r6
 8006cb8:	d11a      	bne.n	8006cf0 <_printf_common+0xc8>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e008      	b.n	8006cd0 <_printf_common+0xa8>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	4652      	mov	r2, sl
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	47c0      	blx	r8
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d103      	bne.n	8006cd4 <_printf_common+0xac>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd4:	3501      	adds	r5, #1
 8006cd6:	e7c6      	b.n	8006c66 <_printf_common+0x3e>
 8006cd8:	18e1      	adds	r1, r4, r3
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	2030      	movs	r0, #48	; 0x30
 8006cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ce2:	4422      	add	r2, r4
 8006ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cec:	3302      	adds	r3, #2
 8006cee:	e7c7      	b.n	8006c80 <_printf_common+0x58>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	47c0      	blx	r8
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d0e6      	beq.n	8006ccc <_printf_common+0xa4>
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7d9      	b.n	8006cb6 <_printf_common+0x8e>
	...

08006d04 <_printf_i>:
 8006d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d08:	460c      	mov	r4, r1
 8006d0a:	4691      	mov	r9, r2
 8006d0c:	7e27      	ldrb	r7, [r4, #24]
 8006d0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d10:	2f78      	cmp	r7, #120	; 0x78
 8006d12:	4680      	mov	r8, r0
 8006d14:	469a      	mov	sl, r3
 8006d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d1a:	d807      	bhi.n	8006d2c <_printf_i+0x28>
 8006d1c:	2f62      	cmp	r7, #98	; 0x62
 8006d1e:	d80a      	bhi.n	8006d36 <_printf_i+0x32>
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	f000 80d8 	beq.w	8006ed6 <_printf_i+0x1d2>
 8006d26:	2f58      	cmp	r7, #88	; 0x58
 8006d28:	f000 80a3 	beq.w	8006e72 <_printf_i+0x16e>
 8006d2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d34:	e03a      	b.n	8006dac <_printf_i+0xa8>
 8006d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d3a:	2b15      	cmp	r3, #21
 8006d3c:	d8f6      	bhi.n	8006d2c <_printf_i+0x28>
 8006d3e:	a001      	add	r0, pc, #4	; (adr r0, 8006d44 <_printf_i+0x40>)
 8006d40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d44:	08006d9d 	.word	0x08006d9d
 8006d48:	08006db1 	.word	0x08006db1
 8006d4c:	08006d2d 	.word	0x08006d2d
 8006d50:	08006d2d 	.word	0x08006d2d
 8006d54:	08006d2d 	.word	0x08006d2d
 8006d58:	08006d2d 	.word	0x08006d2d
 8006d5c:	08006db1 	.word	0x08006db1
 8006d60:	08006d2d 	.word	0x08006d2d
 8006d64:	08006d2d 	.word	0x08006d2d
 8006d68:	08006d2d 	.word	0x08006d2d
 8006d6c:	08006d2d 	.word	0x08006d2d
 8006d70:	08006ebd 	.word	0x08006ebd
 8006d74:	08006de1 	.word	0x08006de1
 8006d78:	08006e9f 	.word	0x08006e9f
 8006d7c:	08006d2d 	.word	0x08006d2d
 8006d80:	08006d2d 	.word	0x08006d2d
 8006d84:	08006edf 	.word	0x08006edf
 8006d88:	08006d2d 	.word	0x08006d2d
 8006d8c:	08006de1 	.word	0x08006de1
 8006d90:	08006d2d 	.word	0x08006d2d
 8006d94:	08006d2d 	.word	0x08006d2d
 8006d98:	08006ea7 	.word	0x08006ea7
 8006d9c:	680b      	ldr	r3, [r1, #0]
 8006d9e:	1d1a      	adds	r2, r3, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	600a      	str	r2, [r1, #0]
 8006da4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0a3      	b.n	8006ef8 <_printf_i+0x1f4>
 8006db0:	6825      	ldr	r5, [r4, #0]
 8006db2:	6808      	ldr	r0, [r1, #0]
 8006db4:	062e      	lsls	r6, r5, #24
 8006db6:	f100 0304 	add.w	r3, r0, #4
 8006dba:	d50a      	bpl.n	8006dd2 <_printf_i+0xce>
 8006dbc:	6805      	ldr	r5, [r0, #0]
 8006dbe:	600b      	str	r3, [r1, #0]
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	da03      	bge.n	8006dcc <_printf_i+0xc8>
 8006dc4:	232d      	movs	r3, #45	; 0x2d
 8006dc6:	426d      	negs	r5, r5
 8006dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dcc:	485e      	ldr	r0, [pc, #376]	; (8006f48 <_printf_i+0x244>)
 8006dce:	230a      	movs	r3, #10
 8006dd0:	e019      	b.n	8006e06 <_printf_i+0x102>
 8006dd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dd6:	6805      	ldr	r5, [r0, #0]
 8006dd8:	600b      	str	r3, [r1, #0]
 8006dda:	bf18      	it	ne
 8006ddc:	b22d      	sxthne	r5, r5
 8006dde:	e7ef      	b.n	8006dc0 <_printf_i+0xbc>
 8006de0:	680b      	ldr	r3, [r1, #0]
 8006de2:	6825      	ldr	r5, [r4, #0]
 8006de4:	1d18      	adds	r0, r3, #4
 8006de6:	6008      	str	r0, [r1, #0]
 8006de8:	0628      	lsls	r0, r5, #24
 8006dea:	d501      	bpl.n	8006df0 <_printf_i+0xec>
 8006dec:	681d      	ldr	r5, [r3, #0]
 8006dee:	e002      	b.n	8006df6 <_printf_i+0xf2>
 8006df0:	0669      	lsls	r1, r5, #25
 8006df2:	d5fb      	bpl.n	8006dec <_printf_i+0xe8>
 8006df4:	881d      	ldrh	r5, [r3, #0]
 8006df6:	4854      	ldr	r0, [pc, #336]	; (8006f48 <_printf_i+0x244>)
 8006df8:	2f6f      	cmp	r7, #111	; 0x6f
 8006dfa:	bf0c      	ite	eq
 8006dfc:	2308      	moveq	r3, #8
 8006dfe:	230a      	movne	r3, #10
 8006e00:	2100      	movs	r1, #0
 8006e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e06:	6866      	ldr	r6, [r4, #4]
 8006e08:	60a6      	str	r6, [r4, #8]
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	bfa2      	ittt	ge
 8006e0e:	6821      	ldrge	r1, [r4, #0]
 8006e10:	f021 0104 	bicge.w	r1, r1, #4
 8006e14:	6021      	strge	r1, [r4, #0]
 8006e16:	b90d      	cbnz	r5, 8006e1c <_printf_i+0x118>
 8006e18:	2e00      	cmp	r6, #0
 8006e1a:	d04d      	beq.n	8006eb8 <_printf_i+0x1b4>
 8006e1c:	4616      	mov	r6, r2
 8006e1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e22:	fb03 5711 	mls	r7, r3, r1, r5
 8006e26:	5dc7      	ldrb	r7, [r0, r7]
 8006e28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e2c:	462f      	mov	r7, r5
 8006e2e:	42bb      	cmp	r3, r7
 8006e30:	460d      	mov	r5, r1
 8006e32:	d9f4      	bls.n	8006e1e <_printf_i+0x11a>
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d10b      	bne.n	8006e50 <_printf_i+0x14c>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	07df      	lsls	r7, r3, #31
 8006e3c:	d508      	bpl.n	8006e50 <_printf_i+0x14c>
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	6861      	ldr	r1, [r4, #4]
 8006e42:	4299      	cmp	r1, r3
 8006e44:	bfde      	ittt	le
 8006e46:	2330      	movle	r3, #48	; 0x30
 8006e48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e50:	1b92      	subs	r2, r2, r6
 8006e52:	6122      	str	r2, [r4, #16]
 8006e54:	f8cd a000 	str.w	sl, [sp]
 8006e58:	464b      	mov	r3, r9
 8006e5a:	aa03      	add	r2, sp, #12
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4640      	mov	r0, r8
 8006e60:	f7ff fee2 	bl	8006c28 <_printf_common>
 8006e64:	3001      	adds	r0, #1
 8006e66:	d14c      	bne.n	8006f02 <_printf_i+0x1fe>
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	b004      	add	sp, #16
 8006e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e72:	4835      	ldr	r0, [pc, #212]	; (8006f48 <_printf_i+0x244>)
 8006e74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	680e      	ldr	r6, [r1, #0]
 8006e7c:	061f      	lsls	r7, r3, #24
 8006e7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e82:	600e      	str	r6, [r1, #0]
 8006e84:	d514      	bpl.n	8006eb0 <_printf_i+0x1ac>
 8006e86:	07d9      	lsls	r1, r3, #31
 8006e88:	bf44      	itt	mi
 8006e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e8e:	6023      	strmi	r3, [r4, #0]
 8006e90:	b91d      	cbnz	r5, 8006e9a <_printf_i+0x196>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	f023 0320 	bic.w	r3, r3, #32
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	2310      	movs	r3, #16
 8006e9c:	e7b0      	b.n	8006e00 <_printf_i+0xfc>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	f043 0320 	orr.w	r3, r3, #32
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	2378      	movs	r3, #120	; 0x78
 8006ea8:	4828      	ldr	r0, [pc, #160]	; (8006f4c <_printf_i+0x248>)
 8006eaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006eae:	e7e3      	b.n	8006e78 <_printf_i+0x174>
 8006eb0:	065e      	lsls	r6, r3, #25
 8006eb2:	bf48      	it	mi
 8006eb4:	b2ad      	uxthmi	r5, r5
 8006eb6:	e7e6      	b.n	8006e86 <_printf_i+0x182>
 8006eb8:	4616      	mov	r6, r2
 8006eba:	e7bb      	b.n	8006e34 <_printf_i+0x130>
 8006ebc:	680b      	ldr	r3, [r1, #0]
 8006ebe:	6826      	ldr	r6, [r4, #0]
 8006ec0:	6960      	ldr	r0, [r4, #20]
 8006ec2:	1d1d      	adds	r5, r3, #4
 8006ec4:	600d      	str	r5, [r1, #0]
 8006ec6:	0635      	lsls	r5, r6, #24
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0x1cc>
 8006ecc:	6018      	str	r0, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <_printf_i+0x1d2>
 8006ed0:	0671      	lsls	r1, r6, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0x1c8>
 8006ed4:	8018      	strh	r0, [r3, #0]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6123      	str	r3, [r4, #16]
 8006eda:	4616      	mov	r6, r2
 8006edc:	e7ba      	b.n	8006e54 <_printf_i+0x150>
 8006ede:	680b      	ldr	r3, [r1, #0]
 8006ee0:	1d1a      	adds	r2, r3, #4
 8006ee2:	600a      	str	r2, [r1, #0]
 8006ee4:	681e      	ldr	r6, [r3, #0]
 8006ee6:	6862      	ldr	r2, [r4, #4]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7f9 f998 	bl	8000220 <memchr>
 8006ef0:	b108      	cbz	r0, 8006ef6 <_printf_i+0x1f2>
 8006ef2:	1b80      	subs	r0, r0, r6
 8006ef4:	6060      	str	r0, [r4, #4]
 8006ef6:	6863      	ldr	r3, [r4, #4]
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	2300      	movs	r3, #0
 8006efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f00:	e7a8      	b.n	8006e54 <_printf_i+0x150>
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	4632      	mov	r2, r6
 8006f06:	4649      	mov	r1, r9
 8006f08:	4640      	mov	r0, r8
 8006f0a:	47d0      	blx	sl
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d0ab      	beq.n	8006e68 <_printf_i+0x164>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	079b      	lsls	r3, r3, #30
 8006f14:	d413      	bmi.n	8006f3e <_printf_i+0x23a>
 8006f16:	68e0      	ldr	r0, [r4, #12]
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	4298      	cmp	r0, r3
 8006f1c:	bfb8      	it	lt
 8006f1e:	4618      	movlt	r0, r3
 8006f20:	e7a4      	b.n	8006e6c <_printf_i+0x168>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4632      	mov	r2, r6
 8006f26:	4649      	mov	r1, r9
 8006f28:	4640      	mov	r0, r8
 8006f2a:	47d0      	blx	sl
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d09b      	beq.n	8006e68 <_printf_i+0x164>
 8006f30:	3501      	adds	r5, #1
 8006f32:	68e3      	ldr	r3, [r4, #12]
 8006f34:	9903      	ldr	r1, [sp, #12]
 8006f36:	1a5b      	subs	r3, r3, r1
 8006f38:	42ab      	cmp	r3, r5
 8006f3a:	dcf2      	bgt.n	8006f22 <_printf_i+0x21e>
 8006f3c:	e7eb      	b.n	8006f16 <_printf_i+0x212>
 8006f3e:	2500      	movs	r5, #0
 8006f40:	f104 0619 	add.w	r6, r4, #25
 8006f44:	e7f5      	b.n	8006f32 <_printf_i+0x22e>
 8006f46:	bf00      	nop
 8006f48:	080084dd 	.word	0x080084dd
 8006f4c:	080084ee 	.word	0x080084ee

08006f50 <memcpy>:
 8006f50:	440a      	add	r2, r1
 8006f52:	4291      	cmp	r1, r2
 8006f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f58:	d100      	bne.n	8006f5c <memcpy+0xc>
 8006f5a:	4770      	bx	lr
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f66:	4291      	cmp	r1, r2
 8006f68:	d1f9      	bne.n	8006f5e <memcpy+0xe>
 8006f6a:	bd10      	pop	{r4, pc}

08006f6c <memmove>:
 8006f6c:	4288      	cmp	r0, r1
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	eb01 0402 	add.w	r4, r1, r2
 8006f74:	d902      	bls.n	8006f7c <memmove+0x10>
 8006f76:	4284      	cmp	r4, r0
 8006f78:	4623      	mov	r3, r4
 8006f7a:	d807      	bhi.n	8006f8c <memmove+0x20>
 8006f7c:	1e43      	subs	r3, r0, #1
 8006f7e:	42a1      	cmp	r1, r4
 8006f80:	d008      	beq.n	8006f94 <memmove+0x28>
 8006f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f8a:	e7f8      	b.n	8006f7e <memmove+0x12>
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4601      	mov	r1, r0
 8006f90:	428a      	cmp	r2, r1
 8006f92:	d100      	bne.n	8006f96 <memmove+0x2a>
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f9e:	e7f7      	b.n	8006f90 <memmove+0x24>

08006fa0 <_free_r>:
 8006fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fa2:	2900      	cmp	r1, #0
 8006fa4:	d048      	beq.n	8007038 <_free_r+0x98>
 8006fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006faa:	9001      	str	r0, [sp, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f1a1 0404 	sub.w	r4, r1, #4
 8006fb2:	bfb8      	it	lt
 8006fb4:	18e4      	addlt	r4, r4, r3
 8006fb6:	f000 f8d3 	bl	8007160 <__malloc_lock>
 8006fba:	4a20      	ldr	r2, [pc, #128]	; (800703c <_free_r+0x9c>)
 8006fbc:	9801      	ldr	r0, [sp, #4]
 8006fbe:	6813      	ldr	r3, [r2, #0]
 8006fc0:	4615      	mov	r5, r2
 8006fc2:	b933      	cbnz	r3, 8006fd2 <_free_r+0x32>
 8006fc4:	6063      	str	r3, [r4, #4]
 8006fc6:	6014      	str	r4, [r2, #0]
 8006fc8:	b003      	add	sp, #12
 8006fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fce:	f000 b8cd 	b.w	800716c <__malloc_unlock>
 8006fd2:	42a3      	cmp	r3, r4
 8006fd4:	d90b      	bls.n	8006fee <_free_r+0x4e>
 8006fd6:	6821      	ldr	r1, [r4, #0]
 8006fd8:	1862      	adds	r2, r4, r1
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	bf04      	itt	eq
 8006fde:	681a      	ldreq	r2, [r3, #0]
 8006fe0:	685b      	ldreq	r3, [r3, #4]
 8006fe2:	6063      	str	r3, [r4, #4]
 8006fe4:	bf04      	itt	eq
 8006fe6:	1852      	addeq	r2, r2, r1
 8006fe8:	6022      	streq	r2, [r4, #0]
 8006fea:	602c      	str	r4, [r5, #0]
 8006fec:	e7ec      	b.n	8006fc8 <_free_r+0x28>
 8006fee:	461a      	mov	r2, r3
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	b10b      	cbz	r3, 8006ff8 <_free_r+0x58>
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	d9fa      	bls.n	8006fee <_free_r+0x4e>
 8006ff8:	6811      	ldr	r1, [r2, #0]
 8006ffa:	1855      	adds	r5, r2, r1
 8006ffc:	42a5      	cmp	r5, r4
 8006ffe:	d10b      	bne.n	8007018 <_free_r+0x78>
 8007000:	6824      	ldr	r4, [r4, #0]
 8007002:	4421      	add	r1, r4
 8007004:	1854      	adds	r4, r2, r1
 8007006:	42a3      	cmp	r3, r4
 8007008:	6011      	str	r1, [r2, #0]
 800700a:	d1dd      	bne.n	8006fc8 <_free_r+0x28>
 800700c:	681c      	ldr	r4, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	6053      	str	r3, [r2, #4]
 8007012:	4421      	add	r1, r4
 8007014:	6011      	str	r1, [r2, #0]
 8007016:	e7d7      	b.n	8006fc8 <_free_r+0x28>
 8007018:	d902      	bls.n	8007020 <_free_r+0x80>
 800701a:	230c      	movs	r3, #12
 800701c:	6003      	str	r3, [r0, #0]
 800701e:	e7d3      	b.n	8006fc8 <_free_r+0x28>
 8007020:	6825      	ldr	r5, [r4, #0]
 8007022:	1961      	adds	r1, r4, r5
 8007024:	428b      	cmp	r3, r1
 8007026:	bf04      	itt	eq
 8007028:	6819      	ldreq	r1, [r3, #0]
 800702a:	685b      	ldreq	r3, [r3, #4]
 800702c:	6063      	str	r3, [r4, #4]
 800702e:	bf04      	itt	eq
 8007030:	1949      	addeq	r1, r1, r5
 8007032:	6021      	streq	r1, [r4, #0]
 8007034:	6054      	str	r4, [r2, #4]
 8007036:	e7c7      	b.n	8006fc8 <_free_r+0x28>
 8007038:	b003      	add	sp, #12
 800703a:	bd30      	pop	{r4, r5, pc}
 800703c:	20000824 	.word	0x20000824

08007040 <_malloc_r>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	1ccd      	adds	r5, r1, #3
 8007044:	f025 0503 	bic.w	r5, r5, #3
 8007048:	3508      	adds	r5, #8
 800704a:	2d0c      	cmp	r5, #12
 800704c:	bf38      	it	cc
 800704e:	250c      	movcc	r5, #12
 8007050:	2d00      	cmp	r5, #0
 8007052:	4606      	mov	r6, r0
 8007054:	db01      	blt.n	800705a <_malloc_r+0x1a>
 8007056:	42a9      	cmp	r1, r5
 8007058:	d903      	bls.n	8007062 <_malloc_r+0x22>
 800705a:	230c      	movs	r3, #12
 800705c:	6033      	str	r3, [r6, #0]
 800705e:	2000      	movs	r0, #0
 8007060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007062:	f000 f87d 	bl	8007160 <__malloc_lock>
 8007066:	4921      	ldr	r1, [pc, #132]	; (80070ec <_malloc_r+0xac>)
 8007068:	680a      	ldr	r2, [r1, #0]
 800706a:	4614      	mov	r4, r2
 800706c:	b99c      	cbnz	r4, 8007096 <_malloc_r+0x56>
 800706e:	4f20      	ldr	r7, [pc, #128]	; (80070f0 <_malloc_r+0xb0>)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	b923      	cbnz	r3, 800707e <_malloc_r+0x3e>
 8007074:	4621      	mov	r1, r4
 8007076:	4630      	mov	r0, r6
 8007078:	f000 f862 	bl	8007140 <_sbrk_r>
 800707c:	6038      	str	r0, [r7, #0]
 800707e:	4629      	mov	r1, r5
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f85d 	bl	8007140 <_sbrk_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d123      	bne.n	80070d2 <_malloc_r+0x92>
 800708a:	230c      	movs	r3, #12
 800708c:	6033      	str	r3, [r6, #0]
 800708e:	4630      	mov	r0, r6
 8007090:	f000 f86c 	bl	800716c <__malloc_unlock>
 8007094:	e7e3      	b.n	800705e <_malloc_r+0x1e>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	1b5b      	subs	r3, r3, r5
 800709a:	d417      	bmi.n	80070cc <_malloc_r+0x8c>
 800709c:	2b0b      	cmp	r3, #11
 800709e:	d903      	bls.n	80070a8 <_malloc_r+0x68>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	441c      	add	r4, r3
 80070a4:	6025      	str	r5, [r4, #0]
 80070a6:	e004      	b.n	80070b2 <_malloc_r+0x72>
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	42a2      	cmp	r2, r4
 80070ac:	bf0c      	ite	eq
 80070ae:	600b      	streq	r3, [r1, #0]
 80070b0:	6053      	strne	r3, [r2, #4]
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 f85a 	bl	800716c <__malloc_unlock>
 80070b8:	f104 000b 	add.w	r0, r4, #11
 80070bc:	1d23      	adds	r3, r4, #4
 80070be:	f020 0007 	bic.w	r0, r0, #7
 80070c2:	1ac2      	subs	r2, r0, r3
 80070c4:	d0cc      	beq.n	8007060 <_malloc_r+0x20>
 80070c6:	1a1b      	subs	r3, r3, r0
 80070c8:	50a3      	str	r3, [r4, r2]
 80070ca:	e7c9      	b.n	8007060 <_malloc_r+0x20>
 80070cc:	4622      	mov	r2, r4
 80070ce:	6864      	ldr	r4, [r4, #4]
 80070d0:	e7cc      	b.n	800706c <_malloc_r+0x2c>
 80070d2:	1cc4      	adds	r4, r0, #3
 80070d4:	f024 0403 	bic.w	r4, r4, #3
 80070d8:	42a0      	cmp	r0, r4
 80070da:	d0e3      	beq.n	80070a4 <_malloc_r+0x64>
 80070dc:	1a21      	subs	r1, r4, r0
 80070de:	4630      	mov	r0, r6
 80070e0:	f000 f82e 	bl	8007140 <_sbrk_r>
 80070e4:	3001      	adds	r0, #1
 80070e6:	d1dd      	bne.n	80070a4 <_malloc_r+0x64>
 80070e8:	e7cf      	b.n	800708a <_malloc_r+0x4a>
 80070ea:	bf00      	nop
 80070ec:	20000824 	.word	0x20000824
 80070f0:	20000828 	.word	0x20000828

080070f4 <_realloc_r>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	4607      	mov	r7, r0
 80070f8:	4614      	mov	r4, r2
 80070fa:	460e      	mov	r6, r1
 80070fc:	b921      	cbnz	r1, 8007108 <_realloc_r+0x14>
 80070fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007102:	4611      	mov	r1, r2
 8007104:	f7ff bf9c 	b.w	8007040 <_malloc_r>
 8007108:	b922      	cbnz	r2, 8007114 <_realloc_r+0x20>
 800710a:	f7ff ff49 	bl	8006fa0 <_free_r>
 800710e:	4625      	mov	r5, r4
 8007110:	4628      	mov	r0, r5
 8007112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007114:	f000 f830 	bl	8007178 <_malloc_usable_size_r>
 8007118:	42a0      	cmp	r0, r4
 800711a:	d20f      	bcs.n	800713c <_realloc_r+0x48>
 800711c:	4621      	mov	r1, r4
 800711e:	4638      	mov	r0, r7
 8007120:	f7ff ff8e 	bl	8007040 <_malloc_r>
 8007124:	4605      	mov	r5, r0
 8007126:	2800      	cmp	r0, #0
 8007128:	d0f2      	beq.n	8007110 <_realloc_r+0x1c>
 800712a:	4631      	mov	r1, r6
 800712c:	4622      	mov	r2, r4
 800712e:	f7ff ff0f 	bl	8006f50 <memcpy>
 8007132:	4631      	mov	r1, r6
 8007134:	4638      	mov	r0, r7
 8007136:	f7ff ff33 	bl	8006fa0 <_free_r>
 800713a:	e7e9      	b.n	8007110 <_realloc_r+0x1c>
 800713c:	4635      	mov	r5, r6
 800713e:	e7e7      	b.n	8007110 <_realloc_r+0x1c>

08007140 <_sbrk_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d06      	ldr	r5, [pc, #24]	; (800715c <_sbrk_r+0x1c>)
 8007144:	2300      	movs	r3, #0
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	602b      	str	r3, [r5, #0]
 800714c:	f7fa ff92 	bl	8002074 <_sbrk>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_sbrk_r+0x1a>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_sbrk_r+0x1a>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	20011c74 	.word	0x20011c74

08007160 <__malloc_lock>:
 8007160:	4801      	ldr	r0, [pc, #4]	; (8007168 <__malloc_lock+0x8>)
 8007162:	f000 b811 	b.w	8007188 <__retarget_lock_acquire_recursive>
 8007166:	bf00      	nop
 8007168:	20011c7c 	.word	0x20011c7c

0800716c <__malloc_unlock>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__malloc_unlock+0x8>)
 800716e:	f000 b80c 	b.w	800718a <__retarget_lock_release_recursive>
 8007172:	bf00      	nop
 8007174:	20011c7c 	.word	0x20011c7c

08007178 <_malloc_usable_size_r>:
 8007178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800717c:	1f18      	subs	r0, r3, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfbc      	itt	lt
 8007182:	580b      	ldrlt	r3, [r1, r0]
 8007184:	18c0      	addlt	r0, r0, r3
 8007186:	4770      	bx	lr

08007188 <__retarget_lock_acquire_recursive>:
 8007188:	4770      	bx	lr

0800718a <__retarget_lock_release_recursive>:
 800718a:	4770      	bx	lr

0800718c <cosf>:
 800718c:	ee10 3a10 	vmov	r3, s0
 8007190:	b507      	push	{r0, r1, r2, lr}
 8007192:	4a1c      	ldr	r2, [pc, #112]	; (8007204 <cosf+0x78>)
 8007194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007198:	4293      	cmp	r3, r2
 800719a:	dc04      	bgt.n	80071a6 <cosf+0x1a>
 800719c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8007208 <cosf+0x7c>
 80071a0:	f000 fd0e 	bl	8007bc0 <__kernel_cosf>
 80071a4:	e004      	b.n	80071b0 <cosf+0x24>
 80071a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80071aa:	db04      	blt.n	80071b6 <cosf+0x2a>
 80071ac:	ee30 0a40 	vsub.f32	s0, s0, s0
 80071b0:	b003      	add	sp, #12
 80071b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80071b6:	4668      	mov	r0, sp
 80071b8:	f000 fbc2 	bl	8007940 <__ieee754_rem_pio2f>
 80071bc:	f000 0003 	and.w	r0, r0, #3
 80071c0:	2801      	cmp	r0, #1
 80071c2:	d007      	beq.n	80071d4 <cosf+0x48>
 80071c4:	2802      	cmp	r0, #2
 80071c6:	d00e      	beq.n	80071e6 <cosf+0x5a>
 80071c8:	b9a0      	cbnz	r0, 80071f4 <cosf+0x68>
 80071ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80071ce:	ed9d 0a00 	vldr	s0, [sp]
 80071d2:	e7e5      	b.n	80071a0 <cosf+0x14>
 80071d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80071d8:	ed9d 0a00 	vldr	s0, [sp]
 80071dc:	f000 ffda 	bl	8008194 <__kernel_sinf>
 80071e0:	eeb1 0a40 	vneg.f32	s0, s0
 80071e4:	e7e4      	b.n	80071b0 <cosf+0x24>
 80071e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80071ea:	ed9d 0a00 	vldr	s0, [sp]
 80071ee:	f000 fce7 	bl	8007bc0 <__kernel_cosf>
 80071f2:	e7f5      	b.n	80071e0 <cosf+0x54>
 80071f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80071f8:	ed9d 0a00 	vldr	s0, [sp]
 80071fc:	2001      	movs	r0, #1
 80071fe:	f000 ffc9 	bl	8008194 <__kernel_sinf>
 8007202:	e7d5      	b.n	80071b0 <cosf+0x24>
 8007204:	3f490fd8 	.word	0x3f490fd8
 8007208:	00000000 	.word	0x00000000

0800720c <sinf>:
 800720c:	ee10 3a10 	vmov	r3, s0
 8007210:	b507      	push	{r0, r1, r2, lr}
 8007212:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <sinf+0x7c>)
 8007214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007218:	4293      	cmp	r3, r2
 800721a:	dc05      	bgt.n	8007228 <sinf+0x1c>
 800721c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800728c <sinf+0x80>
 8007220:	2000      	movs	r0, #0
 8007222:	f000 ffb7 	bl	8008194 <__kernel_sinf>
 8007226:	e004      	b.n	8007232 <sinf+0x26>
 8007228:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800722c:	db04      	blt.n	8007238 <sinf+0x2c>
 800722e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007232:	b003      	add	sp, #12
 8007234:	f85d fb04 	ldr.w	pc, [sp], #4
 8007238:	4668      	mov	r0, sp
 800723a:	f000 fb81 	bl	8007940 <__ieee754_rem_pio2f>
 800723e:	f000 0003 	and.w	r0, r0, #3
 8007242:	2801      	cmp	r0, #1
 8007244:	d008      	beq.n	8007258 <sinf+0x4c>
 8007246:	2802      	cmp	r0, #2
 8007248:	d00d      	beq.n	8007266 <sinf+0x5a>
 800724a:	b9b0      	cbnz	r0, 800727a <sinf+0x6e>
 800724c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007250:	ed9d 0a00 	vldr	s0, [sp]
 8007254:	2001      	movs	r0, #1
 8007256:	e7e4      	b.n	8007222 <sinf+0x16>
 8007258:	eddd 0a01 	vldr	s1, [sp, #4]
 800725c:	ed9d 0a00 	vldr	s0, [sp]
 8007260:	f000 fcae 	bl	8007bc0 <__kernel_cosf>
 8007264:	e7e5      	b.n	8007232 <sinf+0x26>
 8007266:	eddd 0a01 	vldr	s1, [sp, #4]
 800726a:	ed9d 0a00 	vldr	s0, [sp]
 800726e:	2001      	movs	r0, #1
 8007270:	f000 ff90 	bl	8008194 <__kernel_sinf>
 8007274:	eeb1 0a40 	vneg.f32	s0, s0
 8007278:	e7db      	b.n	8007232 <sinf+0x26>
 800727a:	eddd 0a01 	vldr	s1, [sp, #4]
 800727e:	ed9d 0a00 	vldr	s0, [sp]
 8007282:	f000 fc9d 	bl	8007bc0 <__kernel_cosf>
 8007286:	e7f5      	b.n	8007274 <sinf+0x68>
 8007288:	3f490fd8 	.word	0x3f490fd8
 800728c:	00000000 	.word	0x00000000

08007290 <powf>:
 8007290:	b508      	push	{r3, lr}
 8007292:	ed2d 8b04 	vpush	{d8-d9}
 8007296:	eeb0 9a40 	vmov.f32	s18, s0
 800729a:	eef0 8a60 	vmov.f32	s17, s1
 800729e:	f000 f88f 	bl	80073c0 <__ieee754_powf>
 80072a2:	4b43      	ldr	r3, [pc, #268]	; (80073b0 <powf+0x120>)
 80072a4:	f993 3000 	ldrsb.w	r3, [r3]
 80072a8:	3301      	adds	r3, #1
 80072aa:	eeb0 8a40 	vmov.f32	s16, s0
 80072ae:	d012      	beq.n	80072d6 <powf+0x46>
 80072b0:	eef4 8a68 	vcmp.f32	s17, s17
 80072b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b8:	d60d      	bvs.n	80072d6 <powf+0x46>
 80072ba:	eeb4 9a49 	vcmp.f32	s18, s18
 80072be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c2:	d70d      	bvc.n	80072e0 <powf+0x50>
 80072c4:	eef5 8a40 	vcmp.f32	s17, #0.0
 80072c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072d0:	bf08      	it	eq
 80072d2:	eeb0 8a67 	vmoveq.f32	s16, s15
 80072d6:	eeb0 0a48 	vmov.f32	s0, s16
 80072da:	ecbd 8b04 	vpop	{d8-d9}
 80072de:	bd08      	pop	{r3, pc}
 80072e0:	eddf 9a34 	vldr	s19, [pc, #208]	; 80073b4 <powf+0x124>
 80072e4:	eeb4 9a69 	vcmp.f32	s18, s19
 80072e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ec:	d116      	bne.n	800731c <powf+0x8c>
 80072ee:	eef4 8a69 	vcmp.f32	s17, s19
 80072f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f6:	d057      	beq.n	80073a8 <powf+0x118>
 80072f8:	eeb0 0a68 	vmov.f32	s0, s17
 80072fc:	f000 ff99 	bl	8008232 <finitef>
 8007300:	2800      	cmp	r0, #0
 8007302:	d0e8      	beq.n	80072d6 <powf+0x46>
 8007304:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730c:	d5e3      	bpl.n	80072d6 <powf+0x46>
 800730e:	f7ff fadd 	bl	80068cc <__errno>
 8007312:	2321      	movs	r3, #33	; 0x21
 8007314:	6003      	str	r3, [r0, #0]
 8007316:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80073b8 <powf+0x128>
 800731a:	e7dc      	b.n	80072d6 <powf+0x46>
 800731c:	f000 ff89 	bl	8008232 <finitef>
 8007320:	bb50      	cbnz	r0, 8007378 <powf+0xe8>
 8007322:	eeb0 0a49 	vmov.f32	s0, s18
 8007326:	f000 ff84 	bl	8008232 <finitef>
 800732a:	b328      	cbz	r0, 8007378 <powf+0xe8>
 800732c:	eeb0 0a68 	vmov.f32	s0, s17
 8007330:	f000 ff7f 	bl	8008232 <finitef>
 8007334:	b300      	cbz	r0, 8007378 <powf+0xe8>
 8007336:	eeb4 8a48 	vcmp.f32	s16, s16
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	d706      	bvc.n	800734e <powf+0xbe>
 8007340:	f7ff fac4 	bl	80068cc <__errno>
 8007344:	2321      	movs	r3, #33	; 0x21
 8007346:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800734a:	6003      	str	r3, [r0, #0]
 800734c:	e7c3      	b.n	80072d6 <powf+0x46>
 800734e:	f7ff fabd 	bl	80068cc <__errno>
 8007352:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8007356:	2322      	movs	r3, #34	; 0x22
 8007358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	d508      	bpl.n	8007372 <powf+0xe2>
 8007360:	eeb0 0a68 	vmov.f32	s0, s17
 8007364:	f000 ffba 	bl	80082dc <rintf>
 8007368:	eeb4 0a68 	vcmp.f32	s0, s17
 800736c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007370:	d1d1      	bne.n	8007316 <powf+0x86>
 8007372:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80073bc <powf+0x12c>
 8007376:	e7ae      	b.n	80072d6 <powf+0x46>
 8007378:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800737c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007380:	d1a9      	bne.n	80072d6 <powf+0x46>
 8007382:	eeb0 0a49 	vmov.f32	s0, s18
 8007386:	f000 ff54 	bl	8008232 <finitef>
 800738a:	2800      	cmp	r0, #0
 800738c:	d0a3      	beq.n	80072d6 <powf+0x46>
 800738e:	eeb0 0a68 	vmov.f32	s0, s17
 8007392:	f000 ff4e 	bl	8008232 <finitef>
 8007396:	2800      	cmp	r0, #0
 8007398:	d09d      	beq.n	80072d6 <powf+0x46>
 800739a:	f7ff fa97 	bl	80068cc <__errno>
 800739e:	2322      	movs	r3, #34	; 0x22
 80073a0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80073b4 <powf+0x124>
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	e796      	b.n	80072d6 <powf+0x46>
 80073a8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80073ac:	e793      	b.n	80072d6 <powf+0x46>
 80073ae:	bf00      	nop
 80073b0:	20000080 	.word	0x20000080
 80073b4:	00000000 	.word	0x00000000
 80073b8:	ff800000 	.word	0xff800000
 80073bc:	7f800000 	.word	0x7f800000

080073c0 <__ieee754_powf>:
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	ee10 5a90 	vmov	r5, s1
 80073c8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80073cc:	ed2d 8b02 	vpush	{d8}
 80073d0:	eeb0 8a40 	vmov.f32	s16, s0
 80073d4:	eef0 8a60 	vmov.f32	s17, s1
 80073d8:	f000 8291 	beq.w	80078fe <__ieee754_powf+0x53e>
 80073dc:	ee10 8a10 	vmov	r8, s0
 80073e0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80073e4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80073e8:	dc06      	bgt.n	80073f8 <__ieee754_powf+0x38>
 80073ea:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80073ee:	dd0a      	ble.n	8007406 <__ieee754_powf+0x46>
 80073f0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80073f4:	f000 8283 	beq.w	80078fe <__ieee754_powf+0x53e>
 80073f8:	ecbd 8b02 	vpop	{d8}
 80073fc:	48d8      	ldr	r0, [pc, #864]	; (8007760 <__ieee754_powf+0x3a0>)
 80073fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007402:	f000 bf65 	b.w	80082d0 <nanf>
 8007406:	f1b8 0f00 	cmp.w	r8, #0
 800740a:	da1f      	bge.n	800744c <__ieee754_powf+0x8c>
 800740c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007410:	da2e      	bge.n	8007470 <__ieee754_powf+0xb0>
 8007412:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007416:	f2c0 827b 	blt.w	8007910 <__ieee754_powf+0x550>
 800741a:	15fb      	asrs	r3, r7, #23
 800741c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007420:	fa47 f603 	asr.w	r6, r7, r3
 8007424:	fa06 f303 	lsl.w	r3, r6, r3
 8007428:	42bb      	cmp	r3, r7
 800742a:	f040 8271 	bne.w	8007910 <__ieee754_powf+0x550>
 800742e:	f006 0601 	and.w	r6, r6, #1
 8007432:	f1c6 0602 	rsb	r6, r6, #2
 8007436:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800743a:	d120      	bne.n	800747e <__ieee754_powf+0xbe>
 800743c:	2d00      	cmp	r5, #0
 800743e:	f280 8264 	bge.w	800790a <__ieee754_powf+0x54a>
 8007442:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007446:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800744a:	e00d      	b.n	8007468 <__ieee754_powf+0xa8>
 800744c:	2600      	movs	r6, #0
 800744e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007452:	d1f0      	bne.n	8007436 <__ieee754_powf+0x76>
 8007454:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007458:	f000 8251 	beq.w	80078fe <__ieee754_powf+0x53e>
 800745c:	dd0a      	ble.n	8007474 <__ieee754_powf+0xb4>
 800745e:	2d00      	cmp	r5, #0
 8007460:	f280 8250 	bge.w	8007904 <__ieee754_powf+0x544>
 8007464:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007764 <__ieee754_powf+0x3a4>
 8007468:	ecbd 8b02 	vpop	{d8}
 800746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007470:	2602      	movs	r6, #2
 8007472:	e7ec      	b.n	800744e <__ieee754_powf+0x8e>
 8007474:	2d00      	cmp	r5, #0
 8007476:	daf5      	bge.n	8007464 <__ieee754_powf+0xa4>
 8007478:	eeb1 0a68 	vneg.f32	s0, s17
 800747c:	e7f4      	b.n	8007468 <__ieee754_powf+0xa8>
 800747e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007482:	d102      	bne.n	800748a <__ieee754_powf+0xca>
 8007484:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007488:	e7ee      	b.n	8007468 <__ieee754_powf+0xa8>
 800748a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800748e:	eeb0 0a48 	vmov.f32	s0, s16
 8007492:	d108      	bne.n	80074a6 <__ieee754_powf+0xe6>
 8007494:	f1b8 0f00 	cmp.w	r8, #0
 8007498:	db05      	blt.n	80074a6 <__ieee754_powf+0xe6>
 800749a:	ecbd 8b02 	vpop	{d8}
 800749e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074a2:	f000 bb89 	b.w	8007bb8 <__ieee754_sqrtf>
 80074a6:	f000 febd 	bl	8008224 <fabsf>
 80074aa:	b124      	cbz	r4, 80074b6 <__ieee754_powf+0xf6>
 80074ac:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80074b0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80074b4:	d117      	bne.n	80074e6 <__ieee754_powf+0x126>
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	bfbc      	itt	lt
 80074ba:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80074be:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80074c2:	f1b8 0f00 	cmp.w	r8, #0
 80074c6:	dacf      	bge.n	8007468 <__ieee754_powf+0xa8>
 80074c8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80074cc:	ea54 0306 	orrs.w	r3, r4, r6
 80074d0:	d104      	bne.n	80074dc <__ieee754_powf+0x11c>
 80074d2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80074d6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80074da:	e7c5      	b.n	8007468 <__ieee754_powf+0xa8>
 80074dc:	2e01      	cmp	r6, #1
 80074de:	d1c3      	bne.n	8007468 <__ieee754_powf+0xa8>
 80074e0:	eeb1 0a40 	vneg.f32	s0, s0
 80074e4:	e7c0      	b.n	8007468 <__ieee754_powf+0xa8>
 80074e6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80074ea:	3801      	subs	r0, #1
 80074ec:	ea56 0300 	orrs.w	r3, r6, r0
 80074f0:	d104      	bne.n	80074fc <__ieee754_powf+0x13c>
 80074f2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80074f6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80074fa:	e7b5      	b.n	8007468 <__ieee754_powf+0xa8>
 80074fc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007500:	dd6b      	ble.n	80075da <__ieee754_powf+0x21a>
 8007502:	4b99      	ldr	r3, [pc, #612]	; (8007768 <__ieee754_powf+0x3a8>)
 8007504:	429c      	cmp	r4, r3
 8007506:	dc06      	bgt.n	8007516 <__ieee754_powf+0x156>
 8007508:	2d00      	cmp	r5, #0
 800750a:	daab      	bge.n	8007464 <__ieee754_powf+0xa4>
 800750c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800776c <__ieee754_powf+0x3ac>
 8007510:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007514:	e7a8      	b.n	8007468 <__ieee754_powf+0xa8>
 8007516:	4b96      	ldr	r3, [pc, #600]	; (8007770 <__ieee754_powf+0x3b0>)
 8007518:	429c      	cmp	r4, r3
 800751a:	dd02      	ble.n	8007522 <__ieee754_powf+0x162>
 800751c:	2d00      	cmp	r5, #0
 800751e:	dcf5      	bgt.n	800750c <__ieee754_powf+0x14c>
 8007520:	e7a0      	b.n	8007464 <__ieee754_powf+0xa4>
 8007522:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007526:	ee30 0a67 	vsub.f32	s0, s0, s15
 800752a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007774 <__ieee754_powf+0x3b4>
 800752e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007532:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007536:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800753a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800753e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007778 <__ieee754_powf+0x3b8>
 800754a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800754e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800777c <__ieee754_powf+0x3bc>
 8007552:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007556:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007780 <__ieee754_powf+0x3c0>
 800755a:	eef0 6a67 	vmov.f32	s13, s15
 800755e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007562:	ee16 3a90 	vmov	r3, s13
 8007566:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800756a:	f023 030f 	bic.w	r3, r3, #15
 800756e:	ee00 3a90 	vmov	s1, r3
 8007572:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007576:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800757a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800757e:	f025 050f 	bic.w	r5, r5, #15
 8007582:	ee07 5a10 	vmov	s14, r5
 8007586:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800758a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007596:	3e01      	subs	r6, #1
 8007598:	ea56 0200 	orrs.w	r2, r6, r0
 800759c:	ee07 5a10 	vmov	s14, r5
 80075a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80075a8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80075ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80075b0:	ee17 4a10 	vmov	r4, s14
 80075b4:	bf08      	it	eq
 80075b6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80075ba:	2c00      	cmp	r4, #0
 80075bc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80075c0:	f340 8184 	ble.w	80078cc <__ieee754_powf+0x50c>
 80075c4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80075c8:	f340 80fc 	ble.w	80077c4 <__ieee754_powf+0x404>
 80075cc:	eddf 7a67 	vldr	s15, [pc, #412]	; 800776c <__ieee754_powf+0x3ac>
 80075d0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80075d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80075d8:	e746      	b.n	8007468 <__ieee754_powf+0xa8>
 80075da:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80075de:	bf01      	itttt	eq
 80075e0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007784 <__ieee754_powf+0x3c4>
 80075e4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80075e8:	f06f 0217 	mvneq.w	r2, #23
 80075ec:	ee17 4a90 	vmoveq	r4, s15
 80075f0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80075f4:	bf18      	it	ne
 80075f6:	2200      	movne	r2, #0
 80075f8:	3b7f      	subs	r3, #127	; 0x7f
 80075fa:	4413      	add	r3, r2
 80075fc:	4a62      	ldr	r2, [pc, #392]	; (8007788 <__ieee754_powf+0x3c8>)
 80075fe:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007602:	4294      	cmp	r4, r2
 8007604:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007608:	dd06      	ble.n	8007618 <__ieee754_powf+0x258>
 800760a:	4a60      	ldr	r2, [pc, #384]	; (800778c <__ieee754_powf+0x3cc>)
 800760c:	4294      	cmp	r4, r2
 800760e:	f340 80a4 	ble.w	800775a <__ieee754_powf+0x39a>
 8007612:	3301      	adds	r3, #1
 8007614:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007618:	2400      	movs	r4, #0
 800761a:	4a5d      	ldr	r2, [pc, #372]	; (8007790 <__ieee754_powf+0x3d0>)
 800761c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007620:	ee07 1a90 	vmov	s15, r1
 8007624:	ed92 7a00 	vldr	s14, [r2]
 8007628:	4a5a      	ldr	r2, [pc, #360]	; (8007794 <__ieee754_powf+0x3d4>)
 800762a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800762e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007632:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007636:	1049      	asrs	r1, r1, #1
 8007638:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800763c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007640:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007644:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007648:	ee06 1a10 	vmov	s12, r1
 800764c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007650:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007654:	ee14 7a90 	vmov	r7, s9
 8007658:	4017      	ands	r7, r2
 800765a:	ee05 7a90 	vmov	s11, r7
 800765e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007666:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007798 <__ieee754_powf+0x3d8>
 800766a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800766e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007672:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007676:	eddf 6a49 	vldr	s13, [pc, #292]	; 800779c <__ieee754_powf+0x3dc>
 800767a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800767e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80077a0 <__ieee754_powf+0x3e0>
 8007682:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007686:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007774 <__ieee754_powf+0x3b4>
 800768a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800768e:	eddf 6a45 	vldr	s13, [pc, #276]	; 80077a4 <__ieee754_powf+0x3e4>
 8007692:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007696:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80077a8 <__ieee754_powf+0x3e8>
 800769a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800769e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80076a2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80076a6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80076aa:	eee5 6a07 	vfma.f32	s13, s10, s14
 80076ae:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80076b2:	eef0 7a45 	vmov.f32	s15, s10
 80076b6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee17 1a90 	vmov	r1, s15
 80076c2:	4011      	ands	r1, r2
 80076c4:	ee07 1a90 	vmov	s15, r1
 80076c8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80076cc:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80076d0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80076d4:	ee27 7a24 	vmul.f32	s14, s14, s9
 80076d8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80076dc:	eeb0 6a47 	vmov.f32	s12, s14
 80076e0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80076e4:	ee16 1a10 	vmov	r1, s12
 80076e8:	4011      	ands	r1, r2
 80076ea:	ee06 1a90 	vmov	s13, r1
 80076ee:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80076f2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80077ac <__ieee754_powf+0x3ec>
 80076f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80077b0 <__ieee754_powf+0x3f0>
 80076fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80076fe:	ee06 1a10 	vmov	s12, r1
 8007702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007706:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80077b4 <__ieee754_powf+0x3f4>
 800770a:	492b      	ldr	r1, [pc, #172]	; (80077b8 <__ieee754_powf+0x3f8>)
 800770c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007710:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007714:	edd1 7a00 	vldr	s15, [r1]
 8007718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800771c:	ee07 3a90 	vmov	s15, r3
 8007720:	4b26      	ldr	r3, [pc, #152]	; (80077bc <__ieee754_powf+0x3fc>)
 8007722:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007726:	eef0 7a47 	vmov.f32	s15, s14
 800772a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800772e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007732:	edd4 0a00 	vldr	s1, [r4]
 8007736:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800773a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773e:	ee17 3a90 	vmov	r3, s15
 8007742:	4013      	ands	r3, r2
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800774c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007750:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007754:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007758:	e70f      	b.n	800757a <__ieee754_powf+0x1ba>
 800775a:	2401      	movs	r4, #1
 800775c:	e75d      	b.n	800761a <__ieee754_powf+0x25a>
 800775e:	bf00      	nop
 8007760:	080084d1 	.word	0x080084d1
 8007764:	00000000 	.word	0x00000000
 8007768:	3f7ffff7 	.word	0x3f7ffff7
 800776c:	7149f2ca 	.word	0x7149f2ca
 8007770:	3f800007 	.word	0x3f800007
 8007774:	3eaaaaab 	.word	0x3eaaaaab
 8007778:	3fb8aa3b 	.word	0x3fb8aa3b
 800777c:	36eca570 	.word	0x36eca570
 8007780:	3fb8aa00 	.word	0x3fb8aa00
 8007784:	4b800000 	.word	0x4b800000
 8007788:	001cc471 	.word	0x001cc471
 800778c:	005db3d6 	.word	0x005db3d6
 8007790:	08008500 	.word	0x08008500
 8007794:	fffff000 	.word	0xfffff000
 8007798:	3e6c3255 	.word	0x3e6c3255
 800779c:	3e53f142 	.word	0x3e53f142
 80077a0:	3e8ba305 	.word	0x3e8ba305
 80077a4:	3edb6db7 	.word	0x3edb6db7
 80077a8:	3f19999a 	.word	0x3f19999a
 80077ac:	3f76384f 	.word	0x3f76384f
 80077b0:	3f763800 	.word	0x3f763800
 80077b4:	369dc3a0 	.word	0x369dc3a0
 80077b8:	08008510 	.word	0x08008510
 80077bc:	08008508 	.word	0x08008508
 80077c0:	3338aa3c 	.word	0x3338aa3c
 80077c4:	f040 8092 	bne.w	80078ec <__ieee754_powf+0x52c>
 80077c8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80077c0 <__ieee754_powf+0x400>
 80077cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077d0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80077d4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80077d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077dc:	f73f aef6 	bgt.w	80075cc <__ieee754_powf+0x20c>
 80077e0:	15db      	asrs	r3, r3, #23
 80077e2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80077e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80077ea:	4103      	asrs	r3, r0
 80077ec:	4423      	add	r3, r4
 80077ee:	4949      	ldr	r1, [pc, #292]	; (8007914 <__ieee754_powf+0x554>)
 80077f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80077f4:	3a7f      	subs	r2, #127	; 0x7f
 80077f6:	4111      	asrs	r1, r2
 80077f8:	ea23 0101 	bic.w	r1, r3, r1
 80077fc:	ee07 1a10 	vmov	s14, r1
 8007800:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007804:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007808:	f1c2 0217 	rsb	r2, r2, #23
 800780c:	4110      	asrs	r0, r2
 800780e:	2c00      	cmp	r4, #0
 8007810:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007814:	bfb8      	it	lt
 8007816:	4240      	neglt	r0, r0
 8007818:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800781c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8007918 <__ieee754_powf+0x558>
 8007820:	ee17 3a10 	vmov	r3, s14
 8007824:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007828:	f023 030f 	bic.w	r3, r3, #15
 800782c:	ee07 3a10 	vmov	s14, r3
 8007830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007834:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007838:	eddf 7a38 	vldr	s15, [pc, #224]	; 800791c <__ieee754_powf+0x55c>
 800783c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007840:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007844:	eddf 6a36 	vldr	s13, [pc, #216]	; 8007920 <__ieee754_powf+0x560>
 8007848:	eeb0 0a67 	vmov.f32	s0, s15
 800784c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007850:	eeb0 6a40 	vmov.f32	s12, s0
 8007854:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007858:	ee20 7a00 	vmul.f32	s14, s0, s0
 800785c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007860:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007924 <__ieee754_powf+0x564>
 8007864:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007928 <__ieee754_powf+0x568>
 8007868:	eea7 6a26 	vfma.f32	s12, s14, s13
 800786c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800792c <__ieee754_powf+0x56c>
 8007870:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007874:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8007930 <__ieee754_powf+0x570>
 8007878:	eea6 6a87 	vfma.f32	s12, s13, s14
 800787c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007934 <__ieee754_powf+0x574>
 8007880:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007884:	eeb0 6a40 	vmov.f32	s12, s0
 8007888:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800788c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007890:	eeb0 7a46 	vmov.f32	s14, s12
 8007894:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007898:	ee20 6a06 	vmul.f32	s12, s0, s12
 800789c:	eee0 7a27 	vfma.f32	s15, s0, s15
 80078a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80078a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80078ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80078b0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80078b4:	ee10 3a10 	vmov	r3, s0
 80078b8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80078bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078c0:	da1a      	bge.n	80078f8 <__ieee754_powf+0x538>
 80078c2:	f000 fd67 	bl	8008394 <scalbnf>
 80078c6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80078ca:	e5cd      	b.n	8007468 <__ieee754_powf+0xa8>
 80078cc:	4a1a      	ldr	r2, [pc, #104]	; (8007938 <__ieee754_powf+0x578>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	dd02      	ble.n	80078d8 <__ieee754_powf+0x518>
 80078d2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800793c <__ieee754_powf+0x57c>
 80078d6:	e67b      	b.n	80075d0 <__ieee754_powf+0x210>
 80078d8:	d108      	bne.n	80078ec <__ieee754_powf+0x52c>
 80078da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078de:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80078e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e6:	f6ff af7b 	blt.w	80077e0 <__ieee754_powf+0x420>
 80078ea:	e7f2      	b.n	80078d2 <__ieee754_powf+0x512>
 80078ec:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80078f0:	f73f af76 	bgt.w	80077e0 <__ieee754_powf+0x420>
 80078f4:	2000      	movs	r0, #0
 80078f6:	e78f      	b.n	8007818 <__ieee754_powf+0x458>
 80078f8:	ee00 3a10 	vmov	s0, r3
 80078fc:	e7e3      	b.n	80078c6 <__ieee754_powf+0x506>
 80078fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007902:	e5b1      	b.n	8007468 <__ieee754_powf+0xa8>
 8007904:	eeb0 0a68 	vmov.f32	s0, s17
 8007908:	e5ae      	b.n	8007468 <__ieee754_powf+0xa8>
 800790a:	eeb0 0a48 	vmov.f32	s0, s16
 800790e:	e5ab      	b.n	8007468 <__ieee754_powf+0xa8>
 8007910:	2600      	movs	r6, #0
 8007912:	e590      	b.n	8007436 <__ieee754_powf+0x76>
 8007914:	007fffff 	.word	0x007fffff
 8007918:	3f317218 	.word	0x3f317218
 800791c:	35bfbe8c 	.word	0x35bfbe8c
 8007920:	3f317200 	.word	0x3f317200
 8007924:	3331bb4c 	.word	0x3331bb4c
 8007928:	b5ddea0e 	.word	0xb5ddea0e
 800792c:	388ab355 	.word	0x388ab355
 8007930:	bb360b61 	.word	0xbb360b61
 8007934:	3e2aaaab 	.word	0x3e2aaaab
 8007938:	43160000 	.word	0x43160000
 800793c:	0da24260 	.word	0x0da24260

08007940 <__ieee754_rem_pio2f>:
 8007940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007942:	ee10 6a10 	vmov	r6, s0
 8007946:	4b8e      	ldr	r3, [pc, #568]	; (8007b80 <__ieee754_rem_pio2f+0x240>)
 8007948:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800794c:	429d      	cmp	r5, r3
 800794e:	b087      	sub	sp, #28
 8007950:	eef0 7a40 	vmov.f32	s15, s0
 8007954:	4604      	mov	r4, r0
 8007956:	dc05      	bgt.n	8007964 <__ieee754_rem_pio2f+0x24>
 8007958:	2300      	movs	r3, #0
 800795a:	ed80 0a00 	vstr	s0, [r0]
 800795e:	6043      	str	r3, [r0, #4]
 8007960:	2000      	movs	r0, #0
 8007962:	e01a      	b.n	800799a <__ieee754_rem_pio2f+0x5a>
 8007964:	4b87      	ldr	r3, [pc, #540]	; (8007b84 <__ieee754_rem_pio2f+0x244>)
 8007966:	429d      	cmp	r5, r3
 8007968:	dc46      	bgt.n	80079f8 <__ieee754_rem_pio2f+0xb8>
 800796a:	2e00      	cmp	r6, #0
 800796c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007b88 <__ieee754_rem_pio2f+0x248>
 8007970:	4b86      	ldr	r3, [pc, #536]	; (8007b8c <__ieee754_rem_pio2f+0x24c>)
 8007972:	f025 050f 	bic.w	r5, r5, #15
 8007976:	dd1f      	ble.n	80079b8 <__ieee754_rem_pio2f+0x78>
 8007978:	429d      	cmp	r5, r3
 800797a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800797e:	d00e      	beq.n	800799e <__ieee754_rem_pio2f+0x5e>
 8007980:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007b90 <__ieee754_rem_pio2f+0x250>
 8007984:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007988:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800798c:	ed80 0a00 	vstr	s0, [r0]
 8007990:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007994:	2001      	movs	r0, #1
 8007996:	edc4 7a01 	vstr	s15, [r4, #4]
 800799a:	b007      	add	sp, #28
 800799c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007b94 <__ieee754_rem_pio2f+0x254>
 80079a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007b98 <__ieee754_rem_pio2f+0x258>
 80079a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80079aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80079ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079b2:	edc0 6a00 	vstr	s13, [r0]
 80079b6:	e7eb      	b.n	8007990 <__ieee754_rem_pio2f+0x50>
 80079b8:	429d      	cmp	r5, r3
 80079ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80079be:	d00e      	beq.n	80079de <__ieee754_rem_pio2f+0x9e>
 80079c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007b90 <__ieee754_rem_pio2f+0x250>
 80079c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80079c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80079cc:	ed80 0a00 	vstr	s0, [r0]
 80079d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80079dc:	e7dd      	b.n	800799a <__ieee754_rem_pio2f+0x5a>
 80079de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007b94 <__ieee754_rem_pio2f+0x254>
 80079e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007b98 <__ieee754_rem_pio2f+0x258>
 80079e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80079ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80079ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079f2:	edc0 6a00 	vstr	s13, [r0]
 80079f6:	e7eb      	b.n	80079d0 <__ieee754_rem_pio2f+0x90>
 80079f8:	4b68      	ldr	r3, [pc, #416]	; (8007b9c <__ieee754_rem_pio2f+0x25c>)
 80079fa:	429d      	cmp	r5, r3
 80079fc:	dc72      	bgt.n	8007ae4 <__ieee754_rem_pio2f+0x1a4>
 80079fe:	f000 fc11 	bl	8008224 <fabsf>
 8007a02:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007ba0 <__ieee754_rem_pio2f+0x260>
 8007a06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007a0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a16:	ee17 0a90 	vmov	r0, s15
 8007a1a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007b88 <__ieee754_rem_pio2f+0x248>
 8007a1e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007a22:	281f      	cmp	r0, #31
 8007a24:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007b90 <__ieee754_rem_pio2f+0x250>
 8007a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2c:	eeb1 6a47 	vneg.f32	s12, s14
 8007a30:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007a34:	ee16 2a90 	vmov	r2, s13
 8007a38:	dc1c      	bgt.n	8007a74 <__ieee754_rem_pio2f+0x134>
 8007a3a:	495a      	ldr	r1, [pc, #360]	; (8007ba4 <__ieee754_rem_pio2f+0x264>)
 8007a3c:	1e47      	subs	r7, r0, #1
 8007a3e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007a42:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007a46:	428b      	cmp	r3, r1
 8007a48:	d014      	beq.n	8007a74 <__ieee754_rem_pio2f+0x134>
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	ed94 7a00 	vldr	s14, [r4]
 8007a50:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007a54:	2e00      	cmp	r6, #0
 8007a56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a5a:	ed84 0a01 	vstr	s0, [r4, #4]
 8007a5e:	da9c      	bge.n	800799a <__ieee754_rem_pio2f+0x5a>
 8007a60:	eeb1 7a47 	vneg.f32	s14, s14
 8007a64:	eeb1 0a40 	vneg.f32	s0, s0
 8007a68:	ed84 7a00 	vstr	s14, [r4]
 8007a6c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007a70:	4240      	negs	r0, r0
 8007a72:	e792      	b.n	800799a <__ieee754_rem_pio2f+0x5a>
 8007a74:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007a78:	15eb      	asrs	r3, r5, #23
 8007a7a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007a7e:	2d08      	cmp	r5, #8
 8007a80:	dde3      	ble.n	8007a4a <__ieee754_rem_pio2f+0x10a>
 8007a82:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007b94 <__ieee754_rem_pio2f+0x254>
 8007a86:	eef0 6a40 	vmov.f32	s13, s0
 8007a8a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007a8e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007a92:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007a96:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007b98 <__ieee754_rem_pio2f+0x258>
 8007a9a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8007a9e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007aa2:	eef0 7a40 	vmov.f32	s15, s0
 8007aa6:	ee15 2a90 	vmov	r2, s11
 8007aaa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007aae:	1a5b      	subs	r3, r3, r1
 8007ab0:	2b19      	cmp	r3, #25
 8007ab2:	dc04      	bgt.n	8007abe <__ieee754_rem_pio2f+0x17e>
 8007ab4:	edc4 5a00 	vstr	s11, [r4]
 8007ab8:	eeb0 0a66 	vmov.f32	s0, s13
 8007abc:	e7c6      	b.n	8007a4c <__ieee754_rem_pio2f+0x10c>
 8007abe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007ba8 <__ieee754_rem_pio2f+0x268>
 8007ac2:	eeb0 0a66 	vmov.f32	s0, s13
 8007ac6:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007aca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007ace:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007bac <__ieee754_rem_pio2f+0x26c>
 8007ad2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007ad6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007ada:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007ade:	ed84 7a00 	vstr	s14, [r4]
 8007ae2:	e7b3      	b.n	8007a4c <__ieee754_rem_pio2f+0x10c>
 8007ae4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007ae8:	db06      	blt.n	8007af8 <__ieee754_rem_pio2f+0x1b8>
 8007aea:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007aee:	edc0 7a01 	vstr	s15, [r0, #4]
 8007af2:	edc0 7a00 	vstr	s15, [r0]
 8007af6:	e733      	b.n	8007960 <__ieee754_rem_pio2f+0x20>
 8007af8:	15ea      	asrs	r2, r5, #23
 8007afa:	3a86      	subs	r2, #134	; 0x86
 8007afc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007b00:	ee07 3a90 	vmov	s15, r3
 8007b04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b08:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007bb0 <__ieee754_rem_pio2f+0x270>
 8007b0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b14:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007b18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b28:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007b2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b38:	edcd 7a05 	vstr	s15, [sp, #20]
 8007b3c:	d11e      	bne.n	8007b7c <__ieee754_rem_pio2f+0x23c>
 8007b3e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b46:	bf14      	ite	ne
 8007b48:	2302      	movne	r3, #2
 8007b4a:	2301      	moveq	r3, #1
 8007b4c:	4919      	ldr	r1, [pc, #100]	; (8007bb4 <__ieee754_rem_pio2f+0x274>)
 8007b4e:	9101      	str	r1, [sp, #4]
 8007b50:	2102      	movs	r1, #2
 8007b52:	9100      	str	r1, [sp, #0]
 8007b54:	a803      	add	r0, sp, #12
 8007b56:	4621      	mov	r1, r4
 8007b58:	f000 f892 	bl	8007c80 <__kernel_rem_pio2f>
 8007b5c:	2e00      	cmp	r6, #0
 8007b5e:	f6bf af1c 	bge.w	800799a <__ieee754_rem_pio2f+0x5a>
 8007b62:	edd4 7a00 	vldr	s15, [r4]
 8007b66:	eef1 7a67 	vneg.f32	s15, s15
 8007b6a:	edc4 7a00 	vstr	s15, [r4]
 8007b6e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007b72:	eef1 7a67 	vneg.f32	s15, s15
 8007b76:	edc4 7a01 	vstr	s15, [r4, #4]
 8007b7a:	e779      	b.n	8007a70 <__ieee754_rem_pio2f+0x130>
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e7e5      	b.n	8007b4c <__ieee754_rem_pio2f+0x20c>
 8007b80:	3f490fd8 	.word	0x3f490fd8
 8007b84:	4016cbe3 	.word	0x4016cbe3
 8007b88:	3fc90f80 	.word	0x3fc90f80
 8007b8c:	3fc90fd0 	.word	0x3fc90fd0
 8007b90:	37354443 	.word	0x37354443
 8007b94:	37354400 	.word	0x37354400
 8007b98:	2e85a308 	.word	0x2e85a308
 8007b9c:	43490f80 	.word	0x43490f80
 8007ba0:	3f22f984 	.word	0x3f22f984
 8007ba4:	08008518 	.word	0x08008518
 8007ba8:	2e85a300 	.word	0x2e85a300
 8007bac:	248d3132 	.word	0x248d3132
 8007bb0:	43800000 	.word	0x43800000
 8007bb4:	08008598 	.word	0x08008598

08007bb8 <__ieee754_sqrtf>:
 8007bb8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007bbc:	4770      	bx	lr
	...

08007bc0 <__kernel_cosf>:
 8007bc0:	ee10 3a10 	vmov	r3, s0
 8007bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bc8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007bcc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007bd0:	da05      	bge.n	8007bde <__kernel_cosf+0x1e>
 8007bd2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007bd6:	ee17 2a90 	vmov	r2, s15
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	d03d      	beq.n	8007c5a <__kernel_cosf+0x9a>
 8007bde:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007be2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007c60 <__kernel_cosf+0xa0>
 8007be6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007c64 <__kernel_cosf+0xa4>
 8007bea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007c68 <__kernel_cosf+0xa8>
 8007bee:	4a1f      	ldr	r2, [pc, #124]	; (8007c6c <__kernel_cosf+0xac>)
 8007bf0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007c70 <__kernel_cosf+0xb0>
 8007bfa:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007bfe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007c74 <__kernel_cosf+0xb4>
 8007c02:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007c06:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007c78 <__kernel_cosf+0xb8>
 8007c0a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007c0e:	eeb0 7a66 	vmov.f32	s14, s13
 8007c12:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007c16:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007c1a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007c1e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007c22:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007c26:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007c2a:	dc04      	bgt.n	8007c36 <__kernel_cosf+0x76>
 8007c2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007c30:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007c34:	4770      	bx	lr
 8007c36:	4a11      	ldr	r2, [pc, #68]	; (8007c7c <__kernel_cosf+0xbc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	bfda      	itte	le
 8007c3c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007c40:	ee06 3a90 	vmovle	s13, r3
 8007c44:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007c48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c4c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007c50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c54:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c58:	4770      	bx	lr
 8007c5a:	eeb0 0a46 	vmov.f32	s0, s12
 8007c5e:	4770      	bx	lr
 8007c60:	ad47d74e 	.word	0xad47d74e
 8007c64:	310f74f6 	.word	0x310f74f6
 8007c68:	3d2aaaab 	.word	0x3d2aaaab
 8007c6c:	3e999999 	.word	0x3e999999
 8007c70:	b493f27c 	.word	0xb493f27c
 8007c74:	37d00d01 	.word	0x37d00d01
 8007c78:	bab60b61 	.word	0xbab60b61
 8007c7c:	3f480000 	.word	0x3f480000

08007c80 <__kernel_rem_pio2f>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	ed2d 8b04 	vpush	{d8-d9}
 8007c88:	b0d7      	sub	sp, #348	; 0x15c
 8007c8a:	4616      	mov	r6, r2
 8007c8c:	4698      	mov	r8, r3
 8007c8e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007c90:	4bbb      	ldr	r3, [pc, #748]	; (8007f80 <__kernel_rem_pio2f+0x300>)
 8007c92:	9001      	str	r0, [sp, #4]
 8007c94:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007c98:	1d33      	adds	r3, r6, #4
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	f108 39ff 	add.w	r9, r8, #4294967295
 8007ca0:	db29      	blt.n	8007cf6 <__kernel_rem_pio2f+0x76>
 8007ca2:	1ef1      	subs	r1, r6, #3
 8007ca4:	bf48      	it	mi
 8007ca6:	1d31      	addmi	r1, r6, #4
 8007ca8:	10c9      	asrs	r1, r1, #3
 8007caa:	1c4c      	adds	r4, r1, #1
 8007cac:	00e3      	lsls	r3, r4, #3
 8007cae:	9302      	str	r3, [sp, #8]
 8007cb0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007cb2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007f90 <__kernel_rem_pio2f+0x310>
 8007cb6:	eba1 0009 	sub.w	r0, r1, r9
 8007cba:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007cbe:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8007cc2:	eb07 0c09 	add.w	ip, r7, r9
 8007cc6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4563      	cmp	r3, ip
 8007cce:	dd14      	ble.n	8007cfa <__kernel_rem_pio2f+0x7a>
 8007cd0:	ab1a      	add	r3, sp, #104	; 0x68
 8007cd2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007cd6:	46cc      	mov	ip, r9
 8007cd8:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007cdc:	f1c8 0b01 	rsb	fp, r8, #1
 8007ce0:	eb0b 020c 	add.w	r2, fp, ip
 8007ce4:	4297      	cmp	r7, r2
 8007ce6:	db27      	blt.n	8007d38 <__kernel_rem_pio2f+0xb8>
 8007ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007cec:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007f90 <__kernel_rem_pio2f+0x310>
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	e016      	b.n	8007d24 <__kernel_rem_pio2f+0xa4>
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	e7d7      	b.n	8007caa <__kernel_rem_pio2f+0x2a>
 8007cfa:	42d8      	cmn	r0, r3
 8007cfc:	bf5d      	ittte	pl
 8007cfe:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007d02:	ee07 2a90 	vmovpl	s15, r2
 8007d06:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007d0a:	eef0 7a47 	vmovmi.f32	s15, s14
 8007d0e:	ecea 7a01 	vstmia	sl!, {s15}
 8007d12:	3301      	adds	r3, #1
 8007d14:	e7da      	b.n	8007ccc <__kernel_rem_pio2f+0x4c>
 8007d16:	ecfe 6a01 	vldmia	lr!, {s13}
 8007d1a:	ed90 7a00 	vldr	s14, [r0]
 8007d1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d22:	3201      	adds	r2, #1
 8007d24:	454a      	cmp	r2, r9
 8007d26:	f1a0 0004 	sub.w	r0, r0, #4
 8007d2a:	ddf4      	ble.n	8007d16 <__kernel_rem_pio2f+0x96>
 8007d2c:	ecea 7a01 	vstmia	sl!, {s15}
 8007d30:	3304      	adds	r3, #4
 8007d32:	f10c 0c01 	add.w	ip, ip, #1
 8007d36:	e7d3      	b.n	8007ce0 <__kernel_rem_pio2f+0x60>
 8007d38:	ab06      	add	r3, sp, #24
 8007d3a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007d3e:	9304      	str	r3, [sp, #16]
 8007d40:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007d42:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007f8c <__kernel_rem_pio2f+0x30c>
 8007d46:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007f88 <__kernel_rem_pio2f+0x308>
 8007d4a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007d4e:	9303      	str	r3, [sp, #12]
 8007d50:	46ba      	mov	sl, r7
 8007d52:	ab56      	add	r3, sp, #344	; 0x158
 8007d54:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007d58:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007d5c:	ab06      	add	r3, sp, #24
 8007d5e:	4618      	mov	r0, r3
 8007d60:	4652      	mov	r2, sl
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	dc51      	bgt.n	8007e0a <__kernel_rem_pio2f+0x18a>
 8007d66:	4620      	mov	r0, r4
 8007d68:	9305      	str	r3, [sp, #20]
 8007d6a:	f000 fb13 	bl	8008394 <scalbnf>
 8007d6e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d72:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007d76:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007d7a:	f000 fa67 	bl	800824c <floorf>
 8007d7e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007d82:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	9b05      	ldr	r3, [sp, #20]
 8007d8a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007d8e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007d92:	edcd 7a00 	vstr	s15, [sp]
 8007d96:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007d9a:	dd4b      	ble.n	8007e34 <__kernel_rem_pio2f+0x1b4>
 8007d9c:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007da0:	aa06      	add	r2, sp, #24
 8007da2:	f1c4 0e08 	rsb	lr, r4, #8
 8007da6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007daa:	ee17 1a90 	vmov	r1, s15
 8007dae:	fa42 f00e 	asr.w	r0, r2, lr
 8007db2:	4401      	add	r1, r0
 8007db4:	9100      	str	r1, [sp, #0]
 8007db6:	fa00 f00e 	lsl.w	r0, r0, lr
 8007dba:	a906      	add	r1, sp, #24
 8007dbc:	1a12      	subs	r2, r2, r0
 8007dbe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007dc2:	f1c4 0007 	rsb	r0, r4, #7
 8007dc6:	fa42 fb00 	asr.w	fp, r2, r0
 8007dca:	f1bb 0f00 	cmp.w	fp, #0
 8007dce:	dd43      	ble.n	8007e58 <__kernel_rem_pio2f+0x1d8>
 8007dd0:	9a00      	ldr	r2, [sp, #0]
 8007dd2:	f04f 0e00 	mov.w	lr, #0
 8007dd6:	3201      	adds	r2, #1
 8007dd8:	9200      	str	r2, [sp, #0]
 8007dda:	4670      	mov	r0, lr
 8007ddc:	45f2      	cmp	sl, lr
 8007dde:	dc6c      	bgt.n	8007eba <__kernel_rem_pio2f+0x23a>
 8007de0:	2c00      	cmp	r4, #0
 8007de2:	dd04      	ble.n	8007dee <__kernel_rem_pio2f+0x16e>
 8007de4:	2c01      	cmp	r4, #1
 8007de6:	d079      	beq.n	8007edc <__kernel_rem_pio2f+0x25c>
 8007de8:	2c02      	cmp	r4, #2
 8007dea:	f000 8082 	beq.w	8007ef2 <__kernel_rem_pio2f+0x272>
 8007dee:	f1bb 0f02 	cmp.w	fp, #2
 8007df2:	d131      	bne.n	8007e58 <__kernel_rem_pio2f+0x1d8>
 8007df4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007df8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007dfc:	b360      	cbz	r0, 8007e58 <__kernel_rem_pio2f+0x1d8>
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fac8 	bl	8008394 <scalbnf>
 8007e04:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007e08:	e026      	b.n	8007e58 <__kernel_rem_pio2f+0x1d8>
 8007e0a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007e0e:	3a01      	subs	r2, #1
 8007e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e14:	a942      	add	r1, sp, #264	; 0x108
 8007e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e1a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007e1e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007e22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e26:	eca0 0a01 	vstmia	r0!, {s0}
 8007e2a:	ed9c 0a00 	vldr	s0, [ip]
 8007e2e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007e32:	e796      	b.n	8007d62 <__kernel_rem_pio2f+0xe2>
 8007e34:	d107      	bne.n	8007e46 <__kernel_rem_pio2f+0x1c6>
 8007e36:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007e3a:	a906      	add	r1, sp, #24
 8007e3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e40:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007e44:	e7c1      	b.n	8007dca <__kernel_rem_pio2f+0x14a>
 8007e46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007e4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e52:	da2f      	bge.n	8007eb4 <__kernel_rem_pio2f+0x234>
 8007e54:	f04f 0b00 	mov.w	fp, #0
 8007e58:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e60:	f040 8098 	bne.w	8007f94 <__kernel_rem_pio2f+0x314>
 8007e64:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e68:	469c      	mov	ip, r3
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	45bc      	cmp	ip, r7
 8007e6e:	da48      	bge.n	8007f02 <__kernel_rem_pio2f+0x282>
 8007e70:	2a00      	cmp	r2, #0
 8007e72:	d05f      	beq.n	8007f34 <__kernel_rem_pio2f+0x2b4>
 8007e74:	aa06      	add	r2, sp, #24
 8007e76:	3c08      	subs	r4, #8
 8007e78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	d07d      	beq.n	8007f7c <__kernel_rem_pio2f+0x2fc>
 8007e80:	4620      	mov	r0, r4
 8007e82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	f000 fa84 	bl	8008394 <scalbnf>
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007f8c <__kernel_rem_pio2f+0x30c>
 8007e92:	4619      	mov	r1, r3
 8007e94:	2900      	cmp	r1, #0
 8007e96:	f280 80af 	bge.w	8007ff8 <__kernel_rem_pio2f+0x378>
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	2400      	movs	r4, #0
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f2c0 80d0 	blt.w	8008044 <__kernel_rem_pio2f+0x3c4>
 8007ea4:	a942      	add	r1, sp, #264	; 0x108
 8007ea6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007eaa:	4a36      	ldr	r2, [pc, #216]	; (8007f84 <__kernel_rem_pio2f+0x304>)
 8007eac:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007f90 <__kernel_rem_pio2f+0x310>
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	e0bb      	b.n	800802c <__kernel_rem_pio2f+0x3ac>
 8007eb4:	f04f 0b02 	mov.w	fp, #2
 8007eb8:	e78a      	b.n	8007dd0 <__kernel_rem_pio2f+0x150>
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	b948      	cbnz	r0, 8007ed2 <__kernel_rem_pio2f+0x252>
 8007ebe:	b11a      	cbz	r2, 8007ec8 <__kernel_rem_pio2f+0x248>
 8007ec0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f10e 0e01 	add.w	lr, lr, #1
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4610      	mov	r0, r2
 8007ed0:	e784      	b.n	8007ddc <__kernel_rem_pio2f+0x15c>
 8007ed2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	4602      	mov	r2, r0
 8007eda:	e7f5      	b.n	8007ec8 <__kernel_rem_pio2f+0x248>
 8007edc:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007ee0:	ab06      	add	r3, sp, #24
 8007ee2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eea:	aa06      	add	r2, sp, #24
 8007eec:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007ef0:	e77d      	b.n	8007dee <__kernel_rem_pio2f+0x16e>
 8007ef2:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007ef6:	ab06      	add	r3, sp, #24
 8007ef8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f00:	e7f3      	b.n	8007eea <__kernel_rem_pio2f+0x26a>
 8007f02:	a906      	add	r1, sp, #24
 8007f04:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007f08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f0c:	4302      	orrs	r2, r0
 8007f0e:	e7ad      	b.n	8007e6c <__kernel_rem_pio2f+0x1ec>
 8007f10:	3001      	adds	r0, #1
 8007f12:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	d0fa      	beq.n	8007f10 <__kernel_rem_pio2f+0x290>
 8007f1a:	a91a      	add	r1, sp, #104	; 0x68
 8007f1c:	eb0a 0208 	add.w	r2, sl, r8
 8007f20:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007f24:	f10a 0301 	add.w	r3, sl, #1
 8007f28:	eb0a 0100 	add.w	r1, sl, r0
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	da04      	bge.n	8007f3a <__kernel_rem_pio2f+0x2ba>
 8007f30:	468a      	mov	sl, r1
 8007f32:	e70e      	b.n	8007d52 <__kernel_rem_pio2f+0xd2>
 8007f34:	9b04      	ldr	r3, [sp, #16]
 8007f36:	2001      	movs	r0, #1
 8007f38:	e7eb      	b.n	8007f12 <__kernel_rem_pio2f+0x292>
 8007f3a:	9803      	ldr	r0, [sp, #12]
 8007f3c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007f40:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007f44:	9000      	str	r0, [sp, #0]
 8007f46:	ee07 0a90 	vmov	s15, r0
 8007f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f4e:	2000      	movs	r0, #0
 8007f50:	ece2 7a01 	vstmia	r2!, {s15}
 8007f54:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007f90 <__kernel_rem_pio2f+0x310>
 8007f58:	4696      	mov	lr, r2
 8007f5a:	4548      	cmp	r0, r9
 8007f5c:	dd06      	ble.n	8007f6c <__kernel_rem_pio2f+0x2ec>
 8007f5e:	a842      	add	r0, sp, #264	; 0x108
 8007f60:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007f64:	edc0 7a00 	vstr	s15, [r0]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	e7df      	b.n	8007f2c <__kernel_rem_pio2f+0x2ac>
 8007f6c:	ecfc 6a01 	vldmia	ip!, {s13}
 8007f70:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007f74:	3001      	adds	r0, #1
 8007f76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007f7a:	e7ee      	b.n	8007f5a <__kernel_rem_pio2f+0x2da>
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	e779      	b.n	8007e74 <__kernel_rem_pio2f+0x1f4>
 8007f80:	080088dc 	.word	0x080088dc
 8007f84:	080088b0 	.word	0x080088b0
 8007f88:	43800000 	.word	0x43800000
 8007f8c:	3b800000 	.word	0x3b800000
 8007f90:	00000000 	.word	0x00000000
 8007f94:	9b02      	ldr	r3, [sp, #8]
 8007f96:	eeb0 0a48 	vmov.f32	s0, s16
 8007f9a:	1b98      	subs	r0, r3, r6
 8007f9c:	f000 f9fa 	bl	8008394 <scalbnf>
 8007fa0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007f88 <__kernel_rem_pio2f+0x308>
 8007fa4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fac:	db1b      	blt.n	8007fe6 <__kernel_rem_pio2f+0x366>
 8007fae:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007f8c <__kernel_rem_pio2f+0x30c>
 8007fb2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007fb6:	aa06      	add	r2, sp, #24
 8007fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fbc:	a906      	add	r1, sp, #24
 8007fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fc2:	3408      	adds	r4, #8
 8007fc4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fcc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007fd0:	ee10 3a10 	vmov	r3, s0
 8007fd4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007fd8:	ee17 2a90 	vmov	r2, s15
 8007fdc:	f10a 0301 	add.w	r3, sl, #1
 8007fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007fe4:	e74c      	b.n	8007e80 <__kernel_rem_pio2f+0x200>
 8007fe6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007fea:	aa06      	add	r2, sp, #24
 8007fec:	ee10 3a10 	vmov	r3, s0
 8007ff0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007ff4:	4653      	mov	r3, sl
 8007ff6:	e743      	b.n	8007e80 <__kernel_rem_pio2f+0x200>
 8007ff8:	aa42      	add	r2, sp, #264	; 0x108
 8007ffa:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007ffe:	aa06      	add	r2, sp, #24
 8008000:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	ee07 2a90 	vmov	s15, r2
 800800a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800800e:	3901      	subs	r1, #1
 8008010:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008014:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008018:	edc0 7a00 	vstr	s15, [r0]
 800801c:	e73a      	b.n	8007e94 <__kernel_rem_pio2f+0x214>
 800801e:	ecf2 6a01 	vldmia	r2!, {s13}
 8008022:	ecb6 7a01 	vldmia	r6!, {s14}
 8008026:	eee6 7a87 	vfma.f32	s15, s13, s14
 800802a:	3101      	adds	r1, #1
 800802c:	42b9      	cmp	r1, r7
 800802e:	dc01      	bgt.n	8008034 <__kernel_rem_pio2f+0x3b4>
 8008030:	428c      	cmp	r4, r1
 8008032:	daf4      	bge.n	800801e <__kernel_rem_pio2f+0x39e>
 8008034:	aa56      	add	r2, sp, #344	; 0x158
 8008036:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800803a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800803e:	3801      	subs	r0, #1
 8008040:	3401      	adds	r4, #1
 8008042:	e72c      	b.n	8007e9e <__kernel_rem_pio2f+0x21e>
 8008044:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008046:	2a02      	cmp	r2, #2
 8008048:	dc0a      	bgt.n	8008060 <__kernel_rem_pio2f+0x3e0>
 800804a:	2a00      	cmp	r2, #0
 800804c:	dc61      	bgt.n	8008112 <__kernel_rem_pio2f+0x492>
 800804e:	d03c      	beq.n	80080ca <__kernel_rem_pio2f+0x44a>
 8008050:	9b00      	ldr	r3, [sp, #0]
 8008052:	f003 0007 	and.w	r0, r3, #7
 8008056:	b057      	add	sp, #348	; 0x15c
 8008058:	ecbd 8b04 	vpop	{d8-d9}
 800805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008060:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008062:	2a03      	cmp	r2, #3
 8008064:	d1f4      	bne.n	8008050 <__kernel_rem_pio2f+0x3d0>
 8008066:	aa2e      	add	r2, sp, #184	; 0xb8
 8008068:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800806c:	4608      	mov	r0, r1
 800806e:	461c      	mov	r4, r3
 8008070:	2c00      	cmp	r4, #0
 8008072:	f1a0 0004 	sub.w	r0, r0, #4
 8008076:	dc59      	bgt.n	800812c <__kernel_rem_pio2f+0x4ac>
 8008078:	4618      	mov	r0, r3
 800807a:	2801      	cmp	r0, #1
 800807c:	f1a1 0104 	sub.w	r1, r1, #4
 8008080:	dc64      	bgt.n	800814c <__kernel_rem_pio2f+0x4cc>
 8008082:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007f90 <__kernel_rem_pio2f+0x310>
 8008086:	2b01      	cmp	r3, #1
 8008088:	dc70      	bgt.n	800816c <__kernel_rem_pio2f+0x4ec>
 800808a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800808e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008092:	f1bb 0f00 	cmp.w	fp, #0
 8008096:	d172      	bne.n	800817e <__kernel_rem_pio2f+0x4fe>
 8008098:	edc5 6a00 	vstr	s13, [r5]
 800809c:	ed85 7a01 	vstr	s14, [r5, #4]
 80080a0:	edc5 7a02 	vstr	s15, [r5, #8]
 80080a4:	e7d4      	b.n	8008050 <__kernel_rem_pio2f+0x3d0>
 80080a6:	aa2e      	add	r2, sp, #184	; 0xb8
 80080a8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80080ac:	ed91 7a00 	vldr	s14, [r1]
 80080b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080b4:	3b01      	subs	r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	daf5      	bge.n	80080a6 <__kernel_rem_pio2f+0x426>
 80080ba:	f1bb 0f00 	cmp.w	fp, #0
 80080be:	d001      	beq.n	80080c4 <__kernel_rem_pio2f+0x444>
 80080c0:	eef1 7a67 	vneg.f32	s15, s15
 80080c4:	edc5 7a00 	vstr	s15, [r5]
 80080c8:	e7c2      	b.n	8008050 <__kernel_rem_pio2f+0x3d0>
 80080ca:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007f90 <__kernel_rem_pio2f+0x310>
 80080ce:	e7f2      	b.n	80080b6 <__kernel_rem_pio2f+0x436>
 80080d0:	aa2e      	add	r2, sp, #184	; 0xb8
 80080d2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80080d6:	edd0 7a00 	vldr	s15, [r0]
 80080da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080de:	3901      	subs	r1, #1
 80080e0:	2900      	cmp	r1, #0
 80080e2:	daf5      	bge.n	80080d0 <__kernel_rem_pio2f+0x450>
 80080e4:	f1bb 0f00 	cmp.w	fp, #0
 80080e8:	d017      	beq.n	800811a <__kernel_rem_pio2f+0x49a>
 80080ea:	eef1 7a47 	vneg.f32	s15, s14
 80080ee:	edc5 7a00 	vstr	s15, [r5]
 80080f2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80080f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080fa:	a82f      	add	r0, sp, #188	; 0xbc
 80080fc:	2101      	movs	r1, #1
 80080fe:	428b      	cmp	r3, r1
 8008100:	da0e      	bge.n	8008120 <__kernel_rem_pio2f+0x4a0>
 8008102:	f1bb 0f00 	cmp.w	fp, #0
 8008106:	d001      	beq.n	800810c <__kernel_rem_pio2f+0x48c>
 8008108:	eef1 7a67 	vneg.f32	s15, s15
 800810c:	edc5 7a01 	vstr	s15, [r5, #4]
 8008110:	e79e      	b.n	8008050 <__kernel_rem_pio2f+0x3d0>
 8008112:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007f90 <__kernel_rem_pio2f+0x310>
 8008116:	4619      	mov	r1, r3
 8008118:	e7e2      	b.n	80080e0 <__kernel_rem_pio2f+0x460>
 800811a:	eef0 7a47 	vmov.f32	s15, s14
 800811e:	e7e6      	b.n	80080ee <__kernel_rem_pio2f+0x46e>
 8008120:	ecb0 7a01 	vldmia	r0!, {s14}
 8008124:	3101      	adds	r1, #1
 8008126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800812a:	e7e8      	b.n	80080fe <__kernel_rem_pio2f+0x47e>
 800812c:	edd0 7a00 	vldr	s15, [r0]
 8008130:	edd0 6a01 	vldr	s13, [r0, #4]
 8008134:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008138:	3c01      	subs	r4, #1
 800813a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800813e:	ed80 7a00 	vstr	s14, [r0]
 8008142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008146:	edc0 7a01 	vstr	s15, [r0, #4]
 800814a:	e791      	b.n	8008070 <__kernel_rem_pio2f+0x3f0>
 800814c:	edd1 7a00 	vldr	s15, [r1]
 8008150:	edd1 6a01 	vldr	s13, [r1, #4]
 8008154:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008158:	3801      	subs	r0, #1
 800815a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800815e:	ed81 7a00 	vstr	s14, [r1]
 8008162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008166:	edc1 7a01 	vstr	s15, [r1, #4]
 800816a:	e786      	b.n	800807a <__kernel_rem_pio2f+0x3fa>
 800816c:	aa2e      	add	r2, sp, #184	; 0xb8
 800816e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008172:	ed91 7a00 	vldr	s14, [r1]
 8008176:	3b01      	subs	r3, #1
 8008178:	ee77 7a87 	vadd.f32	s15, s15, s14
 800817c:	e783      	b.n	8008086 <__kernel_rem_pio2f+0x406>
 800817e:	eef1 6a66 	vneg.f32	s13, s13
 8008182:	eeb1 7a47 	vneg.f32	s14, s14
 8008186:	edc5 6a00 	vstr	s13, [r5]
 800818a:	ed85 7a01 	vstr	s14, [r5, #4]
 800818e:	eef1 7a67 	vneg.f32	s15, s15
 8008192:	e785      	b.n	80080a0 <__kernel_rem_pio2f+0x420>

08008194 <__kernel_sinf>:
 8008194:	ee10 3a10 	vmov	r3, s0
 8008198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800819c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80081a0:	da04      	bge.n	80081ac <__kernel_sinf+0x18>
 80081a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80081a6:	ee17 3a90 	vmov	r3, s15
 80081aa:	b35b      	cbz	r3, 8008204 <__kernel_sinf+0x70>
 80081ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 80081b0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008208 <__kernel_sinf+0x74>
 80081b4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800820c <__kernel_sinf+0x78>
 80081b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80081bc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008210 <__kernel_sinf+0x7c>
 80081c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80081c4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008214 <__kernel_sinf+0x80>
 80081c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80081cc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008218 <__kernel_sinf+0x84>
 80081d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80081d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80081d8:	b930      	cbnz	r0, 80081e8 <__kernel_sinf+0x54>
 80081da:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800821c <__kernel_sinf+0x88>
 80081de:	eea7 6a27 	vfma.f32	s12, s14, s15
 80081e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80081e6:	4770      	bx	lr
 80081e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80081ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80081f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80081f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80081f8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008220 <__kernel_sinf+0x8c>
 80081fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008200:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	2f2ec9d3 	.word	0x2f2ec9d3
 800820c:	b2d72f34 	.word	0xb2d72f34
 8008210:	3638ef1b 	.word	0x3638ef1b
 8008214:	b9500d01 	.word	0xb9500d01
 8008218:	3c088889 	.word	0x3c088889
 800821c:	be2aaaab 	.word	0xbe2aaaab
 8008220:	3e2aaaab 	.word	0x3e2aaaab

08008224 <fabsf>:
 8008224:	ee10 3a10 	vmov	r3, s0
 8008228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800822c:	ee00 3a10 	vmov	s0, r3
 8008230:	4770      	bx	lr

08008232 <finitef>:
 8008232:	b082      	sub	sp, #8
 8008234:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008238:	9801      	ldr	r0, [sp, #4]
 800823a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800823e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008242:	bfac      	ite	ge
 8008244:	2000      	movge	r0, #0
 8008246:	2001      	movlt	r0, #1
 8008248:	b002      	add	sp, #8
 800824a:	4770      	bx	lr

0800824c <floorf>:
 800824c:	ee10 3a10 	vmov	r3, s0
 8008250:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008254:	3a7f      	subs	r2, #127	; 0x7f
 8008256:	2a16      	cmp	r2, #22
 8008258:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800825c:	dc2a      	bgt.n	80082b4 <floorf+0x68>
 800825e:	2a00      	cmp	r2, #0
 8008260:	da11      	bge.n	8008286 <floorf+0x3a>
 8008262:	eddf 7a18 	vldr	s15, [pc, #96]	; 80082c4 <floorf+0x78>
 8008266:	ee30 0a27 	vadd.f32	s0, s0, s15
 800826a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800826e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008272:	dd05      	ble.n	8008280 <floorf+0x34>
 8008274:	2b00      	cmp	r3, #0
 8008276:	da23      	bge.n	80082c0 <floorf+0x74>
 8008278:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <floorf+0x7c>)
 800827a:	2900      	cmp	r1, #0
 800827c:	bf18      	it	ne
 800827e:	4613      	movne	r3, r2
 8008280:	ee00 3a10 	vmov	s0, r3
 8008284:	4770      	bx	lr
 8008286:	4911      	ldr	r1, [pc, #68]	; (80082cc <floorf+0x80>)
 8008288:	4111      	asrs	r1, r2
 800828a:	420b      	tst	r3, r1
 800828c:	d0fa      	beq.n	8008284 <floorf+0x38>
 800828e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80082c4 <floorf+0x78>
 8008292:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008296:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800829a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829e:	ddef      	ble.n	8008280 <floorf+0x34>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfbe      	ittt	lt
 80082a4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80082a8:	fa40 f202 	asrlt.w	r2, r0, r2
 80082ac:	189b      	addlt	r3, r3, r2
 80082ae:	ea23 0301 	bic.w	r3, r3, r1
 80082b2:	e7e5      	b.n	8008280 <floorf+0x34>
 80082b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80082b8:	d3e4      	bcc.n	8008284 <floorf+0x38>
 80082ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082be:	4770      	bx	lr
 80082c0:	2300      	movs	r3, #0
 80082c2:	e7dd      	b.n	8008280 <floorf+0x34>
 80082c4:	7149f2ca 	.word	0x7149f2ca
 80082c8:	bf800000 	.word	0xbf800000
 80082cc:	007fffff 	.word	0x007fffff

080082d0 <nanf>:
 80082d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80082d8 <nanf+0x8>
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	7fc00000 	.word	0x7fc00000

080082dc <rintf>:
 80082dc:	ee10 2a10 	vmov	r2, s0
 80082e0:	b513      	push	{r0, r1, r4, lr}
 80082e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80082e6:	397f      	subs	r1, #127	; 0x7f
 80082e8:	2916      	cmp	r1, #22
 80082ea:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80082ee:	dc47      	bgt.n	8008380 <rintf+0xa4>
 80082f0:	b32b      	cbz	r3, 800833e <rintf+0x62>
 80082f2:	2900      	cmp	r1, #0
 80082f4:	ee10 3a10 	vmov	r3, s0
 80082f8:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80082fc:	da21      	bge.n	8008342 <rintf+0x66>
 80082fe:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8008302:	425b      	negs	r3, r3
 8008304:	4921      	ldr	r1, [pc, #132]	; (800838c <rintf+0xb0>)
 8008306:	0a5b      	lsrs	r3, r3, #9
 8008308:	0d12      	lsrs	r2, r2, #20
 800830a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830e:	0512      	lsls	r2, r2, #20
 8008310:	4313      	orrs	r3, r2
 8008312:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	edd1 6a00 	vldr	s13, [r1]
 800831e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008322:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008326:	eddd 7a01 	vldr	s15, [sp, #4]
 800832a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800832e:	ee17 3a90 	vmov	r3, s15
 8008332:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008336:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800833a:	ee00 3a10 	vmov	s0, r3
 800833e:	b002      	add	sp, #8
 8008340:	bd10      	pop	{r4, pc}
 8008342:	4a13      	ldr	r2, [pc, #76]	; (8008390 <rintf+0xb4>)
 8008344:	410a      	asrs	r2, r1
 8008346:	4213      	tst	r3, r2
 8008348:	d0f9      	beq.n	800833e <rintf+0x62>
 800834a:	0854      	lsrs	r4, r2, #1
 800834c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008350:	d006      	beq.n	8008360 <rintf+0x84>
 8008352:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008356:	ea23 0304 	bic.w	r3, r3, r4
 800835a:	fa42 f101 	asr.w	r1, r2, r1
 800835e:	430b      	orrs	r3, r1
 8008360:	4a0a      	ldr	r2, [pc, #40]	; (800838c <rintf+0xb0>)
 8008362:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8008366:	ed90 7a00 	vldr	s14, [r0]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008372:	edcd 7a01 	vstr	s15, [sp, #4]
 8008376:	ed9d 0a01 	vldr	s0, [sp, #4]
 800837a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800837e:	e7de      	b.n	800833e <rintf+0x62>
 8008380:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008384:	d3db      	bcc.n	800833e <rintf+0x62>
 8008386:	ee30 0a00 	vadd.f32	s0, s0, s0
 800838a:	e7d8      	b.n	800833e <rintf+0x62>
 800838c:	080088e8 	.word	0x080088e8
 8008390:	007fffff 	.word	0x007fffff

08008394 <scalbnf>:
 8008394:	ee10 3a10 	vmov	r3, s0
 8008398:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800839c:	d025      	beq.n	80083ea <scalbnf+0x56>
 800839e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80083a2:	d302      	bcc.n	80083aa <scalbnf+0x16>
 80083a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80083a8:	4770      	bx	lr
 80083aa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80083ae:	d122      	bne.n	80083f6 <scalbnf+0x62>
 80083b0:	4b2a      	ldr	r3, [pc, #168]	; (800845c <scalbnf+0xc8>)
 80083b2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008460 <scalbnf+0xcc>
 80083b6:	4298      	cmp	r0, r3
 80083b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80083bc:	db16      	blt.n	80083ec <scalbnf+0x58>
 80083be:	ee10 3a10 	vmov	r3, s0
 80083c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80083c6:	3a19      	subs	r2, #25
 80083c8:	4402      	add	r2, r0
 80083ca:	2afe      	cmp	r2, #254	; 0xfe
 80083cc:	dd15      	ble.n	80083fa <scalbnf+0x66>
 80083ce:	ee10 3a10 	vmov	r3, s0
 80083d2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008464 <scalbnf+0xd0>
 80083d6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008468 <scalbnf+0xd4>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	eeb0 7a67 	vmov.f32	s14, s15
 80083e0:	bfb8      	it	lt
 80083e2:	eef0 7a66 	vmovlt.f32	s15, s13
 80083e6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80083ea:	4770      	bx	lr
 80083ec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800846c <scalbnf+0xd8>
 80083f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80083f4:	4770      	bx	lr
 80083f6:	0dd2      	lsrs	r2, r2, #23
 80083f8:	e7e6      	b.n	80083c8 <scalbnf+0x34>
 80083fa:	2a00      	cmp	r2, #0
 80083fc:	dd06      	ble.n	800840c <scalbnf+0x78>
 80083fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008402:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008406:	ee00 3a10 	vmov	s0, r3
 800840a:	4770      	bx	lr
 800840c:	f112 0f16 	cmn.w	r2, #22
 8008410:	da1a      	bge.n	8008448 <scalbnf+0xb4>
 8008412:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008416:	4298      	cmp	r0, r3
 8008418:	ee10 3a10 	vmov	r3, s0
 800841c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008420:	dd0a      	ble.n	8008438 <scalbnf+0xa4>
 8008422:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008464 <scalbnf+0xd0>
 8008426:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008468 <scalbnf+0xd4>
 800842a:	eef0 7a40 	vmov.f32	s15, s0
 800842e:	2b00      	cmp	r3, #0
 8008430:	bf18      	it	ne
 8008432:	eeb0 0a47 	vmovne.f32	s0, s14
 8008436:	e7db      	b.n	80083f0 <scalbnf+0x5c>
 8008438:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800846c <scalbnf+0xd8>
 800843c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008470 <scalbnf+0xdc>
 8008440:	eef0 7a40 	vmov.f32	s15, s0
 8008444:	2b00      	cmp	r3, #0
 8008446:	e7f3      	b.n	8008430 <scalbnf+0x9c>
 8008448:	3219      	adds	r2, #25
 800844a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800844e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008452:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008474 <scalbnf+0xe0>
 8008456:	ee07 3a10 	vmov	s14, r3
 800845a:	e7c4      	b.n	80083e6 <scalbnf+0x52>
 800845c:	ffff3cb0 	.word	0xffff3cb0
 8008460:	4c000000 	.word	0x4c000000
 8008464:	7149f2ca 	.word	0x7149f2ca
 8008468:	f149f2ca 	.word	0xf149f2ca
 800846c:	0da24260 	.word	0x0da24260
 8008470:	8da24260 	.word	0x8da24260
 8008474:	33000000 	.word	0x33000000

08008478 <_init>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	bf00      	nop
 800847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847e:	bc08      	pop	{r3}
 8008480:	469e      	mov	lr, r3
 8008482:	4770      	bx	lr

08008484 <_fini>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr
