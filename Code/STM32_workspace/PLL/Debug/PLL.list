
PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08009008  08009008  00019008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009660  08009660  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009660  08009660  00019660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009668  08009668  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009668  08009668  00019668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800966c  0800966c  0001966c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019418  20000080  080096f0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019498  080096f0  00029498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135c2  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c49  00000000  00000000  00033672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000362c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  000372f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245e5  00000000  00000000  000381f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013705  00000000  00000000  0005c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfbd9  00000000  00000000  0006fee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014fabb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca8  00000000  00000000  0014fb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008fec 	.word	0x08008fec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08008fec 	.word	0x08008fec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f001 fb08 	bl	8002548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f856 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 faca 	bl	80014d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f40:	f000 faa8 	bl	8001494 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f44:	f000 fa7c 	bl	8001440 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f48:	f000 f8c0 	bl	80010cc <MX_ADC1_Init>
  MX_TIM10_Init();
 8000f4c:	f000 fa2e 	bl	80013ac <MX_TIM10_Init>
  MX_DAC_Init();
 8000f50:	f000 f9b2 	bl	80012b8 <MX_DAC_Init>
  MX_ADC2_Init();
 8000f54:	f000 f90c 	bl	8001170 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000f58:	f000 f95c 	bl	8001214 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000f5c:	f000 f9d6 	bl	800130c <MX_TIM1_Init>

  // DAC DMA
//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)&adcBuf[0], sizeof(adcReading0), DAC_ALIGN_12B_R);//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)testArray, sizeof(testArray)/sizeof(uint16_t), DAC_ALIGN_12B_R);

  // Timer interrupt start
  HAL_TIM_Base_Start_IT(&htim10);
 8000f60:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <main+0x98>)
 8000f62:	f003 fe57 	bl	8004c14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8000f66:	4819      	ldr	r0, [pc, #100]	; (8000fcc <main+0x9c>)
 8000f68:	f003 fdec 	bl	8004b44 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <main+0xa0>)
 8000f70:	f002 ffac 	bl	8003ecc <HAL_GPIO_ReadPin>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <main+0x50>
		ringBufTrigger2 = 1;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <main+0xa4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
	}

	// Rest from button
	if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <main+0xa0>)
 8000f86:	f002 ffa1 	bl	8003ecc <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d105      	bne.n	8000f9c <main+0x6c>
		ringBufTrigger2 = 0;
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <main+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
		ringBufPrintDone = 0;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <main+0xa8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	}


	if (ringBufFlag && !ringBufPrintDone) {
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <main+0xac>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0e3      	beq.n	8000f6c <main+0x3c>
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <main+0xa8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1df      	bne.n	8000f6c <main+0x3c>
		ringBufPrintDone = print_ring_buf_v2(RING_BUF_LEN, ringBuf, readStart);
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <main+0xb0>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <main+0xb4>)
 8000fb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fb8:	f000 ff56 	bl	8001e68 <print_ring_buf_v2>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <main+0xa8>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 8000fc4:	e7d2      	b.n	8000f6c <main+0x3c>
 8000fc6:	bf00      	nop
 8000fc8:	2000037c 	.word	0x2000037c
 8000fcc:	200193a4 	.word	0x200193a4
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	2000009d 	.word	0x2000009d
 8000fd8:	2000009f 	.word	0x2000009f
 8000fdc:	2000009e 	.word	0x2000009e
 8000fe0:	2001947c 	.word	0x2001947c
 8000fe4:	20000520 	.word	0x20000520

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	2234      	movs	r2, #52	; 0x34
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 fe64 	bl	8006cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <SystemClock_Config+0xdc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <SystemClock_Config+0xdc>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <SystemClock_Config+0xdc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <SystemClock_Config+0xe0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <SystemClock_Config+0xe0>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <SystemClock_Config+0xe0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001058:	2304      	movs	r3, #4
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800105c:	23b4      	movs	r3, #180	; 0xb4
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001068:	2302      	movs	r3, #2
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fa79 	bl	8004568 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800107c:	f000 ff9a 	bl	8001fb4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001080:	f002 ff56 	bl	8003f30 <HAL_PWREx_EnableOverDrive>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800108a:	f000 ff93 	bl	8001fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2302      	movs	r3, #2
 8001094:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800109a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2105      	movs	r1, #5
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 ff8f 	bl	8003fd0 <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010b8:	f000 ff7c 	bl	8001fb4 <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	3750      	adds	r7, #80	; 0x50
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC1_Init+0x98>)
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <MX_ADC1_Init+0x9c>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_ADC1_Init+0x98>)
 80010e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_ADC1_Init+0x98>)
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <MX_ADC1_Init+0xa0>)
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_ADC1_Init+0x98>)
 800111a:	2201      	movs	r2, #1
 800111c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_ADC1_Init+0x98>)
 8001128:	2201      	movs	r2, #1
 800112a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_ADC1_Init+0x98>)
 800112e:	f001 fa7d 	bl	800262c <HAL_ADC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001138:	f000 ff3c 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_ADC1_Init+0x98>)
 800114e:	f001 fd7b 	bl	8002c48 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001158:	f000 ff2c 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000404 	.word	0x20000404
 8001168:	40012000 	.word	0x40012000
 800116c:	0f000001 	.word	0x0f000001

08001170 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_ADC2_Init+0x98>)
 8001184:	4a21      	ldr	r2, [pc, #132]	; (800120c <MX_ADC2_Init+0x9c>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_ADC2_Init+0x98>)
 800118a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC2_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_ADC2_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_ADC2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_ADC2_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_ADC2_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_ADC2_Init+0x98>)
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <MX_ADC2_Init+0xa0>)
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_ADC2_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_ADC2_Init+0x98>)
 80011be:	2201      	movs	r2, #1
 80011c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_ADC2_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_ADC2_Init+0x98>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_ADC2_Init+0x98>)
 80011d2:	f001 fa2b 	bl	800262c <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80011dc:	f000 feea 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_ADC2_Init+0x98>)
 80011f2:	f001 fd29 	bl	8002c48 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011fc:	f000 feda 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000330 	.word	0x20000330
 800120c:	40012100 	.word	0x40012100
 8001210:	0f000001 	.word	0x0f000001

08001214 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_ADC3_Init+0x98>)
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <MX_ADC3_Init+0x9c>)
 800122a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_ADC3_Init+0x98>)
 800122e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001232:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_ADC3_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_ADC3_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_ADC3_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_ADC3_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_ADC3_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_ADC3_Init+0x98>)
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <MX_ADC3_Init+0xa0>)
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_ADC3_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_ADC3_Init+0x98>)
 8001262:	2201      	movs	r2, #1
 8001264:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_ADC3_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_ADC3_Init+0x98>)
 8001270:	2201      	movs	r2, #1
 8001272:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_ADC3_Init+0x98>)
 8001276:	f001 f9d9 	bl	800262c <HAL_ADC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001280:	f000 fe98 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001284:	230a      	movs	r3, #10
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_ADC3_Init+0x98>)
 8001296:	f001 fcd7 	bl	8002c48 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80012a0:	f000 fe88 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000450 	.word	0x20000450
 80012b0:	40012200 	.word	0x40012200
 80012b4:	0f000001 	.word	0x0f000001

080012b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_DAC_Init+0x4c>)
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <MX_DAC_Init+0x50>)
 80012ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_DAC_Init+0x4c>)
 80012ce:	f002 f804 	bl	80032da <HAL_DAC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012d8:	f000 fe6c 	bl	8001fb4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_DAC_Init+0x4c>)
 80012ec:	f002 f88e 	bl	800340c <HAL_DAC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012f6:	f000 fe5d 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000050c 	.word	0x2000050c
 8001308:	40007400 	.word	0x40007400

0800130c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_TIM1_Init+0x98>)
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <MX_TIM1_Init+0x9c>)
 800132c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001330:	2211      	movs	r2, #17
 8001332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM1_Init+0x98>)
 800133c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_TIM1_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001356:	f003 fba5 	bl	8004aa4 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001360:	f000 fe28 	bl	8001fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001372:	f003 fe79 	bl	8005068 <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800137c:	f000 fe1a 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM1_Init+0x98>)
 800138e:	f004 fa41 	bl	8005814 <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001398:	f000 fe0c 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200193a4 	.word	0x200193a4
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	615a      	str	r2, [r3, #20]
 80013c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_TIM10_Init+0x8c>)
 80013c6:	4a1d      	ldr	r2, [pc, #116]	; (800143c <MX_TIM10_Init+0x90>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 180-1;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_TIM10_Init+0x8c>)
 80013cc:	22b3      	movs	r2, #179	; 0xb3
 80013ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_TIM10_Init+0x8c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500-1;
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_TIM10_Init+0x8c>)
 80013d8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80013dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <MX_TIM10_Init+0x8c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_TIM10_Init+0x8c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013ea:	4813      	ldr	r0, [pc, #76]	; (8001438 <MX_TIM10_Init+0x8c>)
 80013ec:	f003 fb5a 	bl	8004aa4 <HAL_TIM_Base_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80013f6:	f000 fddd 	bl	8001fb4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80013fa:	480f      	ldr	r0, [pc, #60]	; (8001438 <MX_TIM10_Init+0x8c>)
 80013fc:	f003 fc7a 	bl	8004cf4 <HAL_TIM_OC_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001406:	f000 fdd5 	bl	8001fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_TIM10_Init+0x8c>)
 8001422:	f003 fdc9 	bl	8004fb8 <HAL_TIM_OC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800142c:	f000 fdc2 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000037c 	.word	0x2000037c
 800143c:	40014400 	.word	0x40014400

08001440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_USART2_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_USART2_UART_Init+0x4c>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_USART2_UART_Init+0x4c>)
 8001478:	f004 fa5c 	bl	8005934 <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001482:	f000 fd97 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20019438 	.word	0x20019438
 8001490:	40004400 	.word	0x40004400

08001494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_DMA_Init+0x3c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <MX_DMA_Init+0x3c>)
 80014a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_DMA_Init+0x3c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2011      	movs	r0, #17
 80014bc:	f001 fed7 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014c0:	2011      	movs	r0, #17
 80014c2:	f001 fef0 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <MX_GPIO_Init+0x138>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a46      	ldr	r2, [pc, #280]	; (800160c <MX_GPIO_Init+0x138>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b44      	ldr	r3, [pc, #272]	; (800160c <MX_GPIO_Init+0x138>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b40      	ldr	r3, [pc, #256]	; (800160c <MX_GPIO_Init+0x138>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a3f      	ldr	r2, [pc, #252]	; (800160c <MX_GPIO_Init+0x138>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <MX_GPIO_Init+0x138>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b39      	ldr	r3, [pc, #228]	; (800160c <MX_GPIO_Init+0x138>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a38      	ldr	r2, [pc, #224]	; (800160c <MX_GPIO_Init+0x138>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <MX_GPIO_Init+0x138>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <MX_GPIO_Init+0x138>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a31      	ldr	r2, [pc, #196]	; (800160c <MX_GPIO_Init+0x138>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_GPIO_Init+0x138>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2120      	movs	r1, #32
 800155e:	482c      	ldr	r0, [pc, #176]	; (8001610 <MX_GPIO_Init+0x13c>)
 8001560:	f002 fccc 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2101      	movs	r1, #1
 8001568:	482a      	ldr	r0, [pc, #168]	; (8001614 <MX_GPIO_Init+0x140>)
 800156a:	f002 fcc7 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001574:	4828      	ldr	r0, [pc, #160]	; (8001618 <MX_GPIO_Init+0x144>)
 8001576:	f002 fcc1 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4822      	ldr	r0, [pc, #136]	; (8001618 <MX_GPIO_Init+0x144>)
 8001590:	f002 fb08 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001594:	2308      	movs	r3, #8
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800159c:	2302      	movs	r3, #2
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	481c      	ldr	r0, [pc, #112]	; (8001618 <MX_GPIO_Init+0x144>)
 80015a8:	f002 fafc 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ac:	2320      	movs	r3, #32
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4813      	ldr	r0, [pc, #76]	; (8001610 <MX_GPIO_Init+0x13c>)
 80015c4:	f002 faee 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c8:	2301      	movs	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_GPIO_Init+0x140>)
 80015e0:	f002 fae0 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80015e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_GPIO_Init+0x144>)
 80015fe:	f002 fad1 	bl	8003ba4 <HAL_GPIO_Init>

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400
 8001618:	40020800 	.word	0x40020800
 800161c:	00000000 	.word	0x00000000

08001620 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//}

// Timer 10 (TIM10) interrupt:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af02      	add	r7, sp, #8
 8001626:	6078      	str	r0, [r7, #4]
  if (htim == &htim10)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4ab3      	ldr	r2, [pc, #716]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	f040 83f0 	bne.w	8001e12 <HAL_TIM_PeriodElapsedCallback+0x7f2>
    // Variables declared globally for easier debugging.
    //    static float angleDq, alpha1, beta1, Vq, Vd, alpha2, beta2, cosGrid, sinGrid;
    // PLL variables end

	// Set pin: Start timer
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	48b1      	ldr	r0, [pc, #708]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001638:	f002 fc60 	bl	8003efc <HAL_GPIO_WritePin>

    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 800163c:	4bb0      	ldr	r3, [pc, #704]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	b21a      	sxth	r2, r3
 8001644:	4baf      	ldr	r3, [pc, #700]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001646:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2120      	movs	r1, #32
 800164c:	48ab      	ldr	r0, [pc, #684]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800164e:	f002 fc55 	bl	8003efc <HAL_GPIO_WritePin>

    // ADC 1
    HAL_ADC_Start(&hadc1);
 8001652:	48ad      	ldr	r0, [pc, #692]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001654:	f001 f82e 	bl	80026b4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	48aa      	ldr	r0, [pc, #680]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800165e:	f001 f8fb 	bl	8002858 <HAL_ADC_PollForConversion>
    adcValue1 = HAL_ADC_GetValue(&hadc1);
 8001662:	48a9      	ldr	r0, [pc, #676]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001664:	f001 fac4 	bl	8002bf0 <HAL_ADC_GetValue>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	4ba7      	ldr	r3, [pc, #668]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800166e:	801a      	strh	r2, [r3, #0]

    // ADC 2
    HAL_ADC_Start(&hadc2);
 8001670:	48a7      	ldr	r0, [pc, #668]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001672:	f001 f81f 	bl	80026b4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001676:	f04f 31ff 	mov.w	r1, #4294967295
 800167a:	48a5      	ldr	r0, [pc, #660]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800167c:	f001 f8ec 	bl	8002858 <HAL_ADC_PollForConversion>
    adcValue2 = HAL_ADC_GetValue(&hadc2);
 8001680:	48a3      	ldr	r0, [pc, #652]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001682:	f001 fab5 	bl	8002bf0 <HAL_ADC_GetValue>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	4ba2      	ldr	r3, [pc, #648]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800168c:	801a      	strh	r2, [r3, #0]

	// ADC 3
    HAL_ADC_Start(&hadc3);
 800168e:	48a2      	ldr	r0, [pc, #648]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001690:	f001 f810 	bl	80026b4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	489f      	ldr	r0, [pc, #636]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800169a:	f001 f8dd 	bl	8002858 <HAL_ADC_PollForConversion>
    adcValue3 = HAL_ADC_GetValue(&hadc3);
 800169e:	489e      	ldr	r0, [pc, #632]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016a0:	f001 faa6 	bl	8002bf0 <HAL_ADC_GetValue>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b9c      	ldr	r3, [pc, #624]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80016aa:	801a      	strh	r2, [r3, #0]
    timingArray[0] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80016ac:	4b94      	ldr	r3, [pc, #592]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b93      	ldr	r3, [pc, #588]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	4b97      	ldr	r3, [pc, #604]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016c4:	801a      	strh	r2, [r3, #0]




    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2120      	movs	r1, #32
 80016ca:	488c      	ldr	r0, [pc, #560]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80016cc:	f002 fc16 	bl	8003efc <HAL_GPIO_WritePin>


    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80016d0:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b8a      	ldr	r3, [pc, #552]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80016da:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2120      	movs	r1, #32
 80016e0:	4886      	ldr	r0, [pc, #536]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80016e2:	f002 fc0b 	bl	8003efc <HAL_GPIO_WritePin>

    phaseA = (float)adcValue1/(0xFFF+1)*3.3f - 1.65f;
 80016e6:	4b89      	ldr	r3, [pc, #548]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016f2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8001924 <HAL_TIM_PeriodElapsedCallback+0x304>
 80016f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fa:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x308>
 80016fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001702:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800192c <HAL_TIM_PeriodElapsedCallback+0x30c>
 8001706:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800170a:	4b89      	ldr	r3, [pc, #548]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800170c:	edc3 7a00 	vstr	s15, [r3]
    phaseB = (float)adcValue2/(0xFFF+1)*3.3f - 1.65f;
 8001710:	4b80      	ldr	r3, [pc, #512]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171c:	eddf 6a81 	vldr	s13, [pc, #516]	; 8001924 <HAL_TIM_PeriodElapsedCallback+0x304>
 8001720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001724:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x308>
 8001728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800192c <HAL_TIM_PeriodElapsedCallback+0x30c>
 8001730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001734:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
    phaseC = (float)adcValue3/(0xFFF+1)*3.3f - 1.65f;
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001746:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001924 <HAL_TIM_PeriodElapsedCallback+0x304>
 800174a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x308>
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800192c <HAL_TIM_PeriodElapsedCallback+0x30c>
 800175a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800175e:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001760:	edc3 7a00 	vstr	s15, [r3]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2120      	movs	r1, #32
 8001768:	4864      	ldr	r0, [pc, #400]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800176a:	f002 fbc7 	bl	8003efc <HAL_GPIO_WritePin>
    timingArray[1] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 800176e:	4b64      	ldr	r3, [pc, #400]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	b29b      	uxth	r3, r3
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	b21a      	sxth	r2, r3
 8001784:	4b66      	ldr	r3, [pc, #408]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001786:	805a      	strh	r2, [r3, #2]

    // PLL Start
    //--------------------------------------------------------------------------------------------
    angleDq = angleDq + T_SAMPLE*F_RAD;
 8001788:	4b6c      	ldr	r3, [pc, #432]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001940 <HAL_TIM_PeriodElapsedCallback+0x320>
 8001792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001796:	4b69      	ldr	r3, [pc, #420]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
    if (angleDq > TWO_PI)
 800179c:	4b67      	ldr	r3, [pc, #412]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fef1 	bl	8000588 <__aeabi_f2d>
 80017a6:	a352      	add	r3, pc, #328	; (adr r3, 80018f0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7ff f9d4 	bl	8000b58 <__aeabi_dcmpgt>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d012      	beq.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x1bc>
    {
    	angleDq = angleDq - TWO_PI;
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fee4 	bl	8000588 <__aeabi_f2d>
 80017c0:	a34b      	add	r3, pc, #300	; (adr r3, 80018f0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe fd7f 	bl	80002c8 <__aeabi_dsub>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f9e1 	bl	8000b98 <__aeabi_d2f>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80017da:	6013      	str	r3, [r2, #0]
//	phaseB = sinf(angleDq-RAD_120);
//	phaseC = sinf(angleDq+RAD_120);


	// abc -> alpha beta
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80017dc:	4b48      	ldr	r3, [pc, #288]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80017e6:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2120      	movs	r1, #32
 80017ec:	4843      	ldr	r0, [pc, #268]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80017ee:	f002 fb85 	bl	8003efc <HAL_GPIO_WritePin>

    abc_to_alphabeta(phaseA, phaseB, phaseC, &alpha1, &beta1);
 80017f2:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80017fa:	ed93 7a00 	vldr	s14, [r3]
 80017fe:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001800:	edd3 6a00 	vldr	s13, [r3]
 8001804:	494f      	ldr	r1, [pc, #316]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001806:	4850      	ldr	r0, [pc, #320]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001808:	eeb0 1a66 	vmov.f32	s2, s13
 800180c:	eef0 0a47 	vmov.f32	s1, s14
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f004 ff08 	bl	8006628 <abc_to_alphabeta>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2120      	movs	r1, #32
 800181c:	4837      	ldr	r0, [pc, #220]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800181e:	f002 fb6d 	bl	8003efc <HAL_GPIO_WritePin>
    timingArray[2] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800182c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001830:	b29b      	uxth	r3, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b29b      	uxth	r3, r3
 8001836:	b21a      	sxth	r2, r3
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800183a:	809a      	strh	r2, [r3, #4]

    // alpha beta -> DQ
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	b21a      	sxth	r2, r3
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001846:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	2120      	movs	r1, #32
 800184c:	482b      	ldr	r0, [pc, #172]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800184e:	f002 fb55 	bl	8003efc <HAL_GPIO_WritePin>

    alphabeta_to_dq(alpha1, beta1, angleDq, &Vd, &Vq);
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001860:	edd3 6a00 	vldr	s13, [r3]
 8001864:	4939      	ldr	r1, [pc, #228]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001866:	483a      	ldr	r0, [pc, #232]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001868:	eeb0 1a66 	vmov.f32	s2, s13
 800186c:	eef0 0a47 	vmov.f32	s1, s14
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	f004 ff24 	bl	80066c0 <alphabeta_to_dq>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	2120      	movs	r1, #32
 800187c:	481f      	ldr	r0, [pc, #124]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800187e:	f002 fb3d 	bl	8003efc <HAL_GPIO_WritePin>
    timingArray[3] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	b29b      	uxth	r3, r3
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	b29b      	uxth	r3, r3
 8001896:	b21a      	sxth	r2, r3
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800189a:	80da      	strh	r2, [r3, #6]

    // MAF
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80018a6:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	2120      	movs	r1, #32
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80018ae:	f002 fb25 	bl	8003efc <HAL_GPIO_WritePin>
//    maf(&phaseA, &phaseB, &VdMaf, &VqMaf);
	maf(&Vd, &Vq, &VdMaf, &VqMaf);
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80018b4:	4a28      	ldr	r2, [pc, #160]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80018b6:	4925      	ldr	r1, [pc, #148]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80018b8:	4825      	ldr	r0, [pc, #148]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80018ba:	f004 fe43 	bl	8006544 <maf>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2120      	movs	r1, #32
 80018c2:	480e      	ldr	r0, [pc, #56]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80018c4:	f002 fb1a 	bl	8003efc <HAL_GPIO_WritePin>
	timingArray[4] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b21a      	sxth	r2, r3
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80018e0:	811a      	strh	r2, [r3, #8]

	// DQ -> alpha beta
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	e038      	b.n	800195c <HAL_TIM_PeriodElapsedCallback+0x33c>
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	54442c46 	.word	0x54442c46
 80018f4:	401921fb 	.word	0x401921fb
 80018f8:	2000037c 	.word	0x2000037c
 80018fc:	40020800 	.word	0x40020800
 8001900:	200193a4 	.word	0x200193a4
 8001904:	200193f0 	.word	0x200193f0
 8001908:	20000404 	.word	0x20000404
 800190c:	2001939c 	.word	0x2001939c
 8001910:	20000330 	.word	0x20000330
 8001914:	200003ec 	.word	0x200003ec
 8001918:	20000450 	.word	0x20000450
 800191c:	2000032c 	.word	0x2000032c
 8001920:	200003d8 	.word	0x200003d8
 8001924:	45800000 	.word	0x45800000
 8001928:	40533333 	.word	0x40533333
 800192c:	3fd33333 	.word	0x3fd33333
 8001930:	200003c4 	.word	0x200003c4
 8001934:	20019430 	.word	0x20019430
 8001938:	20019390 	.word	0x20019390
 800193c:	20019480 	.word	0x20019480
 8001940:	3e20d97c 	.word	0x3e20d97c
 8001944:	200193f4 	.word	0x200193f4
 8001948:	200003d0 	.word	0x200003d0
 800194c:	200003d4 	.word	0x200003d4
 8001950:	200003c8 	.word	0x200003c8
 8001954:	20019394 	.word	0x20019394
 8001958:	20000378 	.word	0x20000378
 800195c:	b21a      	sxth	r2, r3
 800195e:	4bba      	ldr	r3, [pc, #744]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001960:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2120      	movs	r1, #32
 8001966:	48b9      	ldr	r0, [pc, #740]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001968:	f002 fac8 	bl	8003efc <HAL_GPIO_WritePin>

    dq_to_alphabeta(Vd, Vq, angleDq, &alpha2, &beta2);
 800196c:	4bb8      	ldr	r3, [pc, #736]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	4bb8      	ldr	r3, [pc, #736]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001974:	ed93 7a00 	vldr	s14, [r3]
 8001978:	4bb7      	ldr	r3, [pc, #732]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800197a:	edd3 6a00 	vldr	s13, [r3]
 800197e:	49b7      	ldr	r1, [pc, #732]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001980:	48b7      	ldr	r0, [pc, #732]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001982:	eeb0 1a66 	vmov.f32	s2, s13
 8001986:	eef0 0a47 	vmov.f32	s1, s14
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	f004 fede 	bl	800674e <dq_to_alphabeta>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2120      	movs	r1, #32
 8001996:	48ad      	ldr	r0, [pc, #692]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001998:	f002 fab0 	bl	8003efc <HAL_GPIO_WritePin>
	timingArray[5] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 800199c:	4bb1      	ldr	r3, [pc, #708]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4ba8      	ldr	r3, [pc, #672]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4bad      	ldr	r3, [pc, #692]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80019b4:	815a      	strh	r2, [r3, #10]


	// sinGrid & cosGrid
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80019b6:	4bab      	ldr	r3, [pc, #684]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x644>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	b21a      	sxth	r2, r3
 80019be:	4ba2      	ldr	r3, [pc, #648]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80019c0:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2120      	movs	r1, #32
 80019c6:	48a1      	ldr	r0, [pc, #644]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80019c8:	f002 fa98 	bl	8003efc <HAL_GPIO_WritePin>

    cos_sin_grid(alpha2, beta2, &cosGrid, &sinGrid);
 80019cc:	4ba4      	ldr	r3, [pc, #656]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	4ba2      	ldr	r3, [pc, #648]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	49a4      	ldr	r1, [pc, #656]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80019da:	48a5      	ldr	r0, [pc, #660]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x650>)
 80019dc:	eef0 0a47 	vmov.f32	s1, s14
 80019e0:	eeb0 0a67 	vmov.f32	s0, s15
 80019e4:	f004 fef8 	bl	80067d8 <cos_sin_grid>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2120      	movs	r1, #32
 80019ec:	4897      	ldr	r0, [pc, #604]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80019ee:	f002 fa85 	bl	8003efc <HAL_GPIO_WritePin>
    timingArray[6] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80019f2:	4b9c      	ldr	r3, [pc, #624]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x644>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b93      	ldr	r3, [pc, #588]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80019fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	4b97      	ldr	r3, [pc, #604]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001a0a:	819a      	strh	r2, [r3, #12]

    // Phade detector
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001a0c:	4b95      	ldr	r3, [pc, #596]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001a16:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	488b      	ldr	r0, [pc, #556]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001a1e:	f002 fa6d 	bl	8003efc <HAL_GPIO_WritePin>

    phaseError = phase_detector(cosGrid, sinGrid, anglePllComp);
 8001a22:	4b93      	ldr	r3, [pc, #588]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	4b90      	ldr	r3, [pc, #576]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8001a2a:	ed93 7a00 	vldr	s14, [r3]
 8001a2e:	4b91      	ldr	r3, [pc, #580]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8001a30:	edd3 6a00 	vldr	s13, [r3]
 8001a34:	eeb0 1a66 	vmov.f32	s2, s13
 8001a38:	eef0 0a47 	vmov.f32	s1, s14
 8001a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a40:	f005 f828 	bl	8006a94 <phase_detector>
 8001a44:	eef0 7a40 	vmov.f32	s15, s0
 8001a48:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2120      	movs	r1, #32
 8001a52:	487e      	ldr	r0, [pc, #504]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001a54:	f002 fa52 	bl	8003efc <HAL_GPIO_WritePin>
    timingArray[7] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001a58:	4b82      	ldr	r3, [pc, #520]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b79      	ldr	r3, [pc, #484]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b7e      	ldr	r3, [pc, #504]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001a70:	81da      	strh	r2, [r3, #14]

    // PI-regulator
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001a72:	4b7c      	ldr	r3, [pc, #496]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001a7c:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2120      	movs	r1, #32
 8001a82:	4872      	ldr	r0, [pc, #456]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001a84:	f002 fa3a 	bl	8003efc <HAL_GPIO_WritePin>

    pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE, &anglePll, &anglePllComp);
 8001a88:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8001a90:	ed93 7a00 	vldr	s14, [r3]
 8001a94:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8001a96:	edd3 6a00 	vldr	s13, [r3]
 8001a9a:	4b7a      	ldr	r3, [pc, #488]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8001a9c:	ed93 6a00 	vldr	s12, [r3]
 8001aa0:	4974      	ldr	r1, [pc, #464]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8001aa2:	4879      	ldr	r0, [pc, #484]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001aa4:	eddf 2a79 	vldr	s5, [pc, #484]	; 8001c8c <HAL_TIM_PeriodElapsedCallback+0x66c>
 8001aa8:	eeb0 2a46 	vmov.f32	s4, s12
 8001aac:	eef0 1a66 	vmov.f32	s3, s13
 8001ab0:	eeb0 1a47 	vmov.f32	s2, s14
 8001ab4:	eddf 0a76 	vldr	s1, [pc, #472]	; 8001c90 <HAL_TIM_PeriodElapsedCallback+0x670>
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f004 fed4 	bl	8006868 <pi_regulator>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	4861      	ldr	r0, [pc, #388]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001ac6:	f002 fa19 	bl	8003efc <HAL_GPIO_WritePin>
    timingArray[8] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001aca:	4b66      	ldr	r3, [pc, #408]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001ae2:	821a      	strh	r2, [r3, #16]

    //--------------------------------------------------------------------------------------------
    // PLL End

    // DAC
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	4858      	ldr	r0, [pc, #352]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001aea:	f002 fa07 	bl	8003efc <HAL_GPIO_WritePin>
    var_dac_f = (anglePll*0.5f + 0.05f) * 4096.0f/3.3f;	// +1 for offset for negative values, /3.3 for scaling
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001c94 <HAL_TIM_PeriodElapsedCallback+0x674>
 8001b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b04:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001c98 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001b08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b0c:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001c9c <HAL_TIM_PeriodElapsedCallback+0x67c>
 8001b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b14:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001b16:	edc3 7a00 	vstr	s15, [r3]
    var_dac = (uint16_t)var_dac_f; 			// Convert from float to uint16_t
 8001b1a:	4b61      	ldr	r3, [pc, #388]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b24:	ee17 3a90 	vmov	r3, s15
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b2c:	801a      	strh	r2, [r3, #0]
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 8001b2e:	2100      	movs	r1, #0
 8001b30:	485d      	ldr	r0, [pc, #372]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8001b32:	f001 fbf4 	bl	800331e <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var_dac); // Set dac to digital value
 8001b36:	4b5b      	ldr	r3, [pc, #364]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	485a      	ldr	r0, [pc, #360]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8001b40:	f001 fc3f 	bl	80033c2 <HAL_DAC_SetValue>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2120      	movs	r1, #32
 8001b48:	4840      	ldr	r0, [pc, #256]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001b4a:	f002 f9d7 	bl	8003efc <HAL_GPIO_WritePin>
    ringBufData[8] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
    ringBufData[9] = ((float)	angleDq			* (float)RING_BUF_SCALING);
	*/

    // Ring buffer
    ringBufData[0] 	= ((float)	phaseA 			* (float)RING_BUF_SCALING);
 8001b4e:	4b57      	ldr	r3, [pc, #348]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b60:	ee17 3a90 	vmov	r3, s15
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b68:	801a      	strh	r2, [r3, #0]
    ringBufData[1] 	= ((float)	phaseB			* (float)RING_BUF_SCALING);
 8001b6a:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7c:	ee17 3a90 	vmov	r3, s15
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b84:	805a      	strh	r2, [r3, #2]
    ringBufData[2] 	= ((float)	phaseC 			* (float)RING_BUF_SCALING);
 8001b86:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b98:	ee17 3a90 	vmov	r3, s15
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001ba0:	809a      	strh	r2, [r3, #4]
    ringBufData[3] 	= ((float)	alpha1 			* (float)RING_BUF_SCALING);
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb4:	ee17 3a90 	vmov	r3, s15
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001bbc:	80da      	strh	r2, [r3, #6]
    ringBufData[4] 	= ((float)	beta1 			* (float)RING_BUF_SCALING);
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd0:	ee17 3a90 	vmov	r3, s15
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001bd8:	811a      	strh	r2, [r3, #8]
    ringBufData[5] 	= ((float)	Vd 				* (float)RING_BUF_SCALING);
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bec:	ee17 3a90 	vmov	r3, s15
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001bf4:	815a      	strh	r2, [r3, #10]
    ringBufData[6] 	= ((float)	Vq				* (float)RING_BUF_SCALING);
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 3a90 	vmov	r3, s15
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001c10:	819a      	strh	r2, [r3, #12]
    ringBufData[7] 	= ((float)	VdMaf 			* (float)RING_BUF_SCALING);
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c24:	ee17 3a90 	vmov	r3, s15
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001c2c:	81da      	strh	r2, [r3, #14]
    ringBufData[8] 	= ((float)	VqMaf 			* (float)RING_BUF_SCALING);
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001cb0 <HAL_TIM_PeriodElapsedCallback+0x690>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c40:	ee17 3a90 	vmov	r3, s15
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	e043      	b.n	8001cd0 <HAL_TIM_PeriodElapsedCallback+0x6b0>
 8001c48:	200193f0 	.word	0x200193f0
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	200003c8 	.word	0x200003c8
 8001c54:	200003d4 	.word	0x200003d4
 8001c58:	20019480 	.word	0x20019480
 8001c5c:	20000328 	.word	0x20000328
 8001c60:	2000044c 	.word	0x2000044c
 8001c64:	200193a4 	.word	0x200193a4
 8001c68:	200003d8 	.word	0x200003d8
 8001c6c:	20019398 	.word	0x20019398
 8001c70:	200193a0 	.word	0x200193a0
 8001c74:	200193ec 	.word	0x200193ec
 8001c78:	200003cc 	.word	0x200003cc
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20019434 	.word	0x20019434
 8001c8c:	3a03126f 	.word	0x3a03126f
 8001c90:	439d1463 	.word	0x439d1463
 8001c94:	3d4ccccd 	.word	0x3d4ccccd
 8001c98:	45800000 	.word	0x45800000
 8001c9c:	40533333 	.word	0x40533333
 8001ca0:	200000a0 	.word	0x200000a0
 8001ca4:	200000a4 	.word	0x200000a4
 8001ca8:	2000050c 	.word	0x2000050c
 8001cac:	200003c4 	.word	0x200003c4
 8001cb0:	459c4000 	.word	0x459c4000
 8001cb4:	200193f8 	.word	0x200193f8
 8001cb8:	20019430 	.word	0x20019430
 8001cbc:	20019390 	.word	0x20019390
 8001cc0:	200003d0 	.word	0x200003d0
 8001cc4:	200193f4 	.word	0x200193f4
 8001cc8:	20000378 	.word	0x20000378
 8001ccc:	20019394 	.word	0x20019394
 8001cd0:	4b52      	ldr	r3, [pc, #328]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001cd2:	821a      	strh	r2, [r3, #16]
    ringBufData[9] 	= ((float)	alpha2 			* (float)RING_BUF_SCALING);
 8001cd4:	4b52      	ldr	r3, [pc, #328]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x804>
 8001cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce6:	ee17 3a90 	vmov	r3, s15
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	4b4b      	ldr	r3, [pc, #300]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001cee:	825a      	strh	r2, [r3, #18]
    ringBufData[10] = ((float)	beta2			* (float)RING_BUF_SCALING);
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x804>
 8001cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d02:	ee17 3a90 	vmov	r3, s15
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001d0a:	829a      	strh	r2, [r3, #20]
    ringBufData[11] = ((float)	cosGrid			* (float)RING_BUF_SCALING);
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x804>
 8001d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1e:	ee17 3a90 	vmov	r3, s15
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001d26:	82da      	strh	r2, [r3, #22]
    ringBufData[12] = ((float)	sinGrid 		* (float)RING_BUF_SCALING);
 8001d28:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x804>
 8001d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3a:	ee17 3a90 	vmov	r3, s15
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001d42:	831a      	strh	r2, [r3, #24]
    ringBufData[13] = ((float)	phaseError 		* (float)RING_BUF_SCALING);
 8001d44:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x804>
 8001d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d56:	ee17 3a90 	vmov	r3, s15
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001d5e:	835a      	strh	r2, [r3, #26]
    ringBufData[14] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x804>
 8001d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d72:	ee17 3a90 	vmov	r3, s15
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001d7a:	839a      	strh	r2, [r3, #28]
    ringBufData[15] = ((float)	anglePllComp	* (float)RING_BUF_SCALING);
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x804>
 8001d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8e:	ee17 3a90 	vmov	r3, s15
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001d96:	83da      	strh	r2, [r3, #30]
    ringBufData[16] = ((float)	angleDq			* (float)RING_BUF_SCALING);
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0x804>
 8001da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001daa:	ee17 3a90 	vmov	r3, s15
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001db2:	841a      	strh	r2, [r3, #32]
//    ringBufData[22] = timingArray[5];
//    ringBufData[23] = timingArray[6];
//    ringBufData[24] = timingArray[7];
//    ringBufData[25] = timingArray[8];

    ringBufFlag = circular_buffer(RING_BUF_LEN, ringBuf, ringBufData, ringBufTrigger2, RING_BUF_SPLIT, &readStart);
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001dba:	9200      	str	r2, [sp, #0]
 8001dbc:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001e4c <HAL_TIM_PeriodElapsedCallback+0x82c>
 8001dc0:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001dc2:	4923      	ldr	r1, [pc, #140]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001dc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001dc8:	f004 fe8c 	bl	8006ae4 <circular_buffer>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001dd2:	701a      	strb	r2, [r3, #0]



    // Count up interrupt count
	if (count < (RING_BUF_LEN*RING_BUF_SPLIT))
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001e5c <HAL_TIM_PeriodElapsedCallback+0x83c>
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	d506      	bpl.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x7dc>
	{
	  count++;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	e005      	b.n	8001e08 <HAL_TIM_PeriodElapsedCallback+0x7e8>
	}
	else
	{
	  ringBufTrigger = 1;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
	  count = 0;
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	801a      	strh	r2, [r3, #0]
	}


	// Reset pin: Stop timer
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2140      	movs	r1, #64	; 0x40
 8001e0c:	4815      	ldr	r0, [pc, #84]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001e0e:	f002 f875 	bl	8003efc <HAL_GPIO_WritePin>
  }
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200193f8 	.word	0x200193f8
 8001e20:	2000044c 	.word	0x2000044c
 8001e24:	459c4000 	.word	0x459c4000
 8001e28:	20000328 	.word	0x20000328
 8001e2c:	200193a0 	.word	0x200193a0
 8001e30:	20019398 	.word	0x20019398
 8001e34:	200003cc 	.word	0x200003cc
 8001e38:	20019434 	.word	0x20019434
 8001e3c:	200193ec 	.word	0x200193ec
 8001e40:	20019480 	.word	0x20019480
 8001e44:	2000009d 	.word	0x2000009d
 8001e48:	2001947c 	.word	0x2001947c
 8001e4c:	3ca3d70a 	.word	0x3ca3d70a
 8001e50:	20000520 	.word	0x20000520
 8001e54:	2000009e 	.word	0x2000009e
 8001e58:	200000a6 	.word	0x200000a6
 8001e5c:	42700000 	.word	0x42700000
 8001e60:	2000009c 	.word	0x2000009c
 8001e64:	40020800 	.word	0x40020800

08001e68 <print_ring_buf_v2>:
//  Description :   prints the ring buffer values
//  Parameters  :   uint16_t bufferSize: pointer to an int to store the number
//                  uint16_t circularBuffer: Pointer to circular buffer array
//                  uint16_t readStart: starting index of the circular buffer
//  Returns     :	none
uint8_t print_ring_buf_v2(uint16_t bufferSize, int16_t circularBuffer[][RING_BUF_SIZE], uint16_t readStart) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	80fb      	strh	r3, [r7, #6]
 8001e74:	4613      	mov	r3, r2
 8001e76:	80bb      	strh	r3, [r7, #4]
    static uint16_t pos			=	0;		// Track position of array

    static char msg[250];	// Initialize string to be written to USART

    // Initialize readIndex to readStart
    if (!init) {
 8001e78:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <print_ring_buf_v2+0x12c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <print_ring_buf_v2+0x24>
        readIndex = readStart;
 8001e80:	4a45      	ldr	r2, [pc, #276]	; (8001f98 <print_ring_buf_v2+0x130>)
 8001e82:	88bb      	ldrh	r3, [r7, #4]
 8001e84:	8013      	strh	r3, [r2, #0]
        init = 1;
 8001e86:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <print_ring_buf_v2+0x12c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    }

//	sprintf(msg, "phaseA, phaseB, phaseC, alpha1, beta1, Vd, Vq, VdMaf, VqMaf, alpha2, beta2, cosGrid, sinGrid, phaseError, anglePll, anglePllComp, angleDq, t_adc, t_3p_sin, t_abc_ab, t_ab_dq, t_maf, t_dq_ab, t_sin_cos, t_phase_d, t_pi_regulator \r\n");
    sprintf(msg, "phaseA, phaseB, phaseC, alpha1, beta1, Vd, Vq, VdMaf, VqMaf, alpha2, beta2, cosGrid, sinGrid, phaseError, anglePll, anglePllComp, angleDq\r\n");
 8001e8c:	4943      	ldr	r1, [pc, #268]	; (8001f9c <print_ring_buf_v2+0x134>)
 8001e8e:	4844      	ldr	r0, [pc, #272]	; (8001fa0 <print_ring_buf_v2+0x138>)
 8001e90:	f004 ff20 	bl	8006cd4 <siprintf>
//    sprintf(msg, "phaseA, phaseB, phaseC, VdMaf, VqMaf, cosGrid, sinGrid, phaseError, anglePll, angleDq\r\n");

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e94:	4842      	ldr	r0, [pc, #264]	; (8001fa0 <print_ring_buf_v2+0x138>)
 8001e96:	f7fe f9bb 	bl	8000210 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	493f      	ldr	r1, [pc, #252]	; (8001fa0 <print_ring_buf_v2+0x138>)
 8001ea4:	483f      	ldr	r0, [pc, #252]	; (8001fa4 <print_ring_buf_v2+0x13c>)
 8001ea6:	f003 fd92 	bl	80059ce <HAL_UART_Transmit>


    for (int i = 0; i < bufferSize; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e067      	b.n	8001f80 <print_ring_buf_v2+0x118>
    {
        //printf("Buffervalue at index [%d] = %d\n", readIndex, circularBuffer[readIndex]);

//    	sprintf(msg, "%d, %d, %d, %d\r\n", circularBuffer[readIndex][0], circularBuffer[readIndex][1],
//									circularBuffer[readIndex][2], circularBuffer[readIndex][3]);	// Update message for usart print
    	for (int n = 0; n < (RING_BUF_SIZE); n++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	e042      	b.n	8001f3c <print_ring_buf_v2+0xd4>

    		if (n < RING_BUF_SIZE-1) {
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	dc1e      	bgt.n	8001efa <print_ring_buf_v2+0x92>
    			pos += sprintf(&msg[pos], "%d, ", circularBuffer[readIndex][n]);
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <print_ring_buf_v2+0x140>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <print_ring_buf_v2+0x138>)
 8001ec4:	18d0      	adds	r0, r2, r3
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <print_ring_buf_v2+0x130>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4932      	ldr	r1, [pc, #200]	; (8001fac <print_ring_buf_v2+0x144>)
 8001ee4:	f004 fef6 	bl	8006cd4 <siprintf>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <print_ring_buf_v2+0x140>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <print_ring_buf_v2+0x140>)
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	e01d      	b.n	8001f36 <print_ring_buf_v2+0xce>
    		}
    		else {
    			pos += sprintf(&msg[pos], "%d\r\n", circularBuffer[readIndex][n]);
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <print_ring_buf_v2+0x140>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <print_ring_buf_v2+0x138>)
 8001f02:	18d0      	adds	r0, r2, r3
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <print_ring_buf_v2+0x130>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	461a      	mov	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4923      	ldr	r1, [pc, #140]	; (8001fb0 <print_ring_buf_v2+0x148>)
 8001f22:	f004 fed7 	bl	8006cd4 <siprintf>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <print_ring_buf_v2+0x140>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <print_ring_buf_v2+0x140>)
 8001f34:	801a      	strh	r2, [r3, #0]
    	for (int n = 0; n < (RING_BUF_SIZE); n++) {
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	ddb9      	ble.n	8001eb6 <print_ring_buf_v2+0x4e>
											circularBuffer[readIndex][24], circularBuffer[readIndex][25]);	// Update message for usart print

    	// sprintf(msg, "[%d] = %d\r\n", readIndex, circularBuffer[readIndex]);	// Update message for usart print
		*/

    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f42:	4817      	ldr	r0, [pc, #92]	; (8001fa0 <print_ring_buf_v2+0x138>)
 8001f44:	f7fe f964 	bl	8000210 <strlen>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f50:	4913      	ldr	r1, [pc, #76]	; (8001fa0 <print_ring_buf_v2+0x138>)
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <print_ring_buf_v2+0x13c>)
 8001f54:	f003 fd3b 	bl	80059ce <HAL_UART_Transmit>
    	/*
    	huart2.Instance->CR3 |= USART_CR3_DMAT;
    	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg,
    							(uint32_t)&huart2.Instance->DR, strlen(msg));
		*/
    	pos = 0;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <print_ring_buf_v2+0x140>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	801a      	strh	r2, [r3, #0]
        readIndex++;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <print_ring_buf_v2+0x130>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <print_ring_buf_v2+0x130>)
 8001f68:	801a      	strh	r2, [r3, #0]
        if (readIndex > bufferSize) {
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <print_ring_buf_v2+0x130>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	88fa      	ldrh	r2, [r7, #6]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d202      	bcs.n	8001f7a <print_ring_buf_v2+0x112>
            readIndex = 0;
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <print_ring_buf_v2+0x130>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferSize; i++)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	db93      	blt.n	8001eb0 <print_ring_buf_v2+0x48>
        }
    }
    return 1;
 8001f88:	2301      	movs	r3, #1

}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200000a8 	.word	0x200000a8
 8001f98:	200000aa 	.word	0x200000aa
 8001f9c:	0800915c 	.word	0x0800915c
 8001fa0:	200000ac 	.word	0x200000ac
 8001fa4:	20019438 	.word	0x20019438
 8001fa8:	200001a6 	.word	0x200001a6
 8001fac:	080091e8 	.word	0x080091e8
 8001fb0:	080091f0 	.word	0x080091f0

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <Error_Handler+0x8>
	...

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_MspInit+0x4c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_MspInit+0x4c>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08e      	sub	sp, #56	; 0x38
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a51      	ldr	r2, [pc, #324]	; (8002174 <HAL_ADC_MspInit+0x164>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d130      	bne.n	8002094 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a4f      	ldr	r2, [pc, #316]	; (8002178 <HAL_ADC_MspInit+0x168>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	4b49      	ldr	r3, [pc, #292]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a48      	ldr	r2, [pc, #288]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800206a:	2301      	movs	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206e:	2303      	movs	r3, #3
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	4619      	mov	r1, r3
 800207c:	483f      	ldr	r0, [pc, #252]	; (800217c <HAL_ADC_MspInit+0x16c>)
 800207e:	f001 fd91 	bl	8003ba4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2012      	movs	r0, #18
 8002088:	f001 f8f1 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800208c:	2012      	movs	r0, #18
 800208e:	f001 f90a 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002092:	e06a      	b.n	800216a <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a39      	ldr	r2, [pc, #228]	; (8002180 <HAL_ADC_MspInit+0x170>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d130      	bne.n	8002100 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	4b35      	ldr	r3, [pc, #212]	; (8002178 <HAL_ADC_MspInit+0x168>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a34      	ldr	r2, [pc, #208]	; (8002178 <HAL_ADC_MspInit+0x168>)
 80020a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b32      	ldr	r3, [pc, #200]	; (8002178 <HAL_ADC_MspInit+0x168>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_ADC_MspInit+0x168>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a2d      	ldr	r2, [pc, #180]	; (8002178 <HAL_ADC_MspInit+0x168>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_ADC_MspInit+0x168>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020d6:	2302      	movs	r3, #2
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020da:	2303      	movs	r3, #3
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4824      	ldr	r0, [pc, #144]	; (800217c <HAL_ADC_MspInit+0x16c>)
 80020ea:	f001 fd5b 	bl	8003ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	2012      	movs	r0, #18
 80020f4:	f001 f8bb 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020f8:	2012      	movs	r0, #18
 80020fa:	f001 f8d4 	bl	80032a6 <HAL_NVIC_EnableIRQ>
}
 80020fe:	e034      	b.n	800216a <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_ADC_MspInit+0x174>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12f      	bne.n	800216a <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_ADC_MspInit+0x168>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_ADC_MspInit+0x168>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_ADC_MspInit+0x168>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002142:	2301      	movs	r3, #1
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002146:	2303      	movs	r3, #3
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <HAL_ADC_MspInit+0x178>)
 8002156:	f001 fd25 	bl	8003ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2012      	movs	r0, #18
 8002160:	f001 f885 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002164:	2012      	movs	r0, #18
 8002166:	f001 f89e 	bl	80032a6 <HAL_NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3738      	adds	r7, #56	; 0x38
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40012000 	.word	0x40012000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000
 8002180:	40012100 	.word	0x40012100
 8002184:	40012200 	.word	0x40012200
 8002188:	40020800 	.word	0x40020800

0800218c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_DAC_MspInit+0x7c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d127      	bne.n	80021fe <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_DAC_MspInit+0x80>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_DAC_MspInit+0x80>)
 80021b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_DAC_MspInit+0x80>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_DAC_MspInit+0x80>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <HAL_DAC_MspInit+0x80>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_DAC_MspInit+0x80>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021e6:	2310      	movs	r3, #16
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ea:	2303      	movs	r3, #3
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_DAC_MspInit+0x84>)
 80021fa:	f001 fcd3 	bl	8003ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40007400 	.word	0x40007400
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_TIM_Base_MspInit+0x80>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d116      	bne.n	8002254 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_TIM_Base_MspInit+0x84>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <HAL_TIM_Base_MspInit+0x84>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_TIM_Base_MspInit+0x84>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2019      	movs	r0, #25
 8002248:	f001 f811 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800224c:	2019      	movs	r0, #25
 800224e:	f001 f82a 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002252:	e01a      	b.n	800228a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_TIM_Base_MspInit+0x88>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d115      	bne.n	800228a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_TIM_Base_MspInit+0x84>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <HAL_TIM_Base_MspInit+0x84>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_TIM_Base_MspInit+0x84>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2019      	movs	r0, #25
 8002280:	f000 fff5 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002284:	2019      	movs	r0, #25
 8002286:	f001 f80e 	bl	80032a6 <HAL_NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000
 8002298:	40023800 	.word	0x40023800
 800229c:	40014400 	.word	0x40014400

080022a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a34      	ldr	r2, [pc, #208]	; (8002390 <HAL_UART_MspInit+0xf0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d161      	bne.n	8002386 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b33      	ldr	r3, [pc, #204]	; (8002394 <HAL_UART_MspInit+0xf4>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a32      	ldr	r2, [pc, #200]	; (8002394 <HAL_UART_MspInit+0xf4>)
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_UART_MspInit+0xf4>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <HAL_UART_MspInit+0xf4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_UART_MspInit+0xf4>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_UART_MspInit+0xf4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022fa:	230c      	movs	r3, #12
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230a:	2307      	movs	r3, #7
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4820      	ldr	r0, [pc, #128]	; (8002398 <HAL_UART_MspInit+0xf8>)
 8002316:	f001 fc45 	bl	8003ba4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_UART_MspInit+0xfc>)
 800231c:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <HAL_UART_MspInit+0x100>)
 800231e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_UART_MspInit+0xfc>)
 8002322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002326:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002328:	4b1c      	ldr	r3, [pc, #112]	; (800239c <HAL_UART_MspInit+0xfc>)
 800232a:	2240      	movs	r2, #64	; 0x40
 800232c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_UART_MspInit+0xfc>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_UART_MspInit+0xfc>)
 8002336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_UART_MspInit+0xfc>)
 800233e:	2200      	movs	r2, #0
 8002340:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_UART_MspInit+0xfc>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_UART_MspInit+0xfc>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_UART_MspInit+0xfc>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_UART_MspInit+0xfc>)
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800235a:	4810      	ldr	r0, [pc, #64]	; (800239c <HAL_UART_MspInit+0xfc>)
 800235c:	f001 f8a6 	bl	80034ac <HAL_DMA_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002366:	f7ff fe25 	bl	8001fb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a0b      	ldr	r2, [pc, #44]	; (800239c <HAL_UART_MspInit+0xfc>)
 800236e:	635a      	str	r2, [r3, #52]	; 0x34
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_UART_MspInit+0xfc>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2026      	movs	r0, #38	; 0x26
 800237c:	f000 ff77 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002380:	2026      	movs	r0, #38	; 0x26
 8002382:	f000 ff90 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40004400 	.word	0x40004400
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000
 800239c:	20000498 	.word	0x20000498
 80023a0:	400260a0 	.word	0x400260a0

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <NMI_Handler+0x4>

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f0:	f000 f8fc 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <DMA1_Stream6_IRQHandler+0x10>)
 80023fe:	f001 f995 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000498 	.word	0x20000498

0800240c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <ADC_IRQHandler+0x1c>)
 8002412:	f000 faac 	bl	800296e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <ADC_IRQHandler+0x20>)
 8002418:	f000 faa9 	bl	800296e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800241c:	4804      	ldr	r0, [pc, #16]	; (8002430 <ADC_IRQHandler+0x24>)
 800241e:	f000 faa6 	bl	800296e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000404 	.word	0x20000404
 800242c:	20000330 	.word	0x20000330
 8002430:	20000450 	.word	0x20000450

08002434 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800243a:	f002 fcb4 	bl	8004da6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800243e:	4803      	ldr	r0, [pc, #12]	; (800244c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002440:	f002 fcb1 	bl	8004da6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200193a4 	.word	0x200193a4
 800244c:	2000037c 	.word	0x2000037c

08002450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <USART2_IRQHandler+0x10>)
 8002456:	f003 fb4d 	bl	8005af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20019438 	.word	0x20019438

08002464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <_sbrk+0x5c>)
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <_sbrk+0x60>)
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <_sbrk+0x64>)
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <_sbrk+0x68>)
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	429a      	cmp	r2, r3
 8002492:	d207      	bcs.n	80024a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002494:	f004 fbec 	bl	8006c70 <__errno>
 8002498:	4603      	mov	r3, r0
 800249a:	220c      	movs	r2, #12
 800249c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	e009      	b.n	80024b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <_sbrk+0x64>)
 80024b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20020000 	.word	0x20020000
 80024c4:	00000400 	.word	0x00000400
 80024c8:	200001a8 	.word	0x200001a8
 80024cc:	20019498 	.word	0x20019498

080024d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <SystemInit+0x20>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <SystemInit+0x20>)
 80024dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800252c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002500:	e002      	b.n	8002508 <LoopCopyDataInit>

08002502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002506:	3304      	adds	r3, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800250c:	d3f9      	bcc.n	8002502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002510:	4c0b      	ldr	r4, [pc, #44]	; (8002540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002514:	e001      	b.n	800251a <LoopFillZerobss>

08002516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002518:	3204      	adds	r2, #4

0800251a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800251c:	d3fb      	bcc.n	8002516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800251e:	f7ff ffd7 	bl	80024d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002522:	f004 fbab 	bl	8006c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002526:	f7fe fd03 	bl	8000f30 <main>
  bx  lr    
 800252a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800252c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002538:	08009670 	.word	0x08009670
  ldr r2, =_sbss
 800253c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002540:	20019498 	.word	0x20019498

08002544 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <CAN1_RX0_IRQHandler>
	...

08002548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_Init+0x40>)
 8002552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_Init+0x40>)
 800255e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_Init+0x40>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002570:	2003      	movs	r0, #3
 8002572:	f000 fe71 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002576:	2000      	movs	r0, #0
 8002578:	f000 f808 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800257c:	f7ff fd20 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023c00 	.word	0x40023c00

0800258c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x54>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x58>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fe89 	bl	80032c2 <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0f      	cmp	r3, #15
 80025be:	d80a      	bhi.n	80025d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f000 fe51 	bl	800326e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_InitTick+0x5c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000000c 	.word	0x2000000c
 80025e4:	20000014 	.word	0x20000014
 80025e8:	20000010 	.word	0x20000010

080025ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000014 	.word	0x20000014
 8002610:	20019484 	.word	0x20019484

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20019484 	.word	0x20019484

0800262c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e033      	b.n	80026aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fce0 	bl	8002010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002672:	f023 0302 	bic.w	r3, r3, #2
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fc14 	bl	8002eac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
 800269a:	e001      	b.n	80026a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Start+0x1a>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e0b2      	b.n	8002834 <HAL_ADC_Start+0x180>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d018      	beq.n	8002716 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026f4:	4b52      	ldr	r3, [pc, #328]	; (8002840 <HAL_ADC_Start+0x18c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_ADC_Start+0x190>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0c9a      	lsrs	r2, r3, #18
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002708:	e002      	b.n	8002710 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3b01      	subs	r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f9      	bne.n	800270a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d17a      	bne.n	800281a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	d106      	bne.n	8002772 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	f023 0206 	bic.w	r2, r3, #6
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
 8002770:	e002      	b.n	8002778 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002780:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_ADC_Start+0x194>)
 8002782:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800278c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2b00      	cmp	r3, #0
 8002798:	d12a      	bne.n	80027f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_ADC_Start+0x198>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d015      	beq.n	80027d0 <HAL_ADC_Start+0x11c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_ADC_Start+0x19c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d105      	bne.n	80027ba <HAL_ADC_Start+0x106>
 80027ae:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_ADC_Start+0x194>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a25      	ldr	r2, [pc, #148]	; (8002854 <HAL_ADC_Start+0x1a0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d136      	bne.n	8002832 <HAL_ADC_Start+0x17e>
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_ADC_Start+0x194>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d130      	bne.n	8002832 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d129      	bne.n	8002832 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	e020      	b.n	8002832 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_ADC_Start+0x198>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d11b      	bne.n	8002832 <HAL_ADC_Start+0x17e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d114      	bne.n	8002832 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	e00b      	b.n	8002832 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0210 	orr.w	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	2000000c 	.word	0x2000000c
 8002844:	431bde83 	.word	0x431bde83
 8002848:	40012300 	.word	0x40012300
 800284c:	40012000 	.word	0x40012000
 8002850:	40012100 	.word	0x40012100
 8002854:	40012200 	.word	0x40012200

08002858 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002874:	d113      	bne.n	800289e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002884:	d10b      	bne.n	800289e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e063      	b.n	8002966 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800289e:	f7ff feb9 	bl	8002614 <HAL_GetTick>
 80028a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028a4:	e021      	b.n	80028ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d01d      	beq.n	80028ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_ADC_PollForConversion+0x6c>
 80028b4:	f7ff feae 	bl	8002614 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d212      	bcs.n	80028ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d00b      	beq.n	80028ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f043 0204 	orr.w	r2, r3, #4
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e03d      	b.n	8002966 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d1d6      	bne.n	80028a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0212 	mvn.w	r2, #18
 8002900:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d123      	bne.n	8002964 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11f      	bne.n	8002964 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800293c:	2b00      	cmp	r3, #0
 800293e:	d111      	bne.n	8002964 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b20      	cmp	r3, #32
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d049      	beq.n	8002a44 <HAL_ADC_IRQHandler+0xd6>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d046      	beq.n	8002a44 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d12b      	bne.n	8002a34 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d127      	bne.n	8002a34 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d119      	bne.n	8002a34 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0220 	bic.w	r2, r2, #32
 8002a0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8e8 	bl	8002c0a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f06f 0212 	mvn.w	r2, #18
 8002a42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf0c      	ite	eq
 8002a52:	2301      	moveq	r3, #1
 8002a54:	2300      	movne	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d057      	beq.n	8002b26 <HAL_ADC_IRQHandler+0x1b8>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d054      	beq.n	8002b26 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d139      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d12b      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d124      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11d      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d119      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d105      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fac4 	bl	80030a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 020c 	mvn.w	r2, #12
 8002b24:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d017      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x21a>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d014      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d10d      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f850 	bl	8002c1e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0201 	mvn.w	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x27a>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d012      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0220 	mvn.w	r2, #32
 8002bd6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f82a 	bl	8002c32 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f06f 0220 	mvn.w	r2, #32
 8002be6:	601a      	str	r2, [r3, #0]
  }
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e113      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x244>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	d925      	bls.n	8002cc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68d9      	ldr	r1, [r3, #12]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	3b1e      	subs	r3, #30
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43da      	mvns	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	400a      	ands	r2, r1
 8002c98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68d9      	ldr	r1, [r3, #12]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4403      	add	r3, r0
 8002cb2:	3b1e      	subs	r3, #30
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	e022      	b.n	8002d06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6919      	ldr	r1, [r3, #16]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4403      	add	r3, r0
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d824      	bhi.n	8002d58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3b05      	subs	r3, #5
 8002d20:	221f      	movs	r2, #31
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	3b05      	subs	r3, #5
 8002d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
 8002d56:	e04c      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d824      	bhi.n	8002daa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b23      	subs	r3, #35	; 0x23
 8002d72:	221f      	movs	r2, #31
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	400a      	ands	r2, r1
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	3b23      	subs	r3, #35	; 0x23
 8002d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
 8002da8:	e023      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b41      	subs	r3, #65	; 0x41
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	400a      	ands	r2, r1
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b41      	subs	r3, #65	; 0x41
 8002de6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_ADC_ConfigChannel+0x250>)
 8002df4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a28      	ldr	r2, [pc, #160]	; (8002e9c <HAL_ADC_ConfigChannel+0x254>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10f      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1d8>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	d10b      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_ADC_ConfigChannel+0x254>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d12b      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x23a>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <HAL_ADC_ConfigChannel+0x258>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x1f4>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b11      	cmp	r3, #17
 8002e3a:	d122      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <HAL_ADC_ConfigChannel+0x258>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d111      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_ADC_ConfigChannel+0x25c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_ADC_ConfigChannel+0x260>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	0c9a      	lsrs	r2, r3, #18
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e74:	e002      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f9      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40012300 	.word	0x40012300
 8002e9c:	40012000 	.word	0x40012000
 8002ea0:	10000012 	.word	0x10000012
 8002ea4:	2000000c 	.word	0x2000000c
 8002ea8:	431bde83 	.word	0x431bde83

08002eac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb4:	4b79      	ldr	r3, [pc, #484]	; (800309c <ADC_Init+0x1f0>)
 8002eb6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	021a      	lsls	r2, r3, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6899      	ldr	r1, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	4a58      	ldr	r2, [pc, #352]	; (80030a0 <ADC_Init+0x1f4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d022      	beq.n	8002f8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6899      	ldr	r1, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6899      	ldr	r1, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e00f      	b.n	8002faa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0202 	bic.w	r2, r2, #2
 8002fb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6899      	ldr	r1, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7e1b      	ldrb	r3, [r3, #24]
 8002fc4:	005a      	lsls	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01b      	beq.n	8003010 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ff6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	3b01      	subs	r3, #1
 8003004:	035a      	lsls	r2, r3, #13
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	e007      	b.n	8003020 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	3b01      	subs	r3, #1
 800303c:	051a      	lsls	r2, r3, #20
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6899      	ldr	r1, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003062:	025a      	lsls	r2, r3, #9
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6899      	ldr	r1, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	029a      	lsls	r2, r3, #10
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40012300 	.word	0x40012300
 80030a0:	0f000001 	.word	0x0f000001

080030a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <__NVIC_SetPriorityGrouping+0x44>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d4:	4013      	ands	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ea:	4a04      	ldr	r2, [pc, #16]	; (80030fc <__NVIC_SetPriorityGrouping+0x44>)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	60d3      	str	r3, [r2, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <__NVIC_GetPriorityGrouping+0x18>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f003 0307 	and.w	r3, r3, #7
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db0b      	blt.n	8003146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	4907      	ldr	r1, [pc, #28]	; (8003154 <__NVIC_EnableIRQ+0x38>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2001      	movs	r0, #1
 800313e:	fa00 f202 	lsl.w	r2, r0, r2
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000e100 	.word	0xe000e100

08003158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	2b00      	cmp	r3, #0
 800316a:	db0a      	blt.n	8003182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	490c      	ldr	r1, [pc, #48]	; (80031a4 <__NVIC_SetPriority+0x4c>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	0112      	lsls	r2, r2, #4
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	440b      	add	r3, r1
 800317c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003180:	e00a      	b.n	8003198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4908      	ldr	r1, [pc, #32]	; (80031a8 <__NVIC_SetPriority+0x50>)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	3b04      	subs	r3, #4
 8003190:	0112      	lsls	r2, r2, #4
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	440b      	add	r3, r1
 8003196:	761a      	strb	r2, [r3, #24]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000e100 	.word	0xe000e100
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f1c3 0307 	rsb	r3, r3, #7
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	bf28      	it	cs
 80031ca:	2304      	movcs	r3, #4
 80031cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d902      	bls.n	80031dc <NVIC_EncodePriority+0x30>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3b03      	subs	r3, #3
 80031da:	e000      	b.n	80031de <NVIC_EncodePriority+0x32>
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	401a      	ands	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43d9      	mvns	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	4313      	orrs	r3, r2
         );
}
 8003206:	4618      	mov	r0, r3
 8003208:	3724      	adds	r7, #36	; 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f7ff ff8e 	bl	8003158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff29 	bl	80030b8 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff3e 	bl	8003100 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff8e 	bl	80031ac <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5d 	bl	8003158 <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff31 	bl	800311c <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa2 	bl	8003214 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e014      	b.n	8003316 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fe ff45 	bl	800218c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	795b      	ldrb	r3, [r3, #5]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_DAC_Start+0x16>
 8003330:	2302      	movs	r3, #2
 8003332:	e040      	b.n	80033b6 <HAL_DAC_Start+0x98>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003368:	2b3c      	cmp	r3, #60	; 0x3c
 800336a:	d11d      	bne.n	80033a8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	e014      	b.n	80033a8 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	213c      	movs	r1, #60	; 0x3c
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0202 	orr.w	r2, r2, #2
 80033a6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b087      	sub	sp, #28
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	3308      	adds	r3, #8
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e004      	b.n	80033f6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	3314      	adds	r3, #20
 80033f4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	461a      	mov	r2, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	795b      	ldrb	r3, [r3, #5]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_DAC_ConfigChannel+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e03c      	b.n	800349e <HAL_DAC_ConfigChannel+0x92>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4013      	ands	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	22c0      	movs	r2, #192	; 0xc0
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	400a      	ands	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034b8:	f7ff f8ac 	bl	8002614 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e099      	b.n	80035fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e8:	e00f      	b.n	800350a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ea:	f7ff f893 	bl	8002614 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	d908      	bls.n	800350a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2203      	movs	r2, #3
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e078      	b.n	80035fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e8      	bne.n	80034ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4b38      	ldr	r3, [pc, #224]	; (8003604 <HAL_DMA_Init+0x158>)
 8003524:	4013      	ands	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003536:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	2b04      	cmp	r3, #4
 8003562:	d107      	bne.n	8003574 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4313      	orrs	r3, r2
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 0307 	bic.w	r3, r3, #7
 800358a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2b04      	cmp	r3, #4
 800359c:	d117      	bne.n	80035ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fa7b 	bl	8003aac <DMA_CheckFifoParam>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035ca:	2301      	movs	r3, #1
 80035cc:	e016      	b.n	80035fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fa32 	bl	8003a40 <DMA_CalcBaseAndBitshift>
 80035dc:	4603      	mov	r3, r0
 80035de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	223f      	movs	r2, #63	; 0x3f
 80035e6:	409a      	lsls	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	f010803f 	.word	0xf010803f

08003608 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003616:	f7fe fffd 	bl	8002614 <HAL_GetTick>
 800361a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d008      	beq.n	800363a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e052      	b.n	80036e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0216 	bic.w	r2, r2, #22
 8003648:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003658:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <HAL_DMA_Abort+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0208 	bic.w	r2, r2, #8
 8003678:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368a:	e013      	b.n	80036b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800368c:	f7fe ffc2 	bl	8002614 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b05      	cmp	r3, #5
 8003698:	d90c      	bls.n	80036b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2203      	movs	r2, #3
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e015      	b.n	80036e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e4      	bne.n	800368c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	223f      	movs	r2, #63	; 0x3f
 80036c8:	409a      	lsls	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d004      	beq.n	8003706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00c      	b.n	8003720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2205      	movs	r2, #5
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003738:	4b92      	ldr	r3, [pc, #584]	; (8003984 <HAL_DMA_IRQHandler+0x258>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a92      	ldr	r2, [pc, #584]	; (8003988 <HAL_DMA_IRQHandler+0x25c>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	2208      	movs	r2, #8
 8003758:	409a      	lsls	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01a      	beq.n	8003798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	2208      	movs	r2, #8
 8003786:	409a      	lsls	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2201      	movs	r2, #1
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	2204      	movs	r2, #4
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d012      	beq.n	8003804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	2204      	movs	r2, #4
 80037f2:	409a      	lsls	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	2210      	movs	r2, #16
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d043      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03c      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	2210      	movs	r2, #16
 8003828:	409a      	lsls	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d024      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e01f      	b.n	800389c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e016      	b.n	800389c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0208 	bic.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2220      	movs	r2, #32
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 808e 	beq.w	80039ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8086 	beq.w	80039ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	2220      	movs	r2, #32
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d136      	bne.n	8003944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0216 	bic.w	r2, r2, #22
 80038e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_DMA_IRQHandler+0x1da>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	223f      	movs	r2, #63	; 0x3f
 800391c:	409a      	lsls	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d07d      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
        }
        return;
 8003942:	e078      	b.n	8003a36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01c      	beq.n	800398c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	2b00      	cmp	r3, #0
 8003966:	d030      	beq.n	80039ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	e02b      	b.n	80039ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d027      	beq.n	80039ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
 8003982:	e022      	b.n	80039ca <HAL_DMA_IRQHandler+0x29e>
 8003984:	2000000c 	.word	0x2000000c
 8003988:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0210 	bic.w	r2, r2, #16
 80039a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d032      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d022      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2205      	movs	r2, #5
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3301      	adds	r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d307      	bcc.n	8003a12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f2      	bne.n	80039f6 <HAL_DMA_IRQHandler+0x2ca>
 8003a10:	e000      	b.n	8003a14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
 8003a34:	e000      	b.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a36:	bf00      	nop
    }
  }
}
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop

08003a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	3b10      	subs	r3, #16
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d909      	bls.n	8003a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a76:	f023 0303 	bic.w	r3, r3, #3
 8003a7a:	1d1a      	adds	r2, r3, #4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a80:	e007      	b.n	8003a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a8a:	f023 0303 	bic.w	r3, r3, #3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	aaaaaaab 	.word	0xaaaaaaab
 8003aa8:	08009210 	.word	0x08009210

08003aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11f      	bne.n	8003b06 <DMA_CheckFifoParam+0x5a>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d856      	bhi.n	8003b7a <DMA_CheckFifoParam+0xce>
 8003acc:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <DMA_CheckFifoParam+0x28>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af7 	.word	0x08003af7
 8003adc:	08003ae5 	.word	0x08003ae5
 8003ae0:	08003b7b 	.word	0x08003b7b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d046      	beq.n	8003b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af4:	e043      	b.n	8003b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003afe:	d140      	bne.n	8003b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b04:	e03d      	b.n	8003b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b0e:	d121      	bne.n	8003b54 <DMA_CheckFifoParam+0xa8>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d837      	bhi.n	8003b86 <DMA_CheckFifoParam+0xda>
 8003b16:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <DMA_CheckFifoParam+0x70>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b33 	.word	0x08003b33
 8003b24:	08003b2d 	.word	0x08003b2d
 8003b28:	08003b45 	.word	0x08003b45
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e030      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d025      	beq.n	8003b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b42:	e022      	b.n	8003b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b4c:	d11f      	bne.n	8003b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b52:	e01c      	b.n	8003b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d903      	bls.n	8003b62 <DMA_CheckFifoParam+0xb6>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d003      	beq.n	8003b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b60:	e018      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
      break;
 8003b66:	e015      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	e00b      	b.n	8003b92 <DMA_CheckFifoParam+0xe6>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e00a      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e008      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b82:	bf00      	nop
 8003b84:	e006      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b86:	bf00      	nop
 8003b88:	e004      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e002      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b8e:	bf00      	nop
 8003b90:	e000      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b92:	bf00      	nop
    }
  } 
  
  return status; 
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop

08003ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	e165      	b.n	8003e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	f040 8154 	bne.w	8003e86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d005      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d130      	bne.n	8003c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	2203      	movs	r2, #3
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 0201 	and.w	r2, r3, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d017      	beq.n	8003c94 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d123      	bne.n	8003ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	08da      	lsrs	r2, r3, #3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3208      	adds	r2, #8
 8003ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	08da      	lsrs	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3208      	adds	r2, #8
 8003ce2:	69b9      	ldr	r1, [r7, #24]
 8003ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0203 	and.w	r2, r3, #3
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80ae 	beq.w	8003e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ea4 <HAL_GPIO_Init+0x300>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	4a5c      	ldr	r2, [pc, #368]	; (8003ea4 <HAL_GPIO_Init+0x300>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d38:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3a:	4b5a      	ldr	r3, [pc, #360]	; (8003ea4 <HAL_GPIO_Init+0x300>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d46:	4a58      	ldr	r2, [pc, #352]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	220f      	movs	r2, #15
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a4f      	ldr	r2, [pc, #316]	; (8003eac <HAL_GPIO_Init+0x308>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d025      	beq.n	8003dbe <HAL_GPIO_Init+0x21a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4e      	ldr	r2, [pc, #312]	; (8003eb0 <HAL_GPIO_Init+0x30c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <HAL_GPIO_Init+0x216>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4d      	ldr	r2, [pc, #308]	; (8003eb4 <HAL_GPIO_Init+0x310>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <HAL_GPIO_Init+0x212>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4c      	ldr	r2, [pc, #304]	; (8003eb8 <HAL_GPIO_Init+0x314>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x20e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4b      	ldr	r2, [pc, #300]	; (8003ebc <HAL_GPIO_Init+0x318>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x20a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4a      	ldr	r2, [pc, #296]	; (8003ec0 <HAL_GPIO_Init+0x31c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x206>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a49      	ldr	r2, [pc, #292]	; (8003ec4 <HAL_GPIO_Init+0x320>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x202>
 8003da2:	2306      	movs	r3, #6
 8003da4:	e00c      	b.n	8003dc0 <HAL_GPIO_Init+0x21c>
 8003da6:	2307      	movs	r3, #7
 8003da8:	e00a      	b.n	8003dc0 <HAL_GPIO_Init+0x21c>
 8003daa:	2305      	movs	r3, #5
 8003dac:	e008      	b.n	8003dc0 <HAL_GPIO_Init+0x21c>
 8003dae:	2304      	movs	r3, #4
 8003db0:	e006      	b.n	8003dc0 <HAL_GPIO_Init+0x21c>
 8003db2:	2303      	movs	r3, #3
 8003db4:	e004      	b.n	8003dc0 <HAL_GPIO_Init+0x21c>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e002      	b.n	8003dc0 <HAL_GPIO_Init+0x21c>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_GPIO_Init+0x21c>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	f002 0203 	and.w	r2, r2, #3
 8003dc6:	0092      	lsls	r2, r2, #2
 8003dc8:	4093      	lsls	r3, r2
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd0:	4935      	ldr	r1, [pc, #212]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dde:	4b3a      	ldr	r3, [pc, #232]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e02:	4a31      	ldr	r2, [pc, #196]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e08:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e32:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e80:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <HAL_GPIO_Init+0x324>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	f67f ae96 	bls.w	8003bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3724      	adds	r7, #36	; 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40013800 	.word	0x40013800
 8003eac:	40020000 	.word	0x40020000
 8003eb0:	40020400 	.word	0x40020400
 8003eb4:	40020800 	.word	0x40020800
 8003eb8:	40020c00 	.word	0x40020c00
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40021400 	.word	0x40021400
 8003ec4:	40021800 	.word	0x40021800
 8003ec8:	40013c00 	.word	0x40013c00

08003ecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e001      	b.n	8003eee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	807b      	strh	r3, [r7, #2]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f0c:	787b      	ldrb	r3, [r7, #1]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f18:	e003      	b.n	8003f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	041a      	lsls	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	619a      	str	r2, [r3, #24]
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5c:	f7fe fb5a 	bl	8002614 <HAL_GetTick>
 8003f60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f62:	e009      	b.n	8003f78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f64:	f7fe fb56 	bl	8002614 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f72:	d901      	bls.n	8003f78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e01f      	b.n	8003fb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d1ee      	bne.n	8003f64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f8c:	f7fe fb42 	bl	8002614 <HAL_GetTick>
 8003f90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f92:	e009      	b.n	8003fa8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f94:	f7fe fb3e 	bl	8002614 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa2:	d901      	bls.n	8003fa8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e007      	b.n	8003fb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fb4:	d1ee      	bne.n	8003f94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	420e0040 	.word	0x420e0040
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	420e0044 	.word	0x420e0044

08003fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0cc      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b68      	ldr	r3, [pc, #416]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d90c      	bls.n	800400c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b63      	ldr	r3, [pc, #396]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0b8      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d020      	beq.n	800405a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004024:	4b59      	ldr	r3, [pc, #356]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a58      	ldr	r2, [pc, #352]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800402e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800403c:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a52      	ldr	r2, [pc, #328]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b50      	ldr	r3, [pc, #320]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	494d      	ldr	r1, [pc, #308]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d044      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d119      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e07f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d003      	beq.n	800408e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408a:	2b03      	cmp	r3, #3
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e067      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4934      	ldr	r1, [pc, #208]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c0:	f7fe faa8 	bl	8002614 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fe faa4 	bl	8002614 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e04f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 020c 	and.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1eb      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d20c      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e032      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4916      	ldr	r1, [pc, #88]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	490e      	ldr	r1, [pc, #56]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004156:	f000 f855 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 800415a:	4602      	mov	r2, r0
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	490a      	ldr	r1, [pc, #40]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	5ccb      	ldrb	r3, [r1, r3]
 800416a:	fa22 f303 	lsr.w	r3, r2, r3
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fa08 	bl	800258c <HAL_InitTick>

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023c00 	.word	0x40023c00
 800418c:	40023800 	.word	0x40023800
 8004190:	080091f8 	.word	0x080091f8
 8004194:	2000000c 	.word	0x2000000c
 8004198:	20000010 	.word	0x20000010

0800419c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	2000000c 	.word	0x2000000c

080041b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041b8:	f7ff fff0 	bl	800419c <HAL_RCC_GetHCLKFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	0a9b      	lsrs	r3, r3, #10
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	4903      	ldr	r1, [pc, #12]	; (80041d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40023800 	.word	0x40023800
 80041d8:	08009208 	.word	0x08009208

080041dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041e0:	f7ff ffdc 	bl	800419c <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0b5b      	lsrs	r3, r3, #13
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4903      	ldr	r1, [pc, #12]	; (8004200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	08009208 	.word	0x08009208

08004204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004220:	4bce      	ldr	r3, [pc, #824]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b0c      	cmp	r3, #12
 800422a:	f200 818d 	bhi.w	8004548 <HAL_RCC_GetSysClockFreq+0x344>
 800422e:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <HAL_RCC_GetSysClockFreq+0x30>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004269 	.word	0x08004269
 8004238:	08004549 	.word	0x08004549
 800423c:	08004549 	.word	0x08004549
 8004240:	08004549 	.word	0x08004549
 8004244:	0800426f 	.word	0x0800426f
 8004248:	08004549 	.word	0x08004549
 800424c:	08004549 	.word	0x08004549
 8004250:	08004549 	.word	0x08004549
 8004254:	08004275 	.word	0x08004275
 8004258:	08004549 	.word	0x08004549
 800425c:	08004549 	.word	0x08004549
 8004260:	08004549 	.word	0x08004549
 8004264:	080043e9 	.word	0x080043e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4bbd      	ldr	r3, [pc, #756]	; (8004560 <HAL_RCC_GetSysClockFreq+0x35c>)
 800426a:	61bb      	str	r3, [r7, #24]
       break;
 800426c:	e16f      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426e:	4bbd      	ldr	r3, [pc, #756]	; (8004564 <HAL_RCC_GetSysClockFreq+0x360>)
 8004270:	61bb      	str	r3, [r7, #24]
      break;
 8004272:	e16c      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004274:	4bb9      	ldr	r3, [pc, #740]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800427c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427e:	4bb7      	ldr	r3, [pc, #732]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d053      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428a:	4bb4      	ldr	r3, [pc, #720]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	099b      	lsrs	r3, r3, #6
 8004290:	461a      	mov	r2, r3
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	ea02 0400 	and.w	r4, r2, r0
 80042a2:	603c      	str	r4, [r7, #0]
 80042a4:	400b      	ands	r3, r1
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ac:	4620      	mov	r0, r4
 80042ae:	4629      	mov	r1, r5
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	014b      	lsls	r3, r1, #5
 80042ba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042be:	0142      	lsls	r2, r0, #5
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	4623      	mov	r3, r4
 80042c6:	1ac0      	subs	r0, r0, r3
 80042c8:	462b      	mov	r3, r5
 80042ca:	eb61 0103 	sbc.w	r1, r1, r3
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	018b      	lsls	r3, r1, #6
 80042d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042dc:	0182      	lsls	r2, r0, #6
 80042de:	1a12      	subs	r2, r2, r0
 80042e0:	eb63 0301 	sbc.w	r3, r3, r1
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	00d9      	lsls	r1, r3, #3
 80042ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042f2:	00d0      	lsls	r0, r2, #3
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4621      	mov	r1, r4
 80042fa:	1852      	adds	r2, r2, r1
 80042fc:	4629      	mov	r1, r5
 80042fe:	eb43 0101 	adc.w	r1, r3, r1
 8004302:	460b      	mov	r3, r1
 8004304:	f04f 0000 	mov.w	r0, #0
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	0259      	lsls	r1, r3, #9
 800430e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004312:	0250      	lsls	r0, r2, #9
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	461a      	mov	r2, r3
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	f7fc fc88 	bl	8000c38 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	e04c      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004332:	4b8a      	ldr	r3, [pc, #552]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	099b      	lsrs	r3, r3, #6
 8004338:	461a      	mov	r2, r3
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	ea02 0a00 	and.w	sl, r2, r0
 800434a:	ea03 0b01 	and.w	fp, r3, r1
 800434e:	4650      	mov	r0, sl
 8004350:	4659      	mov	r1, fp
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	014b      	lsls	r3, r1, #5
 800435c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004360:	0142      	lsls	r2, r0, #5
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	ebb0 000a 	subs.w	r0, r0, sl
 800436a:	eb61 010b 	sbc.w	r1, r1, fp
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	018b      	lsls	r3, r1, #6
 8004378:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800437c:	0182      	lsls	r2, r0, #6
 800437e:	1a12      	subs	r2, r2, r0
 8004380:	eb63 0301 	sbc.w	r3, r3, r1
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	00d9      	lsls	r1, r3, #3
 800438e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004392:	00d0      	lsls	r0, r2, #3
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	eb12 020a 	adds.w	r2, r2, sl
 800439c:	eb43 030b 	adc.w	r3, r3, fp
 80043a0:	f04f 0000 	mov.w	r0, #0
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	0299      	lsls	r1, r3, #10
 80043aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ae:	0290      	lsls	r0, r2, #10
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	f7fc fc3a 	bl	8000c38 <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4613      	mov	r3, r2
 80043ca:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043cc:	4b63      	ldr	r3, [pc, #396]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	61bb      	str	r3, [r7, #24]
      break;
 80043e6:	e0b2      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e8:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f2:	4b5a      	ldr	r3, [pc, #360]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d04d      	beq.n	800449a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fe:	4b57      	ldr	r3, [pc, #348]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	461a      	mov	r2, r3
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800440e:	f04f 0100 	mov.w	r1, #0
 8004412:	ea02 0800 	and.w	r8, r2, r0
 8004416:	ea03 0901 	and.w	r9, r3, r1
 800441a:	4640      	mov	r0, r8
 800441c:	4649      	mov	r1, r9
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	014b      	lsls	r3, r1, #5
 8004428:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800442c:	0142      	lsls	r2, r0, #5
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	ebb0 0008 	subs.w	r0, r0, r8
 8004436:	eb61 0109 	sbc.w	r1, r1, r9
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	018b      	lsls	r3, r1, #6
 8004444:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004448:	0182      	lsls	r2, r0, #6
 800444a:	1a12      	subs	r2, r2, r0
 800444c:	eb63 0301 	sbc.w	r3, r3, r1
 8004450:	f04f 0000 	mov.w	r0, #0
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	00d9      	lsls	r1, r3, #3
 800445a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800445e:	00d0      	lsls	r0, r2, #3
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	eb12 0208 	adds.w	r2, r2, r8
 8004468:	eb43 0309 	adc.w	r3, r3, r9
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	0259      	lsls	r1, r3, #9
 8004476:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800447a:	0250      	lsls	r0, r2, #9
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	461a      	mov	r2, r3
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	f7fc fbd4 	bl	8000c38 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e04a      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	461a      	mov	r2, r3
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	ea02 0400 	and.w	r4, r2, r0
 80044b2:	ea03 0501 	and.w	r5, r3, r1
 80044b6:	4620      	mov	r0, r4
 80044b8:	4629      	mov	r1, r5
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	014b      	lsls	r3, r1, #5
 80044c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044c8:	0142      	lsls	r2, r0, #5
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	1b00      	subs	r0, r0, r4
 80044d0:	eb61 0105 	sbc.w	r1, r1, r5
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	018b      	lsls	r3, r1, #6
 80044de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044e2:	0182      	lsls	r2, r0, #6
 80044e4:	1a12      	subs	r2, r2, r0
 80044e6:	eb63 0301 	sbc.w	r3, r3, r1
 80044ea:	f04f 0000 	mov.w	r0, #0
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	00d9      	lsls	r1, r3, #3
 80044f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f8:	00d0      	lsls	r0, r2, #3
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	1912      	adds	r2, r2, r4
 8004500:	eb45 0303 	adc.w	r3, r5, r3
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	0299      	lsls	r1, r3, #10
 800450e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004512:	0290      	lsls	r0, r2, #10
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	461a      	mov	r2, r3
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	f7fc fb88 	bl	8000c38 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_RCC_GetSysClockFreq+0x358>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	0f1b      	lsrs	r3, r3, #28
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	61bb      	str	r3, [r7, #24]
      break;
 8004546:	e002      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetSysClockFreq+0x35c>)
 800454a:	61bb      	str	r3, [r7, #24]
      break;
 800454c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454e:	69bb      	ldr	r3, [r7, #24]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	00f42400 	.word	0x00f42400
 8004564:	007a1200 	.word	0x007a1200

08004568 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e28d      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8083 	beq.w	800468e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004588:	4b94      	ldr	r3, [pc, #592]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b04      	cmp	r3, #4
 8004592:	d019      	beq.n	80045c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004594:	4b91      	ldr	r3, [pc, #580]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800459c:	2b08      	cmp	r3, #8
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045a0:	4b8e      	ldr	r3, [pc, #568]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ac:	d00c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ae:	4b8b      	ldr	r3, [pc, #556]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d112      	bne.n	80045e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ba:	4b88      	ldr	r3, [pc, #544]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c6:	d10b      	bne.n	80045e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	4b84      	ldr	r3, [pc, #528]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05b      	beq.n	800468c <HAL_RCC_OscConfig+0x124>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d157      	bne.n	800468c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e25a      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e8:	d106      	bne.n	80045f8 <HAL_RCC_OscConfig+0x90>
 80045ea:	4b7c      	ldr	r3, [pc, #496]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a7b      	ldr	r2, [pc, #492]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e01d      	b.n	8004634 <HAL_RCC_OscConfig+0xcc>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0xb4>
 8004602:	4b76      	ldr	r3, [pc, #472]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a75      	ldr	r2, [pc, #468]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b73      	ldr	r3, [pc, #460]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a72      	ldr	r2, [pc, #456]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0xcc>
 800461c:	4b6f      	ldr	r3, [pc, #444]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a6e      	ldr	r2, [pc, #440]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b6c      	ldr	r3, [pc, #432]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a6b      	ldr	r2, [pc, #428]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 800462e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd ffea 	bl	8002614 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004644:	f7fd ffe6 	bl	8002614 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e21f      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b61      	ldr	r3, [pc, #388]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0xdc>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fd ffd6 	bl	8002614 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800466c:	f7fd ffd2 	bl	8002614 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e20b      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	4b57      	ldr	r3, [pc, #348]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x104>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d06f      	beq.n	800477a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800469a:	4b50      	ldr	r3, [pc, #320]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d017      	beq.n	80046d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046a6:	4b4d      	ldr	r3, [pc, #308]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d105      	bne.n	80046be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046b2:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046be:	4b47      	ldr	r3, [pc, #284]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046c6:	2b0c      	cmp	r3, #12
 80046c8:	d11c      	bne.n	8004704 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ca:	4b44      	ldr	r3, [pc, #272]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d116      	bne.n	8004704 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d6:	4b41      	ldr	r3, [pc, #260]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_RCC_OscConfig+0x186>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d001      	beq.n	80046ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e1d3      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ee:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4937      	ldr	r1, [pc, #220]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004702:	e03a      	b.n	800477a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d020      	beq.n	800474e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800470c:	4b34      	ldr	r3, [pc, #208]	; (80047e0 <HAL_RCC_OscConfig+0x278>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004712:	f7fd ff7f 	bl	8002614 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471a:	f7fd ff7b 	bl	8002614 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e1b4      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472c:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004738:	4b28      	ldr	r3, [pc, #160]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	4925      	ldr	r1, [pc, #148]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]
 800474c:	e015      	b.n	800477a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474e:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_RCC_OscConfig+0x278>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fd ff5e 	bl	8002614 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800475c:	f7fd ff5a 	bl	8002614 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e193      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476e:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d036      	beq.n	80047f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d016      	beq.n	80047bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478e:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004790:	2201      	movs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd ff3e 	bl	8002614 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479c:	f7fd ff3a 	bl	8002614 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e173      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCC_OscConfig+0x274>)
 80047b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x234>
 80047ba:	e01b      	b.n	80047f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c2:	f7fd ff27 	bl	8002614 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	e00e      	b.n	80047e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ca:	f7fd ff23 	bl	8002614 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d907      	bls.n	80047e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e15c      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
 80047dc:	40023800 	.word	0x40023800
 80047e0:	42470000 	.word	0x42470000
 80047e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e8:	4b8a      	ldr	r3, [pc, #552]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80047ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1ea      	bne.n	80047ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8097 	beq.w	8004930 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004806:	4b83      	ldr	r3, [pc, #524]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10f      	bne.n	8004832 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	4b7f      	ldr	r3, [pc, #508]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	4a7e      	ldr	r2, [pc, #504]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 800481c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004820:	6413      	str	r3, [r2, #64]	; 0x40
 8004822:	4b7c      	ldr	r3, [pc, #496]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482e:	2301      	movs	r3, #1
 8004830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004832:	4b79      	ldr	r3, [pc, #484]	; (8004a18 <HAL_RCC_OscConfig+0x4b0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d118      	bne.n	8004870 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483e:	4b76      	ldr	r3, [pc, #472]	; (8004a18 <HAL_RCC_OscConfig+0x4b0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a75      	ldr	r2, [pc, #468]	; (8004a18 <HAL_RCC_OscConfig+0x4b0>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484a:	f7fd fee3 	bl	8002614 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7fd fedf 	bl	8002614 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e118      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	4b6c      	ldr	r3, [pc, #432]	; (8004a18 <HAL_RCC_OscConfig+0x4b0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <HAL_RCC_OscConfig+0x31e>
 8004878:	4b66      	ldr	r3, [pc, #408]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a65      	ldr	r2, [pc, #404]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
 8004884:	e01c      	b.n	80048c0 <HAL_RCC_OscConfig+0x358>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b05      	cmp	r3, #5
 800488c:	d10c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x340>
 800488e:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a60      	ldr	r2, [pc, #384]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
 800489a:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a5d      	ldr	r2, [pc, #372]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6713      	str	r3, [r2, #112]	; 0x70
 80048a6:	e00b      	b.n	80048c0 <HAL_RCC_OscConfig+0x358>
 80048a8:	4b5a      	ldr	r3, [pc, #360]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	4a59      	ldr	r2, [pc, #356]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	6713      	str	r3, [r2, #112]	; 0x70
 80048b4:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	4a56      	ldr	r2, [pc, #344]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80048ba:	f023 0304 	bic.w	r3, r3, #4
 80048be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d015      	beq.n	80048f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fd fea4 	bl	8002614 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fd fea0 	bl	8002614 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0d7      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e6:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0ee      	beq.n	80048d0 <HAL_RCC_OscConfig+0x368>
 80048f2:	e014      	b.n	800491e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fd fe8e 	bl	8002614 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fd fe8a 	bl	8002614 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e0c1      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004912:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ee      	bne.n	80048fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004924:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	4a3a      	ldr	r2, [pc, #232]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 800492a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80ad 	beq.w	8004a94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800493a:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	2b08      	cmp	r3, #8
 8004944:	d060      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d145      	bne.n	80049da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494e:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCC_OscConfig+0x4b4>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd fe5e 	bl	8002614 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800495c:	f7fd fe5a 	bl	8002614 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e093      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	019b      	lsls	r3, r3, #6
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	3b01      	subs	r3, #1
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	071b      	lsls	r3, r3, #28
 80049a6:	491b      	ldr	r1, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_OscConfig+0x4b4>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd fe2f 	bl	8002614 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fd fe2b 	bl	8002614 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e064      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x452>
 80049d8:	e05c      	b.n	8004a94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_OscConfig+0x4b4>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fd fe18 	bl	8002614 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fd fe14 	bl	8002614 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e04d      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x4ac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x480>
 8004a06:	e045      	b.n	8004a94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e040      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a20:	4b1f      	ldr	r3, [pc, #124]	; (8004aa0 <HAL_RCC_OscConfig+0x538>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d030      	beq.n	8004a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d129      	bne.n	8004a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d122      	bne.n	8004a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d119      	bne.n	8004a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d10f      	bne.n	8004a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e041      	b.n	8004b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd fba2 	bl	8002214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f000 fbac 	bl	8005240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d001      	beq.n	8004b5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e046      	b.n	8004bea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a23      	ldr	r2, [pc, #140]	; (8004bf8 <HAL_TIM_Base_Start+0xb4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d022      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d01d      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <HAL_TIM_Base_Start+0xb8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <HAL_TIM_Base_Start+0xbc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <HAL_TIM_Base_Start+0xc0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <HAL_TIM_Base_Start+0xc4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_TIM_Base_Start+0xc8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_TIM_Base_Start+0xcc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d111      	bne.n	8004bd8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b06      	cmp	r3, #6
 8004bc4:	d010      	beq.n	8004be8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd6:	e007      	b.n	8004be8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800
 8004c04:	40000c00 	.word	0x40000c00
 8004c08:	40010400 	.word	0x40010400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40001800 	.word	0x40001800

08004c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d001      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e04e      	b.n	8004cca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a23      	ldr	r2, [pc, #140]	; (8004cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d022      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x80>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c56:	d01d      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x80>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d018      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x80>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x80>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x80>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x80>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_TIM_Base_Start_IT+0xd8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x80>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d111      	bne.n	8004cb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d010      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	e007      	b.n	8004cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40010400 	.word	0x40010400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40001800 	.word	0x40001800

08004cf4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e041      	b.n	8004d8a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f839 	bl	8004d92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 fa84 	bl	8005240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d122      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d11b      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f06f 0202 	mvn.w	r2, #2
 8004dd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa0b 	bl	8005204 <HAL_TIM_IC_CaptureCallback>
 8004dee:	e005      	b.n	8004dfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f9fd 	bl	80051f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fa0e 	bl	8005218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d122      	bne.n	8004e56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d11b      	bne.n	8004e56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f06f 0204 	mvn.w	r2, #4
 8004e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f9e1 	bl	8005204 <HAL_TIM_IC_CaptureCallback>
 8004e42:	e005      	b.n	8004e50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9d3 	bl	80051f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f9e4 	bl	8005218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d122      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d11b      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f06f 0208 	mvn.w	r2, #8
 8004e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f9b7 	bl	8005204 <HAL_TIM_IC_CaptureCallback>
 8004e96:	e005      	b.n	8004ea4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f9a9 	bl	80051f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9ba 	bl	8005218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d122      	bne.n	8004efe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d11b      	bne.n	8004efe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0210 	mvn.w	r2, #16
 8004ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f98d 	bl	8005204 <HAL_TIM_IC_CaptureCallback>
 8004eea:	e005      	b.n	8004ef8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f97f 	bl	80051f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f990 	bl	8005218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d10e      	bne.n	8004f2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d107      	bne.n	8004f2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0201 	mvn.w	r2, #1
 8004f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fc fb7b 	bl	8001620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d10e      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d107      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fce5 	bl	8005920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d10e      	bne.n	8004f82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d107      	bne.n	8004f82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f955 	bl	800522c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d10e      	bne.n	8004fae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d107      	bne.n	8004fae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f06f 0220 	mvn.w	r2, #32
 8004fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fcaf 	bl	800590c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e046      	b.n	8005060 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d839      	bhi.n	8005054 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800501d 	.word	0x0800501d
 8004fec:	08005055 	.word	0x08005055
 8004ff0:	08005055 	.word	0x08005055
 8004ff4:	08005055 	.word	0x08005055
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	08005055 	.word	0x08005055
 8005000:	08005055 	.word	0x08005055
 8005004:	08005055 	.word	0x08005055
 8005008:	08005039 	.word	0x08005039
 800500c:	08005055 	.word	0x08005055
 8005010:	08005055 	.word	0x08005055
 8005014:	08005055 	.word	0x08005055
 8005018:	08005047 	.word	0x08005047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f9ac 	bl	8005380 <TIM_OC1_SetConfig>
      break;
 8005028:	e015      	b.n	8005056 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fa15 	bl	8005460 <TIM_OC2_SetConfig>
      break;
 8005036:	e00e      	b.n	8005056 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fa84 	bl	800554c <TIM_OC3_SetConfig>
      break;
 8005044:	e007      	b.n	8005056 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 faf1 	bl	8005634 <TIM_OC4_SetConfig>
      break;
 8005052:	e000      	b.n	8005056 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIM_ConfigClockSource+0x18>
 800507c:	2302      	movs	r3, #2
 800507e:	e0b3      	b.n	80051e8 <HAL_TIM_ConfigClockSource+0x180>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800509e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b8:	d03e      	beq.n	8005138 <HAL_TIM_ConfigClockSource+0xd0>
 80050ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050be:	f200 8087 	bhi.w	80051d0 <HAL_TIM_ConfigClockSource+0x168>
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	f000 8085 	beq.w	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d87f      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x168>
 80050d0:	2b70      	cmp	r3, #112	; 0x70
 80050d2:	d01a      	beq.n	800510a <HAL_TIM_ConfigClockSource+0xa2>
 80050d4:	2b70      	cmp	r3, #112	; 0x70
 80050d6:	d87b      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x168>
 80050d8:	2b60      	cmp	r3, #96	; 0x60
 80050da:	d050      	beq.n	800517e <HAL_TIM_ConfigClockSource+0x116>
 80050dc:	2b60      	cmp	r3, #96	; 0x60
 80050de:	d877      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x168>
 80050e0:	2b50      	cmp	r3, #80	; 0x50
 80050e2:	d03c      	beq.n	800515e <HAL_TIM_ConfigClockSource+0xf6>
 80050e4:	2b50      	cmp	r3, #80	; 0x50
 80050e6:	d873      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x168>
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d058      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x136>
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d86f      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x168>
 80050f0:	2b30      	cmp	r3, #48	; 0x30
 80050f2:	d064      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x156>
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d86b      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x168>
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d060      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x156>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d867      	bhi.n	80051d0 <HAL_TIM_ConfigClockSource+0x168>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d05c      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x156>
 8005104:	2b10      	cmp	r3, #16
 8005106:	d05a      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005108:	e062      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6899      	ldr	r1, [r3, #8]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f000 fb5b 	bl	80057d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800512c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	609a      	str	r2, [r3, #8]
      break;
 8005136:	e04e      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6899      	ldr	r1, [r3, #8]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f000 fb44 	bl	80057d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800515a:	609a      	str	r2, [r3, #8]
      break;
 800515c:	e03b      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6859      	ldr	r1, [r3, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	461a      	mov	r2, r3
 800516c:	f000 fab8 	bl	80056e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2150      	movs	r1, #80	; 0x50
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fb11 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 800517c:	e02b      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6859      	ldr	r1, [r3, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	461a      	mov	r2, r3
 800518c:	f000 fad7 	bl	800573e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2160      	movs	r1, #96	; 0x60
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fb01 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 800519c:	e01b      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6859      	ldr	r1, [r3, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	461a      	mov	r2, r3
 80051ac:	f000 fa98 	bl	80056e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2140      	movs	r1, #64	; 0x40
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 faf1 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 80051bc:	e00b      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f000 fae8 	bl	800579e <TIM_ITRx_SetConfig>
        break;
 80051ce:	e002      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051d0:	bf00      	nop
 80051d2:	e000      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a40      	ldr	r2, [pc, #256]	; (8005354 <TIM_Base_SetConfig+0x114>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525e:	d00f      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a3d      	ldr	r2, [pc, #244]	; (8005358 <TIM_Base_SetConfig+0x118>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00b      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a3c      	ldr	r2, [pc, #240]	; (800535c <TIM_Base_SetConfig+0x11c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3b      	ldr	r2, [pc, #236]	; (8005360 <TIM_Base_SetConfig+0x120>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3a      	ldr	r2, [pc, #232]	; (8005364 <TIM_Base_SetConfig+0x124>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d108      	bne.n	8005292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2f      	ldr	r2, [pc, #188]	; (8005354 <TIM_Base_SetConfig+0x114>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d02b      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a0:	d027      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2c      	ldr	r2, [pc, #176]	; (8005358 <TIM_Base_SetConfig+0x118>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d023      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2b      	ldr	r2, [pc, #172]	; (800535c <TIM_Base_SetConfig+0x11c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01f      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <TIM_Base_SetConfig+0x120>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01b      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a29      	ldr	r2, [pc, #164]	; (8005364 <TIM_Base_SetConfig+0x124>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d017      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a28      	ldr	r2, [pc, #160]	; (8005368 <TIM_Base_SetConfig+0x128>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a27      	ldr	r2, [pc, #156]	; (800536c <TIM_Base_SetConfig+0x12c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00f      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <TIM_Base_SetConfig+0x130>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00b      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a25      	ldr	r2, [pc, #148]	; (8005374 <TIM_Base_SetConfig+0x134>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a24      	ldr	r2, [pc, #144]	; (8005378 <TIM_Base_SetConfig+0x138>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a23      	ldr	r2, [pc, #140]	; (800537c <TIM_Base_SetConfig+0x13c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d108      	bne.n	8005304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <TIM_Base_SetConfig+0x114>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_Base_SetConfig+0xf8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0c      	ldr	r2, [pc, #48]	; (8005364 <TIM_Base_SetConfig+0x124>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d103      	bne.n	8005340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	615a      	str	r2, [r3, #20]
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40010000 	.word	0x40010000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40010400 	.word	0x40010400
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400
 8005370:	40014800 	.word	0x40014800
 8005374:	40001800 	.word	0x40001800
 8005378:	40001c00 	.word	0x40001c00
 800537c:	40002000 	.word	0x40002000

08005380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 0302 	bic.w	r3, r3, #2
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a20      	ldr	r2, [pc, #128]	; (8005458 <TIM_OC1_SetConfig+0xd8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_OC1_SetConfig+0x64>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1f      	ldr	r2, [pc, #124]	; (800545c <TIM_OC1_SetConfig+0xdc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10c      	bne.n	80053fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0308 	bic.w	r3, r3, #8
 80053ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a15      	ldr	r2, [pc, #84]	; (8005458 <TIM_OC1_SetConfig+0xd8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_OC1_SetConfig+0x8e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a14      	ldr	r2, [pc, #80]	; (800545c <TIM_OC1_SetConfig+0xdc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d111      	bne.n	8005432 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40010000 	.word	0x40010000
 800545c:	40010400 	.word	0x40010400

08005460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0210 	bic.w	r2, r3, #16
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0320 	bic.w	r3, r3, #32
 80054aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a22      	ldr	r2, [pc, #136]	; (8005544 <TIM_OC2_SetConfig+0xe4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_OC2_SetConfig+0x68>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a21      	ldr	r2, [pc, #132]	; (8005548 <TIM_OC2_SetConfig+0xe8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d10d      	bne.n	80054e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a17      	ldr	r2, [pc, #92]	; (8005544 <TIM_OC2_SetConfig+0xe4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC2_SetConfig+0x94>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a16      	ldr	r2, [pc, #88]	; (8005548 <TIM_OC2_SetConfig+0xe8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d113      	bne.n	800551c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000
 8005548:	40010400 	.word	0x40010400

0800554c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a21      	ldr	r2, [pc, #132]	; (800562c <TIM_OC3_SetConfig+0xe0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_OC3_SetConfig+0x66>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a20      	ldr	r2, [pc, #128]	; (8005630 <TIM_OC3_SetConfig+0xe4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10d      	bne.n	80055ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <TIM_OC3_SetConfig+0xe0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_OC3_SetConfig+0x92>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a15      	ldr	r2, [pc, #84]	; (8005630 <TIM_OC3_SetConfig+0xe4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d113      	bne.n	8005606 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400

08005634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800567e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	031b      	lsls	r3, r3, #12
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <TIM_OC4_SetConfig+0xa4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC4_SetConfig+0x68>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a11      	ldr	r2, [pc, #68]	; (80056dc <TIM_OC4_SetConfig+0xa8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d109      	bne.n	80056b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	019b      	lsls	r3, r3, #6
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40010400 	.word	0x40010400

080056e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 030a 	bic.w	r3, r3, #10
 800571c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0210 	bic.w	r2, r3, #16
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	031b      	lsls	r3, r3, #12
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800577a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f043 0307 	orr.w	r3, r3, #7
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	021a      	lsls	r2, r3, #8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	609a      	str	r2, [r3, #8]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005828:	2302      	movs	r3, #2
 800582a:	e05a      	b.n	80058e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d022      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005878:	d01d      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d018      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a18      	ldr	r2, [pc, #96]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d009      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a17      	ldr	r2, [pc, #92]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d004      	beq.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a15      	ldr	r2, [pc, #84]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10c      	bne.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40010000 	.word	0x40010000
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40010400 	.word	0x40010400
 8005904:	40014000 	.word	0x40014000
 8005908:	40001800 	.word	0x40001800

0800590c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e03f      	b.n	80059c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fc fca0 	bl	80022a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	; 0x24
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fc1b 	bl	80061b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800598c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695a      	ldr	r2, [r3, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800599c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08a      	sub	sp, #40	; 0x28
 80059d2:	af02      	add	r7, sp, #8
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d17c      	bne.n	8005ae8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_UART_Transmit+0x2c>
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e075      	b.n	8005aea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Transmit+0x3e>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e06e      	b.n	8005aea <HAL_UART_Transmit+0x11c>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2221      	movs	r2, #33	; 0x21
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a22:	f7fc fdf7 	bl	8002614 <HAL_GetTick>
 8005a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	88fa      	ldrh	r2, [r7, #6]
 8005a32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3c:	d108      	bne.n	8005a50 <HAL_UART_Transmit+0x82>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e003      	b.n	8005a58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a60:	e02a      	b.n	8005ab8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fa17 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e036      	b.n	8005aea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3302      	adds	r3, #2
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e007      	b.n	8005aaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1cf      	bne.n	8005a62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2140      	movs	r1, #64	; 0x40
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f9e7 	bl	8005ea0 <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e006      	b.n	8005aea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10d      	bne.n	8005b46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_UART_IRQHandler+0x52>
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 faa1 	bl	8006086 <UART_Receive_IT>
      return;
 8005b44:	e17c      	b.n	8005e40 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80b1 	beq.w	8005cb0 <HAL_UART_IRQHandler+0x1bc>
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <HAL_UART_IRQHandler+0x70>
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80a6 	beq.w	8005cb0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_UART_IRQHandler+0x90>
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	f043 0201 	orr.w	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_UART_IRQHandler+0xb0>
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	f043 0202 	orr.w	r2, r3, #2
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xd0>
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f043 0204 	orr.w	r2, r3, #4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00f      	beq.n	8005bee <HAL_UART_IRQHandler+0xfa>
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <HAL_UART_IRQHandler+0xee>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0208 	orr.w	r2, r3, #8
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 811f 	beq.w	8005e36 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <HAL_UART_IRQHandler+0x11e>
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fa3a 	bl	8006086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <HAL_UART_IRQHandler+0x146>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d031      	beq.n	8005c9e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f97a 	bl	8005f34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d123      	bne.n	8005c96 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d013      	beq.n	8005c8e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	4a77      	ldr	r2, [pc, #476]	; (8005e48 <HAL_UART_IRQHandler+0x354>)
 8005c6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fd fd38 	bl	80036e8 <HAL_DMA_Abort_IT>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d016      	beq.n	8005cac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c8c:	e00e      	b.n	8005cac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f8f0 	bl	8005e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c94:	e00a      	b.n	8005cac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8ec 	bl	8005e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9c:	e006      	b.n	8005cac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f8e8 	bl	8005e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005caa:	e0c4      	b.n	8005e36 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	bf00      	nop
    return;
 8005cae:	e0c2      	b.n	8005e36 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	f040 80a2 	bne.w	8005dfe <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 809c 	beq.w	8005dfe <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8096 	beq.w	8005dfe <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d14f      	bne.n	8005d96 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d00:	8a3b      	ldrh	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8099 	beq.w	8005e3a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d0c:	8a3a      	ldrh	r2, [r7, #16]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	f080 8093 	bcs.w	8005e3a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8a3a      	ldrh	r2, [r7, #16]
 8005d18:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d24:	d02b      	beq.n	8005d7e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d34:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d54:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0210 	bic.w	r2, r2, #16
 8005d72:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fd fc45 	bl	8003608 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f87a 	bl	8005e88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d94:	e051      	b.n	8005e3a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d047      	beq.n	8005e3e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005dae:	8a7b      	ldrh	r3, [r7, #18]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d044      	beq.n	8005e3e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dc2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0210 	bic.w	r2, r2, #16
 8005df0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005df2:	8a7b      	ldrh	r3, [r7, #18]
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f846 	bl	8005e88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dfc:	e01f      	b.n	8005e3e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <HAL_UART_IRQHandler+0x326>
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f8cf 	bl	8005fb6 <UART_Transmit_IT>
    return;
 8005e18:	e012      	b.n	8005e40 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00d      	beq.n	8005e40 <HAL_UART_IRQHandler+0x34c>
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d008      	beq.n	8005e40 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f911 	bl	8006056 <UART_EndTransmit_IT>
    return;
 8005e34:	e004      	b.n	8005e40 <HAL_UART_IRQHandler+0x34c>
    return;
 8005e36:	bf00      	nop
 8005e38:	e002      	b.n	8005e40 <HAL_UART_IRQHandler+0x34c>
      return;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <HAL_UART_IRQHandler+0x34c>
      return;
 8005e3e:	bf00      	nop
  }
}
 8005e40:	3728      	adds	r7, #40	; 0x28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	08005f8f 	.word	0x08005f8f

08005e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb0:	e02c      	b.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d028      	beq.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ec0:	f7fc fba8 	bl	8002614 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d21d      	bcs.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ede:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e00f      	b.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4013      	ands	r3, r2
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2301      	moveq	r3, #1
 8005f1e:	2300      	movne	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d0c3      	beq.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d107      	bne.n	8005f74 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0210 	bic.w	r2, r2, #16
 8005f72:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff ff63 	bl	8005e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b21      	cmp	r3, #33	; 0x21
 8005fc8:	d13e      	bne.n	8006048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd2:	d114      	bne.n	8005ffe <UART_Transmit_IT+0x48>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d110      	bne.n	8005ffe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	1c9a      	adds	r2, r3, #2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	621a      	str	r2, [r3, #32]
 8005ffc:	e008      	b.n	8006010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6211      	str	r1, [r2, #32]
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29b      	uxth	r3, r3
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4619      	mov	r1, r3
 800601e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10f      	bne.n	8006044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800606c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff fee8 	bl	8005e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b22      	cmp	r3, #34	; 0x22
 8006098:	f040 8087 	bne.w	80061aa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a4:	d117      	bne.n	80060d6 <UART_Receive_IT+0x50>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d113      	bne.n	80060d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ce:	1c9a      	adds	r2, r3, #2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
 80060d4:	e026      	b.n	8006124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e8:	d007      	beq.n	80060fa <UART_Receive_IT+0x74>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <UART_Receive_IT+0x82>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e008      	b.n	800611a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006114:	b2da      	uxtb	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29b      	uxth	r3, r3
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4619      	mov	r1, r3
 8006132:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006134:	2b00      	cmp	r3, #0
 8006136:	d136      	bne.n	80061a6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0220 	bic.w	r2, r2, #32
 8006146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10e      	bne.n	8006196 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0210 	bic.w	r2, r2, #16
 8006186:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800618c:	4619      	mov	r1, r3
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fe7a 	bl	8005e88 <HAL_UARTEx_RxEventCallback>
 8006194:	e002      	b.n	800619c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fe62 	bl	8005e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e002      	b.n	80061ac <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	b09f      	sub	sp, #124	; 0x7c
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ca:	68d9      	ldr	r1, [r3, #12]
 80061cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	ea40 0301 	orr.w	r3, r0, r1
 80061d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	431a      	orrs	r2, r3
 80061e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	431a      	orrs	r2, r3
 80061e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80061ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061f8:	f021 010c 	bic.w	r1, r1, #12
 80061fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006202:	430b      	orrs	r3, r1
 8006204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006212:	6999      	ldr	r1, [r3, #24]
 8006214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	ea40 0301 	orr.w	r3, r0, r1
 800621c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4bc5      	ldr	r3, [pc, #788]	; (8006538 <UART_SetConfig+0x384>)
 8006224:	429a      	cmp	r2, r3
 8006226:	d004      	beq.n	8006232 <UART_SetConfig+0x7e>
 8006228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4bc3      	ldr	r3, [pc, #780]	; (800653c <UART_SetConfig+0x388>)
 800622e:	429a      	cmp	r2, r3
 8006230:	d103      	bne.n	800623a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006232:	f7fd ffd3 	bl	80041dc <HAL_RCC_GetPCLK2Freq>
 8006236:	6778      	str	r0, [r7, #116]	; 0x74
 8006238:	e002      	b.n	8006240 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800623a:	f7fd ffbb 	bl	80041b4 <HAL_RCC_GetPCLK1Freq>
 800623e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006248:	f040 80b6 	bne.w	80063b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800624c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624e:	461c      	mov	r4, r3
 8006250:	f04f 0500 	mov.w	r5, #0
 8006254:	4622      	mov	r2, r4
 8006256:	462b      	mov	r3, r5
 8006258:	1891      	adds	r1, r2, r2
 800625a:	6439      	str	r1, [r7, #64]	; 0x40
 800625c:	415b      	adcs	r3, r3
 800625e:	647b      	str	r3, [r7, #68]	; 0x44
 8006260:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006264:	1912      	adds	r2, r2, r4
 8006266:	eb45 0303 	adc.w	r3, r5, r3
 800626a:	f04f 0000 	mov.w	r0, #0
 800626e:	f04f 0100 	mov.w	r1, #0
 8006272:	00d9      	lsls	r1, r3, #3
 8006274:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006278:	00d0      	lsls	r0, r2, #3
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	1911      	adds	r1, r2, r4
 8006280:	6639      	str	r1, [r7, #96]	; 0x60
 8006282:	416b      	adcs	r3, r5
 8006284:	667b      	str	r3, [r7, #100]	; 0x64
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	461a      	mov	r2, r3
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	1891      	adds	r1, r2, r2
 8006292:	63b9      	str	r1, [r7, #56]	; 0x38
 8006294:	415b      	adcs	r3, r3
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800629c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80062a0:	f7fa fcca 	bl	8000c38 <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4ba5      	ldr	r3, [pc, #660]	; (8006540 <UART_SetConfig+0x38c>)
 80062aa:	fba3 2302 	umull	r2, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	011e      	lsls	r6, r3, #4
 80062b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b4:	461c      	mov	r4, r3
 80062b6:	f04f 0500 	mov.w	r5, #0
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	1891      	adds	r1, r2, r2
 80062c0:	6339      	str	r1, [r7, #48]	; 0x30
 80062c2:	415b      	adcs	r3, r3
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
 80062c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80062ca:	1912      	adds	r2, r2, r4
 80062cc:	eb45 0303 	adc.w	r3, r5, r3
 80062d0:	f04f 0000 	mov.w	r0, #0
 80062d4:	f04f 0100 	mov.w	r1, #0
 80062d8:	00d9      	lsls	r1, r3, #3
 80062da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062de:	00d0      	lsls	r0, r2, #3
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	1911      	adds	r1, r2, r4
 80062e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80062e8:	416b      	adcs	r3, r5
 80062ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	1891      	adds	r1, r2, r2
 80062f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80062fa:	415b      	adcs	r3, r3
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006302:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006306:	f7fa fc97 	bl	8000c38 <__aeabi_uldivmod>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4b8c      	ldr	r3, [pc, #560]	; (8006540 <UART_SetConfig+0x38c>)
 8006310:	fba3 1302 	umull	r1, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2164      	movs	r1, #100	; 0x64
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	3332      	adds	r3, #50	; 0x32
 8006322:	4a87      	ldr	r2, [pc, #540]	; (8006540 <UART_SetConfig+0x38c>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006330:	441e      	add	r6, r3
 8006332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006334:	4618      	mov	r0, r3
 8006336:	f04f 0100 	mov.w	r1, #0
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	1894      	adds	r4, r2, r2
 8006340:	623c      	str	r4, [r7, #32]
 8006342:	415b      	adcs	r3, r3
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
 8006346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800634a:	1812      	adds	r2, r2, r0
 800634c:	eb41 0303 	adc.w	r3, r1, r3
 8006350:	f04f 0400 	mov.w	r4, #0
 8006354:	f04f 0500 	mov.w	r5, #0
 8006358:	00dd      	lsls	r5, r3, #3
 800635a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800635e:	00d4      	lsls	r4, r2, #3
 8006360:	4622      	mov	r2, r4
 8006362:	462b      	mov	r3, r5
 8006364:	1814      	adds	r4, r2, r0
 8006366:	653c      	str	r4, [r7, #80]	; 0x50
 8006368:	414b      	adcs	r3, r1
 800636a:	657b      	str	r3, [r7, #84]	; 0x54
 800636c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	461a      	mov	r2, r3
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	1891      	adds	r1, r2, r2
 8006378:	61b9      	str	r1, [r7, #24]
 800637a:	415b      	adcs	r3, r3
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006382:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006386:	f7fa fc57 	bl	8000c38 <__aeabi_uldivmod>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4b6c      	ldr	r3, [pc, #432]	; (8006540 <UART_SetConfig+0x38c>)
 8006390:	fba3 1302 	umull	r1, r3, r3, r2
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	2164      	movs	r1, #100	; 0x64
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	3332      	adds	r3, #50	; 0x32
 80063a2:	4a67      	ldr	r2, [pc, #412]	; (8006540 <UART_SetConfig+0x38c>)
 80063a4:	fba2 2303 	umull	r2, r3, r2, r3
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	f003 0207 	and.w	r2, r3, #7
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4432      	add	r2, r6
 80063b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063b6:	e0b9      	b.n	800652c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ba:	461c      	mov	r4, r3
 80063bc:	f04f 0500 	mov.w	r5, #0
 80063c0:	4622      	mov	r2, r4
 80063c2:	462b      	mov	r3, r5
 80063c4:	1891      	adds	r1, r2, r2
 80063c6:	6139      	str	r1, [r7, #16]
 80063c8:	415b      	adcs	r3, r3
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063d0:	1912      	adds	r2, r2, r4
 80063d2:	eb45 0303 	adc.w	r3, r5, r3
 80063d6:	f04f 0000 	mov.w	r0, #0
 80063da:	f04f 0100 	mov.w	r1, #0
 80063de:	00d9      	lsls	r1, r3, #3
 80063e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063e4:	00d0      	lsls	r0, r2, #3
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	eb12 0804 	adds.w	r8, r2, r4
 80063ee:	eb43 0905 	adc.w	r9, r3, r5
 80063f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f04f 0100 	mov.w	r1, #0
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	008b      	lsls	r3, r1, #2
 8006406:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800640a:	0082      	lsls	r2, r0, #2
 800640c:	4640      	mov	r0, r8
 800640e:	4649      	mov	r1, r9
 8006410:	f7fa fc12 	bl	8000c38 <__aeabi_uldivmod>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4b49      	ldr	r3, [pc, #292]	; (8006540 <UART_SetConfig+0x38c>)
 800641a:	fba3 2302 	umull	r2, r3, r3, r2
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	011e      	lsls	r6, r3, #4
 8006422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006424:	4618      	mov	r0, r3
 8006426:	f04f 0100 	mov.w	r1, #0
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	1894      	adds	r4, r2, r2
 8006430:	60bc      	str	r4, [r7, #8]
 8006432:	415b      	adcs	r3, r3
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800643a:	1812      	adds	r2, r2, r0
 800643c:	eb41 0303 	adc.w	r3, r1, r3
 8006440:	f04f 0400 	mov.w	r4, #0
 8006444:	f04f 0500 	mov.w	r5, #0
 8006448:	00dd      	lsls	r5, r3, #3
 800644a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800644e:	00d4      	lsls	r4, r2, #3
 8006450:	4622      	mov	r2, r4
 8006452:	462b      	mov	r3, r5
 8006454:	1814      	adds	r4, r2, r0
 8006456:	64bc      	str	r4, [r7, #72]	; 0x48
 8006458:	414b      	adcs	r3, r1
 800645a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800645c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	f04f 0100 	mov.w	r1, #0
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	008b      	lsls	r3, r1, #2
 8006470:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006474:	0082      	lsls	r2, r0, #2
 8006476:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800647a:	f7fa fbdd 	bl	8000c38 <__aeabi_uldivmod>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4b2f      	ldr	r3, [pc, #188]	; (8006540 <UART_SetConfig+0x38c>)
 8006484:	fba3 1302 	umull	r1, r3, r3, r2
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	2164      	movs	r1, #100	; 0x64
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	3332      	adds	r3, #50	; 0x32
 8006496:	4a2a      	ldr	r2, [pc, #168]	; (8006540 <UART_SetConfig+0x38c>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064a2:	441e      	add	r6, r3
 80064a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a6:	4618      	mov	r0, r3
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	1894      	adds	r4, r2, r2
 80064b2:	603c      	str	r4, [r7, #0]
 80064b4:	415b      	adcs	r3, r3
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064bc:	1812      	adds	r2, r2, r0
 80064be:	eb41 0303 	adc.w	r3, r1, r3
 80064c2:	f04f 0400 	mov.w	r4, #0
 80064c6:	f04f 0500 	mov.w	r5, #0
 80064ca:	00dd      	lsls	r5, r3, #3
 80064cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064d0:	00d4      	lsls	r4, r2, #3
 80064d2:	4622      	mov	r2, r4
 80064d4:	462b      	mov	r3, r5
 80064d6:	eb12 0a00 	adds.w	sl, r2, r0
 80064da:	eb43 0b01 	adc.w	fp, r3, r1
 80064de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	008b      	lsls	r3, r1, #2
 80064f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064f6:	0082      	lsls	r2, r0, #2
 80064f8:	4650      	mov	r0, sl
 80064fa:	4659      	mov	r1, fp
 80064fc:	f7fa fb9c 	bl	8000c38 <__aeabi_uldivmod>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <UART_SetConfig+0x38c>)
 8006506:	fba3 1302 	umull	r1, r3, r3, r2
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	2164      	movs	r1, #100	; 0x64
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	3332      	adds	r3, #50	; 0x32
 8006518:	4a09      	ldr	r2, [pc, #36]	; (8006540 <UART_SetConfig+0x38c>)
 800651a:	fba2 2303 	umull	r2, r3, r2, r3
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	f003 020f 	and.w	r2, r3, #15
 8006524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4432      	add	r2, r6
 800652a:	609a      	str	r2, [r3, #8]
}
 800652c:	bf00      	nop
 800652e:	377c      	adds	r7, #124	; 0x7c
 8006530:	46bd      	mov	sp, r7
 8006532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006536:	bf00      	nop
 8006538:	40011000 	.word	0x40011000
 800653c:	40011400 	.word	0x40011400
 8006540:	51eb851f 	.word	0x51eb851f

08006544 <maf>:
#include "CONSTANTS.h"



void maf(float *nextSampleD, float *nextSampleQ, float *mafD, float *mafQ)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
	static int pos;
	static float sampleArrD[MAF_LEN], sampleArrQ[MAF_LEN], sumD, sumQ;

	sumD = sumD - sampleArrD[pos] + *nextSampleD;
 8006552:	4b2f      	ldr	r3, [pc, #188]	; (8006610 <maf+0xcc>)
 8006554:	ed93 7a00 	vldr	s14, [r3]
 8006558:	4b2e      	ldr	r3, [pc, #184]	; (8006614 <maf+0xd0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2e      	ldr	r2, [pc, #184]	; (8006618 <maf+0xd4>)
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	edd3 7a00 	vldr	s15, [r3]
 8006566:	ee37 7a67 	vsub.f32	s14, s14, s15
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	edd3 7a00 	vldr	s15, [r3]
 8006570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006574:	4b26      	ldr	r3, [pc, #152]	; (8006610 <maf+0xcc>)
 8006576:	edc3 7a00 	vstr	s15, [r3]
	sumQ = sumQ - sampleArrQ[pos] + *nextSampleQ;
 800657a:	4b28      	ldr	r3, [pc, #160]	; (800661c <maf+0xd8>)
 800657c:	ed93 7a00 	vldr	s14, [r3]
 8006580:	4b24      	ldr	r3, [pc, #144]	; (8006614 <maf+0xd0>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a26      	ldr	r2, [pc, #152]	; (8006620 <maf+0xdc>)
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	edd3 7a00 	vldr	s15, [r3]
 800658e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	edd3 7a00 	vldr	s15, [r3]
 8006598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800659c:	4b1f      	ldr	r3, [pc, #124]	; (800661c <maf+0xd8>)
 800659e:	edc3 7a00 	vstr	s15, [r3]

	sampleArrD[pos] = *nextSampleD;
 80065a2:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <maf+0xd0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	491b      	ldr	r1, [pc, #108]	; (8006618 <maf+0xd4>)
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	601a      	str	r2, [r3, #0]
	sampleArrQ[pos] = *nextSampleQ;
 80065b2:	4b18      	ldr	r3, [pc, #96]	; (8006614 <maf+0xd0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	4919      	ldr	r1, [pc, #100]	; (8006620 <maf+0xdc>)
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	601a      	str	r2, [r3, #0]

	pos++;
 80065c2:	4b14      	ldr	r3, [pc, #80]	; (8006614 <maf+0xd0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3301      	adds	r3, #1
 80065c8:	4a12      	ldr	r2, [pc, #72]	; (8006614 <maf+0xd0>)
 80065ca:	6013      	str	r3, [r2, #0]
	if (pos >= MAF_LEN) {
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <maf+0xd0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b27      	cmp	r3, #39	; 0x27
 80065d2:	dd02      	ble.n	80065da <maf+0x96>
		pos = 0;
 80065d4:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <maf+0xd0>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
	}

	*mafD = sumD/(float)MAF_LEN;
 80065da:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <maf+0xcc>)
 80065dc:	ed93 7a00 	vldr	s14, [r3]
 80065e0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8006624 <maf+0xe0>
 80065e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	edc3 7a00 	vstr	s15, [r3]
	*mafQ = sumQ/(float)MAF_LEN;
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <maf+0xd8>)
 80065f0:	ed93 7a00 	vldr	s14, [r3]
 80065f4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006624 <maf+0xe0>
 80065f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	edc3 7a00 	vstr	s15, [r3]
}
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	200001ac 	.word	0x200001ac
 8006614:	200001b0 	.word	0x200001b0
 8006618:	200001b4 	.word	0x200001b4
 800661c:	20000254 	.word	0x20000254
 8006620:	20000258 	.word	0x20000258
 8006624:	42200000 	.word	0x42200000

08006628 <abc_to_alphabeta>:
// Constants



void abc_to_alphabeta(float a, float b, float c, float *alpha, float *beta)
{
 8006628:	b480      	push	{r7}
 800662a:	b08b      	sub	sp, #44	; 0x2c
 800662c:	af00      	add	r7, sp, #0
 800662e:	ed87 0a05 	vstr	s0, [r7, #20]
 8006632:	edc7 0a04 	vstr	s1, [r7, #16]
 8006636:	ed87 1a03 	vstr	s2, [r7, #12]
 800663a:	60b8      	str	r0, [r7, #8]
 800663c:	6079      	str	r1, [r7, #4]
	// constants
	const float two_thirds = 2.0f/3.0f;
 800663e:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <abc_to_alphabeta+0x8c>)
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
	const float one_third = 1.0f/3.0f;
 8006642:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <abc_to_alphabeta+0x90>)
 8006644:	623b      	str	r3, [r7, #32]
	const float sqrt3_div_2 = sqrt(3.0f)/2.0f;
 8006646:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <abc_to_alphabeta+0x94>)
 8006648:	61fb      	str	r3, [r7, #28]

	// calculation
    *alpha =  two_thirds*a - one_third*b - one_third*c;
 800664a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800664e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006656:	edd7 6a08 	vldr	s13, [r7, #32]
 800665a:	edd7 7a04 	vldr	s15, [r7, #16]
 800665e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006666:	edd7 6a08 	vldr	s13, [r7, #32]
 800666a:	edd7 7a03 	vldr	s15, [r7, #12]
 800666e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	edc3 7a00 	vstr	s15, [r3]
    *beta = two_thirds * (sqrt3_div_2*b - sqrt3_div_2*c);
 800667c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006680:	edd7 7a04 	vldr	s15, [r7, #16]
 8006684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006688:	edd7 6a07 	vldr	s13, [r7, #28]
 800668c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006698:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800669c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	edc3 7a00 	vstr	s15, [r3]
}
 80066a6:	bf00      	nop
 80066a8:	372c      	adds	r7, #44	; 0x2c
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	3f2aaaab 	.word	0x3f2aaaab
 80066b8:	3eaaaaab 	.word	0x3eaaaaab
 80066bc:	3f5db3d7 	.word	0x3f5db3d7

080066c0 <alphabeta_to_dq>:
//    return beta;
//}


void alphabeta_to_dq(float alpha, float beta, float angle, float *d, float *q)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	ed2d 8b02 	vpush	{d8}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	ed87 0a05 	vstr	s0, [r7, #20]
 80066ce:	edc7 0a04 	vstr	s1, [r7, #16]
 80066d2:	ed87 1a03 	vstr	s2, [r7, #12]
 80066d6:	60b8      	str	r0, [r7, #8]
 80066d8:	6079      	str	r1, [r7, #4]
	*d = cosf(angle)*alpha + sinf(angle)*beta;
 80066da:	ed97 0a03 	vldr	s0, [r7, #12]
 80066de:	f000 ff27 	bl	8007530 <cosf>
 80066e2:	eeb0 7a40 	vmov.f32	s14, s0
 80066e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80066ea:	ee27 8a27 	vmul.f32	s16, s14, s15
 80066ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80066f2:	f000 ff5d 	bl	80075b0 <sinf>
 80066f6:	eeb0 7a40 	vmov.f32	s14, s0
 80066fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	edc3 7a00 	vstr	s15, [r3]
	*q = -sinf(angle)*alpha + cosf(angle)*beta;
 800670c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006710:	f000 ff4e 	bl	80075b0 <sinf>
 8006714:	eef0 7a40 	vmov.f32	s15, s0
 8006718:	eeb1 7a67 	vneg.f32	s14, s15
 800671c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006720:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006724:	ed97 0a03 	vldr	s0, [r7, #12]
 8006728:	f000 ff02 	bl	8007530 <cosf>
 800672c:	eeb0 7a40 	vmov.f32	s14, s0
 8006730:	edd7 7a04 	vldr	s15, [r7, #16]
 8006734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006738:	ee78 7a27 	vadd.f32	s15, s16, s15
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	edc3 7a00 	vstr	s15, [r3]
}
 8006742:	bf00      	nop
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	ecbd 8b02 	vpop	{d8}
 800674c:	bd80      	pop	{r7, pc}

0800674e <dq_to_alphabeta>:
//    return q;
//}


void dq_to_alphabeta(float d, float q, float angle, float *alpha, float *beta)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	ed2d 8b02 	vpush	{d8}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	ed87 0a05 	vstr	s0, [r7, #20]
 800675c:	edc7 0a04 	vstr	s1, [r7, #16]
 8006760:	ed87 1a03 	vstr	s2, [r7, #12]
 8006764:	60b8      	str	r0, [r7, #8]
 8006766:	6079      	str	r1, [r7, #4]
	*alpha = cosf(angle)*d - sinf(angle)*q;
 8006768:	ed97 0a03 	vldr	s0, [r7, #12]
 800676c:	f000 fee0 	bl	8007530 <cosf>
 8006770:	eeb0 7a40 	vmov.f32	s14, s0
 8006774:	edd7 7a05 	vldr	s15, [r7, #20]
 8006778:	ee27 8a27 	vmul.f32	s16, s14, s15
 800677c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006780:	f000 ff16 	bl	80075b0 <sinf>
 8006784:	eeb0 7a40 	vmov.f32	s14, s0
 8006788:	edd7 7a04 	vldr	s15, [r7, #16]
 800678c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006790:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	edc3 7a00 	vstr	s15, [r3]
	*beta = sinf(angle)*d + cosf(angle)*q;
 800679a:	ed97 0a03 	vldr	s0, [r7, #12]
 800679e:	f000 ff07 	bl	80075b0 <sinf>
 80067a2:	eeb0 7a40 	vmov.f32	s14, s0
 80067a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80067aa:	ee27 8a27 	vmul.f32	s16, s14, s15
 80067ae:	ed97 0a03 	vldr	s0, [r7, #12]
 80067b2:	f000 febd 	bl	8007530 <cosf>
 80067b6:	eeb0 7a40 	vmov.f32	s14, s0
 80067ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80067be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	edc3 7a00 	vstr	s15, [r3]
}
 80067cc:	bf00      	nop
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	ecbd 8b02 	vpop	{d8}
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <cos_sin_grid>:
//    return beta;
//}


void cos_sin_grid(float alpha, float beta, float *cos_grid, float *sin_grid)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	ed87 0a03 	vstr	s0, [r7, #12]
 80067e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
	static float sqrtCalc;

	sqrtCalc = pow((alpha*alpha + beta*beta), -0.5f);
 80067ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80067ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80067f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80067f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fe:	ee17 0a90 	vmov	r0, s15
 8006802:	f7f9 fec1 	bl	8000588 <__aeabi_f2d>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8006858 <cos_sin_grid+0x80>
 800680e:	ec43 2b10 	vmov	d0, r2, r3
 8006812:	f000 ff0f 	bl	8007634 <pow>
 8006816:	ec53 2b10 	vmov	r2, r3, d0
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	f7fa f9bb 	bl	8000b98 <__aeabi_d2f>
 8006822:	4603      	mov	r3, r0
 8006824:	4a0e      	ldr	r2, [pc, #56]	; (8006860 <cos_sin_grid+0x88>)
 8006826:	6013      	str	r3, [r2, #0]
	*cos_grid = alpha * sqrtCalc;
 8006828:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <cos_sin_grid+0x88>)
 800682a:	ed93 7a00 	vldr	s14, [r3]
 800682e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	edc3 7a00 	vstr	s15, [r3]
	*sin_grid = beta * sqrtCalc;
 800683c:	4b08      	ldr	r3, [pc, #32]	; (8006860 <cos_sin_grid+0x88>)
 800683e:	ed93 7a00 	vldr	s14, [r3]
 8006842:	edd7 7a02 	vldr	s15, [r7, #8]
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	edc3 7a00 	vstr	s15, [r3]
}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	00000000 	.word	0x00000000
 800685c:	bfe00000 	.word	0xbfe00000
 8006860:	200002f8 	.word	0x200002f8
 8006864:	00000000 	.word	0x00000000

08006868 <pi_regulator>:
//    return beta/ (sqrt(alpha*alpha + beta*beta));
//}


void pi_regulator(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts, float *anglePll, float *anglePllComp)
{
 8006868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800686c:	b088      	sub	sp, #32
 800686e:	af00      	add	r7, sp, #0
 8006870:	ed87 0a07 	vstr	s0, [r7, #28]
 8006874:	edc7 0a06 	vstr	s1, [r7, #24]
 8006878:	ed87 1a05 	vstr	s2, [r7, #20]
 800687c:	edc7 1a04 	vstr	s3, [r7, #16]
 8006880:	ed87 2a03 	vstr	s4, [r7, #12]
 8006884:	edc7 2a02 	vstr	s5, [r7, #8]
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
    static float phaseError_old, integral_old, angle_old, omega_old, integral, omega;;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 800688c:	6978      	ldr	r0, [r7, #20]
 800688e:	f7f9 fe7b 	bl	8000588 <__aeabi_f2d>
 8006892:	4604      	mov	r4, r0
 8006894:	460d      	mov	r5, r1
 8006896:	69f8      	ldr	r0, [r7, #28]
 8006898:	f7f9 fe76 	bl	8000588 <__aeabi_f2d>
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	4b75      	ldr	r3, [pc, #468]	; (8006a78 <pi_regulator+0x210>)
 80068a2:	f7f9 fec9 	bl	8000638 <__aeabi_dmul>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4690      	mov	r8, r2
 80068ac:	4699      	mov	r9, r3
 80068ae:	4b73      	ldr	r3, [pc, #460]	; (8006a7c <pi_regulator+0x214>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7f9 fe68 	bl	8000588 <__aeabi_f2d>
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	4b6e      	ldr	r3, [pc, #440]	; (8006a78 <pi_regulator+0x210>)
 80068be:	f7f9 febb 	bl	8000638 <__aeabi_dmul>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7f9 fcff 	bl	80002cc <__adddf3>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4620      	mov	r0, r4
 80068d4:	4629      	mov	r1, r5
 80068d6:	f7f9 feaf 	bl	8000638 <__aeabi_dmul>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4614      	mov	r4, r2
 80068e0:	461d      	mov	r5, r3
 80068e2:	68b8      	ldr	r0, [r7, #8]
 80068e4:	f7f9 fe50 	bl	8000588 <__aeabi_f2d>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7f9 fea2 	bl	8000638 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4614      	mov	r4, r2
 80068fa:	461d      	mov	r5, r3
 80068fc:	4b60      	ldr	r3, [pc, #384]	; (8006a80 <pi_regulator+0x218>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4618      	mov	r0, r3
 8006902:	f7f9 fe41 	bl	8000588 <__aeabi_f2d>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4620      	mov	r0, r4
 800690c:	4629      	mov	r1, r5
 800690e:	f7f9 fcdd 	bl	80002cc <__adddf3>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4610      	mov	r0, r2
 8006918:	4619      	mov	r1, r3
 800691a:	f7fa f93d 	bl	8000b98 <__aeabi_d2f>
 800691e:	4603      	mov	r3, r0
 8006920:	4a58      	ldr	r2, [pc, #352]	; (8006a84 <pi_regulator+0x21c>)
 8006922:	6013      	str	r3, [r2, #0]
    omega = phaseError*kp + integral + feedForward; 
 8006924:	ed97 7a07 	vldr	s14, [r7, #28]
 8006928:	edd7 7a04 	vldr	s15, [r7, #16]
 800692c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006930:	4b54      	ldr	r3, [pc, #336]	; (8006a84 <pi_regulator+0x21c>)
 8006932:	edd3 7a00 	vldr	s15, [r3]
 8006936:	ee37 7a27 	vadd.f32	s14, s14, s15
 800693a:	edd7 7a06 	vldr	s15, [r7, #24]
 800693e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006942:	4b51      	ldr	r3, [pc, #324]	; (8006a88 <pi_regulator+0x220>)
 8006944:	edc3 7a00 	vstr	s15, [r3]

    *anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old;
 8006948:	4b4f      	ldr	r3, [pc, #316]	; (8006a88 <pi_regulator+0x220>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7f9 fe1b 	bl	8000588 <__aeabi_f2d>
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	4b48      	ldr	r3, [pc, #288]	; (8006a78 <pi_regulator+0x210>)
 8006958:	f7f9 fe6e 	bl	8000638 <__aeabi_dmul>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4614      	mov	r4, r2
 8006962:	461d      	mov	r5, r3
 8006964:	4b49      	ldr	r3, [pc, #292]	; (8006a8c <pi_regulator+0x224>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7f9 fe0d 	bl	8000588 <__aeabi_f2d>
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	4b41      	ldr	r3, [pc, #260]	; (8006a78 <pi_regulator+0x210>)
 8006974:	f7f9 fe60 	bl	8000638 <__aeabi_dmul>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fca4 	bl	80002cc <__adddf3>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4614      	mov	r4, r2
 800698a:	461d      	mov	r5, r3
 800698c:	68b8      	ldr	r0, [r7, #8]
 800698e:	f7f9 fdfb 	bl	8000588 <__aeabi_f2d>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4620      	mov	r0, r4
 8006998:	4629      	mov	r1, r5
 800699a:	f7f9 fe4d 	bl	8000638 <__aeabi_dmul>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4614      	mov	r4, r2
 80069a4:	461d      	mov	r5, r3
 80069a6:	4b3a      	ldr	r3, [pc, #232]	; (8006a90 <pi_regulator+0x228>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7f9 fdec 	bl	8000588 <__aeabi_f2d>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7f9 fc88 	bl	80002cc <__adddf3>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4610      	mov	r0, r2
 80069c2:	4619      	mov	r1, r3
 80069c4:	f7fa f8e8 	bl	8000b98 <__aeabi_d2f>
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]

    if (*anglePll > TWO_PI) {
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7f9 fdd8 	bl	8000588 <__aeabi_f2d>
 80069d8:	a325      	add	r3, pc, #148	; (adr r3, 8006a70 <pi_regulator+0x208>)
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f7fa f8bb 	bl	8000b58 <__aeabi_dcmpgt>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d012      	beq.n	8006a0e <pi_regulator+0x1a6>
    		*anglePll = *anglePll - TWO_PI;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7f9 fdcb 	bl	8000588 <__aeabi_f2d>
 80069f2:	a31f      	add	r3, pc, #124	; (adr r3, 8006a70 <pi_regulator+0x208>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fc66 	bl	80002c8 <__aeabi_dsub>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	f7fa f8c8 	bl	8000b98 <__aeabi_d2f>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
    }

    *anglePllComp = *anglePll - (omega - feedForward - phaseError*kp)*kPhi;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	ed93 7a00 	vldr	s14, [r3]
 8006a14:	4b1c      	ldr	r3, [pc, #112]	; (8006a88 <pi_regulator+0x220>)
 8006a16:	edd3 6a00 	vldr	s13, [r3]
 8006a1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006a22:	ed97 6a07 	vldr	s12, [r7, #28]
 8006a26:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006a2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	edc3 7a00 	vstr	s15, [r3]

    phaseError_old = phaseError;
 8006a44:	4a0d      	ldr	r2, [pc, #52]	; (8006a7c <pi_regulator+0x214>)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <pi_regulator+0x21c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a0c      	ldr	r2, [pc, #48]	; (8006a80 <pi_regulator+0x218>)
 8006a50:	6013      	str	r3, [r2, #0]
    angle_old = *anglePll;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a0e      	ldr	r2, [pc, #56]	; (8006a90 <pi_regulator+0x228>)
 8006a58:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <pi_regulator+0x220>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a0b      	ldr	r2, [pc, #44]	; (8006a8c <pi_regulator+0x224>)
 8006a60:	6013      	str	r3, [r2, #0]
}
 8006a62:	bf00      	nop
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a6c:	f3af 8000 	nop.w
 8006a70:	54442c46 	.word	0x54442c46
 8006a74:	401921fb 	.word	0x401921fb
 8006a78:	3fe00000 	.word	0x3fe00000
 8006a7c:	200002fc 	.word	0x200002fc
 8006a80:	20000300 	.word	0x20000300
 8006a84:	20000304 	.word	0x20000304
 8006a88:	20000308 	.word	0x20000308
 8006a8c:	2000030c 	.word	0x2000030c
 8006a90:	20000310 	.word	0x20000310

08006a94 <phase_detector>:
//
//    return anglePllComp;
//}

float phase_detector(float cosGrid, float sinGrid, float anglePllComp)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	ed2d 8b02 	vpush	{d8}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006aa2:	edc7 0a02 	vstr	s1, [r7, #8]
 8006aa6:	ed87 1a01 	vstr	s2, [r7, #4]
    return sinGrid*cosf(anglePllComp) - cosGrid*sinf(anglePllComp);
 8006aaa:	ed97 0a01 	vldr	s0, [r7, #4]
 8006aae:	f000 fd3f 	bl	8007530 <cosf>
 8006ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8006ab6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006aba:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006abe:	ed97 0a01 	vldr	s0, [r7, #4]
 8006ac2:	f000 fd75 	bl	80075b0 <sinf>
 8006ac6:	eeb0 7a40 	vmov.f32	s14, s0
 8006aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	ee78 7a67 	vsub.f32	s15, s16, s15
}
 8006ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	ecbd 8b02 	vpop	{d8}
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <circular_buffer>:
//                  uint16_t *dataInput: Pointer to data to be inserted into circular buffer
//                  uint8_t event: A flag which, when triggered, sets the ring buffer to fill the last 1-bufSplit% of the buffer
//                  float bufSplit: The percentage of the buffer which is kept in the ring buffer after event trigger.
//  Returns     :   *readStart: Where to start reading the ring buffer
uint8_t circular_buffer(uint16_t bufferSize, int16_t circularBuffer[][RING_BUF_SIZE], int16_t *dataInput, uint8_t event, float bufSplit, uint16_t *readStart)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	461a      	mov	r2, r3
 8006af0:	ed87 0a00 	vstr	s0, [r7]
 8006af4:	4603      	mov	r3, r0
 8006af6:	81fb      	strh	r3, [r7, #14]
 8006af8:	4613      	mov	r3, r2
 8006afa:	737b      	strb	r3, [r7, #13]
        else {
            *readStart = 0;
        }
    } */

    if (event) {
 8006afc:	7b7b      	ldrb	r3, [r7, #13]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <circular_buffer+0x24>
    	eventLatch = 1;
 8006b02:	4b54      	ldr	r3, [pc, #336]	; (8006c54 <circular_buffer+0x170>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	701a      	strb	r2, [r3, #0]
    }

    if (bufferLength == bufferSize) {
 8006b08:	4b53      	ldr	r3, [pc, #332]	; (8006c58 <circular_buffer+0x174>)
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	89fa      	ldrh	r2, [r7, #14]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d103      	bne.n	8006b1a <circular_buffer+0x36>
        *readStart = writeIndex;
 8006b12:	4b52      	ldr	r3, [pc, #328]	; (8006c5c <circular_buffer+0x178>)
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	801a      	strh	r2, [r3, #0]
    }

    if (eventLatch) {
 8006b1a:	4b4e      	ldr	r3, [pc, #312]	; (8006c54 <circular_buffer+0x170>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d058      	beq.n	8006bd4 <circular_buffer+0xf0>
        if (!eventEntry) {
 8006b22:	4b4f      	ldr	r3, [pc, #316]	; (8006c60 <circular_buffer+0x17c>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d112      	bne.n	8006b50 <circular_buffer+0x6c>
            // Event has triggered
            bufferSplitLength = bufSplit * bufferSize;
 8006b2a:	89fb      	ldrh	r3, [r7, #14]
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b34:	edd7 7a00 	vldr	s15, [r7]
 8006b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b40:	ee17 3a90 	vmov	r3, s15
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	4b47      	ldr	r3, [pc, #284]	; (8006c64 <circular_buffer+0x180>)
 8006b48:	801a      	strh	r2, [r3, #0]
            eventEntry = 1;
 8006b4a:	4b45      	ldr	r3, [pc, #276]	; (8006c60 <circular_buffer+0x17c>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
        }

        if (bufferSplitLength == bufferSize) {
 8006b50:	4b44      	ldr	r3, [pc, #272]	; (8006c64 <circular_buffer+0x180>)
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	89fa      	ldrh	r2, [r7, #14]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d10d      	bne.n	8006b76 <circular_buffer+0x92>
            if (!bufferFullEntry) {
 8006b5a:	4b43      	ldr	r3, [pc, #268]	; (8006c68 <circular_buffer+0x184>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <circular_buffer+0x8a>
            	bufferDoneFlag = 1;
 8006b62:	4b42      	ldr	r3, [pc, #264]	; (8006c6c <circular_buffer+0x188>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
                // Do something?
                bufferFullEntry = 1;
 8006b68:	4b3f      	ldr	r3, [pc, #252]	; (8006c68 <circular_buffer+0x184>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
            }
            // STOP
            eventLatch = 0;
 8006b6e:	4b39      	ldr	r3, [pc, #228]	; (8006c54 <circular_buffer+0x170>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	e056      	b.n	8006c24 <circular_buffer+0x140>
        }
        else {
        	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e015      	b.n	8006ba8 <circular_buffer+0xc4>
        	    circularBuffer[writeIndex][i] = dataInput[i];
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	441a      	add	r2, r3
 8006b84:	4b35      	ldr	r3, [pc, #212]	; (8006c5c <circular_buffer+0x178>)
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	440b      	add	r3, r1
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	4619      	mov	r1, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	440b      	add	r3, r1
 8006b98:	f9b2 1000 	ldrsh.w	r1, [r2]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	dde6      	ble.n	8006b7c <circular_buffer+0x98>
        	}
            bufferSplitLength++;
 8006bae:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <circular_buffer+0x180>)
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	4b2b      	ldr	r3, [pc, #172]	; (8006c64 <circular_buffer+0x180>)
 8006bb8:	801a      	strh	r2, [r3, #0]
            writeIndex++;
 8006bba:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <circular_buffer+0x178>)
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <circular_buffer+0x178>)
 8006bc4:	801a      	strh	r2, [r3, #0]
            bufferLength++;
 8006bc6:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <circular_buffer+0x174>)
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <circular_buffer+0x174>)
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	e027      	b.n	8006c24 <circular_buffer+0x140>
        }
    }
    else {
    	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	e015      	b.n	8006c06 <circular_buffer+0x122>
    		circularBuffer[writeIndex][i] = dataInput[i];
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	441a      	add	r2, r3
 8006be2:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <circular_buffer+0x178>)
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	4619      	mov	r1, r3
 8006be8:	460b      	mov	r3, r1
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	440b      	add	r3, r1
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	440b      	add	r3, r1
 8006bf6:	f9b2 1000 	ldrsh.w	r1, [r2]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	3301      	adds	r3, #1
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b10      	cmp	r3, #16
 8006c0a:	dde6      	ble.n	8006bda <circular_buffer+0xf6>
		}

        writeIndex++;
 8006c0c:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <circular_buffer+0x178>)
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <circular_buffer+0x178>)
 8006c16:	801a      	strh	r2, [r3, #0]
        bufferLength++;
 8006c18:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <circular_buffer+0x174>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <circular_buffer+0x174>)
 8006c22:	801a      	strh	r2, [r3, #0]
    }



    // Reset bufferlength
    if (bufferLength > bufferSize) {
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <circular_buffer+0x174>)
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	89fa      	ldrh	r2, [r7, #14]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d202      	bcs.n	8006c34 <circular_buffer+0x150>
        bufferLength = bufferSize;
 8006c2e:	4a0a      	ldr	r2, [pc, #40]	; (8006c58 <circular_buffer+0x174>)
 8006c30:	89fb      	ldrh	r3, [r7, #14]
 8006c32:	8013      	strh	r3, [r2, #0]
    }
    // Reset writeindex
    if (writeIndex == bufferSize) {
 8006c34:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <circular_buffer+0x178>)
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	89fa      	ldrh	r2, [r7, #14]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d102      	bne.n	8006c44 <circular_buffer+0x160>
        writeIndex = 0;
 8006c3e:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <circular_buffer+0x178>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	801a      	strh	r2, [r3, #0]
    }

    return bufferDoneFlag;
 8006c44:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <circular_buffer+0x188>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	20000314 	.word	0x20000314
 8006c58:	20000316 	.word	0x20000316
 8006c5c:	20000318 	.word	0x20000318
 8006c60:	2000031a 	.word	0x2000031a
 8006c64:	2000031c 	.word	0x2000031c
 8006c68:	2000031e 	.word	0x2000031e
 8006c6c:	2000031f 	.word	0x2000031f

08006c70 <__errno>:
 8006c70:	4b01      	ldr	r3, [pc, #4]	; (8006c78 <__errno+0x8>)
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000018 	.word	0x20000018

08006c7c <__libc_init_array>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	4d0d      	ldr	r5, [pc, #52]	; (8006cb4 <__libc_init_array+0x38>)
 8006c80:	4c0d      	ldr	r4, [pc, #52]	; (8006cb8 <__libc_init_array+0x3c>)
 8006c82:	1b64      	subs	r4, r4, r5
 8006c84:	10a4      	asrs	r4, r4, #2
 8006c86:	2600      	movs	r6, #0
 8006c88:	42a6      	cmp	r6, r4
 8006c8a:	d109      	bne.n	8006ca0 <__libc_init_array+0x24>
 8006c8c:	4d0b      	ldr	r5, [pc, #44]	; (8006cbc <__libc_init_array+0x40>)
 8006c8e:	4c0c      	ldr	r4, [pc, #48]	; (8006cc0 <__libc_init_array+0x44>)
 8006c90:	f002 f9ac 	bl	8008fec <_init>
 8006c94:	1b64      	subs	r4, r4, r5
 8006c96:	10a4      	asrs	r4, r4, #2
 8006c98:	2600      	movs	r6, #0
 8006c9a:	42a6      	cmp	r6, r4
 8006c9c:	d105      	bne.n	8006caa <__libc_init_array+0x2e>
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca4:	4798      	blx	r3
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7ee      	b.n	8006c88 <__libc_init_array+0xc>
 8006caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cae:	4798      	blx	r3
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	e7f2      	b.n	8006c9a <__libc_init_array+0x1e>
 8006cb4:	08009668 	.word	0x08009668
 8006cb8:	08009668 	.word	0x08009668
 8006cbc:	08009668 	.word	0x08009668
 8006cc0:	0800966c 	.word	0x0800966c

08006cc4 <memset>:
 8006cc4:	4402      	add	r2, r0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d100      	bne.n	8006cce <memset+0xa>
 8006ccc:	4770      	bx	lr
 8006cce:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd2:	e7f9      	b.n	8006cc8 <memset+0x4>

08006cd4 <siprintf>:
 8006cd4:	b40e      	push	{r1, r2, r3}
 8006cd6:	b500      	push	{lr}
 8006cd8:	b09c      	sub	sp, #112	; 0x70
 8006cda:	ab1d      	add	r3, sp, #116	; 0x74
 8006cdc:	9002      	str	r0, [sp, #8]
 8006cde:	9006      	str	r0, [sp, #24]
 8006ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ce4:	4809      	ldr	r0, [pc, #36]	; (8006d0c <siprintf+0x38>)
 8006ce6:	9107      	str	r1, [sp, #28]
 8006ce8:	9104      	str	r1, [sp, #16]
 8006cea:	4909      	ldr	r1, [pc, #36]	; (8006d10 <siprintf+0x3c>)
 8006cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cf0:	9105      	str	r1, [sp, #20]
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	a902      	add	r1, sp, #8
 8006cf8:	f000 f868 	bl	8006dcc <_svfiprintf_r>
 8006cfc:	9b02      	ldr	r3, [sp, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	b01c      	add	sp, #112	; 0x70
 8006d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d08:	b003      	add	sp, #12
 8006d0a:	4770      	bx	lr
 8006d0c:	20000018 	.word	0x20000018
 8006d10:	ffff0208 	.word	0xffff0208

08006d14 <__ssputs_r>:
 8006d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	688e      	ldr	r6, [r1, #8]
 8006d1a:	429e      	cmp	r6, r3
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	4690      	mov	r8, r2
 8006d22:	461f      	mov	r7, r3
 8006d24:	d838      	bhi.n	8006d98 <__ssputs_r+0x84>
 8006d26:	898a      	ldrh	r2, [r1, #12]
 8006d28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d2c:	d032      	beq.n	8006d94 <__ssputs_r+0x80>
 8006d2e:	6825      	ldr	r5, [r4, #0]
 8006d30:	6909      	ldr	r1, [r1, #16]
 8006d32:	eba5 0901 	sub.w	r9, r5, r1
 8006d36:	6965      	ldr	r5, [r4, #20]
 8006d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d40:	3301      	adds	r3, #1
 8006d42:	444b      	add	r3, r9
 8006d44:	106d      	asrs	r5, r5, #1
 8006d46:	429d      	cmp	r5, r3
 8006d48:	bf38      	it	cc
 8006d4a:	461d      	movcc	r5, r3
 8006d4c:	0553      	lsls	r3, r2, #21
 8006d4e:	d531      	bpl.n	8006db4 <__ssputs_r+0xa0>
 8006d50:	4629      	mov	r1, r5
 8006d52:	f000 fb47 	bl	80073e4 <_malloc_r>
 8006d56:	4606      	mov	r6, r0
 8006d58:	b950      	cbnz	r0, 8006d70 <__ssputs_r+0x5c>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	f8ca 3000 	str.w	r3, [sl]
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	6921      	ldr	r1, [r4, #16]
 8006d72:	464a      	mov	r2, r9
 8006d74:	f000 fabe 	bl	80072f4 <memcpy>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	6126      	str	r6, [r4, #16]
 8006d86:	6165      	str	r5, [r4, #20]
 8006d88:	444e      	add	r6, r9
 8006d8a:	eba5 0509 	sub.w	r5, r5, r9
 8006d8e:	6026      	str	r6, [r4, #0]
 8006d90:	60a5      	str	r5, [r4, #8]
 8006d92:	463e      	mov	r6, r7
 8006d94:	42be      	cmp	r6, r7
 8006d96:	d900      	bls.n	8006d9a <__ssputs_r+0x86>
 8006d98:	463e      	mov	r6, r7
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	4641      	mov	r1, r8
 8006da0:	f000 fab6 	bl	8007310 <memmove>
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	1b9b      	subs	r3, r3, r6
 8006daa:	4432      	add	r2, r6
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	2000      	movs	r0, #0
 8006db2:	e7db      	b.n	8006d6c <__ssputs_r+0x58>
 8006db4:	462a      	mov	r2, r5
 8006db6:	f000 fb6f 	bl	8007498 <_realloc_r>
 8006dba:	4606      	mov	r6, r0
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d1e1      	bne.n	8006d84 <__ssputs_r+0x70>
 8006dc0:	6921      	ldr	r1, [r4, #16]
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	f000 fabe 	bl	8007344 <_free_r>
 8006dc8:	e7c7      	b.n	8006d5a <__ssputs_r+0x46>
	...

08006dcc <_svfiprintf_r>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	4698      	mov	r8, r3
 8006dd2:	898b      	ldrh	r3, [r1, #12]
 8006dd4:	061b      	lsls	r3, r3, #24
 8006dd6:	b09d      	sub	sp, #116	; 0x74
 8006dd8:	4607      	mov	r7, r0
 8006dda:	460d      	mov	r5, r1
 8006ddc:	4614      	mov	r4, r2
 8006dde:	d50e      	bpl.n	8006dfe <_svfiprintf_r+0x32>
 8006de0:	690b      	ldr	r3, [r1, #16]
 8006de2:	b963      	cbnz	r3, 8006dfe <_svfiprintf_r+0x32>
 8006de4:	2140      	movs	r1, #64	; 0x40
 8006de6:	f000 fafd 	bl	80073e4 <_malloc_r>
 8006dea:	6028      	str	r0, [r5, #0]
 8006dec:	6128      	str	r0, [r5, #16]
 8006dee:	b920      	cbnz	r0, 8006dfa <_svfiprintf_r+0x2e>
 8006df0:	230c      	movs	r3, #12
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	f04f 30ff 	mov.w	r0, #4294967295
 8006df8:	e0d1      	b.n	8006f9e <_svfiprintf_r+0x1d2>
 8006dfa:	2340      	movs	r3, #64	; 0x40
 8006dfc:	616b      	str	r3, [r5, #20]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9309      	str	r3, [sp, #36]	; 0x24
 8006e02:	2320      	movs	r3, #32
 8006e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e0c:	2330      	movs	r3, #48	; 0x30
 8006e0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006fb8 <_svfiprintf_r+0x1ec>
 8006e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e16:	f04f 0901 	mov.w	r9, #1
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	469a      	mov	sl, r3
 8006e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e22:	b10a      	cbz	r2, 8006e28 <_svfiprintf_r+0x5c>
 8006e24:	2a25      	cmp	r2, #37	; 0x25
 8006e26:	d1f9      	bne.n	8006e1c <_svfiprintf_r+0x50>
 8006e28:	ebba 0b04 	subs.w	fp, sl, r4
 8006e2c:	d00b      	beq.n	8006e46 <_svfiprintf_r+0x7a>
 8006e2e:	465b      	mov	r3, fp
 8006e30:	4622      	mov	r2, r4
 8006e32:	4629      	mov	r1, r5
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7ff ff6d 	bl	8006d14 <__ssputs_r>
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	f000 80aa 	beq.w	8006f94 <_svfiprintf_r+0x1c8>
 8006e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e42:	445a      	add	r2, fp
 8006e44:	9209      	str	r2, [sp, #36]	; 0x24
 8006e46:	f89a 3000 	ldrb.w	r3, [sl]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80a2 	beq.w	8006f94 <_svfiprintf_r+0x1c8>
 8006e50:	2300      	movs	r3, #0
 8006e52:	f04f 32ff 	mov.w	r2, #4294967295
 8006e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e5a:	f10a 0a01 	add.w	sl, sl, #1
 8006e5e:	9304      	str	r3, [sp, #16]
 8006e60:	9307      	str	r3, [sp, #28]
 8006e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e66:	931a      	str	r3, [sp, #104]	; 0x68
 8006e68:	4654      	mov	r4, sl
 8006e6a:	2205      	movs	r2, #5
 8006e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e70:	4851      	ldr	r0, [pc, #324]	; (8006fb8 <_svfiprintf_r+0x1ec>)
 8006e72:	f7f9 f9d5 	bl	8000220 <memchr>
 8006e76:	9a04      	ldr	r2, [sp, #16]
 8006e78:	b9d8      	cbnz	r0, 8006eb2 <_svfiprintf_r+0xe6>
 8006e7a:	06d0      	lsls	r0, r2, #27
 8006e7c:	bf44      	itt	mi
 8006e7e:	2320      	movmi	r3, #32
 8006e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e84:	0711      	lsls	r1, r2, #28
 8006e86:	bf44      	itt	mi
 8006e88:	232b      	movmi	r3, #43	; 0x2b
 8006e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e92:	2b2a      	cmp	r3, #42	; 0x2a
 8006e94:	d015      	beq.n	8006ec2 <_svfiprintf_r+0xf6>
 8006e96:	9a07      	ldr	r2, [sp, #28]
 8006e98:	4654      	mov	r4, sl
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	f04f 0c0a 	mov.w	ip, #10
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea6:	3b30      	subs	r3, #48	; 0x30
 8006ea8:	2b09      	cmp	r3, #9
 8006eaa:	d94e      	bls.n	8006f4a <_svfiprintf_r+0x17e>
 8006eac:	b1b0      	cbz	r0, 8006edc <_svfiprintf_r+0x110>
 8006eae:	9207      	str	r2, [sp, #28]
 8006eb0:	e014      	b.n	8006edc <_svfiprintf_r+0x110>
 8006eb2:	eba0 0308 	sub.w	r3, r0, r8
 8006eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	9304      	str	r3, [sp, #16]
 8006ebe:	46a2      	mov	sl, r4
 8006ec0:	e7d2      	b.n	8006e68 <_svfiprintf_r+0x9c>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	9103      	str	r1, [sp, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bfbb      	ittet	lt
 8006ece:	425b      	neglt	r3, r3
 8006ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ed4:	9307      	strge	r3, [sp, #28]
 8006ed6:	9307      	strlt	r3, [sp, #28]
 8006ed8:	bfb8      	it	lt
 8006eda:	9204      	strlt	r2, [sp, #16]
 8006edc:	7823      	ldrb	r3, [r4, #0]
 8006ede:	2b2e      	cmp	r3, #46	; 0x2e
 8006ee0:	d10c      	bne.n	8006efc <_svfiprintf_r+0x130>
 8006ee2:	7863      	ldrb	r3, [r4, #1]
 8006ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee6:	d135      	bne.n	8006f54 <_svfiprintf_r+0x188>
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	1d1a      	adds	r2, r3, #4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	9203      	str	r2, [sp, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bfb8      	it	lt
 8006ef4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ef8:	3402      	adds	r4, #2
 8006efa:	9305      	str	r3, [sp, #20]
 8006efc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fc8 <_svfiprintf_r+0x1fc>
 8006f00:	7821      	ldrb	r1, [r4, #0]
 8006f02:	2203      	movs	r2, #3
 8006f04:	4650      	mov	r0, sl
 8006f06:	f7f9 f98b 	bl	8000220 <memchr>
 8006f0a:	b140      	cbz	r0, 8006f1e <_svfiprintf_r+0x152>
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	eba0 000a 	sub.w	r0, r0, sl
 8006f12:	fa03 f000 	lsl.w	r0, r3, r0
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	4303      	orrs	r3, r0
 8006f1a:	3401      	adds	r4, #1
 8006f1c:	9304      	str	r3, [sp, #16]
 8006f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f22:	4826      	ldr	r0, [pc, #152]	; (8006fbc <_svfiprintf_r+0x1f0>)
 8006f24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f28:	2206      	movs	r2, #6
 8006f2a:	f7f9 f979 	bl	8000220 <memchr>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d038      	beq.n	8006fa4 <_svfiprintf_r+0x1d8>
 8006f32:	4b23      	ldr	r3, [pc, #140]	; (8006fc0 <_svfiprintf_r+0x1f4>)
 8006f34:	bb1b      	cbnz	r3, 8006f7e <_svfiprintf_r+0x1b2>
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	3307      	adds	r3, #7
 8006f3a:	f023 0307 	bic.w	r3, r3, #7
 8006f3e:	3308      	adds	r3, #8
 8006f40:	9303      	str	r3, [sp, #12]
 8006f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f44:	4433      	add	r3, r6
 8006f46:	9309      	str	r3, [sp, #36]	; 0x24
 8006f48:	e767      	b.n	8006e1a <_svfiprintf_r+0x4e>
 8006f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f4e:	460c      	mov	r4, r1
 8006f50:	2001      	movs	r0, #1
 8006f52:	e7a5      	b.n	8006ea0 <_svfiprintf_r+0xd4>
 8006f54:	2300      	movs	r3, #0
 8006f56:	3401      	adds	r4, #1
 8006f58:	9305      	str	r3, [sp, #20]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	f04f 0c0a 	mov.w	ip, #10
 8006f60:	4620      	mov	r0, r4
 8006f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f66:	3a30      	subs	r2, #48	; 0x30
 8006f68:	2a09      	cmp	r2, #9
 8006f6a:	d903      	bls.n	8006f74 <_svfiprintf_r+0x1a8>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0c5      	beq.n	8006efc <_svfiprintf_r+0x130>
 8006f70:	9105      	str	r1, [sp, #20]
 8006f72:	e7c3      	b.n	8006efc <_svfiprintf_r+0x130>
 8006f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f78:	4604      	mov	r4, r0
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7f0      	b.n	8006f60 <_svfiprintf_r+0x194>
 8006f7e:	ab03      	add	r3, sp, #12
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	462a      	mov	r2, r5
 8006f84:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <_svfiprintf_r+0x1f8>)
 8006f86:	a904      	add	r1, sp, #16
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f3af 8000 	nop.w
 8006f8e:	1c42      	adds	r2, r0, #1
 8006f90:	4606      	mov	r6, r0
 8006f92:	d1d6      	bne.n	8006f42 <_svfiprintf_r+0x176>
 8006f94:	89ab      	ldrh	r3, [r5, #12]
 8006f96:	065b      	lsls	r3, r3, #25
 8006f98:	f53f af2c 	bmi.w	8006df4 <_svfiprintf_r+0x28>
 8006f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f9e:	b01d      	add	sp, #116	; 0x74
 8006fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	ab03      	add	r3, sp, #12
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	462a      	mov	r2, r5
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <_svfiprintf_r+0x1f8>)
 8006fac:	a904      	add	r1, sp, #16
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f000 f87a 	bl	80070a8 <_printf_i>
 8006fb4:	e7eb      	b.n	8006f8e <_svfiprintf_r+0x1c2>
 8006fb6:	bf00      	nop
 8006fb8:	08009218 	.word	0x08009218
 8006fbc:	08009222 	.word	0x08009222
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	08006d15 	.word	0x08006d15
 8006fc8:	0800921e 	.word	0x0800921e

08006fcc <_printf_common>:
 8006fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	4699      	mov	r9, r3
 8006fd4:	688a      	ldr	r2, [r1, #8]
 8006fd6:	690b      	ldr	r3, [r1, #16]
 8006fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	bfb8      	it	lt
 8006fe0:	4613      	movlt	r3, r2
 8006fe2:	6033      	str	r3, [r6, #0]
 8006fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fe8:	4607      	mov	r7, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	b10a      	cbz	r2, 8006ff2 <_printf_common+0x26>
 8006fee:	3301      	adds	r3, #1
 8006ff0:	6033      	str	r3, [r6, #0]
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	0699      	lsls	r1, r3, #26
 8006ff6:	bf42      	ittt	mi
 8006ff8:	6833      	ldrmi	r3, [r6, #0]
 8006ffa:	3302      	addmi	r3, #2
 8006ffc:	6033      	strmi	r3, [r6, #0]
 8006ffe:	6825      	ldr	r5, [r4, #0]
 8007000:	f015 0506 	ands.w	r5, r5, #6
 8007004:	d106      	bne.n	8007014 <_printf_common+0x48>
 8007006:	f104 0a19 	add.w	sl, r4, #25
 800700a:	68e3      	ldr	r3, [r4, #12]
 800700c:	6832      	ldr	r2, [r6, #0]
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	42ab      	cmp	r3, r5
 8007012:	dc26      	bgt.n	8007062 <_printf_common+0x96>
 8007014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007018:	1e13      	subs	r3, r2, #0
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	bf18      	it	ne
 800701e:	2301      	movne	r3, #1
 8007020:	0692      	lsls	r2, r2, #26
 8007022:	d42b      	bmi.n	800707c <_printf_common+0xb0>
 8007024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007028:	4649      	mov	r1, r9
 800702a:	4638      	mov	r0, r7
 800702c:	47c0      	blx	r8
 800702e:	3001      	adds	r0, #1
 8007030:	d01e      	beq.n	8007070 <_printf_common+0xa4>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	68e5      	ldr	r5, [r4, #12]
 8007036:	6832      	ldr	r2, [r6, #0]
 8007038:	f003 0306 	and.w	r3, r3, #6
 800703c:	2b04      	cmp	r3, #4
 800703e:	bf08      	it	eq
 8007040:	1aad      	subeq	r5, r5, r2
 8007042:	68a3      	ldr	r3, [r4, #8]
 8007044:	6922      	ldr	r2, [r4, #16]
 8007046:	bf0c      	ite	eq
 8007048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800704c:	2500      	movne	r5, #0
 800704e:	4293      	cmp	r3, r2
 8007050:	bfc4      	itt	gt
 8007052:	1a9b      	subgt	r3, r3, r2
 8007054:	18ed      	addgt	r5, r5, r3
 8007056:	2600      	movs	r6, #0
 8007058:	341a      	adds	r4, #26
 800705a:	42b5      	cmp	r5, r6
 800705c:	d11a      	bne.n	8007094 <_printf_common+0xc8>
 800705e:	2000      	movs	r0, #0
 8007060:	e008      	b.n	8007074 <_printf_common+0xa8>
 8007062:	2301      	movs	r3, #1
 8007064:	4652      	mov	r2, sl
 8007066:	4649      	mov	r1, r9
 8007068:	4638      	mov	r0, r7
 800706a:	47c0      	blx	r8
 800706c:	3001      	adds	r0, #1
 800706e:	d103      	bne.n	8007078 <_printf_common+0xac>
 8007070:	f04f 30ff 	mov.w	r0, #4294967295
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	3501      	adds	r5, #1
 800707a:	e7c6      	b.n	800700a <_printf_common+0x3e>
 800707c:	18e1      	adds	r1, r4, r3
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	2030      	movs	r0, #48	; 0x30
 8007082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007086:	4422      	add	r2, r4
 8007088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800708c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007090:	3302      	adds	r3, #2
 8007092:	e7c7      	b.n	8007024 <_printf_common+0x58>
 8007094:	2301      	movs	r3, #1
 8007096:	4622      	mov	r2, r4
 8007098:	4649      	mov	r1, r9
 800709a:	4638      	mov	r0, r7
 800709c:	47c0      	blx	r8
 800709e:	3001      	adds	r0, #1
 80070a0:	d0e6      	beq.n	8007070 <_printf_common+0xa4>
 80070a2:	3601      	adds	r6, #1
 80070a4:	e7d9      	b.n	800705a <_printf_common+0x8e>
	...

080070a8 <_printf_i>:
 80070a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	4691      	mov	r9, r2
 80070b0:	7e27      	ldrb	r7, [r4, #24]
 80070b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070b4:	2f78      	cmp	r7, #120	; 0x78
 80070b6:	4680      	mov	r8, r0
 80070b8:	469a      	mov	sl, r3
 80070ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070be:	d807      	bhi.n	80070d0 <_printf_i+0x28>
 80070c0:	2f62      	cmp	r7, #98	; 0x62
 80070c2:	d80a      	bhi.n	80070da <_printf_i+0x32>
 80070c4:	2f00      	cmp	r7, #0
 80070c6:	f000 80d8 	beq.w	800727a <_printf_i+0x1d2>
 80070ca:	2f58      	cmp	r7, #88	; 0x58
 80070cc:	f000 80a3 	beq.w	8007216 <_printf_i+0x16e>
 80070d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070d8:	e03a      	b.n	8007150 <_printf_i+0xa8>
 80070da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070de:	2b15      	cmp	r3, #21
 80070e0:	d8f6      	bhi.n	80070d0 <_printf_i+0x28>
 80070e2:	a001      	add	r0, pc, #4	; (adr r0, 80070e8 <_printf_i+0x40>)
 80070e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070e8:	08007141 	.word	0x08007141
 80070ec:	08007155 	.word	0x08007155
 80070f0:	080070d1 	.word	0x080070d1
 80070f4:	080070d1 	.word	0x080070d1
 80070f8:	080070d1 	.word	0x080070d1
 80070fc:	080070d1 	.word	0x080070d1
 8007100:	08007155 	.word	0x08007155
 8007104:	080070d1 	.word	0x080070d1
 8007108:	080070d1 	.word	0x080070d1
 800710c:	080070d1 	.word	0x080070d1
 8007110:	080070d1 	.word	0x080070d1
 8007114:	08007261 	.word	0x08007261
 8007118:	08007185 	.word	0x08007185
 800711c:	08007243 	.word	0x08007243
 8007120:	080070d1 	.word	0x080070d1
 8007124:	080070d1 	.word	0x080070d1
 8007128:	08007283 	.word	0x08007283
 800712c:	080070d1 	.word	0x080070d1
 8007130:	08007185 	.word	0x08007185
 8007134:	080070d1 	.word	0x080070d1
 8007138:	080070d1 	.word	0x080070d1
 800713c:	0800724b 	.word	0x0800724b
 8007140:	680b      	ldr	r3, [r1, #0]
 8007142:	1d1a      	adds	r2, r3, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	600a      	str	r2, [r1, #0]
 8007148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800714c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007150:	2301      	movs	r3, #1
 8007152:	e0a3      	b.n	800729c <_printf_i+0x1f4>
 8007154:	6825      	ldr	r5, [r4, #0]
 8007156:	6808      	ldr	r0, [r1, #0]
 8007158:	062e      	lsls	r6, r5, #24
 800715a:	f100 0304 	add.w	r3, r0, #4
 800715e:	d50a      	bpl.n	8007176 <_printf_i+0xce>
 8007160:	6805      	ldr	r5, [r0, #0]
 8007162:	600b      	str	r3, [r1, #0]
 8007164:	2d00      	cmp	r5, #0
 8007166:	da03      	bge.n	8007170 <_printf_i+0xc8>
 8007168:	232d      	movs	r3, #45	; 0x2d
 800716a:	426d      	negs	r5, r5
 800716c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007170:	485e      	ldr	r0, [pc, #376]	; (80072ec <_printf_i+0x244>)
 8007172:	230a      	movs	r3, #10
 8007174:	e019      	b.n	80071aa <_printf_i+0x102>
 8007176:	f015 0f40 	tst.w	r5, #64	; 0x40
 800717a:	6805      	ldr	r5, [r0, #0]
 800717c:	600b      	str	r3, [r1, #0]
 800717e:	bf18      	it	ne
 8007180:	b22d      	sxthne	r5, r5
 8007182:	e7ef      	b.n	8007164 <_printf_i+0xbc>
 8007184:	680b      	ldr	r3, [r1, #0]
 8007186:	6825      	ldr	r5, [r4, #0]
 8007188:	1d18      	adds	r0, r3, #4
 800718a:	6008      	str	r0, [r1, #0]
 800718c:	0628      	lsls	r0, r5, #24
 800718e:	d501      	bpl.n	8007194 <_printf_i+0xec>
 8007190:	681d      	ldr	r5, [r3, #0]
 8007192:	e002      	b.n	800719a <_printf_i+0xf2>
 8007194:	0669      	lsls	r1, r5, #25
 8007196:	d5fb      	bpl.n	8007190 <_printf_i+0xe8>
 8007198:	881d      	ldrh	r5, [r3, #0]
 800719a:	4854      	ldr	r0, [pc, #336]	; (80072ec <_printf_i+0x244>)
 800719c:	2f6f      	cmp	r7, #111	; 0x6f
 800719e:	bf0c      	ite	eq
 80071a0:	2308      	moveq	r3, #8
 80071a2:	230a      	movne	r3, #10
 80071a4:	2100      	movs	r1, #0
 80071a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071aa:	6866      	ldr	r6, [r4, #4]
 80071ac:	60a6      	str	r6, [r4, #8]
 80071ae:	2e00      	cmp	r6, #0
 80071b0:	bfa2      	ittt	ge
 80071b2:	6821      	ldrge	r1, [r4, #0]
 80071b4:	f021 0104 	bicge.w	r1, r1, #4
 80071b8:	6021      	strge	r1, [r4, #0]
 80071ba:	b90d      	cbnz	r5, 80071c0 <_printf_i+0x118>
 80071bc:	2e00      	cmp	r6, #0
 80071be:	d04d      	beq.n	800725c <_printf_i+0x1b4>
 80071c0:	4616      	mov	r6, r2
 80071c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80071c6:	fb03 5711 	mls	r7, r3, r1, r5
 80071ca:	5dc7      	ldrb	r7, [r0, r7]
 80071cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071d0:	462f      	mov	r7, r5
 80071d2:	42bb      	cmp	r3, r7
 80071d4:	460d      	mov	r5, r1
 80071d6:	d9f4      	bls.n	80071c2 <_printf_i+0x11a>
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d10b      	bne.n	80071f4 <_printf_i+0x14c>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	07df      	lsls	r7, r3, #31
 80071e0:	d508      	bpl.n	80071f4 <_printf_i+0x14c>
 80071e2:	6923      	ldr	r3, [r4, #16]
 80071e4:	6861      	ldr	r1, [r4, #4]
 80071e6:	4299      	cmp	r1, r3
 80071e8:	bfde      	ittt	le
 80071ea:	2330      	movle	r3, #48	; 0x30
 80071ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071f4:	1b92      	subs	r2, r2, r6
 80071f6:	6122      	str	r2, [r4, #16]
 80071f8:	f8cd a000 	str.w	sl, [sp]
 80071fc:	464b      	mov	r3, r9
 80071fe:	aa03      	add	r2, sp, #12
 8007200:	4621      	mov	r1, r4
 8007202:	4640      	mov	r0, r8
 8007204:	f7ff fee2 	bl	8006fcc <_printf_common>
 8007208:	3001      	adds	r0, #1
 800720a:	d14c      	bne.n	80072a6 <_printf_i+0x1fe>
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	b004      	add	sp, #16
 8007212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007216:	4835      	ldr	r0, [pc, #212]	; (80072ec <_printf_i+0x244>)
 8007218:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	680e      	ldr	r6, [r1, #0]
 8007220:	061f      	lsls	r7, r3, #24
 8007222:	f856 5b04 	ldr.w	r5, [r6], #4
 8007226:	600e      	str	r6, [r1, #0]
 8007228:	d514      	bpl.n	8007254 <_printf_i+0x1ac>
 800722a:	07d9      	lsls	r1, r3, #31
 800722c:	bf44      	itt	mi
 800722e:	f043 0320 	orrmi.w	r3, r3, #32
 8007232:	6023      	strmi	r3, [r4, #0]
 8007234:	b91d      	cbnz	r5, 800723e <_printf_i+0x196>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	f023 0320 	bic.w	r3, r3, #32
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	2310      	movs	r3, #16
 8007240:	e7b0      	b.n	80071a4 <_printf_i+0xfc>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	f043 0320 	orr.w	r3, r3, #32
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	2378      	movs	r3, #120	; 0x78
 800724c:	4828      	ldr	r0, [pc, #160]	; (80072f0 <_printf_i+0x248>)
 800724e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007252:	e7e3      	b.n	800721c <_printf_i+0x174>
 8007254:	065e      	lsls	r6, r3, #25
 8007256:	bf48      	it	mi
 8007258:	b2ad      	uxthmi	r5, r5
 800725a:	e7e6      	b.n	800722a <_printf_i+0x182>
 800725c:	4616      	mov	r6, r2
 800725e:	e7bb      	b.n	80071d8 <_printf_i+0x130>
 8007260:	680b      	ldr	r3, [r1, #0]
 8007262:	6826      	ldr	r6, [r4, #0]
 8007264:	6960      	ldr	r0, [r4, #20]
 8007266:	1d1d      	adds	r5, r3, #4
 8007268:	600d      	str	r5, [r1, #0]
 800726a:	0635      	lsls	r5, r6, #24
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	d501      	bpl.n	8007274 <_printf_i+0x1cc>
 8007270:	6018      	str	r0, [r3, #0]
 8007272:	e002      	b.n	800727a <_printf_i+0x1d2>
 8007274:	0671      	lsls	r1, r6, #25
 8007276:	d5fb      	bpl.n	8007270 <_printf_i+0x1c8>
 8007278:	8018      	strh	r0, [r3, #0]
 800727a:	2300      	movs	r3, #0
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	4616      	mov	r6, r2
 8007280:	e7ba      	b.n	80071f8 <_printf_i+0x150>
 8007282:	680b      	ldr	r3, [r1, #0]
 8007284:	1d1a      	adds	r2, r3, #4
 8007286:	600a      	str	r2, [r1, #0]
 8007288:	681e      	ldr	r6, [r3, #0]
 800728a:	6862      	ldr	r2, [r4, #4]
 800728c:	2100      	movs	r1, #0
 800728e:	4630      	mov	r0, r6
 8007290:	f7f8 ffc6 	bl	8000220 <memchr>
 8007294:	b108      	cbz	r0, 800729a <_printf_i+0x1f2>
 8007296:	1b80      	subs	r0, r0, r6
 8007298:	6060      	str	r0, [r4, #4]
 800729a:	6863      	ldr	r3, [r4, #4]
 800729c:	6123      	str	r3, [r4, #16]
 800729e:	2300      	movs	r3, #0
 80072a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a4:	e7a8      	b.n	80071f8 <_printf_i+0x150>
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	4632      	mov	r2, r6
 80072aa:	4649      	mov	r1, r9
 80072ac:	4640      	mov	r0, r8
 80072ae:	47d0      	blx	sl
 80072b0:	3001      	adds	r0, #1
 80072b2:	d0ab      	beq.n	800720c <_printf_i+0x164>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	079b      	lsls	r3, r3, #30
 80072b8:	d413      	bmi.n	80072e2 <_printf_i+0x23a>
 80072ba:	68e0      	ldr	r0, [r4, #12]
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	4298      	cmp	r0, r3
 80072c0:	bfb8      	it	lt
 80072c2:	4618      	movlt	r0, r3
 80072c4:	e7a4      	b.n	8007210 <_printf_i+0x168>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4632      	mov	r2, r6
 80072ca:	4649      	mov	r1, r9
 80072cc:	4640      	mov	r0, r8
 80072ce:	47d0      	blx	sl
 80072d0:	3001      	adds	r0, #1
 80072d2:	d09b      	beq.n	800720c <_printf_i+0x164>
 80072d4:	3501      	adds	r5, #1
 80072d6:	68e3      	ldr	r3, [r4, #12]
 80072d8:	9903      	ldr	r1, [sp, #12]
 80072da:	1a5b      	subs	r3, r3, r1
 80072dc:	42ab      	cmp	r3, r5
 80072de:	dcf2      	bgt.n	80072c6 <_printf_i+0x21e>
 80072e0:	e7eb      	b.n	80072ba <_printf_i+0x212>
 80072e2:	2500      	movs	r5, #0
 80072e4:	f104 0619 	add.w	r6, r4, #25
 80072e8:	e7f5      	b.n	80072d6 <_printf_i+0x22e>
 80072ea:	bf00      	nop
 80072ec:	08009229 	.word	0x08009229
 80072f0:	0800923a 	.word	0x0800923a

080072f4 <memcpy>:
 80072f4:	440a      	add	r2, r1
 80072f6:	4291      	cmp	r1, r2
 80072f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072fc:	d100      	bne.n	8007300 <memcpy+0xc>
 80072fe:	4770      	bx	lr
 8007300:	b510      	push	{r4, lr}
 8007302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800730a:	4291      	cmp	r1, r2
 800730c:	d1f9      	bne.n	8007302 <memcpy+0xe>
 800730e:	bd10      	pop	{r4, pc}

08007310 <memmove>:
 8007310:	4288      	cmp	r0, r1
 8007312:	b510      	push	{r4, lr}
 8007314:	eb01 0402 	add.w	r4, r1, r2
 8007318:	d902      	bls.n	8007320 <memmove+0x10>
 800731a:	4284      	cmp	r4, r0
 800731c:	4623      	mov	r3, r4
 800731e:	d807      	bhi.n	8007330 <memmove+0x20>
 8007320:	1e43      	subs	r3, r0, #1
 8007322:	42a1      	cmp	r1, r4
 8007324:	d008      	beq.n	8007338 <memmove+0x28>
 8007326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800732a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800732e:	e7f8      	b.n	8007322 <memmove+0x12>
 8007330:	4402      	add	r2, r0
 8007332:	4601      	mov	r1, r0
 8007334:	428a      	cmp	r2, r1
 8007336:	d100      	bne.n	800733a <memmove+0x2a>
 8007338:	bd10      	pop	{r4, pc}
 800733a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800733e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007342:	e7f7      	b.n	8007334 <memmove+0x24>

08007344 <_free_r>:
 8007344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007346:	2900      	cmp	r1, #0
 8007348:	d048      	beq.n	80073dc <_free_r+0x98>
 800734a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734e:	9001      	str	r0, [sp, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f1a1 0404 	sub.w	r4, r1, #4
 8007356:	bfb8      	it	lt
 8007358:	18e4      	addlt	r4, r4, r3
 800735a:	f000 f8d3 	bl	8007504 <__malloc_lock>
 800735e:	4a20      	ldr	r2, [pc, #128]	; (80073e0 <_free_r+0x9c>)
 8007360:	9801      	ldr	r0, [sp, #4]
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	4615      	mov	r5, r2
 8007366:	b933      	cbnz	r3, 8007376 <_free_r+0x32>
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	6014      	str	r4, [r2, #0]
 800736c:	b003      	add	sp, #12
 800736e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007372:	f000 b8cd 	b.w	8007510 <__malloc_unlock>
 8007376:	42a3      	cmp	r3, r4
 8007378:	d90b      	bls.n	8007392 <_free_r+0x4e>
 800737a:	6821      	ldr	r1, [r4, #0]
 800737c:	1862      	adds	r2, r4, r1
 800737e:	4293      	cmp	r3, r2
 8007380:	bf04      	itt	eq
 8007382:	681a      	ldreq	r2, [r3, #0]
 8007384:	685b      	ldreq	r3, [r3, #4]
 8007386:	6063      	str	r3, [r4, #4]
 8007388:	bf04      	itt	eq
 800738a:	1852      	addeq	r2, r2, r1
 800738c:	6022      	streq	r2, [r4, #0]
 800738e:	602c      	str	r4, [r5, #0]
 8007390:	e7ec      	b.n	800736c <_free_r+0x28>
 8007392:	461a      	mov	r2, r3
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	b10b      	cbz	r3, 800739c <_free_r+0x58>
 8007398:	42a3      	cmp	r3, r4
 800739a:	d9fa      	bls.n	8007392 <_free_r+0x4e>
 800739c:	6811      	ldr	r1, [r2, #0]
 800739e:	1855      	adds	r5, r2, r1
 80073a0:	42a5      	cmp	r5, r4
 80073a2:	d10b      	bne.n	80073bc <_free_r+0x78>
 80073a4:	6824      	ldr	r4, [r4, #0]
 80073a6:	4421      	add	r1, r4
 80073a8:	1854      	adds	r4, r2, r1
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	6011      	str	r1, [r2, #0]
 80073ae:	d1dd      	bne.n	800736c <_free_r+0x28>
 80073b0:	681c      	ldr	r4, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	6053      	str	r3, [r2, #4]
 80073b6:	4421      	add	r1, r4
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	e7d7      	b.n	800736c <_free_r+0x28>
 80073bc:	d902      	bls.n	80073c4 <_free_r+0x80>
 80073be:	230c      	movs	r3, #12
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	e7d3      	b.n	800736c <_free_r+0x28>
 80073c4:	6825      	ldr	r5, [r4, #0]
 80073c6:	1961      	adds	r1, r4, r5
 80073c8:	428b      	cmp	r3, r1
 80073ca:	bf04      	itt	eq
 80073cc:	6819      	ldreq	r1, [r3, #0]
 80073ce:	685b      	ldreq	r3, [r3, #4]
 80073d0:	6063      	str	r3, [r4, #4]
 80073d2:	bf04      	itt	eq
 80073d4:	1949      	addeq	r1, r1, r5
 80073d6:	6021      	streq	r1, [r4, #0]
 80073d8:	6054      	str	r4, [r2, #4]
 80073da:	e7c7      	b.n	800736c <_free_r+0x28>
 80073dc:	b003      	add	sp, #12
 80073de:	bd30      	pop	{r4, r5, pc}
 80073e0:	20000320 	.word	0x20000320

080073e4 <_malloc_r>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	1ccd      	adds	r5, r1, #3
 80073e8:	f025 0503 	bic.w	r5, r5, #3
 80073ec:	3508      	adds	r5, #8
 80073ee:	2d0c      	cmp	r5, #12
 80073f0:	bf38      	it	cc
 80073f2:	250c      	movcc	r5, #12
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	4606      	mov	r6, r0
 80073f8:	db01      	blt.n	80073fe <_malloc_r+0x1a>
 80073fa:	42a9      	cmp	r1, r5
 80073fc:	d903      	bls.n	8007406 <_malloc_r+0x22>
 80073fe:	230c      	movs	r3, #12
 8007400:	6033      	str	r3, [r6, #0]
 8007402:	2000      	movs	r0, #0
 8007404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007406:	f000 f87d 	bl	8007504 <__malloc_lock>
 800740a:	4921      	ldr	r1, [pc, #132]	; (8007490 <_malloc_r+0xac>)
 800740c:	680a      	ldr	r2, [r1, #0]
 800740e:	4614      	mov	r4, r2
 8007410:	b99c      	cbnz	r4, 800743a <_malloc_r+0x56>
 8007412:	4f20      	ldr	r7, [pc, #128]	; (8007494 <_malloc_r+0xb0>)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	b923      	cbnz	r3, 8007422 <_malloc_r+0x3e>
 8007418:	4621      	mov	r1, r4
 800741a:	4630      	mov	r0, r6
 800741c:	f000 f862 	bl	80074e4 <_sbrk_r>
 8007420:	6038      	str	r0, [r7, #0]
 8007422:	4629      	mov	r1, r5
 8007424:	4630      	mov	r0, r6
 8007426:	f000 f85d 	bl	80074e4 <_sbrk_r>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d123      	bne.n	8007476 <_malloc_r+0x92>
 800742e:	230c      	movs	r3, #12
 8007430:	6033      	str	r3, [r6, #0]
 8007432:	4630      	mov	r0, r6
 8007434:	f000 f86c 	bl	8007510 <__malloc_unlock>
 8007438:	e7e3      	b.n	8007402 <_malloc_r+0x1e>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	1b5b      	subs	r3, r3, r5
 800743e:	d417      	bmi.n	8007470 <_malloc_r+0x8c>
 8007440:	2b0b      	cmp	r3, #11
 8007442:	d903      	bls.n	800744c <_malloc_r+0x68>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	441c      	add	r4, r3
 8007448:	6025      	str	r5, [r4, #0]
 800744a:	e004      	b.n	8007456 <_malloc_r+0x72>
 800744c:	6863      	ldr	r3, [r4, #4]
 800744e:	42a2      	cmp	r2, r4
 8007450:	bf0c      	ite	eq
 8007452:	600b      	streq	r3, [r1, #0]
 8007454:	6053      	strne	r3, [r2, #4]
 8007456:	4630      	mov	r0, r6
 8007458:	f000 f85a 	bl	8007510 <__malloc_unlock>
 800745c:	f104 000b 	add.w	r0, r4, #11
 8007460:	1d23      	adds	r3, r4, #4
 8007462:	f020 0007 	bic.w	r0, r0, #7
 8007466:	1ac2      	subs	r2, r0, r3
 8007468:	d0cc      	beq.n	8007404 <_malloc_r+0x20>
 800746a:	1a1b      	subs	r3, r3, r0
 800746c:	50a3      	str	r3, [r4, r2]
 800746e:	e7c9      	b.n	8007404 <_malloc_r+0x20>
 8007470:	4622      	mov	r2, r4
 8007472:	6864      	ldr	r4, [r4, #4]
 8007474:	e7cc      	b.n	8007410 <_malloc_r+0x2c>
 8007476:	1cc4      	adds	r4, r0, #3
 8007478:	f024 0403 	bic.w	r4, r4, #3
 800747c:	42a0      	cmp	r0, r4
 800747e:	d0e3      	beq.n	8007448 <_malloc_r+0x64>
 8007480:	1a21      	subs	r1, r4, r0
 8007482:	4630      	mov	r0, r6
 8007484:	f000 f82e 	bl	80074e4 <_sbrk_r>
 8007488:	3001      	adds	r0, #1
 800748a:	d1dd      	bne.n	8007448 <_malloc_r+0x64>
 800748c:	e7cf      	b.n	800742e <_malloc_r+0x4a>
 800748e:	bf00      	nop
 8007490:	20000320 	.word	0x20000320
 8007494:	20000324 	.word	0x20000324

08007498 <_realloc_r>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	4607      	mov	r7, r0
 800749c:	4614      	mov	r4, r2
 800749e:	460e      	mov	r6, r1
 80074a0:	b921      	cbnz	r1, 80074ac <_realloc_r+0x14>
 80074a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80074a6:	4611      	mov	r1, r2
 80074a8:	f7ff bf9c 	b.w	80073e4 <_malloc_r>
 80074ac:	b922      	cbnz	r2, 80074b8 <_realloc_r+0x20>
 80074ae:	f7ff ff49 	bl	8007344 <_free_r>
 80074b2:	4625      	mov	r5, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b8:	f000 f830 	bl	800751c <_malloc_usable_size_r>
 80074bc:	42a0      	cmp	r0, r4
 80074be:	d20f      	bcs.n	80074e0 <_realloc_r+0x48>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4638      	mov	r0, r7
 80074c4:	f7ff ff8e 	bl	80073e4 <_malloc_r>
 80074c8:	4605      	mov	r5, r0
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d0f2      	beq.n	80074b4 <_realloc_r+0x1c>
 80074ce:	4631      	mov	r1, r6
 80074d0:	4622      	mov	r2, r4
 80074d2:	f7ff ff0f 	bl	80072f4 <memcpy>
 80074d6:	4631      	mov	r1, r6
 80074d8:	4638      	mov	r0, r7
 80074da:	f7ff ff33 	bl	8007344 <_free_r>
 80074de:	e7e9      	b.n	80074b4 <_realloc_r+0x1c>
 80074e0:	4635      	mov	r5, r6
 80074e2:	e7e7      	b.n	80074b4 <_realloc_r+0x1c>

080074e4 <_sbrk_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d06      	ldr	r5, [pc, #24]	; (8007500 <_sbrk_r+0x1c>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7fa ffb8 	bl	8002464 <_sbrk>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_sbrk_r+0x1a>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_sbrk_r+0x1a>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	20019488 	.word	0x20019488

08007504 <__malloc_lock>:
 8007504:	4801      	ldr	r0, [pc, #4]	; (800750c <__malloc_lock+0x8>)
 8007506:	f000 b811 	b.w	800752c <__retarget_lock_acquire_recursive>
 800750a:	bf00      	nop
 800750c:	20019490 	.word	0x20019490

08007510 <__malloc_unlock>:
 8007510:	4801      	ldr	r0, [pc, #4]	; (8007518 <__malloc_unlock+0x8>)
 8007512:	f000 b80c 	b.w	800752e <__retarget_lock_release_recursive>
 8007516:	bf00      	nop
 8007518:	20019490 	.word	0x20019490

0800751c <_malloc_usable_size_r>:
 800751c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007520:	1f18      	subs	r0, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfbc      	itt	lt
 8007526:	580b      	ldrlt	r3, [r1, r0]
 8007528:	18c0      	addlt	r0, r0, r3
 800752a:	4770      	bx	lr

0800752c <__retarget_lock_acquire_recursive>:
 800752c:	4770      	bx	lr

0800752e <__retarget_lock_release_recursive>:
 800752e:	4770      	bx	lr

08007530 <cosf>:
 8007530:	ee10 3a10 	vmov	r3, s0
 8007534:	b507      	push	{r0, r1, r2, lr}
 8007536:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <cosf+0x78>)
 8007538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800753c:	4293      	cmp	r3, r2
 800753e:	dc04      	bgt.n	800754a <cosf+0x1a>
 8007540:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80075ac <cosf+0x7c>
 8007544:	f001 f836 	bl	80085b4 <__kernel_cosf>
 8007548:	e004      	b.n	8007554 <cosf+0x24>
 800754a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800754e:	db04      	blt.n	800755a <cosf+0x2a>
 8007550:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007554:	b003      	add	sp, #12
 8007556:	f85d fb04 	ldr.w	pc, [sp], #4
 800755a:	4668      	mov	r0, sp
 800755c:	f000 feee 	bl	800833c <__ieee754_rem_pio2f>
 8007560:	f000 0003 	and.w	r0, r0, #3
 8007564:	2801      	cmp	r0, #1
 8007566:	d007      	beq.n	8007578 <cosf+0x48>
 8007568:	2802      	cmp	r0, #2
 800756a:	d00e      	beq.n	800758a <cosf+0x5a>
 800756c:	b9a0      	cbnz	r0, 8007598 <cosf+0x68>
 800756e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007572:	ed9d 0a00 	vldr	s0, [sp]
 8007576:	e7e5      	b.n	8007544 <cosf+0x14>
 8007578:	eddd 0a01 	vldr	s1, [sp, #4]
 800757c:	ed9d 0a00 	vldr	s0, [sp]
 8007580:	f001 fb02 	bl	8008b88 <__kernel_sinf>
 8007584:	eeb1 0a40 	vneg.f32	s0, s0
 8007588:	e7e4      	b.n	8007554 <cosf+0x24>
 800758a:	eddd 0a01 	vldr	s1, [sp, #4]
 800758e:	ed9d 0a00 	vldr	s0, [sp]
 8007592:	f001 f80f 	bl	80085b4 <__kernel_cosf>
 8007596:	e7f5      	b.n	8007584 <cosf+0x54>
 8007598:	eddd 0a01 	vldr	s1, [sp, #4]
 800759c:	ed9d 0a00 	vldr	s0, [sp]
 80075a0:	2001      	movs	r0, #1
 80075a2:	f001 faf1 	bl	8008b88 <__kernel_sinf>
 80075a6:	e7d5      	b.n	8007554 <cosf+0x24>
 80075a8:	3f490fd8 	.word	0x3f490fd8
 80075ac:	00000000 	.word	0x00000000

080075b0 <sinf>:
 80075b0:	ee10 3a10 	vmov	r3, s0
 80075b4:	b507      	push	{r0, r1, r2, lr}
 80075b6:	4a1d      	ldr	r2, [pc, #116]	; (800762c <sinf+0x7c>)
 80075b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	4293      	cmp	r3, r2
 80075be:	dc05      	bgt.n	80075cc <sinf+0x1c>
 80075c0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007630 <sinf+0x80>
 80075c4:	2000      	movs	r0, #0
 80075c6:	f001 fadf 	bl	8008b88 <__kernel_sinf>
 80075ca:	e004      	b.n	80075d6 <sinf+0x26>
 80075cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80075d0:	db04      	blt.n	80075dc <sinf+0x2c>
 80075d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80075d6:	b003      	add	sp, #12
 80075d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80075dc:	4668      	mov	r0, sp
 80075de:	f000 fead 	bl	800833c <__ieee754_rem_pio2f>
 80075e2:	f000 0003 	and.w	r0, r0, #3
 80075e6:	2801      	cmp	r0, #1
 80075e8:	d008      	beq.n	80075fc <sinf+0x4c>
 80075ea:	2802      	cmp	r0, #2
 80075ec:	d00d      	beq.n	800760a <sinf+0x5a>
 80075ee:	b9b0      	cbnz	r0, 800761e <sinf+0x6e>
 80075f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80075f4:	ed9d 0a00 	vldr	s0, [sp]
 80075f8:	2001      	movs	r0, #1
 80075fa:	e7e4      	b.n	80075c6 <sinf+0x16>
 80075fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8007600:	ed9d 0a00 	vldr	s0, [sp]
 8007604:	f000 ffd6 	bl	80085b4 <__kernel_cosf>
 8007608:	e7e5      	b.n	80075d6 <sinf+0x26>
 800760a:	eddd 0a01 	vldr	s1, [sp, #4]
 800760e:	ed9d 0a00 	vldr	s0, [sp]
 8007612:	2001      	movs	r0, #1
 8007614:	f001 fab8 	bl	8008b88 <__kernel_sinf>
 8007618:	eeb1 0a40 	vneg.f32	s0, s0
 800761c:	e7db      	b.n	80075d6 <sinf+0x26>
 800761e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007622:	ed9d 0a00 	vldr	s0, [sp]
 8007626:	f000 ffc5 	bl	80085b4 <__kernel_cosf>
 800762a:	e7f5      	b.n	8007618 <sinf+0x68>
 800762c:	3f490fd8 	.word	0x3f490fd8
 8007630:	00000000 	.word	0x00000000

08007634 <pow>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	ec59 8b10 	vmov	r8, r9, d0
 800763c:	ec57 6b11 	vmov	r6, r7, d1
 8007640:	f000 f8a6 	bl	8007790 <__ieee754_pow>
 8007644:	4b4e      	ldr	r3, [pc, #312]	; (8007780 <pow+0x14c>)
 8007646:	f993 3000 	ldrsb.w	r3, [r3]
 800764a:	3301      	adds	r3, #1
 800764c:	ec55 4b10 	vmov	r4, r5, d0
 8007650:	d015      	beq.n	800767e <pow+0x4a>
 8007652:	4632      	mov	r2, r6
 8007654:	463b      	mov	r3, r7
 8007656:	4630      	mov	r0, r6
 8007658:	4639      	mov	r1, r7
 800765a:	f7f9 fa87 	bl	8000b6c <__aeabi_dcmpun>
 800765e:	b970      	cbnz	r0, 800767e <pow+0x4a>
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	4640      	mov	r0, r8
 8007666:	4649      	mov	r1, r9
 8007668:	f7f9 fa80 	bl	8000b6c <__aeabi_dcmpun>
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	b148      	cbz	r0, 8007686 <pow+0x52>
 8007672:	4630      	mov	r0, r6
 8007674:	4639      	mov	r1, r7
 8007676:	f7f9 fa47 	bl	8000b08 <__aeabi_dcmpeq>
 800767a:	2800      	cmp	r0, #0
 800767c:	d17d      	bne.n	800777a <pow+0x146>
 800767e:	ec45 4b10 	vmov	d0, r4, r5
 8007682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007686:	4640      	mov	r0, r8
 8007688:	4649      	mov	r1, r9
 800768a:	f7f9 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800768e:	b1e0      	cbz	r0, 80076ca <pow+0x96>
 8007690:	2200      	movs	r2, #0
 8007692:	2300      	movs	r3, #0
 8007694:	4630      	mov	r0, r6
 8007696:	4639      	mov	r1, r7
 8007698:	f7f9 fa36 	bl	8000b08 <__aeabi_dcmpeq>
 800769c:	2800      	cmp	r0, #0
 800769e:	d16c      	bne.n	800777a <pow+0x146>
 80076a0:	ec47 6b10 	vmov	d0, r6, r7
 80076a4:	f001 fac1 	bl	8008c2a <finite>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d0e8      	beq.n	800767e <pow+0x4a>
 80076ac:	2200      	movs	r2, #0
 80076ae:	2300      	movs	r3, #0
 80076b0:	4630      	mov	r0, r6
 80076b2:	4639      	mov	r1, r7
 80076b4:	f7f9 fa32 	bl	8000b1c <__aeabi_dcmplt>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d0e0      	beq.n	800767e <pow+0x4a>
 80076bc:	f7ff fad8 	bl	8006c70 <__errno>
 80076c0:	2321      	movs	r3, #33	; 0x21
 80076c2:	6003      	str	r3, [r0, #0]
 80076c4:	2400      	movs	r4, #0
 80076c6:	4d2f      	ldr	r5, [pc, #188]	; (8007784 <pow+0x150>)
 80076c8:	e7d9      	b.n	800767e <pow+0x4a>
 80076ca:	ec45 4b10 	vmov	d0, r4, r5
 80076ce:	f001 faac 	bl	8008c2a <finite>
 80076d2:	bbb8      	cbnz	r0, 8007744 <pow+0x110>
 80076d4:	ec49 8b10 	vmov	d0, r8, r9
 80076d8:	f001 faa7 	bl	8008c2a <finite>
 80076dc:	b390      	cbz	r0, 8007744 <pow+0x110>
 80076de:	ec47 6b10 	vmov	d0, r6, r7
 80076e2:	f001 faa2 	bl	8008c2a <finite>
 80076e6:	b368      	cbz	r0, 8007744 <pow+0x110>
 80076e8:	4622      	mov	r2, r4
 80076ea:	462b      	mov	r3, r5
 80076ec:	4620      	mov	r0, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	f7f9 fa3c 	bl	8000b6c <__aeabi_dcmpun>
 80076f4:	b160      	cbz	r0, 8007710 <pow+0xdc>
 80076f6:	f7ff fabb 	bl	8006c70 <__errno>
 80076fa:	2321      	movs	r3, #33	; 0x21
 80076fc:	6003      	str	r3, [r0, #0]
 80076fe:	2200      	movs	r2, #0
 8007700:	2300      	movs	r3, #0
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	f7f9 f8c1 	bl	800088c <__aeabi_ddiv>
 800770a:	4604      	mov	r4, r0
 800770c:	460d      	mov	r5, r1
 800770e:	e7b6      	b.n	800767e <pow+0x4a>
 8007710:	f7ff faae 	bl	8006c70 <__errno>
 8007714:	2322      	movs	r3, #34	; 0x22
 8007716:	6003      	str	r3, [r0, #0]
 8007718:	2200      	movs	r2, #0
 800771a:	2300      	movs	r3, #0
 800771c:	4640      	mov	r0, r8
 800771e:	4649      	mov	r1, r9
 8007720:	f7f9 f9fc 	bl	8000b1c <__aeabi_dcmplt>
 8007724:	2400      	movs	r4, #0
 8007726:	b158      	cbz	r0, 8007740 <pow+0x10c>
 8007728:	ec47 6b10 	vmov	d0, r6, r7
 800772c:	f001 fa90 	bl	8008c50 <rint>
 8007730:	4632      	mov	r2, r6
 8007732:	ec51 0b10 	vmov	r0, r1, d0
 8007736:	463b      	mov	r3, r7
 8007738:	f7f9 f9e6 	bl	8000b08 <__aeabi_dcmpeq>
 800773c:	2800      	cmp	r0, #0
 800773e:	d0c2      	beq.n	80076c6 <pow+0x92>
 8007740:	4d11      	ldr	r5, [pc, #68]	; (8007788 <pow+0x154>)
 8007742:	e79c      	b.n	800767e <pow+0x4a>
 8007744:	2200      	movs	r2, #0
 8007746:	2300      	movs	r3, #0
 8007748:	4620      	mov	r0, r4
 800774a:	4629      	mov	r1, r5
 800774c:	f7f9 f9dc 	bl	8000b08 <__aeabi_dcmpeq>
 8007750:	2800      	cmp	r0, #0
 8007752:	d094      	beq.n	800767e <pow+0x4a>
 8007754:	ec49 8b10 	vmov	d0, r8, r9
 8007758:	f001 fa67 	bl	8008c2a <finite>
 800775c:	2800      	cmp	r0, #0
 800775e:	d08e      	beq.n	800767e <pow+0x4a>
 8007760:	ec47 6b10 	vmov	d0, r6, r7
 8007764:	f001 fa61 	bl	8008c2a <finite>
 8007768:	2800      	cmp	r0, #0
 800776a:	d088      	beq.n	800767e <pow+0x4a>
 800776c:	f7ff fa80 	bl	8006c70 <__errno>
 8007770:	2322      	movs	r3, #34	; 0x22
 8007772:	6003      	str	r3, [r0, #0]
 8007774:	2400      	movs	r4, #0
 8007776:	2500      	movs	r5, #0
 8007778:	e781      	b.n	800767e <pow+0x4a>
 800777a:	4d04      	ldr	r5, [pc, #16]	; (800778c <pow+0x158>)
 800777c:	2400      	movs	r4, #0
 800777e:	e77e      	b.n	800767e <pow+0x4a>
 8007780:	2000007c 	.word	0x2000007c
 8007784:	fff00000 	.word	0xfff00000
 8007788:	7ff00000 	.word	0x7ff00000
 800778c:	3ff00000 	.word	0x3ff00000

08007790 <__ieee754_pow>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	ed2d 8b06 	vpush	{d8-d10}
 8007798:	b08d      	sub	sp, #52	; 0x34
 800779a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800779e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80077a2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80077a6:	ea56 0100 	orrs.w	r1, r6, r0
 80077aa:	ec53 2b10 	vmov	r2, r3, d0
 80077ae:	f000 84d1 	beq.w	8008154 <__ieee754_pow+0x9c4>
 80077b2:	497f      	ldr	r1, [pc, #508]	; (80079b0 <__ieee754_pow+0x220>)
 80077b4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80077b8:	428c      	cmp	r4, r1
 80077ba:	ee10 8a10 	vmov	r8, s0
 80077be:	4699      	mov	r9, r3
 80077c0:	dc09      	bgt.n	80077d6 <__ieee754_pow+0x46>
 80077c2:	d103      	bne.n	80077cc <__ieee754_pow+0x3c>
 80077c4:	b97a      	cbnz	r2, 80077e6 <__ieee754_pow+0x56>
 80077c6:	42a6      	cmp	r6, r4
 80077c8:	dd02      	ble.n	80077d0 <__ieee754_pow+0x40>
 80077ca:	e00c      	b.n	80077e6 <__ieee754_pow+0x56>
 80077cc:	428e      	cmp	r6, r1
 80077ce:	dc02      	bgt.n	80077d6 <__ieee754_pow+0x46>
 80077d0:	428e      	cmp	r6, r1
 80077d2:	d110      	bne.n	80077f6 <__ieee754_pow+0x66>
 80077d4:	b178      	cbz	r0, 80077f6 <__ieee754_pow+0x66>
 80077d6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80077da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80077de:	ea54 0308 	orrs.w	r3, r4, r8
 80077e2:	f000 84b7 	beq.w	8008154 <__ieee754_pow+0x9c4>
 80077e6:	4873      	ldr	r0, [pc, #460]	; (80079b4 <__ieee754_pow+0x224>)
 80077e8:	b00d      	add	sp, #52	; 0x34
 80077ea:	ecbd 8b06 	vpop	{d8-d10}
 80077ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f2:	f001 ba25 	b.w	8008c40 <nan>
 80077f6:	f1b9 0f00 	cmp.w	r9, #0
 80077fa:	da36      	bge.n	800786a <__ieee754_pow+0xda>
 80077fc:	496e      	ldr	r1, [pc, #440]	; (80079b8 <__ieee754_pow+0x228>)
 80077fe:	428e      	cmp	r6, r1
 8007800:	dc51      	bgt.n	80078a6 <__ieee754_pow+0x116>
 8007802:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8007806:	428e      	cmp	r6, r1
 8007808:	f340 84af 	ble.w	800816a <__ieee754_pow+0x9da>
 800780c:	1531      	asrs	r1, r6, #20
 800780e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007812:	2914      	cmp	r1, #20
 8007814:	dd0f      	ble.n	8007836 <__ieee754_pow+0xa6>
 8007816:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800781a:	fa20 fc01 	lsr.w	ip, r0, r1
 800781e:	fa0c f101 	lsl.w	r1, ip, r1
 8007822:	4281      	cmp	r1, r0
 8007824:	f040 84a1 	bne.w	800816a <__ieee754_pow+0x9da>
 8007828:	f00c 0c01 	and.w	ip, ip, #1
 800782c:	f1cc 0102 	rsb	r1, ip, #2
 8007830:	9100      	str	r1, [sp, #0]
 8007832:	b180      	cbz	r0, 8007856 <__ieee754_pow+0xc6>
 8007834:	e059      	b.n	80078ea <__ieee754_pow+0x15a>
 8007836:	2800      	cmp	r0, #0
 8007838:	d155      	bne.n	80078e6 <__ieee754_pow+0x156>
 800783a:	f1c1 0114 	rsb	r1, r1, #20
 800783e:	fa46 fc01 	asr.w	ip, r6, r1
 8007842:	fa0c f101 	lsl.w	r1, ip, r1
 8007846:	42b1      	cmp	r1, r6
 8007848:	f040 848c 	bne.w	8008164 <__ieee754_pow+0x9d4>
 800784c:	f00c 0c01 	and.w	ip, ip, #1
 8007850:	f1cc 0102 	rsb	r1, ip, #2
 8007854:	9100      	str	r1, [sp, #0]
 8007856:	4959      	ldr	r1, [pc, #356]	; (80079bc <__ieee754_pow+0x22c>)
 8007858:	428e      	cmp	r6, r1
 800785a:	d12d      	bne.n	80078b8 <__ieee754_pow+0x128>
 800785c:	2f00      	cmp	r7, #0
 800785e:	da79      	bge.n	8007954 <__ieee754_pow+0x1c4>
 8007860:	4956      	ldr	r1, [pc, #344]	; (80079bc <__ieee754_pow+0x22c>)
 8007862:	2000      	movs	r0, #0
 8007864:	f7f9 f812 	bl	800088c <__aeabi_ddiv>
 8007868:	e016      	b.n	8007898 <__ieee754_pow+0x108>
 800786a:	2100      	movs	r1, #0
 800786c:	9100      	str	r1, [sp, #0]
 800786e:	2800      	cmp	r0, #0
 8007870:	d13b      	bne.n	80078ea <__ieee754_pow+0x15a>
 8007872:	494f      	ldr	r1, [pc, #316]	; (80079b0 <__ieee754_pow+0x220>)
 8007874:	428e      	cmp	r6, r1
 8007876:	d1ee      	bne.n	8007856 <__ieee754_pow+0xc6>
 8007878:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800787c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007880:	ea53 0308 	orrs.w	r3, r3, r8
 8007884:	f000 8466 	beq.w	8008154 <__ieee754_pow+0x9c4>
 8007888:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <__ieee754_pow+0x230>)
 800788a:	429c      	cmp	r4, r3
 800788c:	dd0d      	ble.n	80078aa <__ieee754_pow+0x11a>
 800788e:	2f00      	cmp	r7, #0
 8007890:	f280 8464 	bge.w	800815c <__ieee754_pow+0x9cc>
 8007894:	2000      	movs	r0, #0
 8007896:	2100      	movs	r1, #0
 8007898:	ec41 0b10 	vmov	d0, r0, r1
 800789c:	b00d      	add	sp, #52	; 0x34
 800789e:	ecbd 8b06 	vpop	{d8-d10}
 80078a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a6:	2102      	movs	r1, #2
 80078a8:	e7e0      	b.n	800786c <__ieee754_pow+0xdc>
 80078aa:	2f00      	cmp	r7, #0
 80078ac:	daf2      	bge.n	8007894 <__ieee754_pow+0x104>
 80078ae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80078b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80078b6:	e7ef      	b.n	8007898 <__ieee754_pow+0x108>
 80078b8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80078bc:	d104      	bne.n	80078c8 <__ieee754_pow+0x138>
 80078be:	4610      	mov	r0, r2
 80078c0:	4619      	mov	r1, r3
 80078c2:	f7f8 feb9 	bl	8000638 <__aeabi_dmul>
 80078c6:	e7e7      	b.n	8007898 <__ieee754_pow+0x108>
 80078c8:	493e      	ldr	r1, [pc, #248]	; (80079c4 <__ieee754_pow+0x234>)
 80078ca:	428f      	cmp	r7, r1
 80078cc:	d10d      	bne.n	80078ea <__ieee754_pow+0x15a>
 80078ce:	f1b9 0f00 	cmp.w	r9, #0
 80078d2:	db0a      	blt.n	80078ea <__ieee754_pow+0x15a>
 80078d4:	ec43 2b10 	vmov	d0, r2, r3
 80078d8:	b00d      	add	sp, #52	; 0x34
 80078da:	ecbd 8b06 	vpop	{d8-d10}
 80078de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e2:	f000 bc77 	b.w	80081d4 <__ieee754_sqrt>
 80078e6:	2100      	movs	r1, #0
 80078e8:	9100      	str	r1, [sp, #0]
 80078ea:	ec43 2b10 	vmov	d0, r2, r3
 80078ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078f2:	f001 f991 	bl	8008c18 <fabs>
 80078f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fa:	ec51 0b10 	vmov	r0, r1, d0
 80078fe:	f1b8 0f00 	cmp.w	r8, #0
 8007902:	d12a      	bne.n	800795a <__ieee754_pow+0x1ca>
 8007904:	b12c      	cbz	r4, 8007912 <__ieee754_pow+0x182>
 8007906:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80079bc <__ieee754_pow+0x22c>
 800790a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800790e:	45e6      	cmp	lr, ip
 8007910:	d123      	bne.n	800795a <__ieee754_pow+0x1ca>
 8007912:	2f00      	cmp	r7, #0
 8007914:	da05      	bge.n	8007922 <__ieee754_pow+0x192>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	2000      	movs	r0, #0
 800791c:	4927      	ldr	r1, [pc, #156]	; (80079bc <__ieee754_pow+0x22c>)
 800791e:	f7f8 ffb5 	bl	800088c <__aeabi_ddiv>
 8007922:	f1b9 0f00 	cmp.w	r9, #0
 8007926:	dab7      	bge.n	8007898 <__ieee754_pow+0x108>
 8007928:	9b00      	ldr	r3, [sp, #0]
 800792a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800792e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007932:	4323      	orrs	r3, r4
 8007934:	d108      	bne.n	8007948 <__ieee754_pow+0x1b8>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4610      	mov	r0, r2
 800793c:	4619      	mov	r1, r3
 800793e:	f7f8 fcc3 	bl	80002c8 <__aeabi_dsub>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	e78d      	b.n	8007864 <__ieee754_pow+0xd4>
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d1a4      	bne.n	8007898 <__ieee754_pow+0x108>
 800794e:	4602      	mov	r2, r0
 8007950:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007954:	4610      	mov	r0, r2
 8007956:	4619      	mov	r1, r3
 8007958:	e79e      	b.n	8007898 <__ieee754_pow+0x108>
 800795a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800795e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007962:	950a      	str	r5, [sp, #40]	; 0x28
 8007964:	9d00      	ldr	r5, [sp, #0]
 8007966:	46ac      	mov	ip, r5
 8007968:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800796a:	ea5c 0505 	orrs.w	r5, ip, r5
 800796e:	d0e4      	beq.n	800793a <__ieee754_pow+0x1aa>
 8007970:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <__ieee754_pow+0x238>)
 8007972:	429e      	cmp	r6, r3
 8007974:	f340 80fc 	ble.w	8007b70 <__ieee754_pow+0x3e0>
 8007978:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800797c:	429e      	cmp	r6, r3
 800797e:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <__ieee754_pow+0x230>)
 8007980:	dd07      	ble.n	8007992 <__ieee754_pow+0x202>
 8007982:	429c      	cmp	r4, r3
 8007984:	dc0a      	bgt.n	800799c <__ieee754_pow+0x20c>
 8007986:	2f00      	cmp	r7, #0
 8007988:	da84      	bge.n	8007894 <__ieee754_pow+0x104>
 800798a:	a307      	add	r3, pc, #28	; (adr r3, 80079a8 <__ieee754_pow+0x218>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	e795      	b.n	80078be <__ieee754_pow+0x12e>
 8007992:	429c      	cmp	r4, r3
 8007994:	dbf7      	blt.n	8007986 <__ieee754_pow+0x1f6>
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <__ieee754_pow+0x22c>)
 8007998:	429c      	cmp	r4, r3
 800799a:	dd17      	ble.n	80079cc <__ieee754_pow+0x23c>
 800799c:	2f00      	cmp	r7, #0
 800799e:	dcf4      	bgt.n	800798a <__ieee754_pow+0x1fa>
 80079a0:	e778      	b.n	8007894 <__ieee754_pow+0x104>
 80079a2:	bf00      	nop
 80079a4:	f3af 8000 	nop.w
 80079a8:	8800759c 	.word	0x8800759c
 80079ac:	7e37e43c 	.word	0x7e37e43c
 80079b0:	7ff00000 	.word	0x7ff00000
 80079b4:	0800921d 	.word	0x0800921d
 80079b8:	433fffff 	.word	0x433fffff
 80079bc:	3ff00000 	.word	0x3ff00000
 80079c0:	3fefffff 	.word	0x3fefffff
 80079c4:	3fe00000 	.word	0x3fe00000
 80079c8:	41e00000 	.word	0x41e00000
 80079cc:	4b64      	ldr	r3, [pc, #400]	; (8007b60 <__ieee754_pow+0x3d0>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	f7f8 fc7a 	bl	80002c8 <__aeabi_dsub>
 80079d4:	a356      	add	r3, pc, #344	; (adr r3, 8007b30 <__ieee754_pow+0x3a0>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	4604      	mov	r4, r0
 80079dc:	460d      	mov	r5, r1
 80079de:	f7f8 fe2b 	bl	8000638 <__aeabi_dmul>
 80079e2:	a355      	add	r3, pc, #340	; (adr r3, 8007b38 <__ieee754_pow+0x3a8>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	4606      	mov	r6, r0
 80079ea:	460f      	mov	r7, r1
 80079ec:	4620      	mov	r0, r4
 80079ee:	4629      	mov	r1, r5
 80079f0:	f7f8 fe22 	bl	8000638 <__aeabi_dmul>
 80079f4:	4b5b      	ldr	r3, [pc, #364]	; (8007b64 <__ieee754_pow+0x3d4>)
 80079f6:	4682      	mov	sl, r0
 80079f8:	468b      	mov	fp, r1
 80079fa:	2200      	movs	r2, #0
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fe1a 	bl	8000638 <__aeabi_dmul>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	a14d      	add	r1, pc, #308	; (adr r1, 8007b40 <__ieee754_pow+0x3b0>)
 8007a0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a0e:	f7f8 fc5b 	bl	80002c8 <__aeabi_dsub>
 8007a12:	4622      	mov	r2, r4
 8007a14:	462b      	mov	r3, r5
 8007a16:	f7f8 fe0f 	bl	8000638 <__aeabi_dmul>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	2000      	movs	r0, #0
 8007a20:	4951      	ldr	r1, [pc, #324]	; (8007b68 <__ieee754_pow+0x3d8>)
 8007a22:	f7f8 fc51 	bl	80002c8 <__aeabi_dsub>
 8007a26:	4622      	mov	r2, r4
 8007a28:	4680      	mov	r8, r0
 8007a2a:	4689      	mov	r9, r1
 8007a2c:	462b      	mov	r3, r5
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f8 fe01 	bl	8000638 <__aeabi_dmul>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f7f8 fdfb 	bl	8000638 <__aeabi_dmul>
 8007a42:	a341      	add	r3, pc, #260	; (adr r3, 8007b48 <__ieee754_pow+0x3b8>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fdf6 	bl	8000638 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4650      	mov	r0, sl
 8007a52:	4659      	mov	r1, fp
 8007a54:	f7f8 fc38 	bl	80002c8 <__aeabi_dsub>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 fc32 	bl	80002cc <__adddf3>
 8007a68:	2400      	movs	r4, #0
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	463b      	mov	r3, r7
 8007a6e:	4620      	mov	r0, r4
 8007a70:	460d      	mov	r5, r1
 8007a72:	f7f8 fc29 	bl	80002c8 <__aeabi_dsub>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	f7f8 fc23 	bl	80002c8 <__aeabi_dsub>
 8007a82:	9b00      	ldr	r3, [sp, #0]
 8007a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a86:	3b01      	subs	r3, #1
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	4682      	mov	sl, r0
 8007a8c:	468b      	mov	fp, r1
 8007a8e:	f040 81f1 	bne.w	8007e74 <__ieee754_pow+0x6e4>
 8007a92:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007b50 <__ieee754_pow+0x3c0>
 8007a96:	eeb0 8a47 	vmov.f32	s16, s14
 8007a9a:	eef0 8a67 	vmov.f32	s17, s15
 8007a9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007aa2:	2600      	movs	r6, #0
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aac:	f7f8 fc0c 	bl	80002c8 <__aeabi_dsub>
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	f7f8 fdc0 	bl	8000638 <__aeabi_dmul>
 8007ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007abc:	4680      	mov	r8, r0
 8007abe:	4689      	mov	r9, r1
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	4659      	mov	r1, fp
 8007ac4:	f7f8 fdb8 	bl	8000638 <__aeabi_dmul>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4640      	mov	r0, r8
 8007ace:	4649      	mov	r1, r9
 8007ad0:	f7f8 fbfc 	bl	80002cc <__adddf3>
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	4680      	mov	r8, r0
 8007ada:	4689      	mov	r9, r1
 8007adc:	4620      	mov	r0, r4
 8007ade:	4629      	mov	r1, r5
 8007ae0:	f7f8 fdaa 	bl	8000638 <__aeabi_dmul>
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	460d      	mov	r5, r1
 8007aea:	4602      	mov	r2, r0
 8007aec:	4649      	mov	r1, r9
 8007aee:	4640      	mov	r0, r8
 8007af0:	f7f8 fbec 	bl	80002cc <__adddf3>
 8007af4:	4b1d      	ldr	r3, [pc, #116]	; (8007b6c <__ieee754_pow+0x3dc>)
 8007af6:	4299      	cmp	r1, r3
 8007af8:	ec45 4b19 	vmov	d9, r4, r5
 8007afc:	4606      	mov	r6, r0
 8007afe:	460f      	mov	r7, r1
 8007b00:	468b      	mov	fp, r1
 8007b02:	f340 82fe 	ble.w	8008102 <__ieee754_pow+0x972>
 8007b06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007b0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007b0e:	4303      	orrs	r3, r0
 8007b10:	f000 81f0 	beq.w	8007ef4 <__ieee754_pow+0x764>
 8007b14:	a310      	add	r3, pc, #64	; (adr r3, 8007b58 <__ieee754_pow+0x3c8>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	ec51 0b18 	vmov	r0, r1, d8
 8007b1e:	f7f8 fd8b 	bl	8000638 <__aeabi_dmul>
 8007b22:	a30d      	add	r3, pc, #52	; (adr r3, 8007b58 <__ieee754_pow+0x3c8>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	e6cb      	b.n	80078c2 <__ieee754_pow+0x132>
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w
 8007b30:	60000000 	.word	0x60000000
 8007b34:	3ff71547 	.word	0x3ff71547
 8007b38:	f85ddf44 	.word	0xf85ddf44
 8007b3c:	3e54ae0b 	.word	0x3e54ae0b
 8007b40:	55555555 	.word	0x55555555
 8007b44:	3fd55555 	.word	0x3fd55555
 8007b48:	652b82fe 	.word	0x652b82fe
 8007b4c:	3ff71547 	.word	0x3ff71547
 8007b50:	00000000 	.word	0x00000000
 8007b54:	bff00000 	.word	0xbff00000
 8007b58:	8800759c 	.word	0x8800759c
 8007b5c:	7e37e43c 	.word	0x7e37e43c
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	3fd00000 	.word	0x3fd00000
 8007b68:	3fe00000 	.word	0x3fe00000
 8007b6c:	408fffff 	.word	0x408fffff
 8007b70:	4bd7      	ldr	r3, [pc, #860]	; (8007ed0 <__ieee754_pow+0x740>)
 8007b72:	ea03 0309 	and.w	r3, r3, r9
 8007b76:	2200      	movs	r2, #0
 8007b78:	b92b      	cbnz	r3, 8007b86 <__ieee754_pow+0x3f6>
 8007b7a:	4bd6      	ldr	r3, [pc, #856]	; (8007ed4 <__ieee754_pow+0x744>)
 8007b7c:	f7f8 fd5c 	bl	8000638 <__aeabi_dmul>
 8007b80:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007b84:	460c      	mov	r4, r1
 8007b86:	1523      	asrs	r3, r4, #20
 8007b88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b8c:	4413      	add	r3, r2
 8007b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b90:	4bd1      	ldr	r3, [pc, #836]	; (8007ed8 <__ieee754_pow+0x748>)
 8007b92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007b96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007b9a:	429c      	cmp	r4, r3
 8007b9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ba0:	dd08      	ble.n	8007bb4 <__ieee754_pow+0x424>
 8007ba2:	4bce      	ldr	r3, [pc, #824]	; (8007edc <__ieee754_pow+0x74c>)
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	f340 8163 	ble.w	8007e70 <__ieee754_pow+0x6e0>
 8007baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bac:	3301      	adds	r3, #1
 8007bae:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007bb4:	2400      	movs	r4, #0
 8007bb6:	00e3      	lsls	r3, r4, #3
 8007bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bba:	4bc9      	ldr	r3, [pc, #804]	; (8007ee0 <__ieee754_pow+0x750>)
 8007bbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bc0:	ed93 7b00 	vldr	d7, [r3]
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	ec53 2b17 	vmov	r2, r3, d7
 8007bca:	eeb0 8a47 	vmov.f32	s16, s14
 8007bce:	eef0 8a67 	vmov.f32	s17, s15
 8007bd2:	4682      	mov	sl, r0
 8007bd4:	f7f8 fb78 	bl	80002c8 <__aeabi_dsub>
 8007bd8:	4652      	mov	r2, sl
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460f      	mov	r7, r1
 8007bde:	462b      	mov	r3, r5
 8007be0:	ec51 0b18 	vmov	r0, r1, d8
 8007be4:	f7f8 fb72 	bl	80002cc <__adddf3>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	2000      	movs	r0, #0
 8007bee:	49bd      	ldr	r1, [pc, #756]	; (8007ee4 <__ieee754_pow+0x754>)
 8007bf0:	f7f8 fe4c 	bl	800088c <__aeabi_ddiv>
 8007bf4:	ec41 0b19 	vmov	d9, r0, r1
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	4639      	mov	r1, r7
 8007c00:	f7f8 fd1a 	bl	8000638 <__aeabi_dmul>
 8007c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007c18:	46ab      	mov	fp, r5
 8007c1a:	106d      	asrs	r5, r5, #1
 8007c1c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007c20:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007c24:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	4614      	mov	r4, r2
 8007c30:	461d      	mov	r5, r3
 8007c32:	f7f8 fd01 	bl	8000638 <__aeabi_dmul>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 fb43 	bl	80002c8 <__aeabi_dsub>
 8007c42:	ec53 2b18 	vmov	r2, r3, d8
 8007c46:	4606      	mov	r6, r0
 8007c48:	460f      	mov	r7, r1
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7f8 fb3b 	bl	80002c8 <__aeabi_dsub>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4650      	mov	r0, sl
 8007c58:	4659      	mov	r1, fp
 8007c5a:	f7f8 fb35 	bl	80002c8 <__aeabi_dsub>
 8007c5e:	4642      	mov	r2, r8
 8007c60:	464b      	mov	r3, r9
 8007c62:	f7f8 fce9 	bl	8000638 <__aeabi_dmul>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fb2b 	bl	80002c8 <__aeabi_dsub>
 8007c72:	ec53 2b19 	vmov	r2, r3, d9
 8007c76:	f7f8 fcdf 	bl	8000638 <__aeabi_dmul>
 8007c7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c7e:	ec41 0b18 	vmov	d8, r0, r1
 8007c82:	4610      	mov	r0, r2
 8007c84:	4619      	mov	r1, r3
 8007c86:	f7f8 fcd7 	bl	8000638 <__aeabi_dmul>
 8007c8a:	a37d      	add	r3, pc, #500	; (adr r3, 8007e80 <__ieee754_pow+0x6f0>)
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	4604      	mov	r4, r0
 8007c92:	460d      	mov	r5, r1
 8007c94:	f7f8 fcd0 	bl	8000638 <__aeabi_dmul>
 8007c98:	a37b      	add	r3, pc, #492	; (adr r3, 8007e88 <__ieee754_pow+0x6f8>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 fb15 	bl	80002cc <__adddf3>
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	f7f8 fcc7 	bl	8000638 <__aeabi_dmul>
 8007caa:	a379      	add	r3, pc, #484	; (adr r3, 8007e90 <__ieee754_pow+0x700>)
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f7f8 fb0c 	bl	80002cc <__adddf3>
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	f7f8 fcbe 	bl	8000638 <__aeabi_dmul>
 8007cbc:	a376      	add	r3, pc, #472	; (adr r3, 8007e98 <__ieee754_pow+0x708>)
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	f7f8 fb03 	bl	80002cc <__adddf3>
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	f7f8 fcb5 	bl	8000638 <__aeabi_dmul>
 8007cce:	a374      	add	r3, pc, #464	; (adr r3, 8007ea0 <__ieee754_pow+0x710>)
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f7f8 fafa 	bl	80002cc <__adddf3>
 8007cd8:	4622      	mov	r2, r4
 8007cda:	462b      	mov	r3, r5
 8007cdc:	f7f8 fcac 	bl	8000638 <__aeabi_dmul>
 8007ce0:	a371      	add	r3, pc, #452	; (adr r3, 8007ea8 <__ieee754_pow+0x718>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 faf1 	bl	80002cc <__adddf3>
 8007cea:	4622      	mov	r2, r4
 8007cec:	4606      	mov	r6, r0
 8007cee:	460f      	mov	r7, r1
 8007cf0:	462b      	mov	r3, r5
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f7f8 fc9f 	bl	8000638 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fc99 	bl	8000638 <__aeabi_dmul>
 8007d06:	4642      	mov	r2, r8
 8007d08:	4604      	mov	r4, r0
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d12:	f7f8 fadb 	bl	80002cc <__adddf3>
 8007d16:	ec53 2b18 	vmov	r2, r3, d8
 8007d1a:	f7f8 fc8d 	bl	8000638 <__aeabi_dmul>
 8007d1e:	4622      	mov	r2, r4
 8007d20:	462b      	mov	r3, r5
 8007d22:	f7f8 fad3 	bl	80002cc <__adddf3>
 8007d26:	4642      	mov	r2, r8
 8007d28:	4682      	mov	sl, r0
 8007d2a:	468b      	mov	fp, r1
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	f7f8 fc81 	bl	8000638 <__aeabi_dmul>
 8007d36:	4b6c      	ldr	r3, [pc, #432]	; (8007ee8 <__ieee754_pow+0x758>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	f7f8 fac5 	bl	80002cc <__adddf3>
 8007d42:	4652      	mov	r2, sl
 8007d44:	465b      	mov	r3, fp
 8007d46:	f7f8 fac1 	bl	80002cc <__adddf3>
 8007d4a:	9c04      	ldr	r4, [sp, #16]
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	4622      	mov	r2, r4
 8007d50:	460b      	mov	r3, r1
 8007d52:	4640      	mov	r0, r8
 8007d54:	4649      	mov	r1, r9
 8007d56:	f7f8 fc6f 	bl	8000638 <__aeabi_dmul>
 8007d5a:	4b63      	ldr	r3, [pc, #396]	; (8007ee8 <__ieee754_pow+0x758>)
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	4689      	mov	r9, r1
 8007d60:	2200      	movs	r2, #0
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7f8 faaf 	bl	80002c8 <__aeabi_dsub>
 8007d6a:	4632      	mov	r2, r6
 8007d6c:	463b      	mov	r3, r7
 8007d6e:	f7f8 faab 	bl	80002c8 <__aeabi_dsub>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4650      	mov	r0, sl
 8007d78:	4659      	mov	r1, fp
 8007d7a:	f7f8 faa5 	bl	80002c8 <__aeabi_dsub>
 8007d7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d82:	f7f8 fc59 	bl	8000638 <__aeabi_dmul>
 8007d86:	4622      	mov	r2, r4
 8007d88:	4606      	mov	r6, r0
 8007d8a:	460f      	mov	r7, r1
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	ec51 0b18 	vmov	r0, r1, d8
 8007d92:	f7f8 fc51 	bl	8000638 <__aeabi_dmul>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	f7f8 fa95 	bl	80002cc <__adddf3>
 8007da2:	4606      	mov	r6, r0
 8007da4:	460f      	mov	r7, r1
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	f7f8 fa8d 	bl	80002cc <__adddf3>
 8007db2:	9c04      	ldr	r4, [sp, #16]
 8007db4:	a33e      	add	r3, pc, #248	; (adr r3, 8007eb0 <__ieee754_pow+0x720>)
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	4620      	mov	r0, r4
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	f7f8 fc3b 	bl	8000638 <__aeabi_dmul>
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	ec41 0b18 	vmov	d8, r0, r1
 8007dc8:	464b      	mov	r3, r9
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f7f8 fa7b 	bl	80002c8 <__aeabi_dsub>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	4639      	mov	r1, r7
 8007dda:	f7f8 fa75 	bl	80002c8 <__aeabi_dsub>
 8007dde:	a336      	add	r3, pc, #216	; (adr r3, 8007eb8 <__ieee754_pow+0x728>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f7f8 fc28 	bl	8000638 <__aeabi_dmul>
 8007de8:	a335      	add	r3, pc, #212	; (adr r3, 8007ec0 <__ieee754_pow+0x730>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	4606      	mov	r6, r0
 8007df0:	460f      	mov	r7, r1
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 fc1f 	bl	8000638 <__aeabi_dmul>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	f7f8 fa63 	bl	80002cc <__adddf3>
 8007e06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e08:	4b38      	ldr	r3, [pc, #224]	; (8007eec <__ieee754_pow+0x75c>)
 8007e0a:	4413      	add	r3, r2
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fa5c 	bl	80002cc <__adddf3>
 8007e14:	4682      	mov	sl, r0
 8007e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e18:	468b      	mov	fp, r1
 8007e1a:	f7f8 fba3 	bl	8000564 <__aeabi_i2d>
 8007e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e20:	4b33      	ldr	r3, [pc, #204]	; (8007ef0 <__ieee754_pow+0x760>)
 8007e22:	4413      	add	r3, r2
 8007e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e28:	4606      	mov	r6, r0
 8007e2a:	460f      	mov	r7, r1
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	465b      	mov	r3, fp
 8007e30:	ec51 0b18 	vmov	r0, r1, d8
 8007e34:	f7f8 fa4a 	bl	80002cc <__adddf3>
 8007e38:	4642      	mov	r2, r8
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	f7f8 fa46 	bl	80002cc <__adddf3>
 8007e40:	4632      	mov	r2, r6
 8007e42:	463b      	mov	r3, r7
 8007e44:	f7f8 fa42 	bl	80002cc <__adddf3>
 8007e48:	9c04      	ldr	r4, [sp, #16]
 8007e4a:	4632      	mov	r2, r6
 8007e4c:	463b      	mov	r3, r7
 8007e4e:	4620      	mov	r0, r4
 8007e50:	460d      	mov	r5, r1
 8007e52:	f7f8 fa39 	bl	80002c8 <__aeabi_dsub>
 8007e56:	4642      	mov	r2, r8
 8007e58:	464b      	mov	r3, r9
 8007e5a:	f7f8 fa35 	bl	80002c8 <__aeabi_dsub>
 8007e5e:	ec53 2b18 	vmov	r2, r3, d8
 8007e62:	f7f8 fa31 	bl	80002c8 <__aeabi_dsub>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4650      	mov	r0, sl
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	e606      	b.n	8007a7e <__ieee754_pow+0x2ee>
 8007e70:	2401      	movs	r4, #1
 8007e72:	e6a0      	b.n	8007bb6 <__ieee754_pow+0x426>
 8007e74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007ec8 <__ieee754_pow+0x738>
 8007e78:	e60d      	b.n	8007a96 <__ieee754_pow+0x306>
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w
 8007e80:	4a454eef 	.word	0x4a454eef
 8007e84:	3fca7e28 	.word	0x3fca7e28
 8007e88:	93c9db65 	.word	0x93c9db65
 8007e8c:	3fcd864a 	.word	0x3fcd864a
 8007e90:	a91d4101 	.word	0xa91d4101
 8007e94:	3fd17460 	.word	0x3fd17460
 8007e98:	518f264d 	.word	0x518f264d
 8007e9c:	3fd55555 	.word	0x3fd55555
 8007ea0:	db6fabff 	.word	0xdb6fabff
 8007ea4:	3fdb6db6 	.word	0x3fdb6db6
 8007ea8:	33333303 	.word	0x33333303
 8007eac:	3fe33333 	.word	0x3fe33333
 8007eb0:	e0000000 	.word	0xe0000000
 8007eb4:	3feec709 	.word	0x3feec709
 8007eb8:	dc3a03fd 	.word	0xdc3a03fd
 8007ebc:	3feec709 	.word	0x3feec709
 8007ec0:	145b01f5 	.word	0x145b01f5
 8007ec4:	be3e2fe0 	.word	0xbe3e2fe0
 8007ec8:	00000000 	.word	0x00000000
 8007ecc:	3ff00000 	.word	0x3ff00000
 8007ed0:	7ff00000 	.word	0x7ff00000
 8007ed4:	43400000 	.word	0x43400000
 8007ed8:	0003988e 	.word	0x0003988e
 8007edc:	000bb679 	.word	0x000bb679
 8007ee0:	08009250 	.word	0x08009250
 8007ee4:	3ff00000 	.word	0x3ff00000
 8007ee8:	40080000 	.word	0x40080000
 8007eec:	08009270 	.word	0x08009270
 8007ef0:	08009260 	.word	0x08009260
 8007ef4:	a3b5      	add	r3, pc, #724	; (adr r3, 80081cc <__ieee754_pow+0xa3c>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	f7f8 f9e5 	bl	80002cc <__adddf3>
 8007f02:	4622      	mov	r2, r4
 8007f04:	ec41 0b1a 	vmov	d10, r0, r1
 8007f08:	462b      	mov	r3, r5
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	f7f8 f9db 	bl	80002c8 <__aeabi_dsub>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	ec51 0b1a 	vmov	r0, r1, d10
 8007f1a:	f7f8 fe1d 	bl	8000b58 <__aeabi_dcmpgt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f47f adf8 	bne.w	8007b14 <__ieee754_pow+0x384>
 8007f24:	4aa4      	ldr	r2, [pc, #656]	; (80081b8 <__ieee754_pow+0xa28>)
 8007f26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	f340 810b 	ble.w	8008146 <__ieee754_pow+0x9b6>
 8007f30:	151b      	asrs	r3, r3, #20
 8007f32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007f36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007f3a:	fa4a f303 	asr.w	r3, sl, r3
 8007f3e:	445b      	add	r3, fp
 8007f40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007f44:	4e9d      	ldr	r6, [pc, #628]	; (80081bc <__ieee754_pow+0xa2c>)
 8007f46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007f4a:	4116      	asrs	r6, r2
 8007f4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007f50:	2000      	movs	r0, #0
 8007f52:	ea23 0106 	bic.w	r1, r3, r6
 8007f56:	f1c2 0214 	rsb	r2, r2, #20
 8007f5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007f5e:	fa4a fa02 	asr.w	sl, sl, r2
 8007f62:	f1bb 0f00 	cmp.w	fp, #0
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	bfb8      	it	lt
 8007f70:	f1ca 0a00 	rsblt	sl, sl, #0
 8007f74:	f7f8 f9a8 	bl	80002c8 <__aeabi_dsub>
 8007f78:	ec41 0b19 	vmov	d9, r0, r1
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	464b      	mov	r3, r9
 8007f80:	ec51 0b19 	vmov	r0, r1, d9
 8007f84:	f7f8 f9a2 	bl	80002cc <__adddf3>
 8007f88:	2400      	movs	r4, #0
 8007f8a:	a379      	add	r3, pc, #484	; (adr r3, 8008170 <__ieee754_pow+0x9e0>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	4620      	mov	r0, r4
 8007f92:	460d      	mov	r5, r1
 8007f94:	f7f8 fb50 	bl	8000638 <__aeabi_dmul>
 8007f98:	ec53 2b19 	vmov	r2, r3, d9
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 f990 	bl	80002c8 <__aeabi_dsub>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4640      	mov	r0, r8
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 f98a 	bl	80002c8 <__aeabi_dsub>
 8007fb4:	a370      	add	r3, pc, #448	; (adr r3, 8008178 <__ieee754_pow+0x9e8>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 fb3d 	bl	8000638 <__aeabi_dmul>
 8007fbe:	a370      	add	r3, pc, #448	; (adr r3, 8008180 <__ieee754_pow+0x9f0>)
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	4689      	mov	r9, r1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 fb34 	bl	8000638 <__aeabi_dmul>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 f978 	bl	80002cc <__adddf3>
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 f970 	bl	80002cc <__adddf3>
 8007fec:	4632      	mov	r2, r6
 8007fee:	463b      	mov	r3, r7
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	4689      	mov	r9, r1
 8007ff4:	f7f8 f968 	bl	80002c8 <__aeabi_dsub>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4629      	mov	r1, r5
 8008000:	f7f8 f962 	bl	80002c8 <__aeabi_dsub>
 8008004:	4642      	mov	r2, r8
 8008006:	4606      	mov	r6, r0
 8008008:	460f      	mov	r7, r1
 800800a:	464b      	mov	r3, r9
 800800c:	4640      	mov	r0, r8
 800800e:	4649      	mov	r1, r9
 8008010:	f7f8 fb12 	bl	8000638 <__aeabi_dmul>
 8008014:	a35c      	add	r3, pc, #368	; (adr r3, 8008188 <__ieee754_pow+0x9f8>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	4604      	mov	r4, r0
 800801c:	460d      	mov	r5, r1
 800801e:	f7f8 fb0b 	bl	8000638 <__aeabi_dmul>
 8008022:	a35b      	add	r3, pc, #364	; (adr r3, 8008190 <__ieee754_pow+0xa00>)
 8008024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008028:	f7f8 f94e 	bl	80002c8 <__aeabi_dsub>
 800802c:	4622      	mov	r2, r4
 800802e:	462b      	mov	r3, r5
 8008030:	f7f8 fb02 	bl	8000638 <__aeabi_dmul>
 8008034:	a358      	add	r3, pc, #352	; (adr r3, 8008198 <__ieee754_pow+0xa08>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f7f8 f947 	bl	80002cc <__adddf3>
 800803e:	4622      	mov	r2, r4
 8008040:	462b      	mov	r3, r5
 8008042:	f7f8 faf9 	bl	8000638 <__aeabi_dmul>
 8008046:	a356      	add	r3, pc, #344	; (adr r3, 80081a0 <__ieee754_pow+0xa10>)
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f7f8 f93c 	bl	80002c8 <__aeabi_dsub>
 8008050:	4622      	mov	r2, r4
 8008052:	462b      	mov	r3, r5
 8008054:	f7f8 faf0 	bl	8000638 <__aeabi_dmul>
 8008058:	a353      	add	r3, pc, #332	; (adr r3, 80081a8 <__ieee754_pow+0xa18>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 f935 	bl	80002cc <__adddf3>
 8008062:	4622      	mov	r2, r4
 8008064:	462b      	mov	r3, r5
 8008066:	f7f8 fae7 	bl	8000638 <__aeabi_dmul>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 f929 	bl	80002c8 <__aeabi_dsub>
 8008076:	4604      	mov	r4, r0
 8008078:	460d      	mov	r5, r1
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4640      	mov	r0, r8
 8008080:	4649      	mov	r1, r9
 8008082:	f7f8 fad9 	bl	8000638 <__aeabi_dmul>
 8008086:	2200      	movs	r2, #0
 8008088:	ec41 0b19 	vmov	d9, r0, r1
 800808c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008090:	4620      	mov	r0, r4
 8008092:	4629      	mov	r1, r5
 8008094:	f7f8 f918 	bl	80002c8 <__aeabi_dsub>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	ec51 0b19 	vmov	r0, r1, d9
 80080a0:	f7f8 fbf4 	bl	800088c <__aeabi_ddiv>
 80080a4:	4632      	mov	r2, r6
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	463b      	mov	r3, r7
 80080ac:	4640      	mov	r0, r8
 80080ae:	4649      	mov	r1, r9
 80080b0:	f7f8 fac2 	bl	8000638 <__aeabi_dmul>
 80080b4:	4632      	mov	r2, r6
 80080b6:	463b      	mov	r3, r7
 80080b8:	f7f8 f908 	bl	80002cc <__adddf3>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4620      	mov	r0, r4
 80080c2:	4629      	mov	r1, r5
 80080c4:	f7f8 f900 	bl	80002c8 <__aeabi_dsub>
 80080c8:	4642      	mov	r2, r8
 80080ca:	464b      	mov	r3, r9
 80080cc:	f7f8 f8fc 	bl	80002c8 <__aeabi_dsub>
 80080d0:	460b      	mov	r3, r1
 80080d2:	4602      	mov	r2, r0
 80080d4:	493a      	ldr	r1, [pc, #232]	; (80081c0 <__ieee754_pow+0xa30>)
 80080d6:	2000      	movs	r0, #0
 80080d8:	f7f8 f8f6 	bl	80002c8 <__aeabi_dsub>
 80080dc:	e9cd 0100 	strd	r0, r1, [sp]
 80080e0:	9b01      	ldr	r3, [sp, #4]
 80080e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80080e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080ea:	da2f      	bge.n	800814c <__ieee754_pow+0x9bc>
 80080ec:	4650      	mov	r0, sl
 80080ee:	ed9d 0b00 	vldr	d0, [sp]
 80080f2:	f000 fe39 	bl	8008d68 <scalbn>
 80080f6:	ec51 0b10 	vmov	r0, r1, d0
 80080fa:	ec53 2b18 	vmov	r2, r3, d8
 80080fe:	f7ff bbe0 	b.w	80078c2 <__ieee754_pow+0x132>
 8008102:	4b30      	ldr	r3, [pc, #192]	; (80081c4 <__ieee754_pow+0xa34>)
 8008104:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008108:	429e      	cmp	r6, r3
 800810a:	f77f af0b 	ble.w	8007f24 <__ieee754_pow+0x794>
 800810e:	4b2e      	ldr	r3, [pc, #184]	; (80081c8 <__ieee754_pow+0xa38>)
 8008110:	440b      	add	r3, r1
 8008112:	4303      	orrs	r3, r0
 8008114:	d00b      	beq.n	800812e <__ieee754_pow+0x99e>
 8008116:	a326      	add	r3, pc, #152	; (adr r3, 80081b0 <__ieee754_pow+0xa20>)
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	ec51 0b18 	vmov	r0, r1, d8
 8008120:	f7f8 fa8a 	bl	8000638 <__aeabi_dmul>
 8008124:	a322      	add	r3, pc, #136	; (adr r3, 80081b0 <__ieee754_pow+0xa20>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7ff bbca 	b.w	80078c2 <__ieee754_pow+0x132>
 800812e:	4622      	mov	r2, r4
 8008130:	462b      	mov	r3, r5
 8008132:	f7f8 f8c9 	bl	80002c8 <__aeabi_dsub>
 8008136:	4642      	mov	r2, r8
 8008138:	464b      	mov	r3, r9
 800813a:	f7f8 fd03 	bl	8000b44 <__aeabi_dcmpge>
 800813e:	2800      	cmp	r0, #0
 8008140:	f43f aef0 	beq.w	8007f24 <__ieee754_pow+0x794>
 8008144:	e7e7      	b.n	8008116 <__ieee754_pow+0x986>
 8008146:	f04f 0a00 	mov.w	sl, #0
 800814a:	e717      	b.n	8007f7c <__ieee754_pow+0x7ec>
 800814c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008150:	4619      	mov	r1, r3
 8008152:	e7d2      	b.n	80080fa <__ieee754_pow+0x96a>
 8008154:	491a      	ldr	r1, [pc, #104]	; (80081c0 <__ieee754_pow+0xa30>)
 8008156:	2000      	movs	r0, #0
 8008158:	f7ff bb9e 	b.w	8007898 <__ieee754_pow+0x108>
 800815c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008160:	f7ff bb9a 	b.w	8007898 <__ieee754_pow+0x108>
 8008164:	9000      	str	r0, [sp, #0]
 8008166:	f7ff bb76 	b.w	8007856 <__ieee754_pow+0xc6>
 800816a:	2100      	movs	r1, #0
 800816c:	f7ff bb60 	b.w	8007830 <__ieee754_pow+0xa0>
 8008170:	00000000 	.word	0x00000000
 8008174:	3fe62e43 	.word	0x3fe62e43
 8008178:	fefa39ef 	.word	0xfefa39ef
 800817c:	3fe62e42 	.word	0x3fe62e42
 8008180:	0ca86c39 	.word	0x0ca86c39
 8008184:	be205c61 	.word	0xbe205c61
 8008188:	72bea4d0 	.word	0x72bea4d0
 800818c:	3e663769 	.word	0x3e663769
 8008190:	c5d26bf1 	.word	0xc5d26bf1
 8008194:	3ebbbd41 	.word	0x3ebbbd41
 8008198:	af25de2c 	.word	0xaf25de2c
 800819c:	3f11566a 	.word	0x3f11566a
 80081a0:	16bebd93 	.word	0x16bebd93
 80081a4:	3f66c16c 	.word	0x3f66c16c
 80081a8:	5555553e 	.word	0x5555553e
 80081ac:	3fc55555 	.word	0x3fc55555
 80081b0:	c2f8f359 	.word	0xc2f8f359
 80081b4:	01a56e1f 	.word	0x01a56e1f
 80081b8:	3fe00000 	.word	0x3fe00000
 80081bc:	000fffff 	.word	0x000fffff
 80081c0:	3ff00000 	.word	0x3ff00000
 80081c4:	4090cbff 	.word	0x4090cbff
 80081c8:	3f6f3400 	.word	0x3f6f3400
 80081cc:	652b82fe 	.word	0x652b82fe
 80081d0:	3c971547 	.word	0x3c971547

080081d4 <__ieee754_sqrt>:
 80081d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d8:	ec55 4b10 	vmov	r4, r5, d0
 80081dc:	4e56      	ldr	r6, [pc, #344]	; (8008338 <__ieee754_sqrt+0x164>)
 80081de:	43ae      	bics	r6, r5
 80081e0:	ee10 0a10 	vmov	r0, s0
 80081e4:	ee10 3a10 	vmov	r3, s0
 80081e8:	4629      	mov	r1, r5
 80081ea:	462a      	mov	r2, r5
 80081ec:	d110      	bne.n	8008210 <__ieee754_sqrt+0x3c>
 80081ee:	ee10 2a10 	vmov	r2, s0
 80081f2:	462b      	mov	r3, r5
 80081f4:	f7f8 fa20 	bl	8000638 <__aeabi_dmul>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4620      	mov	r0, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	f7f8 f864 	bl	80002cc <__adddf3>
 8008204:	4604      	mov	r4, r0
 8008206:	460d      	mov	r5, r1
 8008208:	ec45 4b10 	vmov	d0, r4, r5
 800820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008210:	2d00      	cmp	r5, #0
 8008212:	dc10      	bgt.n	8008236 <__ieee754_sqrt+0x62>
 8008214:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008218:	4330      	orrs	r0, r6
 800821a:	d0f5      	beq.n	8008208 <__ieee754_sqrt+0x34>
 800821c:	b15d      	cbz	r5, 8008236 <__ieee754_sqrt+0x62>
 800821e:	ee10 2a10 	vmov	r2, s0
 8008222:	462b      	mov	r3, r5
 8008224:	ee10 0a10 	vmov	r0, s0
 8008228:	f7f8 f84e 	bl	80002c8 <__aeabi_dsub>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	f7f8 fb2c 	bl	800088c <__aeabi_ddiv>
 8008234:	e7e6      	b.n	8008204 <__ieee754_sqrt+0x30>
 8008236:	1509      	asrs	r1, r1, #20
 8008238:	d076      	beq.n	8008328 <__ieee754_sqrt+0x154>
 800823a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800823e:	07ce      	lsls	r6, r1, #31
 8008240:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008244:	bf5e      	ittt	pl
 8008246:	0fda      	lsrpl	r2, r3, #31
 8008248:	005b      	lslpl	r3, r3, #1
 800824a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800824e:	0fda      	lsrs	r2, r3, #31
 8008250:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008254:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008258:	2000      	movs	r0, #0
 800825a:	106d      	asrs	r5, r5, #1
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	f04f 0e16 	mov.w	lr, #22
 8008262:	4684      	mov	ip, r0
 8008264:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008268:	eb0c 0401 	add.w	r4, ip, r1
 800826c:	4294      	cmp	r4, r2
 800826e:	bfde      	ittt	le
 8008270:	1b12      	suble	r2, r2, r4
 8008272:	eb04 0c01 	addle.w	ip, r4, r1
 8008276:	1840      	addle	r0, r0, r1
 8008278:	0052      	lsls	r2, r2, #1
 800827a:	f1be 0e01 	subs.w	lr, lr, #1
 800827e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008282:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008286:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800828a:	d1ed      	bne.n	8008268 <__ieee754_sqrt+0x94>
 800828c:	4671      	mov	r1, lr
 800828e:	2720      	movs	r7, #32
 8008290:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008294:	4562      	cmp	r2, ip
 8008296:	eb04 060e 	add.w	r6, r4, lr
 800829a:	dc02      	bgt.n	80082a2 <__ieee754_sqrt+0xce>
 800829c:	d113      	bne.n	80082c6 <__ieee754_sqrt+0xf2>
 800829e:	429e      	cmp	r6, r3
 80082a0:	d811      	bhi.n	80082c6 <__ieee754_sqrt+0xf2>
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	eb06 0e04 	add.w	lr, r6, r4
 80082a8:	da43      	bge.n	8008332 <__ieee754_sqrt+0x15e>
 80082aa:	f1be 0f00 	cmp.w	lr, #0
 80082ae:	db40      	blt.n	8008332 <__ieee754_sqrt+0x15e>
 80082b0:	f10c 0801 	add.w	r8, ip, #1
 80082b4:	eba2 020c 	sub.w	r2, r2, ip
 80082b8:	429e      	cmp	r6, r3
 80082ba:	bf88      	it	hi
 80082bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80082c0:	1b9b      	subs	r3, r3, r6
 80082c2:	4421      	add	r1, r4
 80082c4:	46c4      	mov	ip, r8
 80082c6:	0052      	lsls	r2, r2, #1
 80082c8:	3f01      	subs	r7, #1
 80082ca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80082ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80082d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082d6:	d1dd      	bne.n	8008294 <__ieee754_sqrt+0xc0>
 80082d8:	4313      	orrs	r3, r2
 80082da:	d006      	beq.n	80082ea <__ieee754_sqrt+0x116>
 80082dc:	1c4c      	adds	r4, r1, #1
 80082de:	bf13      	iteet	ne
 80082e0:	3101      	addne	r1, #1
 80082e2:	3001      	addeq	r0, #1
 80082e4:	4639      	moveq	r1, r7
 80082e6:	f021 0101 	bicne.w	r1, r1, #1
 80082ea:	1043      	asrs	r3, r0, #1
 80082ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80082f0:	0849      	lsrs	r1, r1, #1
 80082f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80082f6:	07c2      	lsls	r2, r0, #31
 80082f8:	bf48      	it	mi
 80082fa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80082fe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008302:	460c      	mov	r4, r1
 8008304:	463d      	mov	r5, r7
 8008306:	e77f      	b.n	8008208 <__ieee754_sqrt+0x34>
 8008308:	0ada      	lsrs	r2, r3, #11
 800830a:	3815      	subs	r0, #21
 800830c:	055b      	lsls	r3, r3, #21
 800830e:	2a00      	cmp	r2, #0
 8008310:	d0fa      	beq.n	8008308 <__ieee754_sqrt+0x134>
 8008312:	02d7      	lsls	r7, r2, #11
 8008314:	d50a      	bpl.n	800832c <__ieee754_sqrt+0x158>
 8008316:	f1c1 0420 	rsb	r4, r1, #32
 800831a:	fa23 f404 	lsr.w	r4, r3, r4
 800831e:	1e4d      	subs	r5, r1, #1
 8008320:	408b      	lsls	r3, r1
 8008322:	4322      	orrs	r2, r4
 8008324:	1b41      	subs	r1, r0, r5
 8008326:	e788      	b.n	800823a <__ieee754_sqrt+0x66>
 8008328:	4608      	mov	r0, r1
 800832a:	e7f0      	b.n	800830e <__ieee754_sqrt+0x13a>
 800832c:	0052      	lsls	r2, r2, #1
 800832e:	3101      	adds	r1, #1
 8008330:	e7ef      	b.n	8008312 <__ieee754_sqrt+0x13e>
 8008332:	46e0      	mov	r8, ip
 8008334:	e7be      	b.n	80082b4 <__ieee754_sqrt+0xe0>
 8008336:	bf00      	nop
 8008338:	7ff00000 	.word	0x7ff00000

0800833c <__ieee754_rem_pio2f>:
 800833c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800833e:	ee10 6a10 	vmov	r6, s0
 8008342:	4b8e      	ldr	r3, [pc, #568]	; (800857c <__ieee754_rem_pio2f+0x240>)
 8008344:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008348:	429d      	cmp	r5, r3
 800834a:	b087      	sub	sp, #28
 800834c:	eef0 7a40 	vmov.f32	s15, s0
 8008350:	4604      	mov	r4, r0
 8008352:	dc05      	bgt.n	8008360 <__ieee754_rem_pio2f+0x24>
 8008354:	2300      	movs	r3, #0
 8008356:	ed80 0a00 	vstr	s0, [r0]
 800835a:	6043      	str	r3, [r0, #4]
 800835c:	2000      	movs	r0, #0
 800835e:	e01a      	b.n	8008396 <__ieee754_rem_pio2f+0x5a>
 8008360:	4b87      	ldr	r3, [pc, #540]	; (8008580 <__ieee754_rem_pio2f+0x244>)
 8008362:	429d      	cmp	r5, r3
 8008364:	dc46      	bgt.n	80083f4 <__ieee754_rem_pio2f+0xb8>
 8008366:	2e00      	cmp	r6, #0
 8008368:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008584 <__ieee754_rem_pio2f+0x248>
 800836c:	4b86      	ldr	r3, [pc, #536]	; (8008588 <__ieee754_rem_pio2f+0x24c>)
 800836e:	f025 050f 	bic.w	r5, r5, #15
 8008372:	dd1f      	ble.n	80083b4 <__ieee754_rem_pio2f+0x78>
 8008374:	429d      	cmp	r5, r3
 8008376:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800837a:	d00e      	beq.n	800839a <__ieee754_rem_pio2f+0x5e>
 800837c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800858c <__ieee754_rem_pio2f+0x250>
 8008380:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008384:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008388:	ed80 0a00 	vstr	s0, [r0]
 800838c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008390:	2001      	movs	r0, #1
 8008392:	edc4 7a01 	vstr	s15, [r4, #4]
 8008396:	b007      	add	sp, #28
 8008398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008590 <__ieee754_rem_pio2f+0x254>
 800839e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008594 <__ieee754_rem_pio2f+0x258>
 80083a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80083a6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80083aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083ae:	edc0 6a00 	vstr	s13, [r0]
 80083b2:	e7eb      	b.n	800838c <__ieee754_rem_pio2f+0x50>
 80083b4:	429d      	cmp	r5, r3
 80083b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083ba:	d00e      	beq.n	80083da <__ieee754_rem_pio2f+0x9e>
 80083bc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800858c <__ieee754_rem_pio2f+0x250>
 80083c0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80083c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80083c8:	ed80 0a00 	vstr	s0, [r0]
 80083cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	edc4 7a01 	vstr	s15, [r4, #4]
 80083d8:	e7dd      	b.n	8008396 <__ieee754_rem_pio2f+0x5a>
 80083da:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008590 <__ieee754_rem_pio2f+0x254>
 80083de:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008594 <__ieee754_rem_pio2f+0x258>
 80083e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083e6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80083ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083ee:	edc0 6a00 	vstr	s13, [r0]
 80083f2:	e7eb      	b.n	80083cc <__ieee754_rem_pio2f+0x90>
 80083f4:	4b68      	ldr	r3, [pc, #416]	; (8008598 <__ieee754_rem_pio2f+0x25c>)
 80083f6:	429d      	cmp	r5, r3
 80083f8:	dc72      	bgt.n	80084e0 <__ieee754_rem_pio2f+0x1a4>
 80083fa:	f000 fd3b 	bl	8008e74 <fabsf>
 80083fe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800859c <__ieee754_rem_pio2f+0x260>
 8008402:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008406:	eee0 7a07 	vfma.f32	s15, s0, s14
 800840a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800840e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008412:	ee17 0a90 	vmov	r0, s15
 8008416:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008584 <__ieee754_rem_pio2f+0x248>
 800841a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800841e:	281f      	cmp	r0, #31
 8008420:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800858c <__ieee754_rem_pio2f+0x250>
 8008424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008428:	eeb1 6a47 	vneg.f32	s12, s14
 800842c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008430:	ee16 2a90 	vmov	r2, s13
 8008434:	dc1c      	bgt.n	8008470 <__ieee754_rem_pio2f+0x134>
 8008436:	495a      	ldr	r1, [pc, #360]	; (80085a0 <__ieee754_rem_pio2f+0x264>)
 8008438:	1e47      	subs	r7, r0, #1
 800843a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800843e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008442:	428b      	cmp	r3, r1
 8008444:	d014      	beq.n	8008470 <__ieee754_rem_pio2f+0x134>
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	ed94 7a00 	vldr	s14, [r4]
 800844c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008450:	2e00      	cmp	r6, #0
 8008452:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008456:	ed84 0a01 	vstr	s0, [r4, #4]
 800845a:	da9c      	bge.n	8008396 <__ieee754_rem_pio2f+0x5a>
 800845c:	eeb1 7a47 	vneg.f32	s14, s14
 8008460:	eeb1 0a40 	vneg.f32	s0, s0
 8008464:	ed84 7a00 	vstr	s14, [r4]
 8008468:	ed84 0a01 	vstr	s0, [r4, #4]
 800846c:	4240      	negs	r0, r0
 800846e:	e792      	b.n	8008396 <__ieee754_rem_pio2f+0x5a>
 8008470:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008474:	15eb      	asrs	r3, r5, #23
 8008476:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800847a:	2d08      	cmp	r5, #8
 800847c:	dde3      	ble.n	8008446 <__ieee754_rem_pio2f+0x10a>
 800847e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008590 <__ieee754_rem_pio2f+0x254>
 8008482:	eef0 6a40 	vmov.f32	s13, s0
 8008486:	eee6 6a27 	vfma.f32	s13, s12, s15
 800848a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800848e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008492:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008594 <__ieee754_rem_pio2f+0x258>
 8008496:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800849a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800849e:	eef0 7a40 	vmov.f32	s15, s0
 80084a2:	ee15 2a90 	vmov	r2, s11
 80084a6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80084aa:	1a5b      	subs	r3, r3, r1
 80084ac:	2b19      	cmp	r3, #25
 80084ae:	dc04      	bgt.n	80084ba <__ieee754_rem_pio2f+0x17e>
 80084b0:	edc4 5a00 	vstr	s11, [r4]
 80084b4:	eeb0 0a66 	vmov.f32	s0, s13
 80084b8:	e7c6      	b.n	8008448 <__ieee754_rem_pio2f+0x10c>
 80084ba:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80085a4 <__ieee754_rem_pio2f+0x268>
 80084be:	eeb0 0a66 	vmov.f32	s0, s13
 80084c2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80084c6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80084ca:	eddf 6a37 	vldr	s13, [pc, #220]	; 80085a8 <__ieee754_rem_pio2f+0x26c>
 80084ce:	eee6 7a25 	vfma.f32	s15, s12, s11
 80084d2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80084d6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80084da:	ed84 7a00 	vstr	s14, [r4]
 80084de:	e7b3      	b.n	8008448 <__ieee754_rem_pio2f+0x10c>
 80084e0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80084e4:	db06      	blt.n	80084f4 <__ieee754_rem_pio2f+0x1b8>
 80084e6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80084ea:	edc0 7a01 	vstr	s15, [r0, #4]
 80084ee:	edc0 7a00 	vstr	s15, [r0]
 80084f2:	e733      	b.n	800835c <__ieee754_rem_pio2f+0x20>
 80084f4:	15ea      	asrs	r2, r5, #23
 80084f6:	3a86      	subs	r2, #134	; 0x86
 80084f8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008504:	eddf 6a29 	vldr	s13, [pc, #164]	; 80085ac <__ieee754_rem_pio2f+0x270>
 8008508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800850c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008510:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008514:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008518:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800851c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008520:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008524:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008528:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800852c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008534:	edcd 7a05 	vstr	s15, [sp, #20]
 8008538:	d11e      	bne.n	8008578 <__ieee754_rem_pio2f+0x23c>
 800853a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	bf14      	ite	ne
 8008544:	2302      	movne	r3, #2
 8008546:	2301      	moveq	r3, #1
 8008548:	4919      	ldr	r1, [pc, #100]	; (80085b0 <__ieee754_rem_pio2f+0x274>)
 800854a:	9101      	str	r1, [sp, #4]
 800854c:	2102      	movs	r1, #2
 800854e:	9100      	str	r1, [sp, #0]
 8008550:	a803      	add	r0, sp, #12
 8008552:	4621      	mov	r1, r4
 8008554:	f000 f88e 	bl	8008674 <__kernel_rem_pio2f>
 8008558:	2e00      	cmp	r6, #0
 800855a:	f6bf af1c 	bge.w	8008396 <__ieee754_rem_pio2f+0x5a>
 800855e:	edd4 7a00 	vldr	s15, [r4]
 8008562:	eef1 7a67 	vneg.f32	s15, s15
 8008566:	edc4 7a00 	vstr	s15, [r4]
 800856a:	edd4 7a01 	vldr	s15, [r4, #4]
 800856e:	eef1 7a67 	vneg.f32	s15, s15
 8008572:	edc4 7a01 	vstr	s15, [r4, #4]
 8008576:	e779      	b.n	800846c <__ieee754_rem_pio2f+0x130>
 8008578:	2303      	movs	r3, #3
 800857a:	e7e5      	b.n	8008548 <__ieee754_rem_pio2f+0x20c>
 800857c:	3f490fd8 	.word	0x3f490fd8
 8008580:	4016cbe3 	.word	0x4016cbe3
 8008584:	3fc90f80 	.word	0x3fc90f80
 8008588:	3fc90fd0 	.word	0x3fc90fd0
 800858c:	37354443 	.word	0x37354443
 8008590:	37354400 	.word	0x37354400
 8008594:	2e85a308 	.word	0x2e85a308
 8008598:	43490f80 	.word	0x43490f80
 800859c:	3f22f984 	.word	0x3f22f984
 80085a0:	08009280 	.word	0x08009280
 80085a4:	2e85a300 	.word	0x2e85a300
 80085a8:	248d3132 	.word	0x248d3132
 80085ac:	43800000 	.word	0x43800000
 80085b0:	08009300 	.word	0x08009300

080085b4 <__kernel_cosf>:
 80085b4:	ee10 3a10 	vmov	r3, s0
 80085b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80085c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80085c4:	da05      	bge.n	80085d2 <__kernel_cosf+0x1e>
 80085c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80085ca:	ee17 2a90 	vmov	r2, s15
 80085ce:	2a00      	cmp	r2, #0
 80085d0:	d03d      	beq.n	800864e <__kernel_cosf+0x9a>
 80085d2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80085d6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008654 <__kernel_cosf+0xa0>
 80085da:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008658 <__kernel_cosf+0xa4>
 80085de:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800865c <__kernel_cosf+0xa8>
 80085e2:	4a1f      	ldr	r2, [pc, #124]	; (8008660 <__kernel_cosf+0xac>)
 80085e4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80085e8:	4293      	cmp	r3, r2
 80085ea:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008664 <__kernel_cosf+0xb0>
 80085ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 80085f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008668 <__kernel_cosf+0xb4>
 80085f6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80085fa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800866c <__kernel_cosf+0xb8>
 80085fe:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008602:	eeb0 7a66 	vmov.f32	s14, s13
 8008606:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800860a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800860e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008612:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008616:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800861a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800861e:	dc04      	bgt.n	800862a <__kernel_cosf+0x76>
 8008620:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008624:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008628:	4770      	bx	lr
 800862a:	4a11      	ldr	r2, [pc, #68]	; (8008670 <__kernel_cosf+0xbc>)
 800862c:	4293      	cmp	r3, r2
 800862e:	bfda      	itte	le
 8008630:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008634:	ee06 3a90 	vmovle	s13, r3
 8008638:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800863c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008640:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008644:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008648:	ee30 0a67 	vsub.f32	s0, s0, s15
 800864c:	4770      	bx	lr
 800864e:	eeb0 0a46 	vmov.f32	s0, s12
 8008652:	4770      	bx	lr
 8008654:	ad47d74e 	.word	0xad47d74e
 8008658:	310f74f6 	.word	0x310f74f6
 800865c:	3d2aaaab 	.word	0x3d2aaaab
 8008660:	3e999999 	.word	0x3e999999
 8008664:	b493f27c 	.word	0xb493f27c
 8008668:	37d00d01 	.word	0x37d00d01
 800866c:	bab60b61 	.word	0xbab60b61
 8008670:	3f480000 	.word	0x3f480000

08008674 <__kernel_rem_pio2f>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	ed2d 8b04 	vpush	{d8-d9}
 800867c:	b0d7      	sub	sp, #348	; 0x15c
 800867e:	4616      	mov	r6, r2
 8008680:	4698      	mov	r8, r3
 8008682:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008684:	4bbb      	ldr	r3, [pc, #748]	; (8008974 <__kernel_rem_pio2f+0x300>)
 8008686:	9001      	str	r0, [sp, #4]
 8008688:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800868c:	1d33      	adds	r3, r6, #4
 800868e:	460d      	mov	r5, r1
 8008690:	f108 39ff 	add.w	r9, r8, #4294967295
 8008694:	db29      	blt.n	80086ea <__kernel_rem_pio2f+0x76>
 8008696:	1ef1      	subs	r1, r6, #3
 8008698:	bf48      	it	mi
 800869a:	1d31      	addmi	r1, r6, #4
 800869c:	10c9      	asrs	r1, r1, #3
 800869e:	1c4c      	adds	r4, r1, #1
 80086a0:	00e3      	lsls	r3, r4, #3
 80086a2:	9302      	str	r3, [sp, #8]
 80086a4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80086a6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8008984 <__kernel_rem_pio2f+0x310>
 80086aa:	eba1 0009 	sub.w	r0, r1, r9
 80086ae:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80086b2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80086b6:	eb07 0c09 	add.w	ip, r7, r9
 80086ba:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80086be:	2300      	movs	r3, #0
 80086c0:	4563      	cmp	r3, ip
 80086c2:	dd14      	ble.n	80086ee <__kernel_rem_pio2f+0x7a>
 80086c4:	ab1a      	add	r3, sp, #104	; 0x68
 80086c6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80086ca:	46cc      	mov	ip, r9
 80086cc:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80086d0:	f1c8 0b01 	rsb	fp, r8, #1
 80086d4:	eb0b 020c 	add.w	r2, fp, ip
 80086d8:	4297      	cmp	r7, r2
 80086da:	db27      	blt.n	800872c <__kernel_rem_pio2f+0xb8>
 80086dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80086e0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008984 <__kernel_rem_pio2f+0x310>
 80086e4:	4618      	mov	r0, r3
 80086e6:	2200      	movs	r2, #0
 80086e8:	e016      	b.n	8008718 <__kernel_rem_pio2f+0xa4>
 80086ea:	2100      	movs	r1, #0
 80086ec:	e7d7      	b.n	800869e <__kernel_rem_pio2f+0x2a>
 80086ee:	42d8      	cmn	r0, r3
 80086f0:	bf5d      	ittte	pl
 80086f2:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80086f6:	ee07 2a90 	vmovpl	s15, r2
 80086fa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80086fe:	eef0 7a47 	vmovmi.f32	s15, s14
 8008702:	ecea 7a01 	vstmia	sl!, {s15}
 8008706:	3301      	adds	r3, #1
 8008708:	e7da      	b.n	80086c0 <__kernel_rem_pio2f+0x4c>
 800870a:	ecfe 6a01 	vldmia	lr!, {s13}
 800870e:	ed90 7a00 	vldr	s14, [r0]
 8008712:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008716:	3201      	adds	r2, #1
 8008718:	454a      	cmp	r2, r9
 800871a:	f1a0 0004 	sub.w	r0, r0, #4
 800871e:	ddf4      	ble.n	800870a <__kernel_rem_pio2f+0x96>
 8008720:	ecea 7a01 	vstmia	sl!, {s15}
 8008724:	3304      	adds	r3, #4
 8008726:	f10c 0c01 	add.w	ip, ip, #1
 800872a:	e7d3      	b.n	80086d4 <__kernel_rem_pio2f+0x60>
 800872c:	ab06      	add	r3, sp, #24
 800872e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8008736:	eddf 8a92 	vldr	s17, [pc, #584]	; 8008980 <__kernel_rem_pio2f+0x30c>
 800873a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800897c <__kernel_rem_pio2f+0x308>
 800873e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008742:	9303      	str	r3, [sp, #12]
 8008744:	46ba      	mov	sl, r7
 8008746:	ab56      	add	r3, sp, #344	; 0x158
 8008748:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800874c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008750:	ab06      	add	r3, sp, #24
 8008752:	4618      	mov	r0, r3
 8008754:	4652      	mov	r2, sl
 8008756:	2a00      	cmp	r2, #0
 8008758:	dc51      	bgt.n	80087fe <__kernel_rem_pio2f+0x18a>
 800875a:	4620      	mov	r0, r4
 800875c:	9305      	str	r3, [sp, #20]
 800875e:	f000 fbd3 	bl	8008f08 <scalbnf>
 8008762:	eeb0 8a40 	vmov.f32	s16, s0
 8008766:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800876a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800876e:	f000 fb89 	bl	8008e84 <floorf>
 8008772:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008776:	eea0 8a67 	vfms.f32	s16, s0, s15
 800877a:	2c00      	cmp	r4, #0
 800877c:	9b05      	ldr	r3, [sp, #20]
 800877e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008782:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008786:	edcd 7a00 	vstr	s15, [sp]
 800878a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800878e:	dd4b      	ble.n	8008828 <__kernel_rem_pio2f+0x1b4>
 8008790:	f10a 3cff 	add.w	ip, sl, #4294967295
 8008794:	aa06      	add	r2, sp, #24
 8008796:	f1c4 0e08 	rsb	lr, r4, #8
 800879a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800879e:	ee17 1a90 	vmov	r1, s15
 80087a2:	fa42 f00e 	asr.w	r0, r2, lr
 80087a6:	4401      	add	r1, r0
 80087a8:	9100      	str	r1, [sp, #0]
 80087aa:	fa00 f00e 	lsl.w	r0, r0, lr
 80087ae:	a906      	add	r1, sp, #24
 80087b0:	1a12      	subs	r2, r2, r0
 80087b2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80087b6:	f1c4 0007 	rsb	r0, r4, #7
 80087ba:	fa42 fb00 	asr.w	fp, r2, r0
 80087be:	f1bb 0f00 	cmp.w	fp, #0
 80087c2:	dd43      	ble.n	800884c <__kernel_rem_pio2f+0x1d8>
 80087c4:	9a00      	ldr	r2, [sp, #0]
 80087c6:	f04f 0e00 	mov.w	lr, #0
 80087ca:	3201      	adds	r2, #1
 80087cc:	9200      	str	r2, [sp, #0]
 80087ce:	4670      	mov	r0, lr
 80087d0:	45f2      	cmp	sl, lr
 80087d2:	dc6c      	bgt.n	80088ae <__kernel_rem_pio2f+0x23a>
 80087d4:	2c00      	cmp	r4, #0
 80087d6:	dd04      	ble.n	80087e2 <__kernel_rem_pio2f+0x16e>
 80087d8:	2c01      	cmp	r4, #1
 80087da:	d079      	beq.n	80088d0 <__kernel_rem_pio2f+0x25c>
 80087dc:	2c02      	cmp	r4, #2
 80087de:	f000 8082 	beq.w	80088e6 <__kernel_rem_pio2f+0x272>
 80087e2:	f1bb 0f02 	cmp.w	fp, #2
 80087e6:	d131      	bne.n	800884c <__kernel_rem_pio2f+0x1d8>
 80087e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80087ec:	ee30 8a48 	vsub.f32	s16, s0, s16
 80087f0:	b360      	cbz	r0, 800884c <__kernel_rem_pio2f+0x1d8>
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 fb88 	bl	8008f08 <scalbnf>
 80087f8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80087fc:	e026      	b.n	800884c <__kernel_rem_pio2f+0x1d8>
 80087fe:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008802:	3a01      	subs	r2, #1
 8008804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008808:	a942      	add	r1, sp, #264	; 0x108
 800880a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800880e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8008812:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008816:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800881a:	eca0 0a01 	vstmia	r0!, {s0}
 800881e:	ed9c 0a00 	vldr	s0, [ip]
 8008822:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008826:	e796      	b.n	8008756 <__kernel_rem_pio2f+0xe2>
 8008828:	d107      	bne.n	800883a <__kernel_rem_pio2f+0x1c6>
 800882a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800882e:	a906      	add	r1, sp, #24
 8008830:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008834:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8008838:	e7c1      	b.n	80087be <__kernel_rem_pio2f+0x14a>
 800883a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800883e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008846:	da2f      	bge.n	80088a8 <__kernel_rem_pio2f+0x234>
 8008848:	f04f 0b00 	mov.w	fp, #0
 800884c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008854:	f040 8098 	bne.w	8008988 <__kernel_rem_pio2f+0x314>
 8008858:	f10a 33ff 	add.w	r3, sl, #4294967295
 800885c:	469c      	mov	ip, r3
 800885e:	2200      	movs	r2, #0
 8008860:	45bc      	cmp	ip, r7
 8008862:	da48      	bge.n	80088f6 <__kernel_rem_pio2f+0x282>
 8008864:	2a00      	cmp	r2, #0
 8008866:	d05f      	beq.n	8008928 <__kernel_rem_pio2f+0x2b4>
 8008868:	aa06      	add	r2, sp, #24
 800886a:	3c08      	subs	r4, #8
 800886c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008870:	2900      	cmp	r1, #0
 8008872:	d07d      	beq.n	8008970 <__kernel_rem_pio2f+0x2fc>
 8008874:	4620      	mov	r0, r4
 8008876:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	f000 fb44 	bl	8008f08 <scalbnf>
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8008980 <__kernel_rem_pio2f+0x30c>
 8008886:	4619      	mov	r1, r3
 8008888:	2900      	cmp	r1, #0
 800888a:	f280 80af 	bge.w	80089ec <__kernel_rem_pio2f+0x378>
 800888e:	4618      	mov	r0, r3
 8008890:	2400      	movs	r4, #0
 8008892:	2800      	cmp	r0, #0
 8008894:	f2c0 80d0 	blt.w	8008a38 <__kernel_rem_pio2f+0x3c4>
 8008898:	a942      	add	r1, sp, #264	; 0x108
 800889a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800889e:	4a36      	ldr	r2, [pc, #216]	; (8008978 <__kernel_rem_pio2f+0x304>)
 80088a0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008984 <__kernel_rem_pio2f+0x310>
 80088a4:	2100      	movs	r1, #0
 80088a6:	e0bb      	b.n	8008a20 <__kernel_rem_pio2f+0x3ac>
 80088a8:	f04f 0b02 	mov.w	fp, #2
 80088ac:	e78a      	b.n	80087c4 <__kernel_rem_pio2f+0x150>
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	b948      	cbnz	r0, 80088c6 <__kernel_rem_pio2f+0x252>
 80088b2:	b11a      	cbz	r2, 80088bc <__kernel_rem_pio2f+0x248>
 80088b4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f10e 0e01 	add.w	lr, lr, #1
 80088c0:	3304      	adds	r3, #4
 80088c2:	4610      	mov	r0, r2
 80088c4:	e784      	b.n	80087d0 <__kernel_rem_pio2f+0x15c>
 80088c6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	4602      	mov	r2, r0
 80088ce:	e7f5      	b.n	80088bc <__kernel_rem_pio2f+0x248>
 80088d0:	f10a 3cff 	add.w	ip, sl, #4294967295
 80088d4:	ab06      	add	r3, sp, #24
 80088d6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80088da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088de:	aa06      	add	r2, sp, #24
 80088e0:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80088e4:	e77d      	b.n	80087e2 <__kernel_rem_pio2f+0x16e>
 80088e6:	f10a 3cff 	add.w	ip, sl, #4294967295
 80088ea:	ab06      	add	r3, sp, #24
 80088ec:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80088f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088f4:	e7f3      	b.n	80088de <__kernel_rem_pio2f+0x26a>
 80088f6:	a906      	add	r1, sp, #24
 80088f8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80088fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008900:	4302      	orrs	r2, r0
 8008902:	e7ad      	b.n	8008860 <__kernel_rem_pio2f+0x1ec>
 8008904:	3001      	adds	r0, #1
 8008906:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800890a:	2a00      	cmp	r2, #0
 800890c:	d0fa      	beq.n	8008904 <__kernel_rem_pio2f+0x290>
 800890e:	a91a      	add	r1, sp, #104	; 0x68
 8008910:	eb0a 0208 	add.w	r2, sl, r8
 8008914:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008918:	f10a 0301 	add.w	r3, sl, #1
 800891c:	eb0a 0100 	add.w	r1, sl, r0
 8008920:	4299      	cmp	r1, r3
 8008922:	da04      	bge.n	800892e <__kernel_rem_pio2f+0x2ba>
 8008924:	468a      	mov	sl, r1
 8008926:	e70e      	b.n	8008746 <__kernel_rem_pio2f+0xd2>
 8008928:	9b04      	ldr	r3, [sp, #16]
 800892a:	2001      	movs	r0, #1
 800892c:	e7eb      	b.n	8008906 <__kernel_rem_pio2f+0x292>
 800892e:	9803      	ldr	r0, [sp, #12]
 8008930:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008934:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008938:	9000      	str	r0, [sp, #0]
 800893a:	ee07 0a90 	vmov	s15, r0
 800893e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008942:	2000      	movs	r0, #0
 8008944:	ece2 7a01 	vstmia	r2!, {s15}
 8008948:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008984 <__kernel_rem_pio2f+0x310>
 800894c:	4696      	mov	lr, r2
 800894e:	4548      	cmp	r0, r9
 8008950:	dd06      	ble.n	8008960 <__kernel_rem_pio2f+0x2ec>
 8008952:	a842      	add	r0, sp, #264	; 0x108
 8008954:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008958:	edc0 7a00 	vstr	s15, [r0]
 800895c:	3301      	adds	r3, #1
 800895e:	e7df      	b.n	8008920 <__kernel_rem_pio2f+0x2ac>
 8008960:	ecfc 6a01 	vldmia	ip!, {s13}
 8008964:	ed3e 7a01 	vldmdb	lr!, {s14}
 8008968:	3001      	adds	r0, #1
 800896a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800896e:	e7ee      	b.n	800894e <__kernel_rem_pio2f+0x2da>
 8008970:	3b01      	subs	r3, #1
 8008972:	e779      	b.n	8008868 <__kernel_rem_pio2f+0x1f4>
 8008974:	08009644 	.word	0x08009644
 8008978:	08009618 	.word	0x08009618
 800897c:	43800000 	.word	0x43800000
 8008980:	3b800000 	.word	0x3b800000
 8008984:	00000000 	.word	0x00000000
 8008988:	9b02      	ldr	r3, [sp, #8]
 800898a:	eeb0 0a48 	vmov.f32	s0, s16
 800898e:	1b98      	subs	r0, r3, r6
 8008990:	f000 faba 	bl	8008f08 <scalbnf>
 8008994:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800897c <__kernel_rem_pio2f+0x308>
 8008998:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800899c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a0:	db1b      	blt.n	80089da <__kernel_rem_pio2f+0x366>
 80089a2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008980 <__kernel_rem_pio2f+0x30c>
 80089a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80089aa:	aa06      	add	r2, sp, #24
 80089ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089b0:	a906      	add	r1, sp, #24
 80089b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089b6:	3408      	adds	r4, #8
 80089b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80089bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80089c4:	ee10 3a10 	vmov	r3, s0
 80089c8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80089cc:	ee17 2a90 	vmov	r2, s15
 80089d0:	f10a 0301 	add.w	r3, sl, #1
 80089d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80089d8:	e74c      	b.n	8008874 <__kernel_rem_pio2f+0x200>
 80089da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80089de:	aa06      	add	r2, sp, #24
 80089e0:	ee10 3a10 	vmov	r3, s0
 80089e4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80089e8:	4653      	mov	r3, sl
 80089ea:	e743      	b.n	8008874 <__kernel_rem_pio2f+0x200>
 80089ec:	aa42      	add	r2, sp, #264	; 0x108
 80089ee:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80089f2:	aa06      	add	r2, sp, #24
 80089f4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80089f8:	9201      	str	r2, [sp, #4]
 80089fa:	ee07 2a90 	vmov	s15, r2
 80089fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a02:	3901      	subs	r1, #1
 8008a04:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008a08:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008a0c:	edc0 7a00 	vstr	s15, [r0]
 8008a10:	e73a      	b.n	8008888 <__kernel_rem_pio2f+0x214>
 8008a12:	ecf2 6a01 	vldmia	r2!, {s13}
 8008a16:	ecb6 7a01 	vldmia	r6!, {s14}
 8008a1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008a1e:	3101      	adds	r1, #1
 8008a20:	42b9      	cmp	r1, r7
 8008a22:	dc01      	bgt.n	8008a28 <__kernel_rem_pio2f+0x3b4>
 8008a24:	428c      	cmp	r4, r1
 8008a26:	daf4      	bge.n	8008a12 <__kernel_rem_pio2f+0x39e>
 8008a28:	aa56      	add	r2, sp, #344	; 0x158
 8008a2a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8008a2e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008a32:	3801      	subs	r0, #1
 8008a34:	3401      	adds	r4, #1
 8008a36:	e72c      	b.n	8008892 <__kernel_rem_pio2f+0x21e>
 8008a38:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008a3a:	2a02      	cmp	r2, #2
 8008a3c:	dc0a      	bgt.n	8008a54 <__kernel_rem_pio2f+0x3e0>
 8008a3e:	2a00      	cmp	r2, #0
 8008a40:	dc61      	bgt.n	8008b06 <__kernel_rem_pio2f+0x492>
 8008a42:	d03c      	beq.n	8008abe <__kernel_rem_pio2f+0x44a>
 8008a44:	9b00      	ldr	r3, [sp, #0]
 8008a46:	f003 0007 	and.w	r0, r3, #7
 8008a4a:	b057      	add	sp, #348	; 0x15c
 8008a4c:	ecbd 8b04 	vpop	{d8-d9}
 8008a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008a56:	2a03      	cmp	r2, #3
 8008a58:	d1f4      	bne.n	8008a44 <__kernel_rem_pio2f+0x3d0>
 8008a5a:	aa2e      	add	r2, sp, #184	; 0xb8
 8008a5c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008a60:	4608      	mov	r0, r1
 8008a62:	461c      	mov	r4, r3
 8008a64:	2c00      	cmp	r4, #0
 8008a66:	f1a0 0004 	sub.w	r0, r0, #4
 8008a6a:	dc59      	bgt.n	8008b20 <__kernel_rem_pio2f+0x4ac>
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	2801      	cmp	r0, #1
 8008a70:	f1a1 0104 	sub.w	r1, r1, #4
 8008a74:	dc64      	bgt.n	8008b40 <__kernel_rem_pio2f+0x4cc>
 8008a76:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8008984 <__kernel_rem_pio2f+0x310>
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	dc70      	bgt.n	8008b60 <__kernel_rem_pio2f+0x4ec>
 8008a7e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8008a82:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008a86:	f1bb 0f00 	cmp.w	fp, #0
 8008a8a:	d172      	bne.n	8008b72 <__kernel_rem_pio2f+0x4fe>
 8008a8c:	edc5 6a00 	vstr	s13, [r5]
 8008a90:	ed85 7a01 	vstr	s14, [r5, #4]
 8008a94:	edc5 7a02 	vstr	s15, [r5, #8]
 8008a98:	e7d4      	b.n	8008a44 <__kernel_rem_pio2f+0x3d0>
 8008a9a:	aa2e      	add	r2, sp, #184	; 0xb8
 8008a9c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008aa0:	ed91 7a00 	vldr	s14, [r1]
 8008aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	daf5      	bge.n	8008a9a <__kernel_rem_pio2f+0x426>
 8008aae:	f1bb 0f00 	cmp.w	fp, #0
 8008ab2:	d001      	beq.n	8008ab8 <__kernel_rem_pio2f+0x444>
 8008ab4:	eef1 7a67 	vneg.f32	s15, s15
 8008ab8:	edc5 7a00 	vstr	s15, [r5]
 8008abc:	e7c2      	b.n	8008a44 <__kernel_rem_pio2f+0x3d0>
 8008abe:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008984 <__kernel_rem_pio2f+0x310>
 8008ac2:	e7f2      	b.n	8008aaa <__kernel_rem_pio2f+0x436>
 8008ac4:	aa2e      	add	r2, sp, #184	; 0xb8
 8008ac6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8008aca:	edd0 7a00 	vldr	s15, [r0]
 8008ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ad2:	3901      	subs	r1, #1
 8008ad4:	2900      	cmp	r1, #0
 8008ad6:	daf5      	bge.n	8008ac4 <__kernel_rem_pio2f+0x450>
 8008ad8:	f1bb 0f00 	cmp.w	fp, #0
 8008adc:	d017      	beq.n	8008b0e <__kernel_rem_pio2f+0x49a>
 8008ade:	eef1 7a47 	vneg.f32	s15, s14
 8008ae2:	edc5 7a00 	vstr	s15, [r5]
 8008ae6:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008aee:	a82f      	add	r0, sp, #188	; 0xbc
 8008af0:	2101      	movs	r1, #1
 8008af2:	428b      	cmp	r3, r1
 8008af4:	da0e      	bge.n	8008b14 <__kernel_rem_pio2f+0x4a0>
 8008af6:	f1bb 0f00 	cmp.w	fp, #0
 8008afa:	d001      	beq.n	8008b00 <__kernel_rem_pio2f+0x48c>
 8008afc:	eef1 7a67 	vneg.f32	s15, s15
 8008b00:	edc5 7a01 	vstr	s15, [r5, #4]
 8008b04:	e79e      	b.n	8008a44 <__kernel_rem_pio2f+0x3d0>
 8008b06:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8008984 <__kernel_rem_pio2f+0x310>
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	e7e2      	b.n	8008ad4 <__kernel_rem_pio2f+0x460>
 8008b0e:	eef0 7a47 	vmov.f32	s15, s14
 8008b12:	e7e6      	b.n	8008ae2 <__kernel_rem_pio2f+0x46e>
 8008b14:	ecb0 7a01 	vldmia	r0!, {s14}
 8008b18:	3101      	adds	r1, #1
 8008b1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b1e:	e7e8      	b.n	8008af2 <__kernel_rem_pio2f+0x47e>
 8008b20:	edd0 7a00 	vldr	s15, [r0]
 8008b24:	edd0 6a01 	vldr	s13, [r0, #4]
 8008b28:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008b2c:	3c01      	subs	r4, #1
 8008b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b32:	ed80 7a00 	vstr	s14, [r0]
 8008b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3a:	edc0 7a01 	vstr	s15, [r0, #4]
 8008b3e:	e791      	b.n	8008a64 <__kernel_rem_pio2f+0x3f0>
 8008b40:	edd1 7a00 	vldr	s15, [r1]
 8008b44:	edd1 6a01 	vldr	s13, [r1, #4]
 8008b48:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008b4c:	3801      	subs	r0, #1
 8008b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b52:	ed81 7a00 	vstr	s14, [r1]
 8008b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5a:	edc1 7a01 	vstr	s15, [r1, #4]
 8008b5e:	e786      	b.n	8008a6e <__kernel_rem_pio2f+0x3fa>
 8008b60:	aa2e      	add	r2, sp, #184	; 0xb8
 8008b62:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008b66:	ed91 7a00 	vldr	s14, [r1]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b70:	e783      	b.n	8008a7a <__kernel_rem_pio2f+0x406>
 8008b72:	eef1 6a66 	vneg.f32	s13, s13
 8008b76:	eeb1 7a47 	vneg.f32	s14, s14
 8008b7a:	edc5 6a00 	vstr	s13, [r5]
 8008b7e:	ed85 7a01 	vstr	s14, [r5, #4]
 8008b82:	eef1 7a67 	vneg.f32	s15, s15
 8008b86:	e785      	b.n	8008a94 <__kernel_rem_pio2f+0x420>

08008b88 <__kernel_sinf>:
 8008b88:	ee10 3a10 	vmov	r3, s0
 8008b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b90:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008b94:	da04      	bge.n	8008ba0 <__kernel_sinf+0x18>
 8008b96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008b9a:	ee17 3a90 	vmov	r3, s15
 8008b9e:	b35b      	cbz	r3, 8008bf8 <__kernel_sinf+0x70>
 8008ba0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008ba4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008bfc <__kernel_sinf+0x74>
 8008ba8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008c00 <__kernel_sinf+0x78>
 8008bac:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008bb0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008c04 <__kernel_sinf+0x7c>
 8008bb4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008bb8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008c08 <__kernel_sinf+0x80>
 8008bbc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008bc0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008c0c <__kernel_sinf+0x84>
 8008bc4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008bc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008bcc:	b930      	cbnz	r0, 8008bdc <__kernel_sinf+0x54>
 8008bce:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008c10 <__kernel_sinf+0x88>
 8008bd2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008bd6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008bda:	4770      	bx	lr
 8008bdc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008be0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008be4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008be8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008bec:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008c14 <__kernel_sinf+0x8c>
 8008bf0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008bf4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	2f2ec9d3 	.word	0x2f2ec9d3
 8008c00:	b2d72f34 	.word	0xb2d72f34
 8008c04:	3638ef1b 	.word	0x3638ef1b
 8008c08:	b9500d01 	.word	0xb9500d01
 8008c0c:	3c088889 	.word	0x3c088889
 8008c10:	be2aaaab 	.word	0xbe2aaaab
 8008c14:	3e2aaaab 	.word	0x3e2aaaab

08008c18 <fabs>:
 8008c18:	ec51 0b10 	vmov	r0, r1, d0
 8008c1c:	ee10 2a10 	vmov	r2, s0
 8008c20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c24:	ec43 2b10 	vmov	d0, r2, r3
 8008c28:	4770      	bx	lr

08008c2a <finite>:
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	ed8d 0b00 	vstr	d0, [sp]
 8008c30:	9801      	ldr	r0, [sp, #4]
 8008c32:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008c36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008c3a:	0fc0      	lsrs	r0, r0, #31
 8008c3c:	b002      	add	sp, #8
 8008c3e:	4770      	bx	lr

08008c40 <nan>:
 8008c40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008c48 <nan+0x8>
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	7ff80000 	.word	0x7ff80000

08008c50 <rint>:
 8008c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c52:	ec51 0b10 	vmov	r0, r1, d0
 8008c56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c5a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008c5e:	2e13      	cmp	r6, #19
 8008c60:	ee10 4a10 	vmov	r4, s0
 8008c64:	460b      	mov	r3, r1
 8008c66:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008c6a:	dc58      	bgt.n	8008d1e <rint+0xce>
 8008c6c:	2e00      	cmp	r6, #0
 8008c6e:	da2b      	bge.n	8008cc8 <rint+0x78>
 8008c70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008c74:	4302      	orrs	r2, r0
 8008c76:	d023      	beq.n	8008cc0 <rint+0x70>
 8008c78:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008c7c:	4302      	orrs	r2, r0
 8008c7e:	4254      	negs	r4, r2
 8008c80:	4314      	orrs	r4, r2
 8008c82:	0c4b      	lsrs	r3, r1, #17
 8008c84:	0b24      	lsrs	r4, r4, #12
 8008c86:	045b      	lsls	r3, r3, #17
 8008c88:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008c8c:	ea44 0103 	orr.w	r1, r4, r3
 8008c90:	4b32      	ldr	r3, [pc, #200]	; (8008d5c <rint+0x10c>)
 8008c92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c96:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	f7f7 fb13 	bl	80002cc <__adddf3>
 8008ca6:	e9cd 0100 	strd	r0, r1, [sp]
 8008caa:	463b      	mov	r3, r7
 8008cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	f7f7 fb09 	bl	80002c8 <__aeabi_dsub>
 8008cb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008cba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	ec41 0b10 	vmov	d0, r0, r1
 8008cc4:	b003      	add	sp, #12
 8008cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cc8:	4a25      	ldr	r2, [pc, #148]	; (8008d60 <rint+0x110>)
 8008cca:	4132      	asrs	r2, r6
 8008ccc:	ea01 0702 	and.w	r7, r1, r2
 8008cd0:	4307      	orrs	r7, r0
 8008cd2:	d0f5      	beq.n	8008cc0 <rint+0x70>
 8008cd4:	0851      	lsrs	r1, r2, #1
 8008cd6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008cda:	4314      	orrs	r4, r2
 8008cdc:	d00c      	beq.n	8008cf8 <rint+0xa8>
 8008cde:	ea23 0201 	bic.w	r2, r3, r1
 8008ce2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ce6:	2e13      	cmp	r6, #19
 8008ce8:	fa43 f606 	asr.w	r6, r3, r6
 8008cec:	bf0c      	ite	eq
 8008cee:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008cf2:	2400      	movne	r4, #0
 8008cf4:	ea42 0306 	orr.w	r3, r2, r6
 8008cf8:	4918      	ldr	r1, [pc, #96]	; (8008d5c <rint+0x10c>)
 8008cfa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008cfe:	4622      	mov	r2, r4
 8008d00:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d04:	4620      	mov	r0, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	f7f7 fae0 	bl	80002cc <__adddf3>
 8008d0c:	e9cd 0100 	strd	r0, r1, [sp]
 8008d10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d14:	4622      	mov	r2, r4
 8008d16:	462b      	mov	r3, r5
 8008d18:	f7f7 fad6 	bl	80002c8 <__aeabi_dsub>
 8008d1c:	e7d0      	b.n	8008cc0 <rint+0x70>
 8008d1e:	2e33      	cmp	r6, #51	; 0x33
 8008d20:	dd07      	ble.n	8008d32 <rint+0xe2>
 8008d22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008d26:	d1cb      	bne.n	8008cc0 <rint+0x70>
 8008d28:	ee10 2a10 	vmov	r2, s0
 8008d2c:	f7f7 face 	bl	80002cc <__adddf3>
 8008d30:	e7c6      	b.n	8008cc0 <rint+0x70>
 8008d32:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008d36:	f04f 36ff 	mov.w	r6, #4294967295
 8008d3a:	40d6      	lsrs	r6, r2
 8008d3c:	4230      	tst	r0, r6
 8008d3e:	d0bf      	beq.n	8008cc0 <rint+0x70>
 8008d40:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8008d44:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008d48:	bf1f      	itttt	ne
 8008d4a:	ea24 0101 	bicne.w	r1, r4, r1
 8008d4e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008d52:	fa44 f202 	asrne.w	r2, r4, r2
 8008d56:	ea41 0402 	orrne.w	r4, r1, r2
 8008d5a:	e7cd      	b.n	8008cf8 <rint+0xa8>
 8008d5c:	08009650 	.word	0x08009650
 8008d60:	000fffff 	.word	0x000fffff
 8008d64:	00000000 	.word	0x00000000

08008d68 <scalbn>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	ec55 4b10 	vmov	r4, r5, d0
 8008d6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008d72:	4606      	mov	r6, r0
 8008d74:	462b      	mov	r3, r5
 8008d76:	b99a      	cbnz	r2, 8008da0 <scalbn+0x38>
 8008d78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008d7c:	4323      	orrs	r3, r4
 8008d7e:	d036      	beq.n	8008dee <scalbn+0x86>
 8008d80:	4b39      	ldr	r3, [pc, #228]	; (8008e68 <scalbn+0x100>)
 8008d82:	4629      	mov	r1, r5
 8008d84:	ee10 0a10 	vmov	r0, s0
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f7f7 fc55 	bl	8000638 <__aeabi_dmul>
 8008d8e:	4b37      	ldr	r3, [pc, #220]	; (8008e6c <scalbn+0x104>)
 8008d90:	429e      	cmp	r6, r3
 8008d92:	4604      	mov	r4, r0
 8008d94:	460d      	mov	r5, r1
 8008d96:	da10      	bge.n	8008dba <scalbn+0x52>
 8008d98:	a32b      	add	r3, pc, #172	; (adr r3, 8008e48 <scalbn+0xe0>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	e03a      	b.n	8008e16 <scalbn+0xae>
 8008da0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008da4:	428a      	cmp	r2, r1
 8008da6:	d10c      	bne.n	8008dc2 <scalbn+0x5a>
 8008da8:	ee10 2a10 	vmov	r2, s0
 8008dac:	4620      	mov	r0, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 fa8c 	bl	80002cc <__adddf3>
 8008db4:	4604      	mov	r4, r0
 8008db6:	460d      	mov	r5, r1
 8008db8:	e019      	b.n	8008dee <scalbn+0x86>
 8008dba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	3a36      	subs	r2, #54	; 0x36
 8008dc2:	4432      	add	r2, r6
 8008dc4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008dc8:	428a      	cmp	r2, r1
 8008dca:	dd08      	ble.n	8008dde <scalbn+0x76>
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	a120      	add	r1, pc, #128	; (adr r1, 8008e50 <scalbn+0xe8>)
 8008dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd4:	da1c      	bge.n	8008e10 <scalbn+0xa8>
 8008dd6:	a120      	add	r1, pc, #128	; (adr r1, 8008e58 <scalbn+0xf0>)
 8008dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ddc:	e018      	b.n	8008e10 <scalbn+0xa8>
 8008dde:	2a00      	cmp	r2, #0
 8008de0:	dd08      	ble.n	8008df4 <scalbn+0x8c>
 8008de2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008de6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008dee:	ec45 4b10 	vmov	d0, r4, r5
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008df8:	da19      	bge.n	8008e2e <scalbn+0xc6>
 8008dfa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008dfe:	429e      	cmp	r6, r3
 8008e00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008e04:	dd0a      	ble.n	8008e1c <scalbn+0xb4>
 8008e06:	a112      	add	r1, pc, #72	; (adr r1, 8008e50 <scalbn+0xe8>)
 8008e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e2      	bne.n	8008dd6 <scalbn+0x6e>
 8008e10:	a30f      	add	r3, pc, #60	; (adr r3, 8008e50 <scalbn+0xe8>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fc0f 	bl	8000638 <__aeabi_dmul>
 8008e1a:	e7cb      	b.n	8008db4 <scalbn+0x4c>
 8008e1c:	a10a      	add	r1, pc, #40	; (adr r1, 8008e48 <scalbn+0xe0>)
 8008e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0b8      	beq.n	8008d98 <scalbn+0x30>
 8008e26:	a10e      	add	r1, pc, #56	; (adr r1, 8008e60 <scalbn+0xf8>)
 8008e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e2c:	e7b4      	b.n	8008d98 <scalbn+0x30>
 8008e2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e32:	3236      	adds	r2, #54	; 0x36
 8008e34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <scalbn+0x108>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	e7e8      	b.n	8008e16 <scalbn+0xae>
 8008e44:	f3af 8000 	nop.w
 8008e48:	c2f8f359 	.word	0xc2f8f359
 8008e4c:	01a56e1f 	.word	0x01a56e1f
 8008e50:	8800759c 	.word	0x8800759c
 8008e54:	7e37e43c 	.word	0x7e37e43c
 8008e58:	8800759c 	.word	0x8800759c
 8008e5c:	fe37e43c 	.word	0xfe37e43c
 8008e60:	c2f8f359 	.word	0xc2f8f359
 8008e64:	81a56e1f 	.word	0x81a56e1f
 8008e68:	43500000 	.word	0x43500000
 8008e6c:	ffff3cb0 	.word	0xffff3cb0
 8008e70:	3c900000 	.word	0x3c900000

08008e74 <fabsf>:
 8008e74:	ee10 3a10 	vmov	r3, s0
 8008e78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e7c:	ee00 3a10 	vmov	s0, r3
 8008e80:	4770      	bx	lr
	...

08008e84 <floorf>:
 8008e84:	ee10 3a10 	vmov	r3, s0
 8008e88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008e8c:	3a7f      	subs	r2, #127	; 0x7f
 8008e8e:	2a16      	cmp	r2, #22
 8008e90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008e94:	dc2a      	bgt.n	8008eec <floorf+0x68>
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	da11      	bge.n	8008ebe <floorf+0x3a>
 8008e9a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008efc <floorf+0x78>
 8008e9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ea2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eaa:	dd05      	ble.n	8008eb8 <floorf+0x34>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	da23      	bge.n	8008ef8 <floorf+0x74>
 8008eb0:	4a13      	ldr	r2, [pc, #76]	; (8008f00 <floorf+0x7c>)
 8008eb2:	2900      	cmp	r1, #0
 8008eb4:	bf18      	it	ne
 8008eb6:	4613      	movne	r3, r2
 8008eb8:	ee00 3a10 	vmov	s0, r3
 8008ebc:	4770      	bx	lr
 8008ebe:	4911      	ldr	r1, [pc, #68]	; (8008f04 <floorf+0x80>)
 8008ec0:	4111      	asrs	r1, r2
 8008ec2:	420b      	tst	r3, r1
 8008ec4:	d0fa      	beq.n	8008ebc <floorf+0x38>
 8008ec6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008efc <floorf+0x78>
 8008eca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ece:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed6:	ddef      	ble.n	8008eb8 <floorf+0x34>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bfbe      	ittt	lt
 8008edc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008ee0:	fa40 f202 	asrlt.w	r2, r0, r2
 8008ee4:	189b      	addlt	r3, r3, r2
 8008ee6:	ea23 0301 	bic.w	r3, r3, r1
 8008eea:	e7e5      	b.n	8008eb8 <floorf+0x34>
 8008eec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008ef0:	d3e4      	bcc.n	8008ebc <floorf+0x38>
 8008ef2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008ef6:	4770      	bx	lr
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e7dd      	b.n	8008eb8 <floorf+0x34>
 8008efc:	7149f2ca 	.word	0x7149f2ca
 8008f00:	bf800000 	.word	0xbf800000
 8008f04:	007fffff 	.word	0x007fffff

08008f08 <scalbnf>:
 8008f08:	ee10 3a10 	vmov	r3, s0
 8008f0c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008f10:	d025      	beq.n	8008f5e <scalbnf+0x56>
 8008f12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008f16:	d302      	bcc.n	8008f1e <scalbnf+0x16>
 8008f18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008f1c:	4770      	bx	lr
 8008f1e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008f22:	d122      	bne.n	8008f6a <scalbnf+0x62>
 8008f24:	4b2a      	ldr	r3, [pc, #168]	; (8008fd0 <scalbnf+0xc8>)
 8008f26:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008fd4 <scalbnf+0xcc>
 8008f2a:	4298      	cmp	r0, r3
 8008f2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f30:	db16      	blt.n	8008f60 <scalbnf+0x58>
 8008f32:	ee10 3a10 	vmov	r3, s0
 8008f36:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008f3a:	3a19      	subs	r2, #25
 8008f3c:	4402      	add	r2, r0
 8008f3e:	2afe      	cmp	r2, #254	; 0xfe
 8008f40:	dd15      	ble.n	8008f6e <scalbnf+0x66>
 8008f42:	ee10 3a10 	vmov	r3, s0
 8008f46:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008fd8 <scalbnf+0xd0>
 8008f4a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008fdc <scalbnf+0xd4>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	eeb0 7a67 	vmov.f32	s14, s15
 8008f54:	bfb8      	it	lt
 8008f56:	eef0 7a66 	vmovlt.f32	s15, s13
 8008f5a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008f5e:	4770      	bx	lr
 8008f60:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008fe0 <scalbnf+0xd8>
 8008f64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f68:	4770      	bx	lr
 8008f6a:	0dd2      	lsrs	r2, r2, #23
 8008f6c:	e7e6      	b.n	8008f3c <scalbnf+0x34>
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	dd06      	ble.n	8008f80 <scalbnf+0x78>
 8008f72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f76:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008f7a:	ee00 3a10 	vmov	s0, r3
 8008f7e:	4770      	bx	lr
 8008f80:	f112 0f16 	cmn.w	r2, #22
 8008f84:	da1a      	bge.n	8008fbc <scalbnf+0xb4>
 8008f86:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f8a:	4298      	cmp	r0, r3
 8008f8c:	ee10 3a10 	vmov	r3, s0
 8008f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f94:	dd0a      	ble.n	8008fac <scalbnf+0xa4>
 8008f96:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008fd8 <scalbnf+0xd0>
 8008f9a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008fdc <scalbnf+0xd4>
 8008f9e:	eef0 7a40 	vmov.f32	s15, s0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bf18      	it	ne
 8008fa6:	eeb0 0a47 	vmovne.f32	s0, s14
 8008faa:	e7db      	b.n	8008f64 <scalbnf+0x5c>
 8008fac:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008fe0 <scalbnf+0xd8>
 8008fb0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008fe4 <scalbnf+0xdc>
 8008fb4:	eef0 7a40 	vmov.f32	s15, s0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	e7f3      	b.n	8008fa4 <scalbnf+0x9c>
 8008fbc:	3219      	adds	r2, #25
 8008fbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fc2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008fc6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008fe8 <scalbnf+0xe0>
 8008fca:	ee07 3a10 	vmov	s14, r3
 8008fce:	e7c4      	b.n	8008f5a <scalbnf+0x52>
 8008fd0:	ffff3cb0 	.word	0xffff3cb0
 8008fd4:	4c000000 	.word	0x4c000000
 8008fd8:	7149f2ca 	.word	0x7149f2ca
 8008fdc:	f149f2ca 	.word	0xf149f2ca
 8008fe0:	0da24260 	.word	0x0da24260
 8008fe4:	8da24260 	.word	0x8da24260
 8008fe8:	33000000 	.word	0x33000000

08008fec <_init>:
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	bf00      	nop
 8008ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff2:	bc08      	pop	{r3}
 8008ff4:	469e      	mov	lr, r3
 8008ff6:	4770      	bx	lr

08008ff8 <_fini>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	bf00      	nop
 8008ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffe:	bc08      	pop	{r3}
 8009000:	469e      	mov	lr, r3
 8009002:	4770      	bx	lr
