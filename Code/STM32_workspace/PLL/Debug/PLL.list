
PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008698  08008698  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086a0  080086a0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a4  080086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080086a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019b18  20000080  08008728  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019b98  08008728  00029b98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125d7  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d4  00000000  00000000  00032687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00035ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243c6  00000000  00000000  00036e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012705  00000000  00000000  0005b23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df881  00000000  00000000  0006d943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d1c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048dc  00000000  00000000  0014d218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008108 	.word	0x08008108

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08008108 	.word	0x08008108

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f001 fbe4 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f83a 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 faae 	bl	800149c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f40:	f000 fa8c 	bl	800145c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f44:	f000 fa60 	bl	8001408 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f48:	f000 f8a4 	bl	8001094 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000f4c:	f000 fa12 	bl	8001374 <MX_TIM10_Init>
  MX_DAC_Init();
 8000f50:	f000 f996 	bl	8001280 <MX_DAC_Init>
  MX_ADC2_Init();
 8000f54:	f000 f8f0 	bl	8001138 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000f58:	f000 f940 	bl	80011dc <MX_ADC3_Init>
  MX_TIM1_Init();
 8000f5c:	f000 f9ba 	bl	80012d4 <MX_TIM1_Init>

  // DAC DMA
//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)&adcBuf[0], sizeof(adcReading0), DAC_ALIGN_12B_R);//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)testArray, sizeof(testArray)/sizeof(uint16_t), DAC_ALIGN_12B_R);

  // Timer interrupt start
  HAL_TIM_Base_Start_IT(&htim10);
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <main+0x68>)
 8000f62:	f003 fdb1 	bl	8004ac8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <main+0x6c>)
 8000f68:	f003 fd46 	bl	80049f8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if (ringBufFlag && !ringBufPrintDone) {
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <main+0x70>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0fb      	beq.n	8000f6c <main+0x3c>
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <main+0x74>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f7      	bne.n	8000f6c <main+0x3c>
		ringBufPrintDone = printRingBuf(RING_BUF_LEN, ringBuf, readStart);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <main+0x78>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	490a      	ldr	r1, [pc, #40]	; (8000fac <main+0x7c>)
 8000f84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f88:	f000 ff68 	bl	8001e5c <printRingBuf>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <main+0x74>)
 8000f92:	701a      	strb	r2, [r3, #0]
	if (ringBufFlag && !ringBufPrintDone) {
 8000f94:	e7ea      	b.n	8000f6c <main+0x3c>
 8000f96:	bf00      	nop
 8000f98:	200002d8 	.word	0x200002d8
 8000f9c:	20019aa8 	.word	0x20019aa8
 8000fa0:	2000009d 	.word	0x2000009d
 8000fa4:	2000009e 	.word	0x2000009e
 8000fa8:	20019b7c 	.word	0x20019b7c
 8000fac:	20000454 	.word	0x20000454

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	2234      	movs	r2, #52	; 0x34
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 fdd8 	bl	8006b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <SystemClock_Config+0xdc>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	; (800108c <SystemClock_Config+0xdc>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <SystemClock_Config+0xdc>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <SystemClock_Config+0xe0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a25      	ldr	r2, [pc, #148]	; (8001090 <SystemClock_Config+0xe0>)
 8000ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <SystemClock_Config+0xe0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001024:	23b4      	movs	r3, #180	; 0xb4
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800102c:	2302      	movs	r3, #2
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4618      	mov	r0, r3
 800103a:	f003 f9ef 	bl	800441c <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001044:	f001 f8be 	bl	80021c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001048:	f002 fecc 	bl	8003de4 <HAL_PWREx_EnableOverDrive>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001052:	f001 f8b7 	bl	80021c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001056:	230f      	movs	r3, #15
 8001058:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105a:	2302      	movs	r3, #2
 800105c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001062:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001066:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2105      	movs	r1, #5
 8001074:	4618      	mov	r0, r3
 8001076:	f002 ff05 	bl	8003e84 <HAL_RCC_ClockConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001080:	f001 f8a0 	bl	80021c4 <Error_Handler>
  }
}
 8001084:	bf00      	nop
 8001086:	3750      	adds	r7, #80	; 0x50
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000

08001094 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_ADC1_Init+0x98>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_ADC1_Init+0x9c>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_ADC1_Init+0x98>)
 80010ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_ADC1_Init+0x98>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_ADC1_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_ADC1_Init+0x98>)
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <MX_ADC1_Init+0xa0>)
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_ADC1_Init+0x98>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_ADC1_Init+0x98>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_ADC1_Init+0x98>)
 80010f6:	f001 fb75 	bl	80027e4 <HAL_ADC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001100:	f001 f860 	bl	80021c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001104:	2300      	movs	r3, #0
 8001106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_ADC1_Init+0x98>)
 8001116:	f001 fd13 	bl	8002b40 <HAL_ADC_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001120:	f001 f850 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000034c 	.word	0x2000034c
 8001130:	40012000 	.word	0x40012000
 8001134:	0f000001 	.word	0x0f000001

08001138 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_ADC2_Init+0x98>)
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <MX_ADC2_Init+0x9c>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_ADC2_Init+0x98>)
 8001152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001156:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_ADC2_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_ADC2_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_ADC2_Init+0x98>)
 8001166:	2201      	movs	r2, #1
 8001168:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_ADC2_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_ADC2_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_ADC2_Init+0x98>)
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <MX_ADC2_Init+0xa0>)
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_ADC2_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_ADC2_Init+0x98>)
 8001186:	2201      	movs	r2, #1
 8001188:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_ADC2_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_ADC2_Init+0x98>)
 8001194:	2201      	movs	r2, #1
 8001196:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_ADC2_Init+0x98>)
 800119a:	f001 fb23 	bl	80027e4 <HAL_ADC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80011a4:	f001 f80e 	bl	80021c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_ADC2_Init+0x98>)
 80011ba:	f001 fcc1 	bl	8002b40 <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011c4:	f000 fffe 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000028c 	.word	0x2000028c
 80011d4:	40012100 	.word	0x40012100
 80011d8:	0f000001 	.word	0x0f000001

080011dc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_ADC3_Init+0x98>)
 80011f0:	4a21      	ldr	r2, [pc, #132]	; (8001278 <MX_ADC3_Init+0x9c>)
 80011f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_ADC3_Init+0x98>)
 80011f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_ADC3_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_ADC3_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_ADC3_Init+0x98>)
 800120a:	2201      	movs	r2, #1
 800120c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_ADC3_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_ADC3_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_ADC3_Init+0x98>)
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <MX_ADC3_Init+0xa0>)
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_ADC3_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_ADC3_Init+0x98>)
 800122a:	2201      	movs	r2, #1
 800122c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_ADC3_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_ADC3_Init+0x98>)
 8001238:	2201      	movs	r2, #1
 800123a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_ADC3_Init+0x98>)
 800123e:	f001 fad1 	bl	80027e4 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001248:	f000 ffbc 	bl	80021c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800124c:	230a      	movs	r3, #10
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_ADC3_Init+0x98>)
 800125e:	f001 fc6f 	bl	8002b40 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001268:	f000 ffac 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000398 	.word	0x20000398
 8001278:	40012200 	.word	0x40012200
 800127c:	0f000001 	.word	0x0f000001

08001280 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_DAC_Init+0x4c>)
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <MX_DAC_Init+0x50>)
 8001292:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_DAC_Init+0x4c>)
 8001296:	f001 ff92 	bl	80031be <HAL_DAC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012a0:	f000 ff90 	bl	80021c4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_DAC_Init+0x4c>)
 80012b4:	f002 f81c 	bl	80032f0 <HAL_DAC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012be:	f000 ff81 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000440 	.word	0x20000440
 80012d0:	40007400 	.word	0x40007400

080012d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_TIM1_Init+0x98>)
 80012f2:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <MX_TIM1_Init+0x9c>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM1_Init+0x98>)
 80012f8:	2211      	movs	r2, #17
 80012fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_TIM1_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM1_Init+0x98>)
 8001304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001308:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM1_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM1_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM1_Init+0x98>)
 800131e:	f003 fb1b 	bl	8004958 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001328:	f000 ff4c 	bl	80021c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_TIM1_Init+0x98>)
 800133a:	f003 fdef 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001344:	f000 ff3e 	bl	80021c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_TIM1_Init+0x98>)
 8001356:	f004 f9b7 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001360:	f000 ff30 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20019aa8 	.word	0x20019aa8
 8001370:	40010000 	.word	0x40010000

08001374 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_TIM10_Init+0x8c>)
 800138e:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <MX_TIM10_Init+0x90>)
 8001390:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 180-1;
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_TIM10_Init+0x8c>)
 8001394:	22b3      	movs	r2, #179	; 0xb3
 8001396:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_TIM10_Init+0x8c>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_TIM10_Init+0x8c>)
 80013a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_TIM10_Init+0x8c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_TIM10_Init+0x8c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013b2:	4813      	ldr	r0, [pc, #76]	; (8001400 <MX_TIM10_Init+0x8c>)
 80013b4:	f003 fad0 	bl	8004958 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80013be:	f000 ff01 	bl	80021c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80013c2:	480f      	ldr	r0, [pc, #60]	; (8001400 <MX_TIM10_Init+0x8c>)
 80013c4:	f003 fbf0 	bl	8004ba8 <HAL_TIM_OC_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80013ce:	f000 fef9 	bl	80021c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_TIM10_Init+0x8c>)
 80013ea:	f003 fd3f 	bl	8004e6c <HAL_TIM_OC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80013f4:	f000 fee6 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200002d8 	.word	0x200002d8
 8001404:	40014400 	.word	0x40014400

08001408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART2_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001440:	f004 f9d2 	bl	80057e8 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f000 febb 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20019b38 	.word	0x20019b38
 8001458:	40004400 	.word	0x40004400

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_DMA_Init+0x3c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <MX_DMA_Init+0x3c>)
 800146c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_DMA_Init+0x3c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2011      	movs	r0, #17
 8001484:	f001 fe65 	bl	8003152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001488:	2011      	movs	r0, #17
 800148a:	f001 fe7e 	bl	800318a <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a3f      	ldr	r2, [pc, #252]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a38      	ldr	r2, [pc, #224]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a31      	ldr	r2, [pc, #196]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_GPIO_Init+0x11c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <MX_GPIO_Init+0x11c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <MX_GPIO_Init+0x11c>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <MX_GPIO_Init+0x11c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	4825      	ldr	r0, [pc, #148]	; (80015bc <MX_GPIO_Init+0x120>)
 8001528:	f002 fc42 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	4823      	ldr	r0, [pc, #140]	; (80015c0 <MX_GPIO_Init+0x124>)
 8001532:	f002 fc3d 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800153c:	4821      	ldr	r0, [pc, #132]	; (80015c4 <MX_GPIO_Init+0x128>)
 800153e:	f002 fc37 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001542:	2308      	movs	r3, #8
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	481b      	ldr	r0, [pc, #108]	; (80015c4 <MX_GPIO_Init+0x128>)
 8001556:	f002 fa97 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800155a:	2320      	movs	r3, #32
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4812      	ldr	r0, [pc, #72]	; (80015bc <MX_GPIO_Init+0x120>)
 8001572:	f002 fa89 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <MX_GPIO_Init+0x124>)
 800158e:	f002 fa7b 	bl	8003a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001592:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <MX_GPIO_Init+0x128>)
 80015ac:	f002 fa6c 	bl	8003a88 <HAL_GPIO_Init>

}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800

080015c8 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//}

// Timer 10 (TIM10) interrupt:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
  if (htim == &htim10)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4aaf      	ldr	r2, [pc, #700]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	f040 8418 	bne.w	8001e0a <HAL_TIM_PeriodElapsedCallback+0x842>
    // Variables declared globally for easier debugging.
    //    static float angleDq, alpha1, beta1, Vq, Vd, alpha2, beta2, cosGrid, sinGrid;
    // PLL variables end

	// Set pin: Start timer
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	48ad      	ldr	r0, [pc, #692]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80015e0:	f002 fbe6 	bl	8003db0 <HAL_GPIO_WritePin>

    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80015e4:	4bac      	ldr	r3, [pc, #688]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4bab      	ldr	r3, [pc, #684]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80015ee:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2120      	movs	r1, #32
 80015f4:	48a7      	ldr	r0, [pc, #668]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80015f6:	f002 fbdb 	bl	8003db0 <HAL_GPIO_WritePin>

    // ADC 1
    HAL_ADC_Start(&hadc1);
 80015fa:	48a9      	ldr	r0, [pc, #676]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80015fc:	f001 f936 	bl	800286c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	48a6      	ldr	r0, [pc, #664]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001606:	f001 fa03 	bl	8002a10 <HAL_ADC_PollForConversion>
    adcValue1 = HAL_ADC_GetValue(&hadc1);
 800160a:	48a5      	ldr	r0, [pc, #660]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800160c:	f001 fa8b 	bl	8002b26 <HAL_ADC_GetValue>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	4ba3      	ldr	r3, [pc, #652]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001616:	801a      	strh	r2, [r3, #0]

    // ADC 2
    HAL_ADC_Start(&hadc2);
 8001618:	48a3      	ldr	r0, [pc, #652]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800161a:	f001 f927 	bl	800286c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800161e:	f04f 31ff 	mov.w	r1, #4294967295
 8001622:	48a1      	ldr	r0, [pc, #644]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001624:	f001 f9f4 	bl	8002a10 <HAL_ADC_PollForConversion>
    adcValue2 = HAL_ADC_GetValue(&hadc2);
 8001628:	489f      	ldr	r0, [pc, #636]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800162a:	f001 fa7c 	bl	8002b26 <HAL_ADC_GetValue>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b9e      	ldr	r3, [pc, #632]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001634:	801a      	strh	r2, [r3, #0]

	// ADC 3
    HAL_ADC_Start(&hadc3);
 8001636:	489e      	ldr	r0, [pc, #632]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001638:	f001 f918 	bl	800286c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	489b      	ldr	r0, [pc, #620]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001642:	f001 f9e5 	bl	8002a10 <HAL_ADC_PollForConversion>
    adcValue3 = HAL_ADC_GetValue(&hadc3);
 8001646:	489a      	ldr	r0, [pc, #616]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001648:	f001 fa6d 	bl	8002b26 <HAL_ADC_GetValue>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b98      	ldr	r3, [pc, #608]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001652:	801a      	strh	r2, [r3, #0]
    timingArray[0] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001654:	4b90      	ldr	r3, [pc, #576]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b8f      	ldr	r3, [pc, #572]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	b29b      	uxth	r3, r3
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	b21a      	sxth	r2, r3
 800166a:	4b93      	ldr	r3, [pc, #588]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800166c:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2120      	movs	r1, #32
 8001672:	4888      	ldr	r0, [pc, #544]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001674:	f002 fb9c 	bl	8003db0 <HAL_GPIO_WritePin>
//    phaseB = (float)adcValue2/(0xFFF+1);
//    phaseC = (float)adcValue3/(0xFFF+1);

    // PLL Start
    //--------------------------------------------------------------------------------------------
    angleDq = angleDq + T_SAMPLE*F_RAD;
 8001678:	4b90      	ldr	r3, [pc, #576]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80018c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8001682:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001686:	4b8d      	ldr	r3, [pc, #564]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
    if (angleDq > TWO_PI)
 800168c:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff79 	bl	8000588 <__aeabi_f2d>
 8001696:	a37c      	add	r3, pc, #496	; (adr r3, 8001888 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7ff fa5c 	bl	8000b58 <__aeabi_dcmpgt>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d012      	beq.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x104>
    {
    	angleDq = angleDq - TWO_PI;
 80016a6:	4b85      	ldr	r3, [pc, #532]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff6c 	bl	8000588 <__aeabi_f2d>
 80016b0:	a375      	add	r3, pc, #468	; (adr r3, 8001888 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe fe07 	bl	80002c8 <__aeabi_dsub>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa69 	bl	8000b98 <__aeabi_d2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a7c      	ldr	r2, [pc, #496]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80016ca:	6013      	str	r3, [r2, #0]
    }


    // Create simulation thrre phase
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80016cc:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	4b71      	ldr	r3, [pc, #452]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80016d6:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	486d      	ldr	r0, [pc, #436]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80016de:	f002 fb67 	bl	8003db0 <HAL_GPIO_WritePin>
    phaseA = sinf(angleDq);
 80016e2:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	f005 feb8 	bl	8007460 <sinf>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80016f6:	edc3 7a00 	vstr	s15, [r3]
	phaseB = sinf(angleDq-RAD_120);
 80016fa:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80018c8 <HAL_TIM_PeriodElapsedCallback+0x300>
 8001704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	f005 fea8 	bl	8007460 <sinf>
 8001710:	eef0 7a40 	vmov.f32	s15, s0
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001716:	edc3 7a00 	vstr	s15, [r3]
//	phaseC = two_to_three_phase(&phaseA, &phaseB);
	phaseC = sinf(angleDq+RAD_120);
 800171a:	4b68      	ldr	r3, [pc, #416]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80018c8 <HAL_TIM_PeriodElapsedCallback+0x300>
 8001724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	f005 fe98 	bl	8007460 <sinf>
 8001730:	eef0 7a40 	vmov.f32	s15, s0
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2120      	movs	r1, #32
 800173e:	4855      	ldr	r0, [pc, #340]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001740:	f002 fb36 	bl	8003db0 <HAL_GPIO_WritePin>
	timingArray[1] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001744:	4b54      	ldr	r3, [pc, #336]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	b29a      	uxth	r2, r3
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800174e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001752:	b29b      	uxth	r3, r3
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	b29b      	uxth	r3, r3
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800175c:	805a      	strh	r2, [r3, #2]

	// abc -> alpha beta
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 800175e:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	b21a      	sxth	r2, r3
 8001766:	4b4d      	ldr	r3, [pc, #308]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001768:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2120      	movs	r1, #32
 800176e:	4849      	ldr	r0, [pc, #292]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001770:	f002 fb1e 	bl	8003db0 <HAL_GPIO_WritePin>

    abc_to_alphabeta(phaseA, phaseB, phaseC, &alpha1, &beta1);
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	4b54      	ldr	r3, [pc, #336]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x304>)
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001782:	edd3 6a00 	vldr	s13, [r3]
 8001786:	4953      	ldr	r1, [pc, #332]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001788:	4853      	ldr	r0, [pc, #332]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800178a:	eeb0 1a66 	vmov.f32	s2, s13
 800178e:	eef0 0a47 	vmov.f32	s1, s14
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	f004 fe8f 	bl	80064b8 <abc_to_alphabeta>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	483d      	ldr	r0, [pc, #244]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80017a0:	f002 fb06 	bl	8003db0 <HAL_GPIO_WritePin>
    timingArray[2] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80017a4:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80017bc:	809a      	strh	r2, [r3, #4]

    // alpha beta -> DQ
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80017be:	4b36      	ldr	r3, [pc, #216]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80017c8:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2120      	movs	r1, #32
 80017ce:	4831      	ldr	r0, [pc, #196]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80017d0:	f002 faee 	bl	8003db0 <HAL_GPIO_WritePin>

    alphabeta_to_dq(alpha1, beta1, angleDq, &Vd, &Vq);
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80017e2:	edd3 6a00 	vldr	s13, [r3]
 80017e6:	493d      	ldr	r1, [pc, #244]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x314>)
 80017e8:	483d      	ldr	r0, [pc, #244]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80017ea:	eeb0 1a66 	vmov.f32	s2, s13
 80017ee:	eef0 0a47 	vmov.f32	s1, s14
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	f004 feab 	bl	8006550 <alphabeta_to_dq>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2120      	movs	r1, #32
 80017fe:	4825      	ldr	r0, [pc, #148]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001800:	f002 fad6 	bl	8003db0 <HAL_GPIO_WritePin>
    timingArray[3] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	b29b      	uxth	r3, r3
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	b21a      	sxth	r2, r3
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800181c:	80da      	strh	r2, [r3, #6]

    // MAF
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001828:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2120      	movs	r1, #32
 800182e:	4819      	ldr	r0, [pc, #100]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001830:	f002 fabe 	bl	8003db0 <HAL_GPIO_WritePin>

	maf(&Vd, &Vq, &VdMaf, &VqMaf);
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001836:	4a2c      	ldr	r2, [pc, #176]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001838:	4928      	ldr	r1, [pc, #160]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800183a:	4829      	ldr	r0, [pc, #164]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800183c:	f004 fddc 	bl	80063f8 <maf>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2120      	movs	r1, #32
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001846:	f002 fab3 	bl	8003db0 <HAL_GPIO_WritePin>
	timingArray[4] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001858:	b29b      	uxth	r3, r3
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	b29b      	uxth	r3, r3
 800185e:	b21a      	sxth	r2, r3
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001862:	811a      	strh	r2, [r3, #8]

	// DQ -> alpha beta
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800186e:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	2120      	movs	r1, #32
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001876:	f002 fa9b 	bl	8003db0 <HAL_GPIO_WritePin>

    dq_to_alphabeta(Vd, Vq, angleDq, &alpha2, &beta2);
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	e031      	b.n	80018ec <HAL_TIM_PeriodElapsedCallback+0x324>
 8001888:	54442c46 	.word	0x54442c46
 800188c:	401921fb 	.word	0x401921fb
 8001890:	200002d8 	.word	0x200002d8
 8001894:	40020800 	.word	0x40020800
 8001898:	20019aa8 	.word	0x20019aa8
 800189c:	20019af4 	.word	0x20019af4
 80018a0:	2000034c 	.word	0x2000034c
 80018a4:	20019aa0 	.word	0x20019aa0
 80018a8:	2000028c 	.word	0x2000028c
 80018ac:	20000348 	.word	0x20000348
 80018b0:	20000398 	.word	0x20000398
 80018b4:	20000288 	.word	0x20000288
 80018b8:	20000334 	.word	0x20000334
 80018bc:	20019b80 	.word	0x20019b80
 80018c0:	3ea0d97c 	.word	0x3ea0d97c
 80018c4:	20000320 	.word	0x20000320
 80018c8:	40060a92 	.word	0x40060a92
 80018cc:	20019b30 	.word	0x20019b30
 80018d0:	20019a94 	.word	0x20019a94
 80018d4:	20019af8 	.word	0x20019af8
 80018d8:	2000032c 	.word	0x2000032c
 80018dc:	20000330 	.word	0x20000330
 80018e0:	20000324 	.word	0x20000324
 80018e4:	20019a98 	.word	0x20019a98
 80018e8:	200002d4 	.word	0x200002d4
 80018ec:	4bbc      	ldr	r3, [pc, #752]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80018ee:	edd3 6a00 	vldr	s13, [r3]
 80018f2:	49bc      	ldr	r1, [pc, #752]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80018f4:	48bc      	ldr	r0, [pc, #752]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80018f6:	eeb0 1a66 	vmov.f32	s2, s13
 80018fa:	eef0 0a47 	vmov.f32	s1, s14
 80018fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001902:	f004 fe6c 	bl	80065de <dq_to_alphabeta>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2120      	movs	r1, #32
 800190a:	48b8      	ldr	r0, [pc, #736]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 800190c:	f002 fa50 	bl	8003db0 <HAL_GPIO_WritePin>
	timingArray[5] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001910:	4bb7      	ldr	r3, [pc, #732]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	b29a      	uxth	r2, r3
 8001918:	4bb6      	ldr	r3, [pc, #728]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	b29b      	uxth	r3, r3
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	b21a      	sxth	r2, r3
 8001926:	4bb4      	ldr	r3, [pc, #720]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001928:	815a      	strh	r2, [r3, #10]

//    alpha2 = dq_to_alpha(Vd, Vq, angleDq);
//    beta2 = dq_to_beta(Vd, Vq, angleDq);

	// sinGrid & cosGrid
	timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 800192a:	4bb1      	ldr	r3, [pc, #708]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	b21a      	sxth	r2, r3
 8001932:	4bb0      	ldr	r3, [pc, #704]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001934:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	2120      	movs	r1, #32
 800193a:	48ac      	ldr	r0, [pc, #688]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 800193c:	f002 fa38 	bl	8003db0 <HAL_GPIO_WritePin>

    cosGrid = cos_grid(alpha2, beta2);
 8001940:	4ba9      	ldr	r3, [pc, #676]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	4ba7      	ldr	r3, [pc, #668]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001948:	ed93 7a00 	vldr	s14, [r3]
 800194c:	eef0 0a47 	vmov.f32	s1, s14
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	f004 fe88 	bl	8006668 <cos_grid>
 8001958:	eef0 7a40 	vmov.f32	s15, s0
 800195c:	4ba7      	ldr	r3, [pc, #668]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x634>)
 800195e:	edc3 7a00 	vstr	s15, [r3]
    sinGrid = sin_grid(alpha2, beta2);
 8001962:	4ba1      	ldr	r3, [pc, #644]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	4b9e      	ldr	r3, [pc, #632]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800196a:	ed93 7a00 	vldr	s14, [r3]
 800196e:	eef0 0a47 	vmov.f32	s1, s14
 8001972:	eeb0 0a67 	vmov.f32	s0, s15
 8001976:	f004 feab 	bl	80066d0 <sin_grid>
 800197a:	eef0 7a40 	vmov.f32	s15, s0
 800197e:	4ba0      	ldr	r3, [pc, #640]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001980:	edc3 7a00 	vstr	s15, [r3]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	2120      	movs	r1, #32
 8001988:	4898      	ldr	r0, [pc, #608]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 800198a:	f002 fa11 	bl	8003db0 <HAL_GPIO_WritePin>
    timingArray[6] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 800198e:	4b98      	ldr	r3, [pc, #608]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b97      	ldr	r3, [pc, #604]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	b29b      	uxth	r3, r3
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b94      	ldr	r3, [pc, #592]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80019a6:	819a      	strh	r2, [r3, #12]

    // Phade detector
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 80019a8:	4b91      	ldr	r3, [pc, #580]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	4b90      	ldr	r3, [pc, #576]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80019b2:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	2120      	movs	r1, #32
 80019b8:	488c      	ldr	r0, [pc, #560]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 80019ba:	f002 f9f9 	bl	8003db0 <HAL_GPIO_WritePin>

    phaseError = phase_detector(cosGrid, sinGrid, anglePllComp);
 80019be:	4b8f      	ldr	r3, [pc, #572]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x634>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	4b8e      	ldr	r3, [pc, #568]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80019c6:	ed93 7a00 	vldr	s14, [r3]
 80019ca:	4b8e      	ldr	r3, [pc, #568]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80019cc:	edd3 6a00 	vldr	s13, [r3]
 80019d0:	eeb0 1a66 	vmov.f32	s2, s13
 80019d4:	eef0 0a47 	vmov.f32	s1, s14
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	f004 ffc2 	bl	8006964 <phase_detector>
 80019e0:	eef0 7a40 	vmov.f32	s15, s0
 80019e4:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80019e6:	edc3 7a00 	vstr	s15, [r3]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2120      	movs	r1, #32
 80019ee:	487f      	ldr	r0, [pc, #508]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 80019f0:	f002 f9de 	bl	8003db0 <HAL_GPIO_WritePin>
    timingArray[7] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 80019f4:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b7d      	ldr	r3, [pc, #500]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	4b7b      	ldr	r3, [pc, #492]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001a0c:	81da      	strh	r2, [r3, #14]

    // PI-regulator
    timer_temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001a0e:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	4b77      	ldr	r3, [pc, #476]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001a18:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	4873      	ldr	r0, [pc, #460]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a20:	f002 f9c6 	bl	8003db0 <HAL_GPIO_WritePin>

    pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE, &anglePll, &anglePllComp);
 8001a24:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	4b78      	ldr	r3, [pc, #480]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	4b77      	ldr	r3, [pc, #476]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001a32:	edd3 6a00 	vldr	s13, [r3]
 8001a36:	4b77      	ldr	r3, [pc, #476]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8001a38:	ed93 6a00 	vldr	s12, [r3]
 8001a3c:	4971      	ldr	r1, [pc, #452]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001a3e:	4876      	ldr	r0, [pc, #472]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001a40:	eddf 2a76 	vldr	s5, [pc, #472]	; 8001c1c <HAL_TIM_PeriodElapsedCallback+0x654>
 8001a44:	eeb0 2a46 	vmov.f32	s4, s12
 8001a48:	eef0 1a66 	vmov.f32	s3, s13
 8001a4c:	eeb0 1a47 	vmov.f32	s2, s14
 8001a50:	eddf 0a73 	vldr	s1, [pc, #460]	; 8001c20 <HAL_TIM_PeriodElapsedCallback+0x658>
 8001a54:	eeb0 0a67 	vmov.f32	s0, s15
 8001a58:	f004 fe6e 	bl	8006738 <pi_regulator>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2120      	movs	r1, #32
 8001a60:	4862      	ldr	r0, [pc, #392]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a62:	f002 f9a5 	bl	8003db0 <HAL_GPIO_WritePin>
    timingArray[8] = __HAL_TIM_GET_COUNTER(&htim1) - timer_temp;
 8001a66:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001a7e:	821a      	strh	r2, [r3, #16]

    //--------------------------------------------------------------------------------------------
    // PLL End

    // DAC
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2120      	movs	r1, #32
 8001a84:	4859      	ldr	r0, [pc, #356]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001a86:	f002 f993 	bl	8003db0 <HAL_GPIO_WritePin>
    var_dac_f = (anglePll*0.5f + 0.05f) * 4096.0f/3.3f;	// +1 for offset for negative values, /3.3 for scaling
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001c24 <HAL_TIM_PeriodElapsedCallback+0x65c>
 8001a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa0:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001c28 <HAL_TIM_PeriodElapsedCallback+0x660>
 8001aa4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aa8:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001c2c <HAL_TIM_PeriodElapsedCallback+0x664>
 8001aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab0:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001ab2:	edc3 7a00 	vstr	s15, [r3]
    var_dac = (uint16_t)var_dac_f; 			// Convert from float to uint16_t
 8001ab6:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac0:	ee17 3a90 	vmov	r3, s15
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8001ac8:	801a      	strh	r2, [r3, #0]
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 8001aca:	2100      	movs	r1, #0
 8001acc:	485a      	ldr	r0, [pc, #360]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001ace:	f001 fb98 	bl	8003202 <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var_dac); // Set dac to digital value
 8001ad2:	4b58      	ldr	r3, [pc, #352]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4857      	ldr	r0, [pc, #348]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001adc:	f001 fbe3 	bl	80032a6 <HAL_DAC_SetValue>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	4841      	ldr	r0, [pc, #260]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001ae6:	f002 f963 	bl	8003db0 <HAL_GPIO_WritePin>
    // Ring buffer
//    ringBufData[0] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
//    ringBufData[1] = ((float)	anglePllComp	* (float)RING_BUF_SCALING);
//    ringBufData[2] = ((float)	angleDq 		* (float)RING_BUF_SCALING);
//    ringBufData[3] = ((float)	beta1 			* (float)RING_BUF_SCALING);
    ringBufData[0] 	= ((float)	phaseA 			* (float)RING_BUF_SCALING);
 8001aea:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x674>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afc:	ee17 3a90 	vmov	r3, s15
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001b04:	801a      	strh	r2, [r3, #0]
    ringBufData[1] 	= ((float)	phaseB			* (float)RING_BUF_SCALING);
 8001b06:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b18:	ee17 3a90 	vmov	r3, s15
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001b20:	805a      	strh	r2, [r3, #2]
    ringBufData[2] 	= ((float)	phaseC 			* (float)RING_BUF_SCALING);
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b34:	ee17 3a90 	vmov	r3, s15
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001b3c:	809a      	strh	r2, [r3, #4]
    ringBufData[3] 	= ((float)	alpha1 			* (float)RING_BUF_SCALING);
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b50:	ee17 3a90 	vmov	r3, s15
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001b58:	80da      	strh	r2, [r3, #6]
    ringBufData[4] 	= ((float)	beta1 			* (float)RING_BUF_SCALING);
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b6c:	ee17 3a90 	vmov	r3, s15
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001b74:	811a      	strh	r2, [r3, #8]
    ringBufData[5] 	= ((float)	Vd 				* (float)RING_BUF_SCALING);
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b88:	ee17 3a90 	vmov	r3, s15
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001b90:	815a      	strh	r2, [r3, #10]
    ringBufData[6] 	= ((float)	Vq				* (float)RING_BUF_SCALING);
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 3a90 	vmov	r3, s15
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001bac:	819a      	strh	r2, [r3, #12]
    ringBufData[7] 	= ((float)	VdMaf 			* (float)RING_BUF_SCALING);
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc0:	ee17 3a90 	vmov	r3, s15
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8001bc8:	81da      	strh	r2, [r3, #14]
    ringBufData[8] 	= ((float)	VqMaf 			* (float)RING_BUF_SCALING);
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001c40 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bdc:	e044      	b.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x6a0>
 8001bde:	bf00      	nop
 8001be0:	20019b80 	.word	0x20019b80
 8001be4:	20000284 	.word	0x20000284
 8001be8:	20000394 	.word	0x20000394
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	20019aa8 	.word	0x20019aa8
 8001bf4:	20019af4 	.word	0x20019af4
 8001bf8:	20000334 	.word	0x20000334
 8001bfc:	20019aa4 	.word	0x20019aa4
 8001c00:	20019a9c 	.word	0x20019a9c
 8001c04:	20019af0 	.word	0x20019af0
 8001c08:	20000328 	.word	0x20000328
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20019b34 	.word	0x20019b34
 8001c1c:	3a83126f 	.word	0x3a83126f
 8001c20:	439d1463 	.word	0x439d1463
 8001c24:	3d4ccccd 	.word	0x3d4ccccd
 8001c28:	45800000 	.word	0x45800000
 8001c2c:	40533333 	.word	0x40533333
 8001c30:	200000a0 	.word	0x200000a0
 8001c34:	200000a4 	.word	0x200000a4
 8001c38:	20000440 	.word	0x20000440
 8001c3c:	20000320 	.word	0x20000320
 8001c40:	459c4000 	.word	0x459c4000
 8001c44:	20019afc 	.word	0x20019afc
 8001c48:	20019b30 	.word	0x20019b30
 8001c4c:	20019a94 	.word	0x20019a94
 8001c50:	2000032c 	.word	0x2000032c
 8001c54:	20019af8 	.word	0x20019af8
 8001c58:	20000324 	.word	0x20000324
 8001c5c:	20000330 	.word	0x20000330
 8001c60:	200002d4 	.word	0x200002d4
 8001c64:	20019a98 	.word	0x20019a98
 8001c68:	ee17 3a90 	vmov	r3, s15
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001c70:	821a      	strh	r2, [r3, #16]
    ringBufData[9] 	= ((float)	alpha2 			* (float)RING_BUF_SCALING);
 8001c72:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x854>
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	4b62      	ldr	r3, [pc, #392]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001c8c:	825a      	strh	r2, [r3, #18]
    ringBufData[10] = ((float)	beta2			* (float)RING_BUF_SCALING);
 8001c8e:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x854>
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca0:	ee17 3a90 	vmov	r3, s15
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001ca8:	829a      	strh	r2, [r3, #20]
    ringBufData[11] = ((float)	cosGrid			* (float)RING_BUF_SCALING);
 8001caa:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x854>
 8001cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cbc:	ee17 3a90 	vmov	r3, s15
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001cc4:	82da      	strh	r2, [r3, #22]
    ringBufData[12] = ((float)	sinGrid 		* (float)RING_BUF_SCALING);
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x854>
 8001cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd8:	ee17 3a90 	vmov	r3, s15
 8001cdc:	b21a      	sxth	r2, r3
 8001cde:	4b4d      	ldr	r3, [pc, #308]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001ce0:	831a      	strh	r2, [r3, #24]
    ringBufData[13] = ((float)	phaseError 		* (float)RING_BUF_SCALING);
 8001ce2:	4b52      	ldr	r3, [pc, #328]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x854>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf4:	ee17 3a90 	vmov	r3, s15
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001cfc:	835a      	strh	r2, [r3, #26]
    ringBufData[14] = ((float)	anglePll 		* (float)RING_BUF_SCALING);
 8001cfe:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x854>
 8001d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d10:	ee17 3a90 	vmov	r3, s15
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d18:	839a      	strh	r2, [r3, #28]
    ringBufData[15] = ((float)	anglePllComp	* (float)RING_BUF_SCALING);
 8001d1a:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x854>
 8001d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2c:	ee17 3a90 	vmov	r3, s15
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d34:	83da      	strh	r2, [r3, #30]
    ringBufData[16] = ((float)	angleDq			* (float)RING_BUF_SCALING);
 8001d36:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001e1c <HAL_TIM_PeriodElapsedCallback+0x854>
 8001d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d48:	ee17 3a90 	vmov	r3, s15
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d50:	841a      	strh	r2, [r3, #32]
    ringBufData[17] = timingArray[0];
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001d54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d5a:	845a      	strh	r2, [r3, #34]	; 0x22
    ringBufData[18] = timingArray[1];
 8001d5c:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001d5e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d64:	849a      	strh	r2, [r3, #36]	; 0x24
    ringBufData[19] = timingArray[2];
 8001d66:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001d68:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    ringBufData[20] = timingArray[3];
 8001d70:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001d72:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
    ringBufData[21] = timingArray[4];
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001d7c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    ringBufData[22] = timingArray[5];
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001d86:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    ringBufData[23] = timingArray[6];
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001d90:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d96:	85da      	strh	r2, [r3, #46]	; 0x2e
    ringBufData[24] = timingArray[7];
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001d9a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001da0:	861a      	strh	r2, [r3, #48]	; 0x30
    ringBufData[25] = timingArray[8];
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001da4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001daa:	865a      	strh	r2, [r3, #50]	; 0x32

    ringBufFlag = circular_buffer(RING_BUF_LEN, ringBuf, ringBufData, ringBufTrigger, RING_BUF_SPLIT, &readStart);
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001db2:	9200      	str	r2, [sp, #0]
 8001db4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001db8:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001dba:	4923      	ldr	r1, [pc, #140]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8001dbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dc0:	f004 fdf8 	bl	80069b4 <circular_buffer>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001dca:	701a      	strb	r2, [r3, #0]



    // Count up interrupt count
	if (count < (RING_BUF_LEN*RING_BUF_SPLIT))
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001e54 <HAL_TIM_PeriodElapsedCallback+0x88c>
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d506      	bpl.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x82c>
	{
	  count++;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	e005      	b.n	8001e00 <HAL_TIM_PeriodElapsedCallback+0x838>
	}
	else
	{
	  ringBufTrigger = 1;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
	  count = 0;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	801a      	strh	r2, [r3, #0]
	}


	// Reset pin: Stop timer
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2140      	movs	r1, #64	; 0x40
 8001e04:	4814      	ldr	r0, [pc, #80]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8001e06:	f001 ffd3 	bl	8003db0 <HAL_GPIO_WritePin>
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20019afc 	.word	0x20019afc
 8001e18:	20000394 	.word	0x20000394
 8001e1c:	459c4000 	.word	0x459c4000
 8001e20:	20000284 	.word	0x20000284
 8001e24:	20019aa4 	.word	0x20019aa4
 8001e28:	20019a9c 	.word	0x20019a9c
 8001e2c:	20000328 	.word	0x20000328
 8001e30:	20019b34 	.word	0x20019b34
 8001e34:	20019af0 	.word	0x20019af0
 8001e38:	20019b80 	.word	0x20019b80
 8001e3c:	20000334 	.word	0x20000334
 8001e40:	2000009c 	.word	0x2000009c
 8001e44:	20019b7c 	.word	0x20019b7c
 8001e48:	20000454 	.word	0x20000454
 8001e4c:	2000009d 	.word	0x2000009d
 8001e50:	200000a6 	.word	0x200000a6
 8001e54:	43fa0000 	.word	0x43fa0000
 8001e58:	40020800 	.word	0x40020800

08001e5c <printRingBuf>:
//  Description :   prints the ring buffer values
//  Parameters  :   uint16_t bufferSize: pointer to an int to store the number
//                  uint16_t circularBuffer: Pointer to circular buffer array
//                  uint16_t readStart: starting index of the circular buffer
//  Returns     :	none
uint8_t printRingBuf(uint16_t bufferSize, int16_t circularBuffer[][RING_BUF_SIZE], uint16_t readStart) {
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	b0af      	sub	sp, #188	; 0xbc
 8001e60:	af18      	add	r7, sp, #96	; 0x60
 8001e62:	4603      	mov	r3, r0
 8001e64:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    static uint8_t init         =   0;

    static char msg[250];	// Initialize string to be written to USART

    // Initialize readIndex to readStart
    if (!init) {
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <printRingBuf+0x50>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <printRingBuf+0x2a>
        readIndex = readStart;
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <printRingBuf+0x54>)
 8001e7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e7e:	8013      	strh	r3, [r2, #0]
        init = 1;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <printRingBuf+0x50>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
    }

	sprintf(msg, "phaseA, phaseB, phaseC, alpha1, beta1, Vd, Vq, VdMaf, VqMaf, alpha2, beta2, cosGrid, sinGrid, phaseError, anglePll, anglePllComp, angleDq, t_adc, t_3p_sin, t_abc_ab, t_ab_dq, t_maf, t_dq_ab, t_sin_cos, t_phase_d, t_pi_regulator \r\n");
 8001e86:	490b      	ldr	r1, [pc, #44]	; (8001eb4 <printRingBuf+0x58>)
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <printRingBuf+0x5c>)
 8001e8a:	f004 fe7b 	bl	8006b84 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e8e:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <printRingBuf+0x5c>)
 8001e90:	f7fe f9be 	bl	8000210 <strlen>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9c:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <printRingBuf+0x5c>)
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <printRingBuf+0x60>)
 8001ea0:	f003 fcef 	bl	8005882 <HAL_UART_Transmit>


    for (int i = 0; i < bufferSize; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8001ea8:	e17e      	b.n	80021a8 <printRingBuf+0x34c>
 8001eaa:	bf00      	nop
 8001eac:	200000a8 	.word	0x200000a8
 8001eb0:	200000aa 	.word	0x200000aa
 8001eb4:	08008120 	.word	0x08008120
 8001eb8:	200000ac 	.word	0x200000ac
 8001ebc:	20019b38 	.word	0x20019b38
        //printf("Buffervalue at index [%d] = %d\n", readIndex, circularBuffer[readIndex]);

//    	sprintf(msg, "%d, %d, %d, %d\r\n", circularBuffer[readIndex][0], circularBuffer[readIndex][1],
//									circularBuffer[readIndex][2], circularBuffer[readIndex][3]);	// Update message for usart print
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
											circularBuffer[readIndex][0], 	circularBuffer[readIndex][1],
 8001ec0:	4bb2      	ldr	r3, [pc, #712]	; (800218c <printRingBuf+0x330>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2334      	movs	r3, #52	; 0x34
 8001ec8:	fb03 f302 	mul.w	r3, r3, r2
 8001ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ece:	4413      	add	r3, r2
 8001ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001ed4:	469c      	mov	ip, r3
											circularBuffer[readIndex][0], 	circularBuffer[readIndex][1],
 8001ed6:	4bad      	ldr	r3, [pc, #692]	; (800218c <printRingBuf+0x330>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	2334      	movs	r3, #52	; 0x34
 8001ede:	fb03 f302 	mul.w	r3, r3, r2
 8001ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001eea:	469e      	mov	lr, r3
											circularBuffer[readIndex][2], 	circularBuffer[readIndex][3],
 8001eec:	4ba7      	ldr	r3, [pc, #668]	; (800218c <printRingBuf+0x330>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2334      	movs	r3, #52	; 0x34
 8001ef4:	fb03 f302 	mul.w	r3, r3, r2
 8001ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001efa:	4413      	add	r3, r2
 8001efc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001f00:	647b      	str	r3, [r7, #68]	; 0x44
											circularBuffer[readIndex][2], 	circularBuffer[readIndex][3],
 8001f02:	4ba2      	ldr	r3, [pc, #648]	; (800218c <printRingBuf+0x330>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	2334      	movs	r3, #52	; 0x34
 8001f0a:	fb03 f302 	mul.w	r3, r3, r2
 8001f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f10:	4413      	add	r3, r2
 8001f12:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001f16:	643b      	str	r3, [r7, #64]	; 0x40
											circularBuffer[readIndex][4], 	circularBuffer[readIndex][5],
 8001f18:	4b9c      	ldr	r3, [pc, #624]	; (800218c <printRingBuf+0x330>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2334      	movs	r3, #52	; 0x34
 8001f20:	fb03 f302 	mul.w	r3, r3, r2
 8001f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f26:	4413      	add	r3, r2
 8001f28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
											circularBuffer[readIndex][4], 	circularBuffer[readIndex][5],
 8001f2e:	4b97      	ldr	r3, [pc, #604]	; (800218c <printRingBuf+0x330>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	2334      	movs	r3, #52	; 0x34
 8001f36:	fb03 f302 	mul.w	r3, r3, r2
 8001f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
											circularBuffer[readIndex][6], 	circularBuffer[readIndex][7],
 8001f44:	4b91      	ldr	r3, [pc, #580]	; (800218c <printRingBuf+0x330>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2334      	movs	r3, #52	; 0x34
 8001f4c:	fb03 f302 	mul.w	r3, r3, r2
 8001f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f52:	4413      	add	r3, r2
 8001f54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
											circularBuffer[readIndex][6], 	circularBuffer[readIndex][7],
 8001f5a:	4b8c      	ldr	r3, [pc, #560]	; (800218c <printRingBuf+0x330>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2334      	movs	r3, #52	; 0x34
 8001f62:	fb03 f302 	mul.w	r3, r3, r2
 8001f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f68:	4413      	add	r3, r2
 8001f6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
											circularBuffer[readIndex][8], 	circularBuffer[readIndex][9],
 8001f70:	4b86      	ldr	r3, [pc, #536]	; (800218c <printRingBuf+0x330>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	2334      	movs	r3, #52	; 0x34
 8001f78:	fb03 f302 	mul.w	r3, r3, r2
 8001f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f7e:	4413      	add	r3, r2
 8001f80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
											circularBuffer[readIndex][8], 	circularBuffer[readIndex][9],
 8001f86:	4b81      	ldr	r3, [pc, #516]	; (800218c <printRingBuf+0x330>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2334      	movs	r3, #52	; 0x34
 8001f8e:	fb03 f302 	mul.w	r3, r3, r2
 8001f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f94:	4413      	add	r3, r2
 8001f96:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
											circularBuffer[readIndex][10], 	circularBuffer[readIndex][11],
 8001f9c:	4b7b      	ldr	r3, [pc, #492]	; (800218c <printRingBuf+0x330>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2334      	movs	r3, #52	; 0x34
 8001fa4:	fb03 f302 	mul.w	r3, r3, r2
 8001fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001faa:	4413      	add	r3, r2
 8001fac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
											circularBuffer[readIndex][10], 	circularBuffer[readIndex][11],
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <printRingBuf+0x330>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2334      	movs	r3, #52	; 0x34
 8001fba:	fb03 f302 	mul.w	r3, r3, r2
 8001fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001fc6:	623b      	str	r3, [r7, #32]
											circularBuffer[readIndex][12], 	circularBuffer[readIndex][13],
 8001fc8:	4b70      	ldr	r3, [pc, #448]	; (800218c <printRingBuf+0x330>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2334      	movs	r3, #52	; 0x34
 8001fd0:	fb03 f302 	mul.w	r3, r3, r2
 8001fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001fdc:	61fb      	str	r3, [r7, #28]
											circularBuffer[readIndex][12], 	circularBuffer[readIndex][13],
 8001fde:	4b6b      	ldr	r3, [pc, #428]	; (800218c <printRingBuf+0x330>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2334      	movs	r3, #52	; 0x34
 8001fe6:	fb03 f202 	mul.w	r2, r3, r2
 8001fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fec:	4413      	add	r3, r2
 8001fee:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8001ff2:	61bb      	str	r3, [r7, #24]
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15],
 8001ff4:	4b65      	ldr	r3, [pc, #404]	; (800218c <printRingBuf+0x330>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2334      	movs	r3, #52	; 0x34
 8001ffc:	fb03 f202 	mul.w	r2, r3, r2
 8002000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002002:	4413      	add	r3, r2
 8002004:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8002008:	617b      	str	r3, [r7, #20]
											circularBuffer[readIndex][14], 	circularBuffer[readIndex][15],
 800200a:	4b60      	ldr	r3, [pc, #384]	; (800218c <printRingBuf+0x330>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	2334      	movs	r3, #52	; 0x34
 8002012:	fb03 f202 	mul.w	r2, r3, r2
 8002016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002018:	4413      	add	r3, r2
 800201a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 800201e:	613b      	str	r3, [r7, #16]
											circularBuffer[readIndex][16], circularBuffer[readIndex][17],
 8002020:	4b5a      	ldr	r3, [pc, #360]	; (800218c <printRingBuf+0x330>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	2334      	movs	r3, #52	; 0x34
 8002028:	fb03 f202 	mul.w	r2, r3, r2
 800202c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202e:	4413      	add	r3, r2
 8002030:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8002034:	60fb      	str	r3, [r7, #12]
											circularBuffer[readIndex][16], circularBuffer[readIndex][17],
 8002036:	4b55      	ldr	r3, [pc, #340]	; (800218c <printRingBuf+0x330>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	2334      	movs	r3, #52	; 0x34
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002044:	4413      	add	r3, r2
 8002046:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 800204a:	60bb      	str	r3, [r7, #8]
											circularBuffer[readIndex][18], circularBuffer[readIndex][19],
 800204c:	4b4f      	ldr	r3, [pc, #316]	; (800218c <printRingBuf+0x330>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	2334      	movs	r3, #52	; 0x34
 8002054:	fb03 f202 	mul.w	r2, r3, r2
 8002058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800205a:	4413      	add	r3, r2
 800205c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8002060:	607b      	str	r3, [r7, #4]
											circularBuffer[readIndex][18], circularBuffer[readIndex][19],
 8002062:	4b4a      	ldr	r3, [pc, #296]	; (800218c <printRingBuf+0x330>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	2334      	movs	r3, #52	; 0x34
 800206a:	fb03 f202 	mul.w	r2, r3, r2
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002070:	4413      	add	r3, r2
 8002072:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 8002076:	603b      	str	r3, [r7, #0]
											circularBuffer[readIndex][20], circularBuffer[readIndex][21],
 8002078:	4b44      	ldr	r3, [pc, #272]	; (800218c <printRingBuf+0x330>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	2334      	movs	r3, #52	; 0x34
 8002080:	fb03 f202 	mul.w	r2, r3, r2
 8002084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002086:	4413      	add	r3, r2
 8002088:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 800208c:	461e      	mov	r6, r3
											circularBuffer[readIndex][20], circularBuffer[readIndex][21],
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <printRingBuf+0x330>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	2334      	movs	r3, #52	; 0x34
 8002096:	fb03 f202 	mul.w	r2, r3, r2
 800209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209c:	4413      	add	r3, r2
 800209e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 80020a2:	461d      	mov	r5, r3
											circularBuffer[readIndex][22], circularBuffer[readIndex][23],
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <printRingBuf+0x330>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	2334      	movs	r3, #52	; 0x34
 80020ac:	fb03 f202 	mul.w	r2, r3, r2
 80020b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b2:	4413      	add	r3, r2
 80020b4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 80020b8:	461c      	mov	r4, r3
											circularBuffer[readIndex][22], circularBuffer[readIndex][23],
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <printRingBuf+0x330>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	2334      	movs	r3, #52	; 0x34
 80020c2:	fb03 f202 	mul.w	r2, r3, r2
 80020c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c8:	4413      	add	r3, r2
 80020ca:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 80020ce:	4618      	mov	r0, r3
											circularBuffer[readIndex][24], circularBuffer[readIndex][25]);	// Update message for usart print
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <printRingBuf+0x330>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	2334      	movs	r3, #52	; 0x34
 80020d8:	fb03 f202 	mul.w	r2, r3, r2
 80020dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020de:	4413      	add	r3, r2
 80020e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 80020e4:	4619      	mov	r1, r3
											circularBuffer[readIndex][24], circularBuffer[readIndex][25]);	// Update message for usart print
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <printRingBuf+0x330>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	2334      	movs	r3, #52	; 0x34
 80020ee:	fb03 f202 	mul.w	r2, r3, r2
 80020f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f4:	4413      	add	r3, r2
 80020f6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
    	sprintf(msg, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",
 80020fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80020fc:	9116      	str	r1, [sp, #88]	; 0x58
 80020fe:	9015      	str	r0, [sp, #84]	; 0x54
 8002100:	9414      	str	r4, [sp, #80]	; 0x50
 8002102:	9513      	str	r5, [sp, #76]	; 0x4c
 8002104:	9612      	str	r6, [sp, #72]	; 0x48
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	9211      	str	r2, [sp, #68]	; 0x44
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	9210      	str	r2, [sp, #64]	; 0x40
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	920f      	str	r2, [sp, #60]	; 0x3c
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	920e      	str	r2, [sp, #56]	; 0x38
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	920d      	str	r2, [sp, #52]	; 0x34
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	920c      	str	r2, [sp, #48]	; 0x30
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	920b      	str	r2, [sp, #44]	; 0x2c
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	920a      	str	r2, [sp, #40]	; 0x28
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	9209      	str	r2, [sp, #36]	; 0x24
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	9208      	str	r2, [sp, #32]
 800212e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002130:	9207      	str	r2, [sp, #28]
 8002132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002134:	9206      	str	r2, [sp, #24]
 8002136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002138:	9205      	str	r2, [sp, #20]
 800213a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800213c:	9204      	str	r2, [sp, #16]
 800213e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002140:	9203      	str	r2, [sp, #12]
 8002142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002144:	9202      	str	r2, [sp, #8]
 8002146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002148:	9201      	str	r2, [sp, #4]
 800214a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	4673      	mov	r3, lr
 8002150:	4662      	mov	r2, ip
 8002152:	490f      	ldr	r1, [pc, #60]	; (8002190 <printRingBuf+0x334>)
 8002154:	480f      	ldr	r0, [pc, #60]	; (8002194 <printRingBuf+0x338>)
 8002156:	f004 fd15 	bl	8006b84 <siprintf>

    	// sprintf(msg, "[%d] = %d\r\n", readIndex, circularBuffer[readIndex]);	// Update message for usart print


    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800215a:	480e      	ldr	r0, [pc, #56]	; (8002194 <printRingBuf+0x338>)
 800215c:	f7fe f858 	bl	8000210 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	b29a      	uxth	r2, r3
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	490a      	ldr	r1, [pc, #40]	; (8002194 <printRingBuf+0x338>)
 800216a:	480b      	ldr	r0, [pc, #44]	; (8002198 <printRingBuf+0x33c>)
 800216c:	f003 fb89 	bl	8005882 <HAL_UART_Transmit>
    	huart2.Instance->CR3 |= USART_CR3_DMAT;
    	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg,
    							(uint32_t)&huart2.Instance->DR, strlen(msg));
		*/

        readIndex++;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <printRingBuf+0x330>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <printRingBuf+0x330>)
 800217a:	801a      	strh	r2, [r3, #0]
        if (readIndex > bufferSize) {
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <printRingBuf+0x330>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002184:	429a      	cmp	r2, r3
 8002186:	d20c      	bcs.n	80021a2 <printRingBuf+0x346>
 8002188:	e008      	b.n	800219c <printRingBuf+0x340>
 800218a:	bf00      	nop
 800218c:	200000aa 	.word	0x200000aa
 8002190:	08008208 	.word	0x08008208
 8002194:	200000ac 	.word	0x200000ac
 8002198:	20019b38 	.word	0x20019b38
            readIndex = 0;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <printRingBuf+0x364>)
 800219e:	2200      	movs	r2, #0
 80021a0:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferSize; i++)
 80021a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a4:	3301      	adds	r3, #1
 80021a6:	657b      	str	r3, [r7, #84]	; 0x54
 80021a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021ae:	429a      	cmp	r2, r3
 80021b0:	f6ff ae86 	blt.w	8001ec0 <printRingBuf+0x64>
        }
    }
    return 1;
 80021b4:	2301      	movs	r3, #1

}
 80021b6:	4618      	mov	r0, r3
 80021b8:	375c      	adds	r7, #92	; 0x5c
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021be:	bf00      	nop
 80021c0:	200000aa 	.word	0x200000aa

080021c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
}
 80021ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021cc:	e7fe      	b.n	80021cc <Error_Handler+0x8>
	...

080021d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_MspInit+0x4c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	4a0f      	ldr	r2, [pc, #60]	; (800221c <HAL_MspInit+0x4c>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e4:	6453      	str	r3, [r2, #68]	; 0x44
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_MspInit+0x4c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_MspInit+0x4c>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_MspInit+0x4c>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_MspInit+0x4c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800

08002220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08e      	sub	sp, #56	; 0x38
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_ADC_MspInit+0x134>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d128      	bne.n	8002294 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	4b44      	ldr	r3, [pc, #272]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a43      	ldr	r2, [pc, #268]	; (8002358 <HAL_ADC_MspInit+0x138>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	623b      	str	r3, [r7, #32]
 800225c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a3c      	ldr	r2, [pc, #240]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800227a:	2301      	movs	r3, #1
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800227e:	2303      	movs	r3, #3
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	4833      	ldr	r0, [pc, #204]	; (800235c <HAL_ADC_MspInit+0x13c>)
 800228e:	f001 fbfb 	bl	8003a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002292:	e05a      	b.n	800234a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_ADC_MspInit+0x140>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d128      	bne.n	80022f0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_ADC_MspInit+0x138>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <HAL_ADC_MspInit+0x138>)
 80022a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_ADC_MspInit+0x138>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_ADC_MspInit+0x138>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a25      	ldr	r2, [pc, #148]	; (8002358 <HAL_ADC_MspInit+0x138>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_ADC_MspInit+0x138>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022d6:	2302      	movs	r3, #2
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022da:	2303      	movs	r3, #3
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	481c      	ldr	r0, [pc, #112]	; (800235c <HAL_ADC_MspInit+0x13c>)
 80022ea:	f001 fbcd 	bl	8003a88 <HAL_GPIO_Init>
}
 80022ee:	e02c      	b.n	800234a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_ADC_MspInit+0x144>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d127      	bne.n	800234a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_ADC_MspInit+0x138>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_ADC_MspInit+0x138>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_ADC_MspInit+0x138>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002332:	2301      	movs	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002336:	2303      	movs	r3, #3
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	4808      	ldr	r0, [pc, #32]	; (8002368 <HAL_ADC_MspInit+0x148>)
 8002346:	f001 fb9f 	bl	8003a88 <HAL_GPIO_Init>
}
 800234a:	bf00      	nop
 800234c:	3738      	adds	r7, #56	; 0x38
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012000 	.word	0x40012000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000
 8002360:	40012100 	.word	0x40012100
 8002364:	40012200 	.word	0x40012200
 8002368:	40020800 	.word	0x40020800

0800236c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_DAC_MspInit+0x7c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d127      	bne.n	80023de <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_DAC_MspInit+0x80>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a15      	ldr	r2, [pc, #84]	; (80023ec <HAL_DAC_MspInit+0x80>)
 8002398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_DAC_MspInit+0x80>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_DAC_MspInit+0x80>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_DAC_MspInit+0x80>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_DAC_MspInit+0x80>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023c6:	2310      	movs	r3, #16
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ca:	2303      	movs	r3, #3
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <HAL_DAC_MspInit+0x84>)
 80023da:	f001 fb55 	bl	8003a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40007400 	.word	0x40007400
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020000 	.word	0x40020000

080023f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <HAL_TIM_Base_MspInit+0x80>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d116      	bne.n	8002434 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_TIM_Base_MspInit+0x84>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_TIM_Base_MspInit+0x84>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_TIM_Base_MspInit+0x84>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2019      	movs	r0, #25
 8002428:	f000 fe93 	bl	8003152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800242c:	2019      	movs	r0, #25
 800242e:	f000 feac 	bl	800318a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002432:	e01a      	b.n	800246a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a10      	ldr	r2, [pc, #64]	; (800247c <HAL_TIM_Base_MspInit+0x88>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d115      	bne.n	800246a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_TIM_Base_MspInit+0x84>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <HAL_TIM_Base_MspInit+0x84>)
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_TIM_Base_MspInit+0x84>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2019      	movs	r0, #25
 8002460:	f000 fe77 	bl	8003152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002464:	2019      	movs	r0, #25
 8002466:	f000 fe90 	bl	800318a <HAL_NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40010000 	.word	0x40010000
 8002478:	40023800 	.word	0x40023800
 800247c:	40014400 	.word	0x40014400

08002480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a34      	ldr	r2, [pc, #208]	; (8002570 <HAL_UART_MspInit+0xf0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d161      	bne.n	8002566 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4b33      	ldr	r3, [pc, #204]	; (8002574 <HAL_UART_MspInit+0xf4>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a32      	ldr	r2, [pc, #200]	; (8002574 <HAL_UART_MspInit+0xf4>)
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_UART_MspInit+0xf4>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_UART_MspInit+0xf4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <HAL_UART_MspInit+0xf4>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_UART_MspInit+0xf4>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024da:	230c      	movs	r3, #12
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ea:	2307      	movs	r3, #7
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	4820      	ldr	r0, [pc, #128]	; (8002578 <HAL_UART_MspInit+0xf8>)
 80024f6:	f001 fac7 	bl	8003a88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_UART_MspInit+0xfc>)
 80024fc:	4a20      	ldr	r2, [pc, #128]	; (8002580 <HAL_UART_MspInit+0x100>)
 80024fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002500:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_UART_MspInit+0xfc>)
 8002502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002506:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_UART_MspInit+0xfc>)
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_UART_MspInit+0xfc>)
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_UART_MspInit+0xfc>)
 8002516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800251a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_UART_MspInit+0xfc>)
 800251e:	2200      	movs	r2, #0
 8002520:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_UART_MspInit+0xfc>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_UART_MspInit+0xfc>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_UART_MspInit+0xfc>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_UART_MspInit+0xfc>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800253a:	4810      	ldr	r0, [pc, #64]	; (800257c <HAL_UART_MspInit+0xfc>)
 800253c:	f000 ff28 	bl	8003390 <HAL_DMA_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002546:	f7ff fe3d 	bl	80021c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_UART_MspInit+0xfc>)
 800254e:	635a      	str	r2, [r3, #52]	; 0x34
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <HAL_UART_MspInit+0xfc>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2026      	movs	r0, #38	; 0x26
 800255c:	f000 fdf9 	bl	8003152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002560:	2026      	movs	r0, #38	; 0x26
 8002562:	f000 fe12 	bl	800318a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40004400 	.word	0x40004400
 8002574:	40023800 	.word	0x40023800
 8002578:	40020000 	.word	0x40020000
 800257c:	200003e0 	.word	0x200003e0
 8002580:	400260a0 	.word	0x400260a0

08002584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <NMI_Handler+0x4>

0800258a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <HardFault_Handler+0x4>

08002590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <MemManage_Handler+0x4>

08002596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <BusFault_Handler+0x4>

0800259c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <UsageFault_Handler+0x4>

080025a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d0:	f000 f8e8 	bl	80027a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <DMA1_Stream6_IRQHandler+0x10>)
 80025de:	f001 f817 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200003e0 	.word	0x200003e0

080025ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025f0:	4803      	ldr	r0, [pc, #12]	; (8002600 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80025f2:	f002 fb32 	bl	8004c5a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80025f6:	4803      	ldr	r0, [pc, #12]	; (8002604 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80025f8:	f002 fb2f 	bl	8004c5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20019aa8 	.word	0x20019aa8
 8002604:	200002d8 	.word	0x200002d8

08002608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <USART2_IRQHandler+0x10>)
 800260e:	f003 f9cb 	bl	80059a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20019b38 	.word	0x20019b38

0800261c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <_sbrk+0x5c>)
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <_sbrk+0x60>)
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <_sbrk+0x64>)
 800263a:	4a12      	ldr	r2, [pc, #72]	; (8002684 <_sbrk+0x68>)
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <_sbrk+0x64>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	429a      	cmp	r2, r3
 800264a:	d207      	bcs.n	800265c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800264c:	f004 fa68 	bl	8006b20 <__errno>
 8002650:	4603      	mov	r3, r0
 8002652:	220c      	movs	r2, #12
 8002654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	e009      	b.n	8002670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	4a05      	ldr	r2, [pc, #20]	; (8002680 <_sbrk+0x64>)
 800266c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20020000 	.word	0x20020000
 800267c:	00000400 	.word	0x00000400
 8002680:	200001a8 	.word	0x200001a8
 8002684:	20019b98 	.word	0x20019b98

08002688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <SystemInit+0x20>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <SystemInit+0x20>)
 8002694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b0:	480d      	ldr	r0, [pc, #52]	; (80026e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026b2:	490e      	ldr	r1, [pc, #56]	; (80026ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026b4:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026c8:	4c0b      	ldr	r4, [pc, #44]	; (80026f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026d6:	f7ff ffd7 	bl	8002688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026da:	f004 fa27 	bl	8006b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7fe fc27 	bl	8000f30 <main>
  bx  lr    
 80026e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80026f0:	080086a8 	.word	0x080086a8
  ldr r2, =_sbss
 80026f4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80026f8:	20019b98 	.word	0x20019b98

080026fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_Init+0x40>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_Init+0x40>)
 800270a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_Init+0x40>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_Init+0x40>)
 8002716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_Init+0x40>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002728:	2003      	movs	r0, #3
 800272a:	f000 fd07 	bl	800313c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272e:	2000      	movs	r0, #0
 8002730:	f000 f808 	bl	8002744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002734:	f7ff fd4c 	bl	80021d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023c00 	.word	0x40023c00

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_InitTick+0x54>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_InitTick+0x58>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275a:	fbb3 f3f1 	udiv	r3, r3, r1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fd1f 	bl	80031a6 <HAL_SYSTICK_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00e      	b.n	8002790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d80a      	bhi.n	800278e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002778:	2200      	movs	r2, #0
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f000 fce7 	bl	8003152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <HAL_InitTick+0x5c>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	2000000c 	.word	0x2000000c
 800279c:	20000014 	.word	0x20000014
 80027a0:	20000010 	.word	0x20000010

080027a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_IncTick+0x20>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_IncTick+0x24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_IncTick+0x24>)
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000014 	.word	0x20000014
 80027c8:	20019b84 	.word	0x20019b84

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_GetTick+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20019b84 	.word	0x20019b84

080027e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e033      	b.n	8002862 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff fd0c 	bl	8002220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800282a:	f023 0302 	bic.w	r3, r3, #2
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fab4 	bl	8002da4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
 8002852:	e001      	b.n	8002858 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Start+0x1a>
 8002882:	2302      	movs	r3, #2
 8002884:	e0b2      	b.n	80029ec <HAL_ADC_Start+0x180>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d018      	beq.n	80028ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028ac:	4b52      	ldr	r3, [pc, #328]	; (80029f8 <HAL_ADC_Start+0x18c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a52      	ldr	r2, [pc, #328]	; (80029fc <HAL_ADC_Start+0x190>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9a      	lsrs	r2, r3, #18
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d17a      	bne.n	80029d2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002906:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291a:	d106      	bne.n	800292a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f023 0206 	bic.w	r2, r3, #6
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
 8002928:	e002      	b.n	8002930 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002938:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_ADC_Start+0x194>)
 800293a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002944:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2b00      	cmp	r3, #0
 8002950:	d12a      	bne.n	80029a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2b      	ldr	r2, [pc, #172]	; (8002a04 <HAL_ADC_Start+0x198>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d015      	beq.n	8002988 <HAL_ADC_Start+0x11c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a29      	ldr	r2, [pc, #164]	; (8002a08 <HAL_ADC_Start+0x19c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d105      	bne.n	8002972 <HAL_ADC_Start+0x106>
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_ADC_Start+0x194>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <HAL_ADC_Start+0x1a0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d136      	bne.n	80029ea <HAL_ADC_Start+0x17e>
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_ADC_Start+0x194>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	d130      	bne.n	80029ea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d129      	bne.n	80029ea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	e020      	b.n	80029ea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_ADC_Start+0x198>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11b      	bne.n	80029ea <HAL_ADC_Start+0x17e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d114      	bne.n	80029ea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e00b      	b.n	80029ea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f043 0210 	orr.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	2000000c 	.word	0x2000000c
 80029fc:	431bde83 	.word	0x431bde83
 8002a00:	40012300 	.word	0x40012300
 8002a04:	40012000 	.word	0x40012000
 8002a08:	40012100 	.word	0x40012100
 8002a0c:	40012200 	.word	0x40012200

08002a10 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2c:	d113      	bne.n	8002a56 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3c:	d10b      	bne.n	8002a56 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e063      	b.n	8002b1e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a56:	f7ff feb9 	bl	80027cc <HAL_GetTick>
 8002a5a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a5c:	e021      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d01d      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_ADC_PollForConversion+0x6c>
 8002a6c:	f7ff feae 	bl	80027cc <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d212      	bcs.n	8002aa2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d00b      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e03d      	b.n	8002b1e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d1d6      	bne.n	8002a5e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0212 	mvn.w	r2, #18
 8002ab8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d123      	bne.n	8002b1c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d11f      	bne.n	8002b1c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d111      	bne.n	8002b1c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1c>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e113      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x244>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	d925      	bls.n	8002bb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68d9      	ldr	r1, [r3, #12]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b1e      	subs	r3, #30
 8002b82:	2207      	movs	r2, #7
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	400a      	ands	r2, r1
 8002b90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68d9      	ldr	r1, [r3, #12]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4403      	add	r3, r0
 8002baa:	3b1e      	subs	r3, #30
 8002bac:	409a      	lsls	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	e022      	b.n	8002bfe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6919      	ldr	r1, [r3, #16]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	2207      	movs	r2, #7
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	400a      	ands	r2, r1
 8002bda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6919      	ldr	r1, [r3, #16]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4618      	mov	r0, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4403      	add	r3, r0
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d824      	bhi.n	8002c50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	3b05      	subs	r3, #5
 8002c18:	221f      	movs	r2, #31
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	400a      	ands	r2, r1
 8002c26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b05      	subs	r3, #5
 8002c42:	fa00 f203 	lsl.w	r2, r0, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c4e:	e04c      	b.n	8002cea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	d824      	bhi.n	8002ca2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	3b23      	subs	r3, #35	; 0x23
 8002c6a:	221f      	movs	r2, #31
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43da      	mvns	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	400a      	ands	r2, r1
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	3b23      	subs	r3, #35	; 0x23
 8002c94:	fa00 f203 	lsl.w	r2, r0, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca0:	e023      	b.n	8002cea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b41      	subs	r3, #65	; 0x41
 8002cb4:	221f      	movs	r2, #31
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b41      	subs	r3, #65	; 0x41
 8002cde:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cea:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_ADC_ConfigChannel+0x250>)
 8002cec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <HAL_ADC_ConfigChannel+0x254>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10f      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x1d8>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b12      	cmp	r3, #18
 8002cfe:	d10b      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_ADC_ConfigChannel+0x254>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d12b      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x23a>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_ADC_ConfigChannel+0x258>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x1f4>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b11      	cmp	r3, #17
 8002d32:	d122      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <HAL_ADC_ConfigChannel+0x258>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d111      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_ADC_ConfigChannel+0x25c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <HAL_ADC_ConfigChannel+0x260>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	0c9a      	lsrs	r2, r3, #18
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d6c:	e002      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f9      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40012300 	.word	0x40012300
 8002d94:	40012000 	.word	0x40012000
 8002d98:	10000012 	.word	0x10000012
 8002d9c:	2000000c 	.word	0x2000000c
 8002da0:	431bde83 	.word	0x431bde83

08002da4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dac:	4b79      	ldr	r3, [pc, #484]	; (8002f94 <ADC_Init+0x1f0>)
 8002dae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	021a      	lsls	r2, r3, #8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6899      	ldr	r1, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	4a58      	ldr	r2, [pc, #352]	; (8002f98 <ADC_Init+0x1f4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d022      	beq.n	8002e82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	e00f      	b.n	8002ea2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0202 	bic.w	r2, r2, #2
 8002eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7e1b      	ldrb	r3, [r3, #24]
 8002ebc:	005a      	lsls	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ede:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	3b01      	subs	r3, #1
 8002efc:	035a      	lsls	r2, r3, #13
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	e007      	b.n	8002f18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	051a      	lsls	r2, r3, #20
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f5a:	025a      	lsls	r2, r3, #9
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	029a      	lsls	r2, r3, #10
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40012300 	.word	0x40012300
 8002f98:	0f000001 	.word	0x0f000001

08002f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fce:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <__NVIC_GetPriorityGrouping+0x18>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	f003 0307 	and.w	r3, r3, #7
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	db0b      	blt.n	800302a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4907      	ldr	r1, [pc, #28]	; (8003038 <__NVIC_EnableIRQ+0x38>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2001      	movs	r0, #1
 8003022:	fa00 f202 	lsl.w	r2, r0, r2
 8003026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000e100 	.word	0xe000e100

0800303c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <__NVIC_SetPriority+0x50>)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f1c3 0307 	rsb	r3, r3, #7
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	bf28      	it	cs
 80030ae:	2304      	movcs	r3, #4
 80030b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d902      	bls.n	80030c0 <NVIC_EncodePriority+0x30>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b03      	subs	r3, #3
 80030be:	e000      	b.n	80030c2 <NVIC_EncodePriority+0x32>
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43d9      	mvns	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	4313      	orrs	r3, r2
         );
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003108:	d301      	bcc.n	800310e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310a:	2301      	movs	r3, #1
 800310c:	e00f      	b.n	800312e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <SysTick_Config+0x40>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003116:	210f      	movs	r1, #15
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	f7ff ff8e 	bl	800303c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <SysTick_Config+0x40>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <SysTick_Config+0x40>)
 8003128:	2207      	movs	r2, #7
 800312a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	e000e010 	.word	0xe000e010

0800313c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff29 	bl	8002f9c <__NVIC_SetPriorityGrouping>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003164:	f7ff ff3e 	bl	8002fe4 <__NVIC_GetPriorityGrouping>
 8003168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff ff8e 	bl	8003090 <NVIC_EncodePriority>
 8003174:	4602      	mov	r2, r0
 8003176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff5d 	bl	800303c <__NVIC_SetPriority>
}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff31 	bl	8003000 <__NVIC_EnableIRQ>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ffa2 	bl	80030f8 <SysTick_Config>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e014      	b.n	80031fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	791b      	ldrb	r3, [r3, #4]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff f8c3 	bl	800236c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	795b      	ldrb	r3, [r3, #5]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_DAC_Start+0x16>
 8003214:	2302      	movs	r3, #2
 8003216:	e040      	b.n	800329a <HAL_DAC_Start+0x98>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6819      	ldr	r1, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2201      	movs	r2, #1
 8003232:	409a      	lsls	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800324c:	2b3c      	cmp	r3, #60	; 0x3c
 800324e:	d11d      	bne.n	800328c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	e014      	b.n	800328c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	213c      	movs	r1, #60	; 0x3c
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	429a      	cmp	r2, r3
 800327a:	d107      	bne.n	800328c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0202 	orr.w	r2, r2, #2
 800328a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b087      	sub	sp, #28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	3308      	adds	r3, #8
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e004      	b.n	80032da <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	3314      	adds	r3, #20
 80032d8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	461a      	mov	r2, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	795b      	ldrb	r3, [r3, #5]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_DAC_ConfigChannel+0x18>
 8003304:	2302      	movs	r3, #2
 8003306:	e03c      	b.n	8003382 <HAL_DAC_ConfigChannel+0x92>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2202      	movs	r2, #2
 8003312:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4013      	ands	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	22c0      	movs	r2, #192	; 0xc0
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff fa16 	bl	80027cc <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e099      	b.n	80034e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033cc:	e00f      	b.n	80033ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ce:	f7ff f9fd 	bl	80027cc <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b05      	cmp	r3, #5
 80033da:	d908      	bls.n	80033ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2203      	movs	r2, #3
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e078      	b.n	80034e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e8      	bne.n	80033ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_DMA_Init+0x158>)
 8003408:	4013      	ands	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800341a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b04      	cmp	r3, #4
 8003446:	d107      	bne.n	8003458 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	4313      	orrs	r3, r2
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0307 	bic.w	r3, r3, #7
 800346e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2b04      	cmp	r3, #4
 8003480:	d117      	bne.n	80034b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00e      	beq.n	80034b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fa7b 	bl	8003990 <DMA_CheckFifoParam>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2240      	movs	r2, #64	; 0x40
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034ae:	2301      	movs	r3, #1
 80034b0:	e016      	b.n	80034e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa32 	bl	8003924 <DMA_CalcBaseAndBitshift>
 80034c0:	4603      	mov	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	223f      	movs	r2, #63	; 0x3f
 80034ca:	409a      	lsls	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	f010803f 	.word	0xf010803f

080034ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034fa:	f7ff f967 	bl	80027cc <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d008      	beq.n	800351e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e052      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0216 	bic.w	r2, r2, #22
 800352c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800353c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_DMA_Abort+0x62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356e:	e013      	b.n	8003598 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003570:	f7ff f92c 	bl	80027cc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b05      	cmp	r3, #5
 800357c:	d90c      	bls.n	8003598 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e015      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e4      	bne.n	8003570 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	223f      	movs	r2, #63	; 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00c      	b.n	8003604 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2205      	movs	r2, #5
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800361c:	4b92      	ldr	r3, [pc, #584]	; (8003868 <HAL_DMA_IRQHandler+0x258>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a92      	ldr	r2, [pc, #584]	; (800386c <HAL_DMA_IRQHandler+0x25c>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01a      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	2208      	movs	r2, #8
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f043 0201 	orr.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	2201      	movs	r2, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	2210      	movs	r2, #16
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d043      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03c      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	2210      	movs	r2, #16
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e01f      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e016      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0208 	bic.w	r2, r2, #8
 800376e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	2220      	movs	r2, #32
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808e 	beq.w	80038ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8086 	beq.w	80038ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d136      	bne.n	8003828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x1da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	223f      	movs	r2, #63	; 0x3f
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d07d      	beq.n	800391a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
        }
        return;
 8003826:	e078      	b.n	800391a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01c      	beq.n	8003870 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d108      	bne.n	8003856 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	2b00      	cmp	r3, #0
 800384a:	d030      	beq.n	80038ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e02b      	b.n	80038ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d027      	beq.n	80038ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
 8003866:	e022      	b.n	80038ae <HAL_DMA_IRQHandler+0x29e>
 8003868:	2000000c 	.word	0x2000000c
 800386c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0210 	bic.w	r2, r2, #16
 800388c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d032      	beq.n	800391c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2205      	movs	r2, #5
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3301      	adds	r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d307      	bcc.n	80038f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f2      	bne.n	80038da <HAL_DMA_IRQHandler+0x2ca>
 80038f4:	e000      	b.n	80038f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
 8003918:	e000      	b.n	800391c <HAL_DMA_IRQHandler+0x30c>
        return;
 800391a:	bf00      	nop
    }
  }
}
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop

08003924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	3b10      	subs	r3, #16
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <DMA_CalcBaseAndBitshift+0x64>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800393e:	4a13      	ldr	r2, [pc, #76]	; (800398c <DMA_CalcBaseAndBitshift+0x68>)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d909      	bls.n	8003966 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800395a:	f023 0303 	bic.w	r3, r3, #3
 800395e:	1d1a      	adds	r2, r3, #4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	659a      	str	r2, [r3, #88]	; 0x58
 8003964:	e007      	b.n	8003976 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	aaaaaaab 	.word	0xaaaaaaab
 800398c:	0800828c 	.word	0x0800828c

08003990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11f      	bne.n	80039ea <DMA_CheckFifoParam+0x5a>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d856      	bhi.n	8003a5e <DMA_CheckFifoParam+0xce>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <DMA_CheckFifoParam+0x28>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039db 	.word	0x080039db
 80039c0:	080039c9 	.word	0x080039c9
 80039c4:	08003a5f 	.word	0x08003a5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d046      	beq.n	8003a62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d8:	e043      	b.n	8003a62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039e2:	d140      	bne.n	8003a66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e8:	e03d      	b.n	8003a66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f2:	d121      	bne.n	8003a38 <DMA_CheckFifoParam+0xa8>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d837      	bhi.n	8003a6a <DMA_CheckFifoParam+0xda>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <DMA_CheckFifoParam+0x70>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a17 	.word	0x08003a17
 8003a08:	08003a11 	.word	0x08003a11
 8003a0c:	08003a29 	.word	0x08003a29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      break;
 8003a14:	e030      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d025      	beq.n	8003a6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a26:	e022      	b.n	8003a6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a30:	d11f      	bne.n	8003a72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a36:	e01c      	b.n	8003a72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d903      	bls.n	8003a46 <DMA_CheckFifoParam+0xb6>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d003      	beq.n	8003a4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a44:	e018      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4a:	e015      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e00b      	b.n	8003a76 <DMA_CheckFifoParam+0xe6>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e00a      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a62:	bf00      	nop
 8003a64:	e008      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a66:	bf00      	nop
 8003a68:	e006      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e004      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e002      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <DMA_CheckFifoParam+0xe8>
      break;
 8003a76:	bf00      	nop
    }
  } 
  
  return status; 
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e165      	b.n	8003d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f040 8154 	bne.w	8003d6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d005      	beq.n	8003ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d130      	bne.n	8003b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b10:	2201      	movs	r2, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 0201 	and.w	r2, r3, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d017      	beq.n	8003b78 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d123      	bne.n	8003bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	08da      	lsrs	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	08da      	lsrs	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3208      	adds	r2, #8
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80ae 	beq.w	8003d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	4b5d      	ldr	r3, [pc, #372]	; (8003d88 <HAL_GPIO_Init+0x300>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <HAL_GPIO_Init+0x300>)
 8003c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <HAL_GPIO_Init+0x300>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c2a:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <HAL_GPIO_Init+0x304>)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	3302      	adds	r3, #2
 8003c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	220f      	movs	r2, #15
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a4f      	ldr	r2, [pc, #316]	; (8003d90 <HAL_GPIO_Init+0x308>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d025      	beq.n	8003ca2 <HAL_GPIO_Init+0x21a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4e      	ldr	r2, [pc, #312]	; (8003d94 <HAL_GPIO_Init+0x30c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01f      	beq.n	8003c9e <HAL_GPIO_Init+0x216>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4d      	ldr	r2, [pc, #308]	; (8003d98 <HAL_GPIO_Init+0x310>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <HAL_GPIO_Init+0x212>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4c      	ldr	r2, [pc, #304]	; (8003d9c <HAL_GPIO_Init+0x314>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_GPIO_Init+0x20e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <HAL_GPIO_Init+0x318>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00d      	beq.n	8003c92 <HAL_GPIO_Init+0x20a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <HAL_GPIO_Init+0x31c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d007      	beq.n	8003c8e <HAL_GPIO_Init+0x206>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a49      	ldr	r2, [pc, #292]	; (8003da8 <HAL_GPIO_Init+0x320>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_GPIO_Init+0x202>
 8003c86:	2306      	movs	r3, #6
 8003c88:	e00c      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	e00a      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c8e:	2305      	movs	r3, #5
 8003c90:	e008      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c92:	2304      	movs	r3, #4
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c96:	2303      	movs	r3, #3
 8003c98:	e004      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e002      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_GPIO_Init+0x21c>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	f002 0203 	and.w	r2, r2, #3
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	4093      	lsls	r3, r2
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb4:	4935      	ldr	r1, [pc, #212]	; (8003d8c <HAL_GPIO_Init+0x304>)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	3302      	adds	r3, #2
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce6:	4a31      	ldr	r2, [pc, #196]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cec:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d16:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d64:	4a11      	ldr	r2, [pc, #68]	; (8003dac <HAL_GPIO_Init+0x324>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b0f      	cmp	r3, #15
 8003d74:	f67f ae96 	bls.w	8003aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3724      	adds	r7, #36	; 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	40020000 	.word	0x40020000
 8003d94:	40020400 	.word	0x40020400
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020c00 	.word	0x40020c00
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40021400 	.word	0x40021400
 8003da8:	40021800 	.word	0x40021800
 8003dac:	40013c00 	.word	0x40013c00

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dcc:	e003      	b.n	8003dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	041a      	lsls	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <HAL_PWREx_EnableOverDrive+0x94>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e10:	f7fe fcdc 	bl	80027cc <HAL_GetTick>
 8003e14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e16:	e009      	b.n	8003e2c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e18:	f7fe fcd8 	bl	80027cc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e26:	d901      	bls.n	8003e2c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e01f      	b.n	8003e6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d1ee      	bne.n	8003e18 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e40:	f7fe fcc4 	bl	80027cc <HAL_GetTick>
 8003e44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e46:	e009      	b.n	8003e5c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e48:	f7fe fcc0 	bl	80027cc <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e56:	d901      	bls.n	8003e5c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e007      	b.n	8003e6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e68:	d1ee      	bne.n	8003e48 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	420e0040 	.word	0x420e0040
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	420e0044 	.word	0x420e0044

08003e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0cc      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b68      	ldr	r3, [pc, #416]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d90c      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b65      	ldr	r3, [pc, #404]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b63      	ldr	r3, [pc, #396]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0b8      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed8:	4b59      	ldr	r3, [pc, #356]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a58      	ldr	r2, [pc, #352]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef0:	4b53      	ldr	r3, [pc, #332]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efc:	4b50      	ldr	r3, [pc, #320]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	494d      	ldr	r1, [pc, #308]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d044      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b47      	ldr	r3, [pc, #284]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d119      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e07f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f42:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e067      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b37      	ldr	r3, [pc, #220]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4934      	ldr	r1, [pc, #208]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f74:	f7fe fc2a 	bl	80027cc <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fe fc26 	bl	80027cc <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e04f      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d20c      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b20      	ldr	r3, [pc, #128]	; (800403c <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e032      	b.n	8004032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4916      	ldr	r1, [pc, #88]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	490e      	ldr	r1, [pc, #56]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800400a:	f000 f855 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490a      	ldr	r1, [pc, #40]	; (8004044 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	fa22 f303 	lsr.w	r3, r2, r3
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fb8a 	bl	8002744 <HAL_InitTick>

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023c00 	.word	0x40023c00
 8004040:	40023800 	.word	0x40023800
 8004044:	08008274 	.word	0x08008274
 8004048:	2000000c 	.word	0x2000000c
 800404c:	20000010 	.word	0x20000010

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a9b      	lsrs	r3, r3, #10
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	08008284 	.word	0x08008284

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004094:	f7ff ffdc 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0b5b      	lsrs	r3, r3, #13
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	; (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	08008284 	.word	0x08008284

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d4:	4bce      	ldr	r3, [pc, #824]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	f200 818d 	bhi.w	80043fc <HAL_RCC_GetSysClockFreq+0x344>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <HAL_RCC_GetSysClockFreq+0x30>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	080043fd 	.word	0x080043fd
 80040f0:	080043fd 	.word	0x080043fd
 80040f4:	080043fd 	.word	0x080043fd
 80040f8:	08004123 	.word	0x08004123
 80040fc:	080043fd 	.word	0x080043fd
 8004100:	080043fd 	.word	0x080043fd
 8004104:	080043fd 	.word	0x080043fd
 8004108:	08004129 	.word	0x08004129
 800410c:	080043fd 	.word	0x080043fd
 8004110:	080043fd 	.word	0x080043fd
 8004114:	080043fd 	.word	0x080043fd
 8004118:	0800429d 	.word	0x0800429d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4bbd      	ldr	r3, [pc, #756]	; (8004414 <HAL_RCC_GetSysClockFreq+0x35c>)
 800411e:	61bb      	str	r3, [r7, #24]
       break;
 8004120:	e16f      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004122:	4bbd      	ldr	r3, [pc, #756]	; (8004418 <HAL_RCC_GetSysClockFreq+0x360>)
 8004124:	61bb      	str	r3, [r7, #24]
      break;
 8004126:	e16c      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004128:	4bb9      	ldr	r3, [pc, #740]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004130:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004132:	4bb7      	ldr	r3, [pc, #732]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d053      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413e:	4bb4      	ldr	r3, [pc, #720]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	461a      	mov	r2, r3
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	ea02 0400 	and.w	r4, r2, r0
 8004156:	603c      	str	r4, [r7, #0]
 8004158:	400b      	ands	r3, r1
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004160:	4620      	mov	r0, r4
 8004162:	4629      	mov	r1, r5
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	014b      	lsls	r3, r1, #5
 800416e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004172:	0142      	lsls	r2, r0, #5
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	4623      	mov	r3, r4
 800417a:	1ac0      	subs	r0, r0, r3
 800417c:	462b      	mov	r3, r5
 800417e:	eb61 0103 	sbc.w	r1, r1, r3
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	018b      	lsls	r3, r1, #6
 800418c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004190:	0182      	lsls	r2, r0, #6
 8004192:	1a12      	subs	r2, r2, r0
 8004194:	eb63 0301 	sbc.w	r3, r3, r1
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	00d9      	lsls	r1, r3, #3
 80041a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041a6:	00d0      	lsls	r0, r2, #3
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4621      	mov	r1, r4
 80041ae:	1852      	adds	r2, r2, r1
 80041b0:	4629      	mov	r1, r5
 80041b2:	eb43 0101 	adc.w	r1, r3, r1
 80041b6:	460b      	mov	r3, r1
 80041b8:	f04f 0000 	mov.w	r0, #0
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	0259      	lsls	r1, r3, #9
 80041c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041c6:	0250      	lsls	r0, r2, #9
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	f7fc fd2e 	bl	8000c38 <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4613      	mov	r3, r2
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	e04c      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e6:	4b8a      	ldr	r3, [pc, #552]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	099b      	lsrs	r3, r3, #6
 80041ec:	461a      	mov	r2, r3
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	ea02 0a00 	and.w	sl, r2, r0
 80041fe:	ea03 0b01 	and.w	fp, r3, r1
 8004202:	4650      	mov	r0, sl
 8004204:	4659      	mov	r1, fp
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	014b      	lsls	r3, r1, #5
 8004210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004214:	0142      	lsls	r2, r0, #5
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	ebb0 000a 	subs.w	r0, r0, sl
 800421e:	eb61 010b 	sbc.w	r1, r1, fp
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	018b      	lsls	r3, r1, #6
 800422c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004230:	0182      	lsls	r2, r0, #6
 8004232:	1a12      	subs	r2, r2, r0
 8004234:	eb63 0301 	sbc.w	r3, r3, r1
 8004238:	f04f 0000 	mov.w	r0, #0
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	00d9      	lsls	r1, r3, #3
 8004242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004246:	00d0      	lsls	r0, r2, #3
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	eb12 020a 	adds.w	r2, r2, sl
 8004250:	eb43 030b 	adc.w	r3, r3, fp
 8004254:	f04f 0000 	mov.w	r0, #0
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	0299      	lsls	r1, r3, #10
 800425e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004262:	0290      	lsls	r0, r2, #10
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4610      	mov	r0, r2
 800426a:	4619      	mov	r1, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	461a      	mov	r2, r3
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	f7fc fce0 	bl	8000c38 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4613      	mov	r3, r2
 800427e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004280:	4b63      	ldr	r3, [pc, #396]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	3301      	adds	r3, #1
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	61bb      	str	r3, [r7, #24]
      break;
 800429a:	e0b2      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800429c:	4b5c      	ldr	r3, [pc, #368]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042a6:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d04d      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b2:	4b57      	ldr	r3, [pc, #348]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	461a      	mov	r2, r3
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	ea02 0800 	and.w	r8, r2, r0
 80042ca:	ea03 0901 	and.w	r9, r3, r1
 80042ce:	4640      	mov	r0, r8
 80042d0:	4649      	mov	r1, r9
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	014b      	lsls	r3, r1, #5
 80042dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042e0:	0142      	lsls	r2, r0, #5
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	ebb0 0008 	subs.w	r0, r0, r8
 80042ea:	eb61 0109 	sbc.w	r1, r1, r9
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	018b      	lsls	r3, r1, #6
 80042f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042fc:	0182      	lsls	r2, r0, #6
 80042fe:	1a12      	subs	r2, r2, r0
 8004300:	eb63 0301 	sbc.w	r3, r3, r1
 8004304:	f04f 0000 	mov.w	r0, #0
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	00d9      	lsls	r1, r3, #3
 800430e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004312:	00d0      	lsls	r0, r2, #3
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	eb12 0208 	adds.w	r2, r2, r8
 800431c:	eb43 0309 	adc.w	r3, r3, r9
 8004320:	f04f 0000 	mov.w	r0, #0
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	0259      	lsls	r1, r3, #9
 800432a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800432e:	0250      	lsls	r0, r2, #9
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	461a      	mov	r2, r3
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	f7fc fc7a 	bl	8000c38 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	e04a      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	461a      	mov	r2, r3
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	ea02 0400 	and.w	r4, r2, r0
 8004366:	ea03 0501 	and.w	r5, r3, r1
 800436a:	4620      	mov	r0, r4
 800436c:	4629      	mov	r1, r5
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	014b      	lsls	r3, r1, #5
 8004378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800437c:	0142      	lsls	r2, r0, #5
 800437e:	4610      	mov	r0, r2
 8004380:	4619      	mov	r1, r3
 8004382:	1b00      	subs	r0, r0, r4
 8004384:	eb61 0105 	sbc.w	r1, r1, r5
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	018b      	lsls	r3, r1, #6
 8004392:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004396:	0182      	lsls	r2, r0, #6
 8004398:	1a12      	subs	r2, r2, r0
 800439a:	eb63 0301 	sbc.w	r3, r3, r1
 800439e:	f04f 0000 	mov.w	r0, #0
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	00d9      	lsls	r1, r3, #3
 80043a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ac:	00d0      	lsls	r0, r2, #3
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	1912      	adds	r2, r2, r4
 80043b4:	eb45 0303 	adc.w	r3, r5, r3
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	0299      	lsls	r1, r3, #10
 80043c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043c6:	0290      	lsls	r0, r2, #10
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	f7fc fc2e 	bl	8000c38 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4613      	mov	r3, r2
 80043e2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_GetSysClockFreq+0x358>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	0f1b      	lsrs	r3, r3, #28
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	61bb      	str	r3, [r7, #24]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetSysClockFreq+0x35c>)
 80043fe:	61bb      	str	r3, [r7, #24]
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	69bb      	ldr	r3, [r7, #24]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	00f42400 	.word	0x00f42400
 8004418:	007a1200 	.word	0x007a1200

0800441c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e28d      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8083 	beq.w	8004542 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800443c:	4b94      	ldr	r3, [pc, #592]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b04      	cmp	r3, #4
 8004446:	d019      	beq.n	800447c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004448:	4b91      	ldr	r3, [pc, #580]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004450:	2b08      	cmp	r3, #8
 8004452:	d106      	bne.n	8004462 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004454:	4b8e      	ldr	r3, [pc, #568]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004460:	d00c      	beq.n	800447c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b8b      	ldr	r3, [pc, #556]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d112      	bne.n	8004494 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446e:	4b88      	ldr	r3, [pc, #544]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447a:	d10b      	bne.n	8004494 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447c:	4b84      	ldr	r3, [pc, #528]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d05b      	beq.n	8004540 <HAL_RCC_OscConfig+0x124>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d157      	bne.n	8004540 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e25a      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449c:	d106      	bne.n	80044ac <HAL_RCC_OscConfig+0x90>
 800449e:	4b7c      	ldr	r3, [pc, #496]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7b      	ldr	r2, [pc, #492]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e01d      	b.n	80044e8 <HAL_RCC_OscConfig+0xcc>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0xb4>
 80044b6:	4b76      	ldr	r3, [pc, #472]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a75      	ldr	r2, [pc, #468]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b73      	ldr	r3, [pc, #460]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a72      	ldr	r2, [pc, #456]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0xcc>
 80044d0:	4b6f      	ldr	r3, [pc, #444]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6e      	ldr	r2, [pc, #440]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b6c      	ldr	r3, [pc, #432]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a6b      	ldr	r2, [pc, #428]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80044e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fe f96c 	bl	80027cc <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fe f968 	bl	80027cc <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	; 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e21f      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	4b61      	ldr	r3, [pc, #388]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0xdc>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fe f958 	bl	80027cc <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004520:	f7fe f954 	bl	80027cc <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e20b      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	4b57      	ldr	r3, [pc, #348]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x104>
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d06f      	beq.n	800462e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800454e:	4b50      	ldr	r3, [pc, #320]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b00      	cmp	r3, #0
 8004558:	d017      	beq.n	800458a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800455a:	4b4d      	ldr	r3, [pc, #308]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004562:	2b08      	cmp	r3, #8
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004566:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004572:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d11c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457e:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d116      	bne.n	80045b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x186>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e1d3      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b3b      	ldr	r3, [pc, #236]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4937      	ldr	r1, [pc, #220]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	e03a      	b.n	800462e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d020      	beq.n	8004602 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c0:	4b34      	ldr	r3, [pc, #208]	; (8004694 <HAL_RCC_OscConfig+0x278>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fe f901 	bl	80027cc <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ce:	f7fe f8fd 	bl	80027cc <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e1b4      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ec:	4b28      	ldr	r3, [pc, #160]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4925      	ldr	r1, [pc, #148]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
 8004600:	e015      	b.n	800462e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_RCC_OscConfig+0x278>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fe f8e0 	bl	80027cc <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004610:	f7fe f8dc 	bl	80027cc <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e193      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d036      	beq.n	80046a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d016      	beq.n	8004670 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004642:	4b15      	ldr	r3, [pc, #84]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fe f8c0 	bl	80027cc <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004650:	f7fe f8bc 	bl	80027cc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e173      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCC_OscConfig+0x274>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x234>
 800466e:	e01b      	b.n	80046a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_RCC_OscConfig+0x27c>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fe f8a9 	bl	80027cc <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	e00e      	b.n	800469c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800467e:	f7fe f8a5 	bl	80027cc <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d907      	bls.n	800469c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e15c      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
 8004690:	40023800 	.word	0x40023800
 8004694:	42470000 	.word	0x42470000
 8004698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469c:	4b8a      	ldr	r3, [pc, #552]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800469e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ea      	bne.n	800467e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8097 	beq.w	80047e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ba:	4b83      	ldr	r3, [pc, #524]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	4b7f      	ldr	r3, [pc, #508]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a7e      	ldr	r2, [pc, #504]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
 80046d6:	4b7c      	ldr	r3, [pc, #496]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e6:	4b79      	ldr	r3, [pc, #484]	; (80048cc <HAL_RCC_OscConfig+0x4b0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f2:	4b76      	ldr	r3, [pc, #472]	; (80048cc <HAL_RCC_OscConfig+0x4b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a75      	ldr	r2, [pc, #468]	; (80048cc <HAL_RCC_OscConfig+0x4b0>)
 80046f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fe:	f7fe f865 	bl	80027cc <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004706:	f7fe f861 	bl	80027cc <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e118      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <HAL_RCC_OscConfig+0x4b0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x31e>
 800472c:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
 8004738:	e01c      	b.n	8004774 <HAL_RCC_OscConfig+0x358>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b05      	cmp	r3, #5
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x340>
 8004742:	4b61      	ldr	r3, [pc, #388]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a60      	ldr	r2, [pc, #384]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a5d      	ldr	r2, [pc, #372]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0x358>
 800475c:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	4a59      	ldr	r2, [pc, #356]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	6713      	str	r3, [r2, #112]	; 0x70
 8004768:	4b57      	ldr	r3, [pc, #348]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4a56      	ldr	r2, [pc, #344]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800476e:	f023 0304 	bic.w	r3, r3, #4
 8004772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fe f826 	bl	80027cc <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fe f822 	bl	80027cc <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e0d7      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479a:	4b4b      	ldr	r3, [pc, #300]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ee      	beq.n	8004784 <HAL_RCC_OscConfig+0x368>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fe f810 	bl	80027cc <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fe f80c 	bl	80027cc <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e0c1      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c6:	4b40      	ldr	r3, [pc, #256]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1ee      	bne.n	80047b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80047de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80ad 	beq.w	8004948 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ee:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d060      	beq.n	80048bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d145      	bne.n	800488e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	4b33      	ldr	r3, [pc, #204]	; (80048d0 <HAL_RCC_OscConfig+0x4b4>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd ffe0 	bl	80027cc <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004810:	f7fd ffdc 	bl	80027cc <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e093      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	4b29      	ldr	r3, [pc, #164]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	491b      	ldr	r1, [pc, #108]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_RCC_OscConfig+0x4b4>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fd ffb1 	bl	80027cc <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800486e:	f7fd ffad 	bl	80027cc <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e064      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x452>
 800488c:	e05c      	b.n	8004948 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_RCC_OscConfig+0x4b4>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd ff9a 	bl	80027cc <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489c:	f7fd ff96 	bl	80027cc <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e04d      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCC_OscConfig+0x4ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x480>
 80048ba:	e045      	b.n	8004948 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e040      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40007000 	.word	0x40007000
 80048d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048d4:	4b1f      	ldr	r3, [pc, #124]	; (8004954 <HAL_RCC_OscConfig+0x538>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d030      	beq.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d129      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d122      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800490a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800490c:	4293      	cmp	r3, r2
 800490e:	d119      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	3b01      	subs	r3, #1
 800491e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d10f      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d107      	bne.n	8004944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800

08004958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e041      	b.n	80049ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fd fd38 	bl	80023f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f000 fbac 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d001      	beq.n	8004a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e046      	b.n	8004a9e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <HAL_TIM_Base_Start+0xb4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2a:	d01d      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <HAL_TIM_Base_Start+0xb8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d018      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_TIM_Base_Start+0xbc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <HAL_TIM_Base_Start+0xc0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_TIM_Base_Start+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <HAL_TIM_Base_Start+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <HAL_TIM_Base_Start+0xcc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d010      	beq.n	8004a9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	e007      	b.n	8004a9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40010400 	.word	0x40010400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40001800 	.word	0x40001800

08004ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e04e      	b.n	8004b7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a23      	ldr	r2, [pc, #140]	; (8004b8c <HAL_TIM_Base_Start_IT+0xc4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d022      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x80>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d01d      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x80>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d018      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x80>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d013      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x80>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00e      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x80>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <HAL_TIM_Base_Start_IT+0xd4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d009      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x80>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x80>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d111      	bne.n	8004b6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b06      	cmp	r3, #6
 8004b58:	d010      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6a:	e007      	b.n	8004b7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40010400 	.word	0x40010400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40001800 	.word	0x40001800

08004ba8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e041      	b.n	8004c3e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f839 	bl	8004c46 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f000 fa84 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d122      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d11b      	bne.n	8004cb6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0202 	mvn.w	r2, #2
 8004c86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fa0b 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004ca2:	e005      	b.n	8004cb0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f9fd 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa0e 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d122      	bne.n	8004d0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d11b      	bne.n	8004d0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0204 	mvn.w	r2, #4
 8004cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f9e1 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004cf6:	e005      	b.n	8004d04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f9d3 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f9e4 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d122      	bne.n	8004d5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d11b      	bne.n	8004d5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f06f 0208 	mvn.w	r2, #8
 8004d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2204      	movs	r2, #4
 8004d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f9b7 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004d4a:	e005      	b.n	8004d58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9a9 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9ba 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d122      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d11b      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f06f 0210 	mvn.w	r2, #16
 8004d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2208      	movs	r2, #8
 8004d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f98d 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004d9e:	e005      	b.n	8004dac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f97f 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f990 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10e      	bne.n	8004dde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f06f 0201 	mvn.w	r2, #1
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fc fbf5 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d10e      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d107      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fce5 	bl	80057d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d10e      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f955 	bl	80050e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d10e      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f06f 0220 	mvn.w	r2, #32
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fcaf 	bl	80057c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e046      	b.n	8004f14 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d839      	bhi.n	8004f08 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <HAL_TIM_OC_ConfigChannel+0x30>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	08004f09 	.word	0x08004f09
 8004ea4:	08004f09 	.word	0x08004f09
 8004ea8:	08004f09 	.word	0x08004f09
 8004eac:	08004edf 	.word	0x08004edf
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f09 	.word	0x08004f09
 8004eb8:	08004f09 	.word	0x08004f09
 8004ebc:	08004eed 	.word	0x08004eed
 8004ec0:	08004f09 	.word	0x08004f09
 8004ec4:	08004f09 	.word	0x08004f09
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004efb 	.word	0x08004efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f9ac 	bl	8005234 <TIM_OC1_SetConfig>
      break;
 8004edc:	e015      	b.n	8004f0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fa15 	bl	8005314 <TIM_OC2_SetConfig>
      break;
 8004eea:	e00e      	b.n	8004f0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fa84 	bl	8005400 <TIM_OC3_SetConfig>
      break;
 8004ef8:	e007      	b.n	8004f0a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 faf1 	bl	80054e8 <TIM_OC4_SetConfig>
      break;
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004f08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_ConfigClockSource+0x18>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e0b3      	b.n	800509c <HAL_TIM_ConfigClockSource+0x180>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6c:	d03e      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0xd0>
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f72:	f200 8087 	bhi.w	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	f000 8085 	beq.w	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	d87f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d01a      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xa2>
 8004f88:	2b70      	cmp	r3, #112	; 0x70
 8004f8a:	d87b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d050      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x116>
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d877      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d03c      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xf6>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d873      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d058      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x136>
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d86f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d064      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x156>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d86b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d060      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x156>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d867      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x156>
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d05a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fbc:	e062      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f000 fb5b 	bl	8005688 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	609a      	str	r2, [r3, #8]
      break;
 8004fea:	e04e      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f000 fb44 	bl	8005688 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500e:	609a      	str	r2, [r3, #8]
      break;
 8005010:	e03b      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f000 fab8 	bl	8005594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2150      	movs	r1, #80	; 0x50
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fb11 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 8005030:	e02b      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fad7 	bl	80055f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2160      	movs	r1, #96	; 0x60
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fb01 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 8005050:	e01b      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	461a      	mov	r2, r3
 8005060:	f000 fa98 	bl	8005594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f000 faf1 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 8005070:	e00b      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f000 fae8 	bl	8005652 <TIM_ITRx_SetConfig>
        break;
 8005082:	e002      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005084:	bf00      	nop
 8005086:	e000      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005088:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a40      	ldr	r2, [pc, #256]	; (8005208 <TIM_Base_SetConfig+0x114>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d00f      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3d      	ldr	r2, [pc, #244]	; (800520c <TIM_Base_SetConfig+0x118>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3c      	ldr	r2, [pc, #240]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <TIM_Base_SetConfig+0x120>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d108      	bne.n	8005146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <TIM_Base_SetConfig+0x114>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d027      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2c      	ldr	r2, [pc, #176]	; (800520c <TIM_Base_SetConfig+0x118>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d023      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <TIM_Base_SetConfig+0x120>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a28      	ldr	r2, [pc, #160]	; (800521c <TIM_Base_SetConfig+0x128>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <TIM_Base_SetConfig+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <TIM_Base_SetConfig+0x130>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <TIM_Base_SetConfig+0x134>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a24      	ldr	r2, [pc, #144]	; (800522c <TIM_Base_SetConfig+0x138>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a23      	ldr	r2, [pc, #140]	; (8005230 <TIM_Base_SetConfig+0x13c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <TIM_Base_SetConfig+0x114>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40010400 	.word	0x40010400
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800
 8005228:	40001800 	.word	0x40001800
 800522c:	40001c00 	.word	0x40001c00
 8005230:	40002000 	.word	0x40002000

08005234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f023 0201 	bic.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0303 	bic.w	r3, r3, #3
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 0302 	bic.w	r3, r3, #2
 800527c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a20      	ldr	r2, [pc, #128]	; (800530c <TIM_OC1_SetConfig+0xd8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_OC1_SetConfig+0x64>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <TIM_OC1_SetConfig+0xdc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d10c      	bne.n	80052b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0308 	bic.w	r3, r3, #8
 800529e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0304 	bic.w	r3, r3, #4
 80052b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <TIM_OC1_SetConfig+0xd8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_OC1_SetConfig+0x8e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a14      	ldr	r2, [pc, #80]	; (8005310 <TIM_OC1_SetConfig+0xdc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40010000 	.word	0x40010000
 8005310:	40010400 	.word	0x40010400

08005314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f023 0210 	bic.w	r2, r3, #16
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0320 	bic.w	r3, r3, #32
 800535e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <TIM_OC2_SetConfig+0xe4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_OC2_SetConfig+0x68>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a21      	ldr	r2, [pc, #132]	; (80053fc <TIM_OC2_SetConfig+0xe8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d10d      	bne.n	8005398 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005396:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <TIM_OC2_SetConfig+0xe4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC2_SetConfig+0x94>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a16      	ldr	r2, [pc, #88]	; (80053fc <TIM_OC2_SetConfig+0xe8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d113      	bne.n	80053d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40010400 	.word	0x40010400

08005400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <TIM_OC3_SetConfig+0xe0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC3_SetConfig+0x66>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a20      	ldr	r2, [pc, #128]	; (80054e4 <TIM_OC3_SetConfig+0xe4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <TIM_OC3_SetConfig+0xe0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_OC3_SetConfig+0x92>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <TIM_OC3_SetConfig+0xe4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d113      	bne.n	80054ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400

080054e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	031b      	lsls	r3, r3, #12
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a12      	ldr	r2, [pc, #72]	; (800558c <TIM_OC4_SetConfig+0xa4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_OC4_SetConfig+0x68>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a11      	ldr	r2, [pc, #68]	; (8005590 <TIM_OC4_SetConfig+0xa8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d109      	bne.n	8005564 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	019b      	lsls	r3, r3, #6
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	40010400 	.word	0x40010400

08005594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0201 	bic.w	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 030a 	bic.w	r3, r3, #10
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f023 0210 	bic.w	r2, r3, #16
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800561c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	f043 0307 	orr.w	r3, r3, #7
 8005674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056dc:	2302      	movs	r3, #2
 80056de:	e05a      	b.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a21      	ldr	r2, [pc, #132]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d022      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d01d      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d018      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00e      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a15      	ldr	r2, [pc, #84]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d10c      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	4313      	orrs	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40001800 	.word	0x40001800

080057c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e03f      	b.n	800587a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fc fe36 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	; 0x24
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800582a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fc1b 	bl	8006068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	; 0x28
 8005886:	af02      	add	r7, sp, #8
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	4613      	mov	r3, r2
 8005890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d17c      	bne.n	800599c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <HAL_UART_Transmit+0x2c>
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e075      	b.n	800599e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_UART_Transmit+0x3e>
 80058bc:	2302      	movs	r3, #2
 80058be:	e06e      	b.n	800599e <HAL_UART_Transmit+0x11c>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2221      	movs	r2, #33	; 0x21
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058d6:	f7fc ff79 	bl	80027cc <HAL_GetTick>
 80058da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f0:	d108      	bne.n	8005904 <HAL_UART_Transmit+0x82>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d104      	bne.n	8005904 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	e003      	b.n	800590c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005914:	e02a      	b.n	800596c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2200      	movs	r2, #0
 800591e:	2180      	movs	r1, #128	; 0x80
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fa17 	bl	8005d54 <UART_WaitOnFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e036      	b.n	800599e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	3302      	adds	r3, #2
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	e007      	b.n	800595e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1cf      	bne.n	8005916 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	2140      	movs	r1, #64	; 0x40
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f9e7 	bl	8005d54 <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e006      	b.n	800599e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e000      	b.n	800599e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10d      	bne.n	80059fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_UART_IRQHandler+0x52>
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 faa1 	bl	8005f3a <UART_Receive_IT>
      return;
 80059f8:	e17c      	b.n	8005cf4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80b1 	beq.w	8005b64 <HAL_UART_IRQHandler+0x1bc>
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <HAL_UART_IRQHandler+0x70>
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80a6 	beq.w	8005b64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_UART_IRQHandler+0x90>
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	f043 0201 	orr.w	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_UART_IRQHandler+0xb0>
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	f043 0202 	orr.w	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <HAL_UART_IRQHandler+0xd0>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	f043 0204 	orr.w	r2, r3, #4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00f      	beq.n	8005aa2 <HAL_UART_IRQHandler+0xfa>
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_UART_IRQHandler+0xee>
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0208 	orr.w	r2, r3, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 811f 	beq.w	8005cea <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x11e>
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fa3a 	bl	8005f3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <HAL_UART_IRQHandler+0x146>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d031      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f97a 	bl	8005de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d123      	bne.n	8005b4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695a      	ldr	r2, [r3, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	4a77      	ldr	r2, [pc, #476]	; (8005cfc <HAL_UART_IRQHandler+0x354>)
 8005b20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fd fd50 	bl	80035cc <HAL_DMA_Abort_IT>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e00e      	b.n	8005b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8f0 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e00a      	b.n	8005b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8ec 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e006      	b.n	8005b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8e8 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b5e:	e0c4      	b.n	8005cea <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	bf00      	nop
    return;
 8005b62:	e0c2      	b.n	8005cea <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 80a2 	bne.w	8005cb2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 809c 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8096 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d14f      	bne.n	8005c4a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005bb4:	8a3b      	ldrh	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8099 	beq.w	8005cee <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bc0:	8a3a      	ldrh	r2, [r7, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	f080 8093 	bcs.w	8005cee <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8a3a      	ldrh	r2, [r7, #16]
 8005bcc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	d02b      	beq.n	8005c32 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695a      	ldr	r2, [r3, #20]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c08:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0210 	bic.w	r2, r2, #16
 8005c26:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fd fc5d 	bl	80034ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f87a 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c48:	e051      	b.n	8005cee <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d047      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005c62:	8a7b      	ldrh	r3, [r7, #18]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d044      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c76:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0201 	bic.w	r2, r2, #1
 8005c86:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0210 	bic.w	r2, r2, #16
 8005ca4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ca6:	8a7b      	ldrh	r3, [r7, #18]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f846 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cb0:	e01f      	b.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <HAL_UART_IRQHandler+0x326>
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8cf 	bl	8005e6a <UART_Transmit_IT>
    return;
 8005ccc:	e012      	b.n	8005cf4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00d      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x34c>
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f911 	bl	8005f0a <UART_EndTransmit_IT>
    return;
 8005ce8:	e004      	b.n	8005cf4 <HAL_UART_IRQHandler+0x34c>
    return;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <HAL_UART_IRQHandler+0x34c>
      return;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_UART_IRQHandler+0x34c>
      return;
 8005cf2:	bf00      	nop
  }
}
 8005cf4:	3728      	adds	r7, #40	; 0x28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	08005e43 	.word	0x08005e43

08005d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d64:	e02c      	b.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d028      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d74:	f7fc fd2a 	bl	80027cc <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d21d      	bcs.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695a      	ldr	r2, [r3, #20]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e00f      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	bf0c      	ite	eq
 8005dd0:	2301      	moveq	r3, #1
 8005dd2:	2300      	movne	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d0c3      	beq.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dfe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d107      	bne.n	8005e28 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0210 	bic.w	r2, r2, #16
 8005e26:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff ff63 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b21      	cmp	r3, #33	; 0x21
 8005e7c:	d13e      	bne.n	8005efc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e86:	d114      	bne.n	8005eb2 <UART_Transmit_IT+0x48>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d110      	bne.n	8005eb2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	1c9a      	adds	r2, r3, #2
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	621a      	str	r2, [r3, #32]
 8005eb0:	e008      	b.n	8005ec4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6211      	str	r1, [r2, #32]
 8005ebc:	781a      	ldrb	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10f      	bne.n	8005ef8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fee8 	bl	8005d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b22      	cmp	r3, #34	; 0x22
 8005f4c:	f040 8087 	bne.w	800605e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f58:	d117      	bne.n	8005f8a <UART_Receive_IT+0x50>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d113      	bne.n	8005f8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	1c9a      	adds	r2, r3, #2
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	629a      	str	r2, [r3, #40]	; 0x28
 8005f88:	e026      	b.n	8005fd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9c:	d007      	beq.n	8005fae <UART_Receive_IT+0x74>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <UART_Receive_IT+0x82>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e008      	b.n	8005fce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d136      	bne.n	800605a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0220 	bic.w	r2, r2, #32
 8005ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800600a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	2b01      	cmp	r3, #1
 800602a:	d10e      	bne.n	800604a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0210 	bic.w	r2, r2, #16
 800603a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fe7a 	bl	8005d3c <HAL_UARTEx_RxEventCallback>
 8006048:	e002      	b.n	8006050 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fe62 	bl	8005d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e002      	b.n	8006060 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	b09f      	sub	sp, #124	; 0x7c
 800606e:	af00      	add	r7, sp, #0
 8006070:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800607c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607e:	68d9      	ldr	r1, [r3, #12]
 8006080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	ea40 0301 	orr.w	r3, r0, r1
 8006088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800608a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	431a      	orrs	r2, r3
 8006094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	431a      	orrs	r2, r3
 800609a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	4313      	orrs	r3, r2
 80060a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80060a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060ac:	f021 010c 	bic.w	r1, r1, #12
 80060b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060b6:	430b      	orrs	r3, r1
 80060b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c6:	6999      	ldr	r1, [r3, #24]
 80060c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	ea40 0301 	orr.w	r3, r0, r1
 80060d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4bc5      	ldr	r3, [pc, #788]	; (80063ec <UART_SetConfig+0x384>)
 80060d8:	429a      	cmp	r2, r3
 80060da:	d004      	beq.n	80060e6 <UART_SetConfig+0x7e>
 80060dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4bc3      	ldr	r3, [pc, #780]	; (80063f0 <UART_SetConfig+0x388>)
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d103      	bne.n	80060ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060e6:	f7fd ffd3 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 80060ea:	6778      	str	r0, [r7, #116]	; 0x74
 80060ec:	e002      	b.n	80060f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ee:	f7fd ffbb 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 80060f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fc:	f040 80b6 	bne.w	800626c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006102:	461c      	mov	r4, r3
 8006104:	f04f 0500 	mov.w	r5, #0
 8006108:	4622      	mov	r2, r4
 800610a:	462b      	mov	r3, r5
 800610c:	1891      	adds	r1, r2, r2
 800610e:	6439      	str	r1, [r7, #64]	; 0x40
 8006110:	415b      	adcs	r3, r3
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
 8006114:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006118:	1912      	adds	r2, r2, r4
 800611a:	eb45 0303 	adc.w	r3, r5, r3
 800611e:	f04f 0000 	mov.w	r0, #0
 8006122:	f04f 0100 	mov.w	r1, #0
 8006126:	00d9      	lsls	r1, r3, #3
 8006128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800612c:	00d0      	lsls	r0, r2, #3
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	1911      	adds	r1, r2, r4
 8006134:	6639      	str	r1, [r7, #96]	; 0x60
 8006136:	416b      	adcs	r3, r5
 8006138:	667b      	str	r3, [r7, #100]	; 0x64
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	461a      	mov	r2, r3
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	1891      	adds	r1, r2, r2
 8006146:	63b9      	str	r1, [r7, #56]	; 0x38
 8006148:	415b      	adcs	r3, r3
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800614c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006150:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006154:	f7fa fd70 	bl	8000c38 <__aeabi_uldivmod>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4ba5      	ldr	r3, [pc, #660]	; (80063f4 <UART_SetConfig+0x38c>)
 800615e:	fba3 2302 	umull	r2, r3, r3, r2
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	011e      	lsls	r6, r3, #4
 8006166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006168:	461c      	mov	r4, r3
 800616a:	f04f 0500 	mov.w	r5, #0
 800616e:	4622      	mov	r2, r4
 8006170:	462b      	mov	r3, r5
 8006172:	1891      	adds	r1, r2, r2
 8006174:	6339      	str	r1, [r7, #48]	; 0x30
 8006176:	415b      	adcs	r3, r3
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
 800617a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800617e:	1912      	adds	r2, r2, r4
 8006180:	eb45 0303 	adc.w	r3, r5, r3
 8006184:	f04f 0000 	mov.w	r0, #0
 8006188:	f04f 0100 	mov.w	r1, #0
 800618c:	00d9      	lsls	r1, r3, #3
 800618e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006192:	00d0      	lsls	r0, r2, #3
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	1911      	adds	r1, r2, r4
 800619a:	65b9      	str	r1, [r7, #88]	; 0x58
 800619c:	416b      	adcs	r3, r5
 800619e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	461a      	mov	r2, r3
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	1891      	adds	r1, r2, r2
 80061ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80061ae:	415b      	adcs	r3, r3
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80061ba:	f7fa fd3d 	bl	8000c38 <__aeabi_uldivmod>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4b8c      	ldr	r3, [pc, #560]	; (80063f4 <UART_SetConfig+0x38c>)
 80061c4:	fba3 1302 	umull	r1, r3, r3, r2
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	2164      	movs	r1, #100	; 0x64
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	3332      	adds	r3, #50	; 0x32
 80061d6:	4a87      	ldr	r2, [pc, #540]	; (80063f4 <UART_SetConfig+0x38c>)
 80061d8:	fba2 2303 	umull	r2, r3, r2, r3
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061e4:	441e      	add	r6, r3
 80061e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e8:	4618      	mov	r0, r3
 80061ea:	f04f 0100 	mov.w	r1, #0
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	1894      	adds	r4, r2, r2
 80061f4:	623c      	str	r4, [r7, #32]
 80061f6:	415b      	adcs	r3, r3
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061fe:	1812      	adds	r2, r2, r0
 8006200:	eb41 0303 	adc.w	r3, r1, r3
 8006204:	f04f 0400 	mov.w	r4, #0
 8006208:	f04f 0500 	mov.w	r5, #0
 800620c:	00dd      	lsls	r5, r3, #3
 800620e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006212:	00d4      	lsls	r4, r2, #3
 8006214:	4622      	mov	r2, r4
 8006216:	462b      	mov	r3, r5
 8006218:	1814      	adds	r4, r2, r0
 800621a:	653c      	str	r4, [r7, #80]	; 0x50
 800621c:	414b      	adcs	r3, r1
 800621e:	657b      	str	r3, [r7, #84]	; 0x54
 8006220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	461a      	mov	r2, r3
 8006226:	f04f 0300 	mov.w	r3, #0
 800622a:	1891      	adds	r1, r2, r2
 800622c:	61b9      	str	r1, [r7, #24]
 800622e:	415b      	adcs	r3, r3
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006236:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800623a:	f7fa fcfd 	bl	8000c38 <__aeabi_uldivmod>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4b6c      	ldr	r3, [pc, #432]	; (80063f4 <UART_SetConfig+0x38c>)
 8006244:	fba3 1302 	umull	r1, r3, r3, r2
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	2164      	movs	r1, #100	; 0x64
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	3332      	adds	r3, #50	; 0x32
 8006256:	4a67      	ldr	r2, [pc, #412]	; (80063f4 <UART_SetConfig+0x38c>)
 8006258:	fba2 2303 	umull	r2, r3, r2, r3
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	f003 0207 	and.w	r2, r3, #7
 8006262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4432      	add	r2, r6
 8006268:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800626a:	e0b9      	b.n	80063e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800626c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800626e:	461c      	mov	r4, r3
 8006270:	f04f 0500 	mov.w	r5, #0
 8006274:	4622      	mov	r2, r4
 8006276:	462b      	mov	r3, r5
 8006278:	1891      	adds	r1, r2, r2
 800627a:	6139      	str	r1, [r7, #16]
 800627c:	415b      	adcs	r3, r3
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006284:	1912      	adds	r2, r2, r4
 8006286:	eb45 0303 	adc.w	r3, r5, r3
 800628a:	f04f 0000 	mov.w	r0, #0
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	00d9      	lsls	r1, r3, #3
 8006294:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006298:	00d0      	lsls	r0, r2, #3
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	eb12 0804 	adds.w	r8, r2, r4
 80062a2:	eb43 0905 	adc.w	r9, r3, r5
 80062a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f04f 0100 	mov.w	r1, #0
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	008b      	lsls	r3, r1, #2
 80062ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062be:	0082      	lsls	r2, r0, #2
 80062c0:	4640      	mov	r0, r8
 80062c2:	4649      	mov	r1, r9
 80062c4:	f7fa fcb8 	bl	8000c38 <__aeabi_uldivmod>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4b49      	ldr	r3, [pc, #292]	; (80063f4 <UART_SetConfig+0x38c>)
 80062ce:	fba3 2302 	umull	r2, r3, r3, r2
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	011e      	lsls	r6, r3, #4
 80062d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d8:	4618      	mov	r0, r3
 80062da:	f04f 0100 	mov.w	r1, #0
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	1894      	adds	r4, r2, r2
 80062e4:	60bc      	str	r4, [r7, #8]
 80062e6:	415b      	adcs	r3, r3
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062ee:	1812      	adds	r2, r2, r0
 80062f0:	eb41 0303 	adc.w	r3, r1, r3
 80062f4:	f04f 0400 	mov.w	r4, #0
 80062f8:	f04f 0500 	mov.w	r5, #0
 80062fc:	00dd      	lsls	r5, r3, #3
 80062fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006302:	00d4      	lsls	r4, r2, #3
 8006304:	4622      	mov	r2, r4
 8006306:	462b      	mov	r3, r5
 8006308:	1814      	adds	r4, r2, r0
 800630a:	64bc      	str	r4, [r7, #72]	; 0x48
 800630c:	414b      	adcs	r3, r1
 800630e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4618      	mov	r0, r3
 8006316:	f04f 0100 	mov.w	r1, #0
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	008b      	lsls	r3, r1, #2
 8006324:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006328:	0082      	lsls	r2, r0, #2
 800632a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800632e:	f7fa fc83 	bl	8000c38 <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4b2f      	ldr	r3, [pc, #188]	; (80063f4 <UART_SetConfig+0x38c>)
 8006338:	fba3 1302 	umull	r1, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	2164      	movs	r1, #100	; 0x64
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	3332      	adds	r3, #50	; 0x32
 800634a:	4a2a      	ldr	r2, [pc, #168]	; (80063f4 <UART_SetConfig+0x38c>)
 800634c:	fba2 2303 	umull	r2, r3, r2, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006356:	441e      	add	r6, r3
 8006358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800635a:	4618      	mov	r0, r3
 800635c:	f04f 0100 	mov.w	r1, #0
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	1894      	adds	r4, r2, r2
 8006366:	603c      	str	r4, [r7, #0]
 8006368:	415b      	adcs	r3, r3
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006370:	1812      	adds	r2, r2, r0
 8006372:	eb41 0303 	adc.w	r3, r1, r3
 8006376:	f04f 0400 	mov.w	r4, #0
 800637a:	f04f 0500 	mov.w	r5, #0
 800637e:	00dd      	lsls	r5, r3, #3
 8006380:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006384:	00d4      	lsls	r4, r2, #3
 8006386:	4622      	mov	r2, r4
 8006388:	462b      	mov	r3, r5
 800638a:	eb12 0a00 	adds.w	sl, r2, r0
 800638e:	eb43 0b01 	adc.w	fp, r3, r1
 8006392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4618      	mov	r0, r3
 8006398:	f04f 0100 	mov.w	r1, #0
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	008b      	lsls	r3, r1, #2
 80063a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063aa:	0082      	lsls	r2, r0, #2
 80063ac:	4650      	mov	r0, sl
 80063ae:	4659      	mov	r1, fp
 80063b0:	f7fa fc42 	bl	8000c38 <__aeabi_uldivmod>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <UART_SetConfig+0x38c>)
 80063ba:	fba3 1302 	umull	r1, r3, r3, r2
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	2164      	movs	r1, #100	; 0x64
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	3332      	adds	r3, #50	; 0x32
 80063cc:	4a09      	ldr	r2, [pc, #36]	; (80063f4 <UART_SetConfig+0x38c>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	f003 020f 	and.w	r2, r3, #15
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4432      	add	r2, r6
 80063de:	609a      	str	r2, [r3, #8]
}
 80063e0:	bf00      	nop
 80063e2:	377c      	adds	r7, #124	; 0x7c
 80063e4:	46bd      	mov	sp, r7
 80063e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ea:	bf00      	nop
 80063ec:	40011000 	.word	0x40011000
 80063f0:	40011400 	.word	0x40011400
 80063f4:	51eb851f 	.word	0x51eb851f

080063f8 <maf>:
// This file contains functions that are associated with moving average filter
#define MAF_LEN 20


void maf(float *nextSampleD, float *nextSampleQ, float *mafD, float *mafQ)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
	static int pos;
	static float sampleArrD[MAF_LEN], sampleArrQ[MAF_LEN], sumD, sumQ;

	sumD = sumD - sampleArrD[pos] + *nextSampleD;
 8006406:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <maf+0xac>)
 8006408:	ed93 7a00 	vldr	s14, [r3]
 800640c:	4b26      	ldr	r3, [pc, #152]	; (80064a8 <maf+0xb0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a26      	ldr	r2, [pc, #152]	; (80064ac <maf+0xb4>)
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	edd3 7a00 	vldr	s15, [r3]
 800641a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	edd3 7a00 	vldr	s15, [r3]
 8006424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006428:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <maf+0xac>)
 800642a:	edc3 7a00 	vstr	s15, [r3]
	sumQ = sumQ - sampleArrQ[pos] + *nextSampleQ;
 800642e:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <maf+0xb8>)
 8006430:	ed93 7a00 	vldr	s14, [r3]
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <maf+0xb0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1e      	ldr	r2, [pc, #120]	; (80064b4 <maf+0xbc>)
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	edd3 7a00 	vldr	s15, [r3]
 8006442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	edd3 7a00 	vldr	s15, [r3]
 800644c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006450:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <maf+0xb8>)
 8006452:	edc3 7a00 	vstr	s15, [r3]

	pos++;
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <maf+0xb0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	4a12      	ldr	r2, [pc, #72]	; (80064a8 <maf+0xb0>)
 800645e:	6013      	str	r3, [r2, #0]
	if (pos >= MAF_LEN) {
 8006460:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <maf+0xb0>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b13      	cmp	r3, #19
 8006466:	dd02      	ble.n	800646e <maf+0x76>
		pos = 0;
 8006468:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <maf+0xb0>)
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
	}

	*mafD = sumD/(float)MAF_LEN;
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <maf+0xac>)
 8006470:	ed93 7a00 	vldr	s14, [r3]
 8006474:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	edc3 7a00 	vstr	s15, [r3]
	*mafQ = sumQ/(float)MAF_LEN;
 8006482:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <maf+0xb8>)
 8006484:	ed93 7a00 	vldr	s14, [r3]
 8006488:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800648c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	edc3 7a00 	vstr	s15, [r3]
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	200001ac 	.word	0x200001ac
 80064a8:	200001b0 	.word	0x200001b0
 80064ac:	200001b4 	.word	0x200001b4
 80064b0:	20000204 	.word	0x20000204
 80064b4:	20000208 	.word	0x20000208

080064b8 <abc_to_alphabeta>:
// Constants



void abc_to_alphabeta(float a, float b, float c, float *alpha, float *beta)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b08b      	sub	sp, #44	; 0x2c
 80064bc:	af00      	add	r7, sp, #0
 80064be:	ed87 0a05 	vstr	s0, [r7, #20]
 80064c2:	edc7 0a04 	vstr	s1, [r7, #16]
 80064c6:	ed87 1a03 	vstr	s2, [r7, #12]
 80064ca:	60b8      	str	r0, [r7, #8]
 80064cc:	6079      	str	r1, [r7, #4]
	// constants
	const float two_thirds = 2.0f/3.0f;
 80064ce:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <abc_to_alphabeta+0x8c>)
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
	const float one_third = 1.0f/3.0f;
 80064d2:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <abc_to_alphabeta+0x90>)
 80064d4:	623b      	str	r3, [r7, #32]
	const float sqrt3_div_2 = sqrt(3.0f)/2.0f;
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <abc_to_alphabeta+0x94>)
 80064d8:	61fb      	str	r3, [r7, #28]

	// calculation
    *alpha =  two_thirds*a - one_third*b - one_third*c;
 80064da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80064de:	edd7 7a05 	vldr	s15, [r7, #20]
 80064e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064e6:	edd7 6a08 	vldr	s13, [r7, #32]
 80064ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80064ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064f6:	edd7 6a08 	vldr	s13, [r7, #32]
 80064fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80064fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	edc3 7a00 	vstr	s15, [r3]
    *beta = two_thirds * (sqrt3_div_2*b - sqrt3_div_2*c);
 800650c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006510:	edd7 7a04 	vldr	s15, [r7, #16]
 8006514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006518:	edd7 6a07 	vldr	s13, [r7, #28]
 800651c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006524:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006528:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800652c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	edc3 7a00 	vstr	s15, [r3]
}
 8006536:	bf00      	nop
 8006538:	372c      	adds	r7, #44	; 0x2c
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	3f2aaaab 	.word	0x3f2aaaab
 8006548:	3eaaaaab 	.word	0x3eaaaaab
 800654c:	3f5db3d7 	.word	0x3f5db3d7

08006550 <alphabeta_to_dq>:
//    return beta;
//}


void alphabeta_to_dq(float alpha, float beta, float angle, float *d, float *q)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	ed2d 8b02 	vpush	{d8}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	ed87 0a05 	vstr	s0, [r7, #20]
 800655e:	edc7 0a04 	vstr	s1, [r7, #16]
 8006562:	ed87 1a03 	vstr	s2, [r7, #12]
 8006566:	60b8      	str	r0, [r7, #8]
 8006568:	6079      	str	r1, [r7, #4]
	*d = cosf(angle)*alpha + sinf(angle)*beta;
 800656a:	ed97 0a03 	vldr	s0, [r7, #12]
 800656e:	f000 ff37 	bl	80073e0 <cosf>
 8006572:	eeb0 7a40 	vmov.f32	s14, s0
 8006576:	edd7 7a05 	vldr	s15, [r7, #20]
 800657a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800657e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006582:	f000 ff6d 	bl	8007460 <sinf>
 8006586:	eeb0 7a40 	vmov.f32	s14, s0
 800658a:	edd7 7a04 	vldr	s15, [r7, #16]
 800658e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006592:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	edc3 7a00 	vstr	s15, [r3]
	*q = -sinf(angle)*alpha + cosf(angle)*beta;
 800659c:	ed97 0a03 	vldr	s0, [r7, #12]
 80065a0:	f000 ff5e 	bl	8007460 <sinf>
 80065a4:	eef0 7a40 	vmov.f32	s15, s0
 80065a8:	eeb1 7a67 	vneg.f32	s14, s15
 80065ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80065b0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80065b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80065b8:	f000 ff12 	bl	80073e0 <cosf>
 80065bc:	eeb0 7a40 	vmov.f32	s14, s0
 80065c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80065c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	edc3 7a00 	vstr	s15, [r3]
}
 80065d2:	bf00      	nop
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	ecbd 8b02 	vpop	{d8}
 80065dc:	bd80      	pop	{r7, pc}

080065de <dq_to_alphabeta>:
//    return q;
//}


void dq_to_alphabeta(float d, float q, float angle, float *alpha, float *beta)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	ed2d 8b02 	vpush	{d8}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	ed87 0a05 	vstr	s0, [r7, #20]
 80065ec:	edc7 0a04 	vstr	s1, [r7, #16]
 80065f0:	ed87 1a03 	vstr	s2, [r7, #12]
 80065f4:	60b8      	str	r0, [r7, #8]
 80065f6:	6079      	str	r1, [r7, #4]
	*alpha = cosf(angle)*d - sinf(angle)*q;
 80065f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80065fc:	f000 fef0 	bl	80073e0 <cosf>
 8006600:	eeb0 7a40 	vmov.f32	s14, s0
 8006604:	edd7 7a05 	vldr	s15, [r7, #20]
 8006608:	ee27 8a27 	vmul.f32	s16, s14, s15
 800660c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006610:	f000 ff26 	bl	8007460 <sinf>
 8006614:	eeb0 7a40 	vmov.f32	s14, s0
 8006618:	edd7 7a04 	vldr	s15, [r7, #16]
 800661c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006620:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	edc3 7a00 	vstr	s15, [r3]
	*beta = sinf(angle)*d + cosf(angle)*q;
 800662a:	ed97 0a03 	vldr	s0, [r7, #12]
 800662e:	f000 ff17 	bl	8007460 <sinf>
 8006632:	eeb0 7a40 	vmov.f32	s14, s0
 8006636:	edd7 7a05 	vldr	s15, [r7, #20]
 800663a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800663e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006642:	f000 fecd 	bl	80073e0 <cosf>
 8006646:	eeb0 7a40 	vmov.f32	s14, s0
 800664a:	edd7 7a04 	vldr	s15, [r7, #16]
 800664e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006652:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	edc3 7a00 	vstr	s15, [r3]
}
 800665c:	bf00      	nop
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	ecbd 8b02 	vpop	{d8}
 8006666:	bd80      	pop	{r7, pc}

08006668 <cos_grid>:
//    return beta;
//}


float cos_grid(float alpha, float beta)
{
 8006668:	b5b0      	push	{r4, r5, r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006672:	edc7 0a00 	vstr	s1, [r7]
    return alpha / (sqrt(alpha*alpha + beta*beta));
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7f9 ff86 	bl	8000588 <__aeabi_f2d>
 800667c:	4604      	mov	r4, r0
 800667e:	460d      	mov	r5, r1
 8006680:	edd7 7a01 	vldr	s15, [r7, #4]
 8006684:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006688:	edd7 7a00 	vldr	s15, [r7]
 800668c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006694:	ee17 0a90 	vmov	r0, s15
 8006698:	f7f9 ff76 	bl	8000588 <__aeabi_f2d>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	ec43 2b10 	vmov	d0, r2, r3
 80066a4:	f000 ff1e 	bl	80074e4 <sqrt>
 80066a8:	ec53 2b10 	vmov	r2, r3, d0
 80066ac:	4620      	mov	r0, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	f7fa f8ec 	bl	800088c <__aeabi_ddiv>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4610      	mov	r0, r2
 80066ba:	4619      	mov	r1, r3
 80066bc:	f7fa fa6c 	bl	8000b98 <__aeabi_d2f>
 80066c0:	4603      	mov	r3, r0
 80066c2:	ee07 3a90 	vmov	s15, r3
}
 80066c6:	eeb0 0a67 	vmov.f32	s0, s15
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bdb0      	pop	{r4, r5, r7, pc}

080066d0 <sin_grid>:

float sin_grid(float alpha, float beta)
{
 80066d0:	b5b0      	push	{r4, r5, r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80066da:	edc7 0a00 	vstr	s1, [r7]
    return beta/ (sqrt(alpha*alpha + beta*beta));
 80066de:	6838      	ldr	r0, [r7, #0]
 80066e0:	f7f9 ff52 	bl	8000588 <__aeabi_f2d>
 80066e4:	4604      	mov	r4, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80066ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80066f0:	edd7 7a00 	vldr	s15, [r7]
 80066f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066fc:	ee17 0a90 	vmov	r0, s15
 8006700:	f7f9 ff42 	bl	8000588 <__aeabi_f2d>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	ec43 2b10 	vmov	d0, r2, r3
 800670c:	f000 feea 	bl	80074e4 <sqrt>
 8006710:	ec53 2b10 	vmov	r2, r3, d0
 8006714:	4620      	mov	r0, r4
 8006716:	4629      	mov	r1, r5
 8006718:	f7fa f8b8 	bl	800088c <__aeabi_ddiv>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4610      	mov	r0, r2
 8006722:	4619      	mov	r1, r3
 8006724:	f7fa fa38 	bl	8000b98 <__aeabi_d2f>
 8006728:	4603      	mov	r3, r0
 800672a:	ee07 3a90 	vmov	s15, r3
}
 800672e:	eeb0 0a67 	vmov.f32	s0, s15
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bdb0      	pop	{r4, r5, r7, pc}

08006738 <pi_regulator>:


void pi_regulator(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts, float *anglePll, float *anglePllComp)
{
 8006738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800673c:	b088      	sub	sp, #32
 800673e:	af00      	add	r7, sp, #0
 8006740:	ed87 0a07 	vstr	s0, [r7, #28]
 8006744:	edc7 0a06 	vstr	s1, [r7, #24]
 8006748:	ed87 1a05 	vstr	s2, [r7, #20]
 800674c:	edc7 1a04 	vstr	s3, [r7, #16]
 8006750:	ed87 2a03 	vstr	s4, [r7, #12]
 8006754:	edc7 2a02 	vstr	s5, [r7, #8]
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
    static float phaseError_old, integral_old, angle_old, omega_old, integral, omega;;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 800675c:	6978      	ldr	r0, [r7, #20]
 800675e:	f7f9 ff13 	bl	8000588 <__aeabi_f2d>
 8006762:	4604      	mov	r4, r0
 8006764:	460d      	mov	r5, r1
 8006766:	69f8      	ldr	r0, [r7, #28]
 8006768:	f7f9 ff0e 	bl	8000588 <__aeabi_f2d>
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	4b75      	ldr	r3, [pc, #468]	; (8006948 <pi_regulator+0x210>)
 8006772:	f7f9 ff61 	bl	8000638 <__aeabi_dmul>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4690      	mov	r8, r2
 800677c:	4699      	mov	r9, r3
 800677e:	4b73      	ldr	r3, [pc, #460]	; (800694c <pi_regulator+0x214>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f7f9 ff00 	bl	8000588 <__aeabi_f2d>
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	4b6e      	ldr	r3, [pc, #440]	; (8006948 <pi_regulator+0x210>)
 800678e:	f7f9 ff53 	bl	8000638 <__aeabi_dmul>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f7f9 fd97 	bl	80002cc <__adddf3>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7f9 ff47 	bl	8000638 <__aeabi_dmul>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4614      	mov	r4, r2
 80067b0:	461d      	mov	r5, r3
 80067b2:	68b8      	ldr	r0, [r7, #8]
 80067b4:	f7f9 fee8 	bl	8000588 <__aeabi_f2d>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7f9 ff3a 	bl	8000638 <__aeabi_dmul>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4614      	mov	r4, r2
 80067ca:	461d      	mov	r5, r3
 80067cc:	4b60      	ldr	r3, [pc, #384]	; (8006950 <pi_regulator+0x218>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7f9 fed9 	bl	8000588 <__aeabi_f2d>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4620      	mov	r0, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	f7f9 fd75 	bl	80002cc <__adddf3>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4610      	mov	r0, r2
 80067e8:	4619      	mov	r1, r3
 80067ea:	f7fa f9d5 	bl	8000b98 <__aeabi_d2f>
 80067ee:	4603      	mov	r3, r0
 80067f0:	4a58      	ldr	r2, [pc, #352]	; (8006954 <pi_regulator+0x21c>)
 80067f2:	6013      	str	r3, [r2, #0]
    omega = phaseError*kp + integral + feedForward; 
 80067f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80067f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80067fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006800:	4b54      	ldr	r3, [pc, #336]	; (8006954 <pi_regulator+0x21c>)
 8006802:	edd3 7a00 	vldr	s15, [r3]
 8006806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800680a:	edd7 7a06 	vldr	s15, [r7, #24]
 800680e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006812:	4b51      	ldr	r3, [pc, #324]	; (8006958 <pi_regulator+0x220>)
 8006814:	edc3 7a00 	vstr	s15, [r3]

    *anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old;
 8006818:	4b4f      	ldr	r3, [pc, #316]	; (8006958 <pi_regulator+0x220>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7f9 feb3 	bl	8000588 <__aeabi_f2d>
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	4b48      	ldr	r3, [pc, #288]	; (8006948 <pi_regulator+0x210>)
 8006828:	f7f9 ff06 	bl	8000638 <__aeabi_dmul>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4614      	mov	r4, r2
 8006832:	461d      	mov	r5, r3
 8006834:	4b49      	ldr	r3, [pc, #292]	; (800695c <pi_regulator+0x224>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7f9 fea5 	bl	8000588 <__aeabi_f2d>
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	4b41      	ldr	r3, [pc, #260]	; (8006948 <pi_regulator+0x210>)
 8006844:	f7f9 fef8 	bl	8000638 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fd3c 	bl	80002cc <__adddf3>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4614      	mov	r4, r2
 800685a:	461d      	mov	r5, r3
 800685c:	68b8      	ldr	r0, [r7, #8]
 800685e:	f7f9 fe93 	bl	8000588 <__aeabi_f2d>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7f9 fee5 	bl	8000638 <__aeabi_dmul>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4614      	mov	r4, r2
 8006874:	461d      	mov	r5, r3
 8006876:	4b3a      	ldr	r3, [pc, #232]	; (8006960 <pi_regulator+0x228>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f7f9 fe84 	bl	8000588 <__aeabi_f2d>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4620      	mov	r0, r4
 8006886:	4629      	mov	r1, r5
 8006888:	f7f9 fd20 	bl	80002cc <__adddf3>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4610      	mov	r0, r2
 8006892:	4619      	mov	r1, r3
 8006894:	f7fa f980 	bl	8000b98 <__aeabi_d2f>
 8006898:	4602      	mov	r2, r0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]

    if (*anglePll > TWO_PI) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7f9 fe70 	bl	8000588 <__aeabi_f2d>
 80068a8:	a325      	add	r3, pc, #148	; (adr r3, 8006940 <pi_regulator+0x208>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7fa f953 	bl	8000b58 <__aeabi_dcmpgt>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d012      	beq.n	80068de <pi_regulator+0x1a6>
    		*anglePll = *anglePll - TWO_PI;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7f9 fe63 	bl	8000588 <__aeabi_f2d>
 80068c2:	a31f      	add	r3, pc, #124	; (adr r3, 8006940 <pi_regulator+0x208>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f7f9 fcfe 	bl	80002c8 <__aeabi_dsub>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	f7fa f960 	bl	8000b98 <__aeabi_d2f>
 80068d8:	4602      	mov	r2, r0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	601a      	str	r2, [r3, #0]
    }

    *anglePllComp = *anglePll - (omega - feedForward - phaseError*kp)*kPhi;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	ed93 7a00 	vldr	s14, [r3]
 80068e4:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <pi_regulator+0x220>)
 80068e6:	edd3 6a00 	vldr	s13, [r3]
 80068ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80068ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068f2:	ed97 6a07 	vldr	s12, [r7, #28]
 80068f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80068fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80068fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006902:	edd7 7a03 	vldr	s15, [r7, #12]
 8006906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800690a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	edc3 7a00 	vstr	s15, [r3]

    phaseError_old = phaseError;
 8006914:	4a0d      	ldr	r2, [pc, #52]	; (800694c <pi_regulator+0x214>)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 800691a:	4b0e      	ldr	r3, [pc, #56]	; (8006954 <pi_regulator+0x21c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a0c      	ldr	r2, [pc, #48]	; (8006950 <pi_regulator+0x218>)
 8006920:	6013      	str	r3, [r2, #0]
    angle_old = *anglePll;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a0e      	ldr	r2, [pc, #56]	; (8006960 <pi_regulator+0x228>)
 8006928:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 800692a:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <pi_regulator+0x220>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a0b      	ldr	r2, [pc, #44]	; (800695c <pi_regulator+0x224>)
 8006930:	6013      	str	r3, [r2, #0]
}
 8006932:	bf00      	nop
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800693c:	f3af 8000 	nop.w
 8006940:	54442c46 	.word	0x54442c46
 8006944:	401921fb 	.word	0x401921fb
 8006948:	3fe00000 	.word	0x3fe00000
 800694c:	20000258 	.word	0x20000258
 8006950:	2000025c 	.word	0x2000025c
 8006954:	20000260 	.word	0x20000260
 8006958:	20000264 	.word	0x20000264
 800695c:	20000268 	.word	0x20000268
 8006960:	2000026c 	.word	0x2000026c

08006964 <phase_detector>:
//
//    return anglePllComp;
//}

float phase_detector(float cosGrid, float sinGrid, float anglePllComp)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	ed2d 8b02 	vpush	{d8}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006972:	edc7 0a02 	vstr	s1, [r7, #8]
 8006976:	ed87 1a01 	vstr	s2, [r7, #4]
    return sinGrid*cosf(anglePllComp) - cosGrid*sinf(anglePllComp);
 800697a:	ed97 0a01 	vldr	s0, [r7, #4]
 800697e:	f000 fd2f 	bl	80073e0 <cosf>
 8006982:	eeb0 7a40 	vmov.f32	s14, s0
 8006986:	edd7 7a02 	vldr	s15, [r7, #8]
 800698a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800698e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006992:	f000 fd65 	bl	8007460 <sinf>
 8006996:	eeb0 7a40 	vmov.f32	s14, s0
 800699a:	edd7 7a03 	vldr	s15, [r7, #12]
 800699e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a2:	ee78 7a67 	vsub.f32	s15, s16, s15
}
 80069a6:	eeb0 0a67 	vmov.f32	s0, s15
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	ecbd 8b02 	vpop	{d8}
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <circular_buffer>:
//                  uint16_t *dataInput: Pointer to data to be inserted into circular buffer
//                  uint8_t event: A flag which, when triggered, sets the ring buffer to fill the last 1-bufSplit% of the buffer
//                  float bufSplit: The percentage of the buffer which is kept in the ring buffer after event trigger.
//  Returns     :   *readStart: Where to start reading the ring buffer
uint8_t circular_buffer(uint16_t bufferSize, int16_t circularBuffer[][RING_BUF_SIZE], int16_t *dataInput, uint8_t event, float bufSplit, uint16_t *readStart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	461a      	mov	r2, r3
 80069c0:	ed87 0a00 	vstr	s0, [r7]
 80069c4:	4603      	mov	r3, r0
 80069c6:	81fb      	strh	r3, [r7, #14]
 80069c8:	4613      	mov	r3, r2
 80069ca:	737b      	strb	r3, [r7, #13]
        else {
            *readStart = 0;
        }
    } */

    if (bufferLength == bufferSize) {
 80069cc:	4b4e      	ldr	r3, [pc, #312]	; (8006b08 <circular_buffer+0x154>)
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	89fa      	ldrh	r2, [r7, #14]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d103      	bne.n	80069de <circular_buffer+0x2a>
        *readStart = writeIndex;
 80069d6:	4b4d      	ldr	r3, [pc, #308]	; (8006b0c <circular_buffer+0x158>)
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	801a      	strh	r2, [r3, #0]
    }

    if (event) {
 80069de:	7b7b      	ldrb	r3, [r7, #13]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d053      	beq.n	8006a8c <circular_buffer+0xd8>
        if (!eventEntry) {
 80069e4:	4b4a      	ldr	r3, [pc, #296]	; (8006b10 <circular_buffer+0x15c>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d112      	bne.n	8006a12 <circular_buffer+0x5e>
            // Event has triggered
            bufferSplitLength = bufSplit * bufferSize;
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069f6:	edd7 7a00 	vldr	s15, [r7]
 80069fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a02:	ee17 3a90 	vmov	r3, s15
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	4b42      	ldr	r3, [pc, #264]	; (8006b14 <circular_buffer+0x160>)
 8006a0a:	801a      	strh	r2, [r3, #0]
            eventEntry = 1;
 8006a0c:	4b40      	ldr	r3, [pc, #256]	; (8006b10 <circular_buffer+0x15c>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
        }

        if (bufferSplitLength == bufferSize) {
 8006a12:	4b40      	ldr	r3, [pc, #256]	; (8006b14 <circular_buffer+0x160>)
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	89fa      	ldrh	r2, [r7, #14]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d10a      	bne.n	8006a32 <circular_buffer+0x7e>
            if (!bufferFullEntry) {
 8006a1c:	4b3e      	ldr	r3, [pc, #248]	; (8006b18 <circular_buffer+0x164>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d159      	bne.n	8006ad8 <circular_buffer+0x124>
            	bufferDoneFlag = 1;
 8006a24:	4b3d      	ldr	r3, [pc, #244]	; (8006b1c <circular_buffer+0x168>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
                // Do something?
                bufferFullEntry = 1;
 8006a2a:	4b3b      	ldr	r3, [pc, #236]	; (8006b18 <circular_buffer+0x164>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	e052      	b.n	8006ad8 <circular_buffer+0x124>
            }
            // STOP
        }
        else {
        	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	e013      	b.n	8006a60 <circular_buffer+0xac>
        	    circularBuffer[writeIndex][i] = dataInput[i];
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	441a      	add	r2, r3
 8006a40:	4b32      	ldr	r3, [pc, #200]	; (8006b0c <circular_buffer+0x158>)
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	4619      	mov	r1, r3
 8006a46:	2334      	movs	r3, #52	; 0x34
 8006a48:	fb03 f301 	mul.w	r3, r3, r1
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	440b      	add	r3, r1
 8006a50:	f9b2 1000 	ldrsh.w	r1, [r2]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2b19      	cmp	r3, #25
 8006a64:	dde8      	ble.n	8006a38 <circular_buffer+0x84>
        	}
            bufferSplitLength++;
 8006a66:	4b2b      	ldr	r3, [pc, #172]	; (8006b14 <circular_buffer+0x160>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	4b29      	ldr	r3, [pc, #164]	; (8006b14 <circular_buffer+0x160>)
 8006a70:	801a      	strh	r2, [r3, #0]
            writeIndex++;
 8006a72:	4b26      	ldr	r3, [pc, #152]	; (8006b0c <circular_buffer+0x158>)
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	3301      	adds	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <circular_buffer+0x158>)
 8006a7c:	801a      	strh	r2, [r3, #0]
            bufferLength++;
 8006a7e:	4b22      	ldr	r3, [pc, #136]	; (8006b08 <circular_buffer+0x154>)
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <circular_buffer+0x154>)
 8006a88:	801a      	strh	r2, [r3, #0]
 8006a8a:	e025      	b.n	8006ad8 <circular_buffer+0x124>
        }
    }
    else {
    	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	e013      	b.n	8006aba <circular_buffer+0x106>
    		circularBuffer[writeIndex][i] = dataInput[i];
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	441a      	add	r2, r3
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <circular_buffer+0x158>)
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	2334      	movs	r3, #52	; 0x34
 8006aa2:	fb03 f301 	mul.w	r3, r3, r1
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	440b      	add	r3, r1
 8006aaa:	f9b2 1000 	ldrsh.w	r1, [r2]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	for (int i = 0; i < RING_BUF_SIZE; ++i) {
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b19      	cmp	r3, #25
 8006abe:	dde8      	ble.n	8006a92 <circular_buffer+0xde>
		}

        writeIndex++;
 8006ac0:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <circular_buffer+0x158>)
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <circular_buffer+0x158>)
 8006aca:	801a      	strh	r2, [r3, #0]
        bufferLength++;
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <circular_buffer+0x154>)
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <circular_buffer+0x154>)
 8006ad6:	801a      	strh	r2, [r3, #0]
    }



    // Reset bufferlength
    if (bufferLength > bufferSize) {
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <circular_buffer+0x154>)
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	89fa      	ldrh	r2, [r7, #14]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d202      	bcs.n	8006ae8 <circular_buffer+0x134>
        bufferLength = bufferSize;
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <circular_buffer+0x154>)
 8006ae4:	89fb      	ldrh	r3, [r7, #14]
 8006ae6:	8013      	strh	r3, [r2, #0]
    }
    // Reset writeindex
    if (writeIndex == bufferSize) {
 8006ae8:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <circular_buffer+0x158>)
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	89fa      	ldrh	r2, [r7, #14]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d102      	bne.n	8006af8 <circular_buffer+0x144>
        writeIndex = 0;
 8006af2:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <circular_buffer+0x158>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	801a      	strh	r2, [r3, #0]
    }

    return bufferDoneFlag;
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <circular_buffer+0x168>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	20000270 	.word	0x20000270
 8006b0c:	20000272 	.word	0x20000272
 8006b10:	20000274 	.word	0x20000274
 8006b14:	20000276 	.word	0x20000276
 8006b18:	20000278 	.word	0x20000278
 8006b1c:	20000279 	.word	0x20000279

08006b20 <__errno>:
 8006b20:	4b01      	ldr	r3, [pc, #4]	; (8006b28 <__errno+0x8>)
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000018 	.word	0x20000018

08006b2c <__libc_init_array>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	4d0d      	ldr	r5, [pc, #52]	; (8006b64 <__libc_init_array+0x38>)
 8006b30:	4c0d      	ldr	r4, [pc, #52]	; (8006b68 <__libc_init_array+0x3c>)
 8006b32:	1b64      	subs	r4, r4, r5
 8006b34:	10a4      	asrs	r4, r4, #2
 8006b36:	2600      	movs	r6, #0
 8006b38:	42a6      	cmp	r6, r4
 8006b3a:	d109      	bne.n	8006b50 <__libc_init_array+0x24>
 8006b3c:	4d0b      	ldr	r5, [pc, #44]	; (8006b6c <__libc_init_array+0x40>)
 8006b3e:	4c0c      	ldr	r4, [pc, #48]	; (8006b70 <__libc_init_array+0x44>)
 8006b40:	f001 fae2 	bl	8008108 <_init>
 8006b44:	1b64      	subs	r4, r4, r5
 8006b46:	10a4      	asrs	r4, r4, #2
 8006b48:	2600      	movs	r6, #0
 8006b4a:	42a6      	cmp	r6, r4
 8006b4c:	d105      	bne.n	8006b5a <__libc_init_array+0x2e>
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b54:	4798      	blx	r3
 8006b56:	3601      	adds	r6, #1
 8006b58:	e7ee      	b.n	8006b38 <__libc_init_array+0xc>
 8006b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5e:	4798      	blx	r3
 8006b60:	3601      	adds	r6, #1
 8006b62:	e7f2      	b.n	8006b4a <__libc_init_array+0x1e>
 8006b64:	080086a0 	.word	0x080086a0
 8006b68:	080086a0 	.word	0x080086a0
 8006b6c:	080086a0 	.word	0x080086a0
 8006b70:	080086a4 	.word	0x080086a4

08006b74 <memset>:
 8006b74:	4402      	add	r2, r0
 8006b76:	4603      	mov	r3, r0
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <memset+0xa>
 8006b7c:	4770      	bx	lr
 8006b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b82:	e7f9      	b.n	8006b78 <memset+0x4>

08006b84 <siprintf>:
 8006b84:	b40e      	push	{r1, r2, r3}
 8006b86:	b500      	push	{lr}
 8006b88:	b09c      	sub	sp, #112	; 0x70
 8006b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b8c:	9002      	str	r0, [sp, #8]
 8006b8e:	9006      	str	r0, [sp, #24]
 8006b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b94:	4809      	ldr	r0, [pc, #36]	; (8006bbc <siprintf+0x38>)
 8006b96:	9107      	str	r1, [sp, #28]
 8006b98:	9104      	str	r1, [sp, #16]
 8006b9a:	4909      	ldr	r1, [pc, #36]	; (8006bc0 <siprintf+0x3c>)
 8006b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba0:	9105      	str	r1, [sp, #20]
 8006ba2:	6800      	ldr	r0, [r0, #0]
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	a902      	add	r1, sp, #8
 8006ba8:	f000 f868 	bl	8006c7c <_svfiprintf_r>
 8006bac:	9b02      	ldr	r3, [sp, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	b01c      	add	sp, #112	; 0x70
 8006bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb8:	b003      	add	sp, #12
 8006bba:	4770      	bx	lr
 8006bbc:	20000018 	.word	0x20000018
 8006bc0:	ffff0208 	.word	0xffff0208

08006bc4 <__ssputs_r>:
 8006bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	688e      	ldr	r6, [r1, #8]
 8006bca:	429e      	cmp	r6, r3
 8006bcc:	4682      	mov	sl, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	4690      	mov	r8, r2
 8006bd2:	461f      	mov	r7, r3
 8006bd4:	d838      	bhi.n	8006c48 <__ssputs_r+0x84>
 8006bd6:	898a      	ldrh	r2, [r1, #12]
 8006bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bdc:	d032      	beq.n	8006c44 <__ssputs_r+0x80>
 8006bde:	6825      	ldr	r5, [r4, #0]
 8006be0:	6909      	ldr	r1, [r1, #16]
 8006be2:	eba5 0901 	sub.w	r9, r5, r1
 8006be6:	6965      	ldr	r5, [r4, #20]
 8006be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	444b      	add	r3, r9
 8006bf4:	106d      	asrs	r5, r5, #1
 8006bf6:	429d      	cmp	r5, r3
 8006bf8:	bf38      	it	cc
 8006bfa:	461d      	movcc	r5, r3
 8006bfc:	0553      	lsls	r3, r2, #21
 8006bfe:	d531      	bpl.n	8006c64 <__ssputs_r+0xa0>
 8006c00:	4629      	mov	r1, r5
 8006c02:	f000 fb47 	bl	8007294 <_malloc_r>
 8006c06:	4606      	mov	r6, r0
 8006c08:	b950      	cbnz	r0, 8006c20 <__ssputs_r+0x5c>
 8006c0a:	230c      	movs	r3, #12
 8006c0c:	f8ca 3000 	str.w	r3, [sl]
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c20:	6921      	ldr	r1, [r4, #16]
 8006c22:	464a      	mov	r2, r9
 8006c24:	f000 fabe 	bl	80071a4 <memcpy>
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c32:	81a3      	strh	r3, [r4, #12]
 8006c34:	6126      	str	r6, [r4, #16]
 8006c36:	6165      	str	r5, [r4, #20]
 8006c38:	444e      	add	r6, r9
 8006c3a:	eba5 0509 	sub.w	r5, r5, r9
 8006c3e:	6026      	str	r6, [r4, #0]
 8006c40:	60a5      	str	r5, [r4, #8]
 8006c42:	463e      	mov	r6, r7
 8006c44:	42be      	cmp	r6, r7
 8006c46:	d900      	bls.n	8006c4a <__ssputs_r+0x86>
 8006c48:	463e      	mov	r6, r7
 8006c4a:	4632      	mov	r2, r6
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	4641      	mov	r1, r8
 8006c50:	f000 fab6 	bl	80071c0 <memmove>
 8006c54:	68a3      	ldr	r3, [r4, #8]
 8006c56:	6822      	ldr	r2, [r4, #0]
 8006c58:	1b9b      	subs	r3, r3, r6
 8006c5a:	4432      	add	r2, r6
 8006c5c:	60a3      	str	r3, [r4, #8]
 8006c5e:	6022      	str	r2, [r4, #0]
 8006c60:	2000      	movs	r0, #0
 8006c62:	e7db      	b.n	8006c1c <__ssputs_r+0x58>
 8006c64:	462a      	mov	r2, r5
 8006c66:	f000 fb6f 	bl	8007348 <_realloc_r>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d1e1      	bne.n	8006c34 <__ssputs_r+0x70>
 8006c70:	6921      	ldr	r1, [r4, #16]
 8006c72:	4650      	mov	r0, sl
 8006c74:	f000 fabe 	bl	80071f4 <_free_r>
 8006c78:	e7c7      	b.n	8006c0a <__ssputs_r+0x46>
	...

08006c7c <_svfiprintf_r>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	4698      	mov	r8, r3
 8006c82:	898b      	ldrh	r3, [r1, #12]
 8006c84:	061b      	lsls	r3, r3, #24
 8006c86:	b09d      	sub	sp, #116	; 0x74
 8006c88:	4607      	mov	r7, r0
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	d50e      	bpl.n	8006cae <_svfiprintf_r+0x32>
 8006c90:	690b      	ldr	r3, [r1, #16]
 8006c92:	b963      	cbnz	r3, 8006cae <_svfiprintf_r+0x32>
 8006c94:	2140      	movs	r1, #64	; 0x40
 8006c96:	f000 fafd 	bl	8007294 <_malloc_r>
 8006c9a:	6028      	str	r0, [r5, #0]
 8006c9c:	6128      	str	r0, [r5, #16]
 8006c9e:	b920      	cbnz	r0, 8006caa <_svfiprintf_r+0x2e>
 8006ca0:	230c      	movs	r3, #12
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca8:	e0d1      	b.n	8006e4e <_svfiprintf_r+0x1d2>
 8006caa:	2340      	movs	r3, #64	; 0x40
 8006cac:	616b      	str	r3, [r5, #20]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb2:	2320      	movs	r3, #32
 8006cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cbc:	2330      	movs	r3, #48	; 0x30
 8006cbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e68 <_svfiprintf_r+0x1ec>
 8006cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cc6:	f04f 0901 	mov.w	r9, #1
 8006cca:	4623      	mov	r3, r4
 8006ccc:	469a      	mov	sl, r3
 8006cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cd2:	b10a      	cbz	r2, 8006cd8 <_svfiprintf_r+0x5c>
 8006cd4:	2a25      	cmp	r2, #37	; 0x25
 8006cd6:	d1f9      	bne.n	8006ccc <_svfiprintf_r+0x50>
 8006cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cdc:	d00b      	beq.n	8006cf6 <_svfiprintf_r+0x7a>
 8006cde:	465b      	mov	r3, fp
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f7ff ff6d 	bl	8006bc4 <__ssputs_r>
 8006cea:	3001      	adds	r0, #1
 8006cec:	f000 80aa 	beq.w	8006e44 <_svfiprintf_r+0x1c8>
 8006cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cf2:	445a      	add	r2, fp
 8006cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 80a2 	beq.w	8006e44 <_svfiprintf_r+0x1c8>
 8006d00:	2300      	movs	r3, #0
 8006d02:	f04f 32ff 	mov.w	r2, #4294967295
 8006d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d0a:	f10a 0a01 	add.w	sl, sl, #1
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	9307      	str	r3, [sp, #28]
 8006d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d16:	931a      	str	r3, [sp, #104]	; 0x68
 8006d18:	4654      	mov	r4, sl
 8006d1a:	2205      	movs	r2, #5
 8006d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d20:	4851      	ldr	r0, [pc, #324]	; (8006e68 <_svfiprintf_r+0x1ec>)
 8006d22:	f7f9 fa7d 	bl	8000220 <memchr>
 8006d26:	9a04      	ldr	r2, [sp, #16]
 8006d28:	b9d8      	cbnz	r0, 8006d62 <_svfiprintf_r+0xe6>
 8006d2a:	06d0      	lsls	r0, r2, #27
 8006d2c:	bf44      	itt	mi
 8006d2e:	2320      	movmi	r3, #32
 8006d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d34:	0711      	lsls	r1, r2, #28
 8006d36:	bf44      	itt	mi
 8006d38:	232b      	movmi	r3, #43	; 0x2b
 8006d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d42:	2b2a      	cmp	r3, #42	; 0x2a
 8006d44:	d015      	beq.n	8006d72 <_svfiprintf_r+0xf6>
 8006d46:	9a07      	ldr	r2, [sp, #28]
 8006d48:	4654      	mov	r4, sl
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	f04f 0c0a 	mov.w	ip, #10
 8006d50:	4621      	mov	r1, r4
 8006d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d56:	3b30      	subs	r3, #48	; 0x30
 8006d58:	2b09      	cmp	r3, #9
 8006d5a:	d94e      	bls.n	8006dfa <_svfiprintf_r+0x17e>
 8006d5c:	b1b0      	cbz	r0, 8006d8c <_svfiprintf_r+0x110>
 8006d5e:	9207      	str	r2, [sp, #28]
 8006d60:	e014      	b.n	8006d8c <_svfiprintf_r+0x110>
 8006d62:	eba0 0308 	sub.w	r3, r0, r8
 8006d66:	fa09 f303 	lsl.w	r3, r9, r3
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	46a2      	mov	sl, r4
 8006d70:	e7d2      	b.n	8006d18 <_svfiprintf_r+0x9c>
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	1d19      	adds	r1, r3, #4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	9103      	str	r1, [sp, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bfbb      	ittet	lt
 8006d7e:	425b      	neglt	r3, r3
 8006d80:	f042 0202 	orrlt.w	r2, r2, #2
 8006d84:	9307      	strge	r3, [sp, #28]
 8006d86:	9307      	strlt	r3, [sp, #28]
 8006d88:	bfb8      	it	lt
 8006d8a:	9204      	strlt	r2, [sp, #16]
 8006d8c:	7823      	ldrb	r3, [r4, #0]
 8006d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d90:	d10c      	bne.n	8006dac <_svfiprintf_r+0x130>
 8006d92:	7863      	ldrb	r3, [r4, #1]
 8006d94:	2b2a      	cmp	r3, #42	; 0x2a
 8006d96:	d135      	bne.n	8006e04 <_svfiprintf_r+0x188>
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	1d1a      	adds	r2, r3, #4
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	9203      	str	r2, [sp, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bfb8      	it	lt
 8006da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006da8:	3402      	adds	r4, #2
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e78 <_svfiprintf_r+0x1fc>
 8006db0:	7821      	ldrb	r1, [r4, #0]
 8006db2:	2203      	movs	r2, #3
 8006db4:	4650      	mov	r0, sl
 8006db6:	f7f9 fa33 	bl	8000220 <memchr>
 8006dba:	b140      	cbz	r0, 8006dce <_svfiprintf_r+0x152>
 8006dbc:	2340      	movs	r3, #64	; 0x40
 8006dbe:	eba0 000a 	sub.w	r0, r0, sl
 8006dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006dc6:	9b04      	ldr	r3, [sp, #16]
 8006dc8:	4303      	orrs	r3, r0
 8006dca:	3401      	adds	r4, #1
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd2:	4826      	ldr	r0, [pc, #152]	; (8006e6c <_svfiprintf_r+0x1f0>)
 8006dd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dd8:	2206      	movs	r2, #6
 8006dda:	f7f9 fa21 	bl	8000220 <memchr>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d038      	beq.n	8006e54 <_svfiprintf_r+0x1d8>
 8006de2:	4b23      	ldr	r3, [pc, #140]	; (8006e70 <_svfiprintf_r+0x1f4>)
 8006de4:	bb1b      	cbnz	r3, 8006e2e <_svfiprintf_r+0x1b2>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	3307      	adds	r3, #7
 8006dea:	f023 0307 	bic.w	r3, r3, #7
 8006dee:	3308      	adds	r3, #8
 8006df0:	9303      	str	r3, [sp, #12]
 8006df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df4:	4433      	add	r3, r6
 8006df6:	9309      	str	r3, [sp, #36]	; 0x24
 8006df8:	e767      	b.n	8006cca <_svfiprintf_r+0x4e>
 8006dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dfe:	460c      	mov	r4, r1
 8006e00:	2001      	movs	r0, #1
 8006e02:	e7a5      	b.n	8006d50 <_svfiprintf_r+0xd4>
 8006e04:	2300      	movs	r3, #0
 8006e06:	3401      	adds	r4, #1
 8006e08:	9305      	str	r3, [sp, #20]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	f04f 0c0a 	mov.w	ip, #10
 8006e10:	4620      	mov	r0, r4
 8006e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e16:	3a30      	subs	r2, #48	; 0x30
 8006e18:	2a09      	cmp	r2, #9
 8006e1a:	d903      	bls.n	8006e24 <_svfiprintf_r+0x1a8>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0c5      	beq.n	8006dac <_svfiprintf_r+0x130>
 8006e20:	9105      	str	r1, [sp, #20]
 8006e22:	e7c3      	b.n	8006dac <_svfiprintf_r+0x130>
 8006e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e28:	4604      	mov	r4, r0
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e7f0      	b.n	8006e10 <_svfiprintf_r+0x194>
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	462a      	mov	r2, r5
 8006e34:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <_svfiprintf_r+0x1f8>)
 8006e36:	a904      	add	r1, sp, #16
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f3af 8000 	nop.w
 8006e3e:	1c42      	adds	r2, r0, #1
 8006e40:	4606      	mov	r6, r0
 8006e42:	d1d6      	bne.n	8006df2 <_svfiprintf_r+0x176>
 8006e44:	89ab      	ldrh	r3, [r5, #12]
 8006e46:	065b      	lsls	r3, r3, #25
 8006e48:	f53f af2c 	bmi.w	8006ca4 <_svfiprintf_r+0x28>
 8006e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e4e:	b01d      	add	sp, #116	; 0x74
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	ab03      	add	r3, sp, #12
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	462a      	mov	r2, r5
 8006e5a:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <_svfiprintf_r+0x1f8>)
 8006e5c:	a904      	add	r1, sp, #16
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f000 f87a 	bl	8006f58 <_printf_i>
 8006e64:	e7eb      	b.n	8006e3e <_svfiprintf_r+0x1c2>
 8006e66:	bf00      	nop
 8006e68:	08008294 	.word	0x08008294
 8006e6c:	0800829e 	.word	0x0800829e
 8006e70:	00000000 	.word	0x00000000
 8006e74:	08006bc5 	.word	0x08006bc5
 8006e78:	0800829a 	.word	0x0800829a

08006e7c <_printf_common>:
 8006e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e80:	4616      	mov	r6, r2
 8006e82:	4699      	mov	r9, r3
 8006e84:	688a      	ldr	r2, [r1, #8]
 8006e86:	690b      	ldr	r3, [r1, #16]
 8006e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	bfb8      	it	lt
 8006e90:	4613      	movlt	r3, r2
 8006e92:	6033      	str	r3, [r6, #0]
 8006e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e98:	4607      	mov	r7, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	b10a      	cbz	r2, 8006ea2 <_printf_common+0x26>
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	0699      	lsls	r1, r3, #26
 8006ea6:	bf42      	ittt	mi
 8006ea8:	6833      	ldrmi	r3, [r6, #0]
 8006eaa:	3302      	addmi	r3, #2
 8006eac:	6033      	strmi	r3, [r6, #0]
 8006eae:	6825      	ldr	r5, [r4, #0]
 8006eb0:	f015 0506 	ands.w	r5, r5, #6
 8006eb4:	d106      	bne.n	8006ec4 <_printf_common+0x48>
 8006eb6:	f104 0a19 	add.w	sl, r4, #25
 8006eba:	68e3      	ldr	r3, [r4, #12]
 8006ebc:	6832      	ldr	r2, [r6, #0]
 8006ebe:	1a9b      	subs	r3, r3, r2
 8006ec0:	42ab      	cmp	r3, r5
 8006ec2:	dc26      	bgt.n	8006f12 <_printf_common+0x96>
 8006ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ec8:	1e13      	subs	r3, r2, #0
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	bf18      	it	ne
 8006ece:	2301      	movne	r3, #1
 8006ed0:	0692      	lsls	r2, r2, #26
 8006ed2:	d42b      	bmi.n	8006f2c <_printf_common+0xb0>
 8006ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4638      	mov	r0, r7
 8006edc:	47c0      	blx	r8
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d01e      	beq.n	8006f20 <_printf_common+0xa4>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	68e5      	ldr	r5, [r4, #12]
 8006ee6:	6832      	ldr	r2, [r6, #0]
 8006ee8:	f003 0306 	and.w	r3, r3, #6
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	bf08      	it	eq
 8006ef0:	1aad      	subeq	r5, r5, r2
 8006ef2:	68a3      	ldr	r3, [r4, #8]
 8006ef4:	6922      	ldr	r2, [r4, #16]
 8006ef6:	bf0c      	ite	eq
 8006ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006efc:	2500      	movne	r5, #0
 8006efe:	4293      	cmp	r3, r2
 8006f00:	bfc4      	itt	gt
 8006f02:	1a9b      	subgt	r3, r3, r2
 8006f04:	18ed      	addgt	r5, r5, r3
 8006f06:	2600      	movs	r6, #0
 8006f08:	341a      	adds	r4, #26
 8006f0a:	42b5      	cmp	r5, r6
 8006f0c:	d11a      	bne.n	8006f44 <_printf_common+0xc8>
 8006f0e:	2000      	movs	r0, #0
 8006f10:	e008      	b.n	8006f24 <_printf_common+0xa8>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4652      	mov	r2, sl
 8006f16:	4649      	mov	r1, r9
 8006f18:	4638      	mov	r0, r7
 8006f1a:	47c0      	blx	r8
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d103      	bne.n	8006f28 <_printf_common+0xac>
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f28:	3501      	adds	r5, #1
 8006f2a:	e7c6      	b.n	8006eba <_printf_common+0x3e>
 8006f2c:	18e1      	adds	r1, r4, r3
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	2030      	movs	r0, #48	; 0x30
 8006f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f36:	4422      	add	r2, r4
 8006f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f40:	3302      	adds	r3, #2
 8006f42:	e7c7      	b.n	8006ed4 <_printf_common+0x58>
 8006f44:	2301      	movs	r3, #1
 8006f46:	4622      	mov	r2, r4
 8006f48:	4649      	mov	r1, r9
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	47c0      	blx	r8
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d0e6      	beq.n	8006f20 <_printf_common+0xa4>
 8006f52:	3601      	adds	r6, #1
 8006f54:	e7d9      	b.n	8006f0a <_printf_common+0x8e>
	...

08006f58 <_printf_i>:
 8006f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	4691      	mov	r9, r2
 8006f60:	7e27      	ldrb	r7, [r4, #24]
 8006f62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f64:	2f78      	cmp	r7, #120	; 0x78
 8006f66:	4680      	mov	r8, r0
 8006f68:	469a      	mov	sl, r3
 8006f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f6e:	d807      	bhi.n	8006f80 <_printf_i+0x28>
 8006f70:	2f62      	cmp	r7, #98	; 0x62
 8006f72:	d80a      	bhi.n	8006f8a <_printf_i+0x32>
 8006f74:	2f00      	cmp	r7, #0
 8006f76:	f000 80d8 	beq.w	800712a <_printf_i+0x1d2>
 8006f7a:	2f58      	cmp	r7, #88	; 0x58
 8006f7c:	f000 80a3 	beq.w	80070c6 <_printf_i+0x16e>
 8006f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f88:	e03a      	b.n	8007000 <_printf_i+0xa8>
 8006f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f8e:	2b15      	cmp	r3, #21
 8006f90:	d8f6      	bhi.n	8006f80 <_printf_i+0x28>
 8006f92:	a001      	add	r0, pc, #4	; (adr r0, 8006f98 <_printf_i+0x40>)
 8006f94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f98:	08006ff1 	.word	0x08006ff1
 8006f9c:	08007005 	.word	0x08007005
 8006fa0:	08006f81 	.word	0x08006f81
 8006fa4:	08006f81 	.word	0x08006f81
 8006fa8:	08006f81 	.word	0x08006f81
 8006fac:	08006f81 	.word	0x08006f81
 8006fb0:	08007005 	.word	0x08007005
 8006fb4:	08006f81 	.word	0x08006f81
 8006fb8:	08006f81 	.word	0x08006f81
 8006fbc:	08006f81 	.word	0x08006f81
 8006fc0:	08006f81 	.word	0x08006f81
 8006fc4:	08007111 	.word	0x08007111
 8006fc8:	08007035 	.word	0x08007035
 8006fcc:	080070f3 	.word	0x080070f3
 8006fd0:	08006f81 	.word	0x08006f81
 8006fd4:	08006f81 	.word	0x08006f81
 8006fd8:	08007133 	.word	0x08007133
 8006fdc:	08006f81 	.word	0x08006f81
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	08006f81 	.word	0x08006f81
 8006fe8:	08006f81 	.word	0x08006f81
 8006fec:	080070fb 	.word	0x080070fb
 8006ff0:	680b      	ldr	r3, [r1, #0]
 8006ff2:	1d1a      	adds	r2, r3, #4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	600a      	str	r2, [r1, #0]
 8006ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007000:	2301      	movs	r3, #1
 8007002:	e0a3      	b.n	800714c <_printf_i+0x1f4>
 8007004:	6825      	ldr	r5, [r4, #0]
 8007006:	6808      	ldr	r0, [r1, #0]
 8007008:	062e      	lsls	r6, r5, #24
 800700a:	f100 0304 	add.w	r3, r0, #4
 800700e:	d50a      	bpl.n	8007026 <_printf_i+0xce>
 8007010:	6805      	ldr	r5, [r0, #0]
 8007012:	600b      	str	r3, [r1, #0]
 8007014:	2d00      	cmp	r5, #0
 8007016:	da03      	bge.n	8007020 <_printf_i+0xc8>
 8007018:	232d      	movs	r3, #45	; 0x2d
 800701a:	426d      	negs	r5, r5
 800701c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007020:	485e      	ldr	r0, [pc, #376]	; (800719c <_printf_i+0x244>)
 8007022:	230a      	movs	r3, #10
 8007024:	e019      	b.n	800705a <_printf_i+0x102>
 8007026:	f015 0f40 	tst.w	r5, #64	; 0x40
 800702a:	6805      	ldr	r5, [r0, #0]
 800702c:	600b      	str	r3, [r1, #0]
 800702e:	bf18      	it	ne
 8007030:	b22d      	sxthne	r5, r5
 8007032:	e7ef      	b.n	8007014 <_printf_i+0xbc>
 8007034:	680b      	ldr	r3, [r1, #0]
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	1d18      	adds	r0, r3, #4
 800703a:	6008      	str	r0, [r1, #0]
 800703c:	0628      	lsls	r0, r5, #24
 800703e:	d501      	bpl.n	8007044 <_printf_i+0xec>
 8007040:	681d      	ldr	r5, [r3, #0]
 8007042:	e002      	b.n	800704a <_printf_i+0xf2>
 8007044:	0669      	lsls	r1, r5, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0xe8>
 8007048:	881d      	ldrh	r5, [r3, #0]
 800704a:	4854      	ldr	r0, [pc, #336]	; (800719c <_printf_i+0x244>)
 800704c:	2f6f      	cmp	r7, #111	; 0x6f
 800704e:	bf0c      	ite	eq
 8007050:	2308      	moveq	r3, #8
 8007052:	230a      	movne	r3, #10
 8007054:	2100      	movs	r1, #0
 8007056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800705a:	6866      	ldr	r6, [r4, #4]
 800705c:	60a6      	str	r6, [r4, #8]
 800705e:	2e00      	cmp	r6, #0
 8007060:	bfa2      	ittt	ge
 8007062:	6821      	ldrge	r1, [r4, #0]
 8007064:	f021 0104 	bicge.w	r1, r1, #4
 8007068:	6021      	strge	r1, [r4, #0]
 800706a:	b90d      	cbnz	r5, 8007070 <_printf_i+0x118>
 800706c:	2e00      	cmp	r6, #0
 800706e:	d04d      	beq.n	800710c <_printf_i+0x1b4>
 8007070:	4616      	mov	r6, r2
 8007072:	fbb5 f1f3 	udiv	r1, r5, r3
 8007076:	fb03 5711 	mls	r7, r3, r1, r5
 800707a:	5dc7      	ldrb	r7, [r0, r7]
 800707c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007080:	462f      	mov	r7, r5
 8007082:	42bb      	cmp	r3, r7
 8007084:	460d      	mov	r5, r1
 8007086:	d9f4      	bls.n	8007072 <_printf_i+0x11a>
 8007088:	2b08      	cmp	r3, #8
 800708a:	d10b      	bne.n	80070a4 <_printf_i+0x14c>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	07df      	lsls	r7, r3, #31
 8007090:	d508      	bpl.n	80070a4 <_printf_i+0x14c>
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	6861      	ldr	r1, [r4, #4]
 8007096:	4299      	cmp	r1, r3
 8007098:	bfde      	ittt	le
 800709a:	2330      	movle	r3, #48	; 0x30
 800709c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070a4:	1b92      	subs	r2, r2, r6
 80070a6:	6122      	str	r2, [r4, #16]
 80070a8:	f8cd a000 	str.w	sl, [sp]
 80070ac:	464b      	mov	r3, r9
 80070ae:	aa03      	add	r2, sp, #12
 80070b0:	4621      	mov	r1, r4
 80070b2:	4640      	mov	r0, r8
 80070b4:	f7ff fee2 	bl	8006e7c <_printf_common>
 80070b8:	3001      	adds	r0, #1
 80070ba:	d14c      	bne.n	8007156 <_printf_i+0x1fe>
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295
 80070c0:	b004      	add	sp, #16
 80070c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c6:	4835      	ldr	r0, [pc, #212]	; (800719c <_printf_i+0x244>)
 80070c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	680e      	ldr	r6, [r1, #0]
 80070d0:	061f      	lsls	r7, r3, #24
 80070d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80070d6:	600e      	str	r6, [r1, #0]
 80070d8:	d514      	bpl.n	8007104 <_printf_i+0x1ac>
 80070da:	07d9      	lsls	r1, r3, #31
 80070dc:	bf44      	itt	mi
 80070de:	f043 0320 	orrmi.w	r3, r3, #32
 80070e2:	6023      	strmi	r3, [r4, #0]
 80070e4:	b91d      	cbnz	r5, 80070ee <_printf_i+0x196>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	f023 0320 	bic.w	r3, r3, #32
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	2310      	movs	r3, #16
 80070f0:	e7b0      	b.n	8007054 <_printf_i+0xfc>
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	f043 0320 	orr.w	r3, r3, #32
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	2378      	movs	r3, #120	; 0x78
 80070fc:	4828      	ldr	r0, [pc, #160]	; (80071a0 <_printf_i+0x248>)
 80070fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007102:	e7e3      	b.n	80070cc <_printf_i+0x174>
 8007104:	065e      	lsls	r6, r3, #25
 8007106:	bf48      	it	mi
 8007108:	b2ad      	uxthmi	r5, r5
 800710a:	e7e6      	b.n	80070da <_printf_i+0x182>
 800710c:	4616      	mov	r6, r2
 800710e:	e7bb      	b.n	8007088 <_printf_i+0x130>
 8007110:	680b      	ldr	r3, [r1, #0]
 8007112:	6826      	ldr	r6, [r4, #0]
 8007114:	6960      	ldr	r0, [r4, #20]
 8007116:	1d1d      	adds	r5, r3, #4
 8007118:	600d      	str	r5, [r1, #0]
 800711a:	0635      	lsls	r5, r6, #24
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	d501      	bpl.n	8007124 <_printf_i+0x1cc>
 8007120:	6018      	str	r0, [r3, #0]
 8007122:	e002      	b.n	800712a <_printf_i+0x1d2>
 8007124:	0671      	lsls	r1, r6, #25
 8007126:	d5fb      	bpl.n	8007120 <_printf_i+0x1c8>
 8007128:	8018      	strh	r0, [r3, #0]
 800712a:	2300      	movs	r3, #0
 800712c:	6123      	str	r3, [r4, #16]
 800712e:	4616      	mov	r6, r2
 8007130:	e7ba      	b.n	80070a8 <_printf_i+0x150>
 8007132:	680b      	ldr	r3, [r1, #0]
 8007134:	1d1a      	adds	r2, r3, #4
 8007136:	600a      	str	r2, [r1, #0]
 8007138:	681e      	ldr	r6, [r3, #0]
 800713a:	6862      	ldr	r2, [r4, #4]
 800713c:	2100      	movs	r1, #0
 800713e:	4630      	mov	r0, r6
 8007140:	f7f9 f86e 	bl	8000220 <memchr>
 8007144:	b108      	cbz	r0, 800714a <_printf_i+0x1f2>
 8007146:	1b80      	subs	r0, r0, r6
 8007148:	6060      	str	r0, [r4, #4]
 800714a:	6863      	ldr	r3, [r4, #4]
 800714c:	6123      	str	r3, [r4, #16]
 800714e:	2300      	movs	r3, #0
 8007150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007154:	e7a8      	b.n	80070a8 <_printf_i+0x150>
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	4632      	mov	r2, r6
 800715a:	4649      	mov	r1, r9
 800715c:	4640      	mov	r0, r8
 800715e:	47d0      	blx	sl
 8007160:	3001      	adds	r0, #1
 8007162:	d0ab      	beq.n	80070bc <_printf_i+0x164>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	079b      	lsls	r3, r3, #30
 8007168:	d413      	bmi.n	8007192 <_printf_i+0x23a>
 800716a:	68e0      	ldr	r0, [r4, #12]
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	4298      	cmp	r0, r3
 8007170:	bfb8      	it	lt
 8007172:	4618      	movlt	r0, r3
 8007174:	e7a4      	b.n	80070c0 <_printf_i+0x168>
 8007176:	2301      	movs	r3, #1
 8007178:	4632      	mov	r2, r6
 800717a:	4649      	mov	r1, r9
 800717c:	4640      	mov	r0, r8
 800717e:	47d0      	blx	sl
 8007180:	3001      	adds	r0, #1
 8007182:	d09b      	beq.n	80070bc <_printf_i+0x164>
 8007184:	3501      	adds	r5, #1
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	9903      	ldr	r1, [sp, #12]
 800718a:	1a5b      	subs	r3, r3, r1
 800718c:	42ab      	cmp	r3, r5
 800718e:	dcf2      	bgt.n	8007176 <_printf_i+0x21e>
 8007190:	e7eb      	b.n	800716a <_printf_i+0x212>
 8007192:	2500      	movs	r5, #0
 8007194:	f104 0619 	add.w	r6, r4, #25
 8007198:	e7f5      	b.n	8007186 <_printf_i+0x22e>
 800719a:	bf00      	nop
 800719c:	080082a5 	.word	0x080082a5
 80071a0:	080082b6 	.word	0x080082b6

080071a4 <memcpy>:
 80071a4:	440a      	add	r2, r1
 80071a6:	4291      	cmp	r1, r2
 80071a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071ac:	d100      	bne.n	80071b0 <memcpy+0xc>
 80071ae:	4770      	bx	lr
 80071b0:	b510      	push	{r4, lr}
 80071b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ba:	4291      	cmp	r1, r2
 80071bc:	d1f9      	bne.n	80071b2 <memcpy+0xe>
 80071be:	bd10      	pop	{r4, pc}

080071c0 <memmove>:
 80071c0:	4288      	cmp	r0, r1
 80071c2:	b510      	push	{r4, lr}
 80071c4:	eb01 0402 	add.w	r4, r1, r2
 80071c8:	d902      	bls.n	80071d0 <memmove+0x10>
 80071ca:	4284      	cmp	r4, r0
 80071cc:	4623      	mov	r3, r4
 80071ce:	d807      	bhi.n	80071e0 <memmove+0x20>
 80071d0:	1e43      	subs	r3, r0, #1
 80071d2:	42a1      	cmp	r1, r4
 80071d4:	d008      	beq.n	80071e8 <memmove+0x28>
 80071d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071de:	e7f8      	b.n	80071d2 <memmove+0x12>
 80071e0:	4402      	add	r2, r0
 80071e2:	4601      	mov	r1, r0
 80071e4:	428a      	cmp	r2, r1
 80071e6:	d100      	bne.n	80071ea <memmove+0x2a>
 80071e8:	bd10      	pop	{r4, pc}
 80071ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071f2:	e7f7      	b.n	80071e4 <memmove+0x24>

080071f4 <_free_r>:
 80071f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071f6:	2900      	cmp	r1, #0
 80071f8:	d048      	beq.n	800728c <_free_r+0x98>
 80071fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fe:	9001      	str	r0, [sp, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f1a1 0404 	sub.w	r4, r1, #4
 8007206:	bfb8      	it	lt
 8007208:	18e4      	addlt	r4, r4, r3
 800720a:	f000 f8d3 	bl	80073b4 <__malloc_lock>
 800720e:	4a20      	ldr	r2, [pc, #128]	; (8007290 <_free_r+0x9c>)
 8007210:	9801      	ldr	r0, [sp, #4]
 8007212:	6813      	ldr	r3, [r2, #0]
 8007214:	4615      	mov	r5, r2
 8007216:	b933      	cbnz	r3, 8007226 <_free_r+0x32>
 8007218:	6063      	str	r3, [r4, #4]
 800721a:	6014      	str	r4, [r2, #0]
 800721c:	b003      	add	sp, #12
 800721e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007222:	f000 b8cd 	b.w	80073c0 <__malloc_unlock>
 8007226:	42a3      	cmp	r3, r4
 8007228:	d90b      	bls.n	8007242 <_free_r+0x4e>
 800722a:	6821      	ldr	r1, [r4, #0]
 800722c:	1862      	adds	r2, r4, r1
 800722e:	4293      	cmp	r3, r2
 8007230:	bf04      	itt	eq
 8007232:	681a      	ldreq	r2, [r3, #0]
 8007234:	685b      	ldreq	r3, [r3, #4]
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	bf04      	itt	eq
 800723a:	1852      	addeq	r2, r2, r1
 800723c:	6022      	streq	r2, [r4, #0]
 800723e:	602c      	str	r4, [r5, #0]
 8007240:	e7ec      	b.n	800721c <_free_r+0x28>
 8007242:	461a      	mov	r2, r3
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b10b      	cbz	r3, 800724c <_free_r+0x58>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d9fa      	bls.n	8007242 <_free_r+0x4e>
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	1855      	adds	r5, r2, r1
 8007250:	42a5      	cmp	r5, r4
 8007252:	d10b      	bne.n	800726c <_free_r+0x78>
 8007254:	6824      	ldr	r4, [r4, #0]
 8007256:	4421      	add	r1, r4
 8007258:	1854      	adds	r4, r2, r1
 800725a:	42a3      	cmp	r3, r4
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	d1dd      	bne.n	800721c <_free_r+0x28>
 8007260:	681c      	ldr	r4, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	6053      	str	r3, [r2, #4]
 8007266:	4421      	add	r1, r4
 8007268:	6011      	str	r1, [r2, #0]
 800726a:	e7d7      	b.n	800721c <_free_r+0x28>
 800726c:	d902      	bls.n	8007274 <_free_r+0x80>
 800726e:	230c      	movs	r3, #12
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	e7d3      	b.n	800721c <_free_r+0x28>
 8007274:	6825      	ldr	r5, [r4, #0]
 8007276:	1961      	adds	r1, r4, r5
 8007278:	428b      	cmp	r3, r1
 800727a:	bf04      	itt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	bf04      	itt	eq
 8007284:	1949      	addeq	r1, r1, r5
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	6054      	str	r4, [r2, #4]
 800728a:	e7c7      	b.n	800721c <_free_r+0x28>
 800728c:	b003      	add	sp, #12
 800728e:	bd30      	pop	{r4, r5, pc}
 8007290:	2000027c 	.word	0x2000027c

08007294 <_malloc_r>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	1ccd      	adds	r5, r1, #3
 8007298:	f025 0503 	bic.w	r5, r5, #3
 800729c:	3508      	adds	r5, #8
 800729e:	2d0c      	cmp	r5, #12
 80072a0:	bf38      	it	cc
 80072a2:	250c      	movcc	r5, #12
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	4606      	mov	r6, r0
 80072a8:	db01      	blt.n	80072ae <_malloc_r+0x1a>
 80072aa:	42a9      	cmp	r1, r5
 80072ac:	d903      	bls.n	80072b6 <_malloc_r+0x22>
 80072ae:	230c      	movs	r3, #12
 80072b0:	6033      	str	r3, [r6, #0]
 80072b2:	2000      	movs	r0, #0
 80072b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b6:	f000 f87d 	bl	80073b4 <__malloc_lock>
 80072ba:	4921      	ldr	r1, [pc, #132]	; (8007340 <_malloc_r+0xac>)
 80072bc:	680a      	ldr	r2, [r1, #0]
 80072be:	4614      	mov	r4, r2
 80072c0:	b99c      	cbnz	r4, 80072ea <_malloc_r+0x56>
 80072c2:	4f20      	ldr	r7, [pc, #128]	; (8007344 <_malloc_r+0xb0>)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	b923      	cbnz	r3, 80072d2 <_malloc_r+0x3e>
 80072c8:	4621      	mov	r1, r4
 80072ca:	4630      	mov	r0, r6
 80072cc:	f000 f862 	bl	8007394 <_sbrk_r>
 80072d0:	6038      	str	r0, [r7, #0]
 80072d2:	4629      	mov	r1, r5
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 f85d 	bl	8007394 <_sbrk_r>
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	d123      	bne.n	8007326 <_malloc_r+0x92>
 80072de:	230c      	movs	r3, #12
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	4630      	mov	r0, r6
 80072e4:	f000 f86c 	bl	80073c0 <__malloc_unlock>
 80072e8:	e7e3      	b.n	80072b2 <_malloc_r+0x1e>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	1b5b      	subs	r3, r3, r5
 80072ee:	d417      	bmi.n	8007320 <_malloc_r+0x8c>
 80072f0:	2b0b      	cmp	r3, #11
 80072f2:	d903      	bls.n	80072fc <_malloc_r+0x68>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	441c      	add	r4, r3
 80072f8:	6025      	str	r5, [r4, #0]
 80072fa:	e004      	b.n	8007306 <_malloc_r+0x72>
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	42a2      	cmp	r2, r4
 8007300:	bf0c      	ite	eq
 8007302:	600b      	streq	r3, [r1, #0]
 8007304:	6053      	strne	r3, [r2, #4]
 8007306:	4630      	mov	r0, r6
 8007308:	f000 f85a 	bl	80073c0 <__malloc_unlock>
 800730c:	f104 000b 	add.w	r0, r4, #11
 8007310:	1d23      	adds	r3, r4, #4
 8007312:	f020 0007 	bic.w	r0, r0, #7
 8007316:	1ac2      	subs	r2, r0, r3
 8007318:	d0cc      	beq.n	80072b4 <_malloc_r+0x20>
 800731a:	1a1b      	subs	r3, r3, r0
 800731c:	50a3      	str	r3, [r4, r2]
 800731e:	e7c9      	b.n	80072b4 <_malloc_r+0x20>
 8007320:	4622      	mov	r2, r4
 8007322:	6864      	ldr	r4, [r4, #4]
 8007324:	e7cc      	b.n	80072c0 <_malloc_r+0x2c>
 8007326:	1cc4      	adds	r4, r0, #3
 8007328:	f024 0403 	bic.w	r4, r4, #3
 800732c:	42a0      	cmp	r0, r4
 800732e:	d0e3      	beq.n	80072f8 <_malloc_r+0x64>
 8007330:	1a21      	subs	r1, r4, r0
 8007332:	4630      	mov	r0, r6
 8007334:	f000 f82e 	bl	8007394 <_sbrk_r>
 8007338:	3001      	adds	r0, #1
 800733a:	d1dd      	bne.n	80072f8 <_malloc_r+0x64>
 800733c:	e7cf      	b.n	80072de <_malloc_r+0x4a>
 800733e:	bf00      	nop
 8007340:	2000027c 	.word	0x2000027c
 8007344:	20000280 	.word	0x20000280

08007348 <_realloc_r>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	4607      	mov	r7, r0
 800734c:	4614      	mov	r4, r2
 800734e:	460e      	mov	r6, r1
 8007350:	b921      	cbnz	r1, 800735c <_realloc_r+0x14>
 8007352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007356:	4611      	mov	r1, r2
 8007358:	f7ff bf9c 	b.w	8007294 <_malloc_r>
 800735c:	b922      	cbnz	r2, 8007368 <_realloc_r+0x20>
 800735e:	f7ff ff49 	bl	80071f4 <_free_r>
 8007362:	4625      	mov	r5, r4
 8007364:	4628      	mov	r0, r5
 8007366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007368:	f000 f830 	bl	80073cc <_malloc_usable_size_r>
 800736c:	42a0      	cmp	r0, r4
 800736e:	d20f      	bcs.n	8007390 <_realloc_r+0x48>
 8007370:	4621      	mov	r1, r4
 8007372:	4638      	mov	r0, r7
 8007374:	f7ff ff8e 	bl	8007294 <_malloc_r>
 8007378:	4605      	mov	r5, r0
 800737a:	2800      	cmp	r0, #0
 800737c:	d0f2      	beq.n	8007364 <_realloc_r+0x1c>
 800737e:	4631      	mov	r1, r6
 8007380:	4622      	mov	r2, r4
 8007382:	f7ff ff0f 	bl	80071a4 <memcpy>
 8007386:	4631      	mov	r1, r6
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff ff33 	bl	80071f4 <_free_r>
 800738e:	e7e9      	b.n	8007364 <_realloc_r+0x1c>
 8007390:	4635      	mov	r5, r6
 8007392:	e7e7      	b.n	8007364 <_realloc_r+0x1c>

08007394 <_sbrk_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d06      	ldr	r5, [pc, #24]	; (80073b0 <_sbrk_r+0x1c>)
 8007398:	2300      	movs	r3, #0
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	f7fb f93c 	bl	800261c <_sbrk>
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d102      	bne.n	80073ae <_sbrk_r+0x1a>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	b103      	cbz	r3, 80073ae <_sbrk_r+0x1a>
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	20019b88 	.word	0x20019b88

080073b4 <__malloc_lock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__malloc_lock+0x8>)
 80073b6:	f000 b811 	b.w	80073dc <__retarget_lock_acquire_recursive>
 80073ba:	bf00      	nop
 80073bc:	20019b90 	.word	0x20019b90

080073c0 <__malloc_unlock>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__malloc_unlock+0x8>)
 80073c2:	f000 b80c 	b.w	80073de <__retarget_lock_release_recursive>
 80073c6:	bf00      	nop
 80073c8:	20019b90 	.word	0x20019b90

080073cc <_malloc_usable_size_r>:
 80073cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d0:	1f18      	subs	r0, r3, #4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bfbc      	itt	lt
 80073d6:	580b      	ldrlt	r3, [r1, r0]
 80073d8:	18c0      	addlt	r0, r0, r3
 80073da:	4770      	bx	lr

080073dc <__retarget_lock_acquire_recursive>:
 80073dc:	4770      	bx	lr

080073de <__retarget_lock_release_recursive>:
 80073de:	4770      	bx	lr

080073e0 <cosf>:
 80073e0:	ee10 3a10 	vmov	r3, s0
 80073e4:	b507      	push	{r0, r1, r2, lr}
 80073e6:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <cosf+0x78>)
 80073e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073ec:	4293      	cmp	r3, r2
 80073ee:	dc04      	bgt.n	80073fa <cosf+0x1a>
 80073f0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800745c <cosf+0x7c>
 80073f4:	f000 fa9a 	bl	800792c <__kernel_cosf>
 80073f8:	e004      	b.n	8007404 <cosf+0x24>
 80073fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80073fe:	db04      	blt.n	800740a <cosf+0x2a>
 8007400:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007404:	b003      	add	sp, #12
 8007406:	f85d fb04 	ldr.w	pc, [sp], #4
 800740a:	4668      	mov	r0, sp
 800740c:	f000 f952 	bl	80076b4 <__ieee754_rem_pio2f>
 8007410:	f000 0003 	and.w	r0, r0, #3
 8007414:	2801      	cmp	r0, #1
 8007416:	d007      	beq.n	8007428 <cosf+0x48>
 8007418:	2802      	cmp	r0, #2
 800741a:	d00e      	beq.n	800743a <cosf+0x5a>
 800741c:	b9a0      	cbnz	r0, 8007448 <cosf+0x68>
 800741e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007422:	ed9d 0a00 	vldr	s0, [sp]
 8007426:	e7e5      	b.n	80073f4 <cosf+0x14>
 8007428:	eddd 0a01 	vldr	s1, [sp, #4]
 800742c:	ed9d 0a00 	vldr	s0, [sp]
 8007430:	f000 fd66 	bl	8007f00 <__kernel_sinf>
 8007434:	eeb1 0a40 	vneg.f32	s0, s0
 8007438:	e7e4      	b.n	8007404 <cosf+0x24>
 800743a:	eddd 0a01 	vldr	s1, [sp, #4]
 800743e:	ed9d 0a00 	vldr	s0, [sp]
 8007442:	f000 fa73 	bl	800792c <__kernel_cosf>
 8007446:	e7f5      	b.n	8007434 <cosf+0x54>
 8007448:	eddd 0a01 	vldr	s1, [sp, #4]
 800744c:	ed9d 0a00 	vldr	s0, [sp]
 8007450:	2001      	movs	r0, #1
 8007452:	f000 fd55 	bl	8007f00 <__kernel_sinf>
 8007456:	e7d5      	b.n	8007404 <cosf+0x24>
 8007458:	3f490fd8 	.word	0x3f490fd8
 800745c:	00000000 	.word	0x00000000

08007460 <sinf>:
 8007460:	ee10 3a10 	vmov	r3, s0
 8007464:	b507      	push	{r0, r1, r2, lr}
 8007466:	4a1d      	ldr	r2, [pc, #116]	; (80074dc <sinf+0x7c>)
 8007468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800746c:	4293      	cmp	r3, r2
 800746e:	dc05      	bgt.n	800747c <sinf+0x1c>
 8007470:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80074e0 <sinf+0x80>
 8007474:	2000      	movs	r0, #0
 8007476:	f000 fd43 	bl	8007f00 <__kernel_sinf>
 800747a:	e004      	b.n	8007486 <sinf+0x26>
 800747c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007480:	db04      	blt.n	800748c <sinf+0x2c>
 8007482:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007486:	b003      	add	sp, #12
 8007488:	f85d fb04 	ldr.w	pc, [sp], #4
 800748c:	4668      	mov	r0, sp
 800748e:	f000 f911 	bl	80076b4 <__ieee754_rem_pio2f>
 8007492:	f000 0003 	and.w	r0, r0, #3
 8007496:	2801      	cmp	r0, #1
 8007498:	d008      	beq.n	80074ac <sinf+0x4c>
 800749a:	2802      	cmp	r0, #2
 800749c:	d00d      	beq.n	80074ba <sinf+0x5a>
 800749e:	b9b0      	cbnz	r0, 80074ce <sinf+0x6e>
 80074a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80074a4:	ed9d 0a00 	vldr	s0, [sp]
 80074a8:	2001      	movs	r0, #1
 80074aa:	e7e4      	b.n	8007476 <sinf+0x16>
 80074ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80074b0:	ed9d 0a00 	vldr	s0, [sp]
 80074b4:	f000 fa3a 	bl	800792c <__kernel_cosf>
 80074b8:	e7e5      	b.n	8007486 <sinf+0x26>
 80074ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80074be:	ed9d 0a00 	vldr	s0, [sp]
 80074c2:	2001      	movs	r0, #1
 80074c4:	f000 fd1c 	bl	8007f00 <__kernel_sinf>
 80074c8:	eeb1 0a40 	vneg.f32	s0, s0
 80074cc:	e7db      	b.n	8007486 <sinf+0x26>
 80074ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80074d2:	ed9d 0a00 	vldr	s0, [sp]
 80074d6:	f000 fa29 	bl	800792c <__kernel_cosf>
 80074da:	e7f5      	b.n	80074c8 <sinf+0x68>
 80074dc:	3f490fd8 	.word	0x3f490fd8
 80074e0:	00000000 	.word	0x00000000

080074e4 <sqrt>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	ed2d 8b02 	vpush	{d8}
 80074ea:	ec55 4b10 	vmov	r4, r5, d0
 80074ee:	f000 f82d 	bl	800754c <__ieee754_sqrt>
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <sqrt+0x64>)
 80074f4:	eeb0 8a40 	vmov.f32	s16, s0
 80074f8:	eef0 8a60 	vmov.f32	s17, s1
 80074fc:	f993 3000 	ldrsb.w	r3, [r3]
 8007500:	3301      	adds	r3, #1
 8007502:	d019      	beq.n	8007538 <sqrt+0x54>
 8007504:	4622      	mov	r2, r4
 8007506:	462b      	mov	r3, r5
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	f7f9 fb2e 	bl	8000b6c <__aeabi_dcmpun>
 8007510:	b990      	cbnz	r0, 8007538 <sqrt+0x54>
 8007512:	2200      	movs	r2, #0
 8007514:	2300      	movs	r3, #0
 8007516:	4620      	mov	r0, r4
 8007518:	4629      	mov	r1, r5
 800751a:	f7f9 faff 	bl	8000b1c <__aeabi_dcmplt>
 800751e:	b158      	cbz	r0, 8007538 <sqrt+0x54>
 8007520:	f7ff fafe 	bl	8006b20 <__errno>
 8007524:	2321      	movs	r3, #33	; 0x21
 8007526:	6003      	str	r3, [r0, #0]
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	4610      	mov	r0, r2
 800752e:	4619      	mov	r1, r3
 8007530:	f7f9 f9ac 	bl	800088c <__aeabi_ddiv>
 8007534:	ec41 0b18 	vmov	d8, r0, r1
 8007538:	eeb0 0a48 	vmov.f32	s0, s16
 800753c:	eef0 0a68 	vmov.f32	s1, s17
 8007540:	ecbd 8b02 	vpop	{d8}
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	bf00      	nop
 8007548:	2000007c 	.word	0x2000007c

0800754c <__ieee754_sqrt>:
 800754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007550:	ec55 4b10 	vmov	r4, r5, d0
 8007554:	4e56      	ldr	r6, [pc, #344]	; (80076b0 <__ieee754_sqrt+0x164>)
 8007556:	43ae      	bics	r6, r5
 8007558:	ee10 0a10 	vmov	r0, s0
 800755c:	ee10 3a10 	vmov	r3, s0
 8007560:	4629      	mov	r1, r5
 8007562:	462a      	mov	r2, r5
 8007564:	d110      	bne.n	8007588 <__ieee754_sqrt+0x3c>
 8007566:	ee10 2a10 	vmov	r2, s0
 800756a:	462b      	mov	r3, r5
 800756c:	f7f9 f864 	bl	8000638 <__aeabi_dmul>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4620      	mov	r0, r4
 8007576:	4629      	mov	r1, r5
 8007578:	f7f8 fea8 	bl	80002cc <__adddf3>
 800757c:	4604      	mov	r4, r0
 800757e:	460d      	mov	r5, r1
 8007580:	ec45 4b10 	vmov	d0, r4, r5
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007588:	2d00      	cmp	r5, #0
 800758a:	dc10      	bgt.n	80075ae <__ieee754_sqrt+0x62>
 800758c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007590:	4330      	orrs	r0, r6
 8007592:	d0f5      	beq.n	8007580 <__ieee754_sqrt+0x34>
 8007594:	b15d      	cbz	r5, 80075ae <__ieee754_sqrt+0x62>
 8007596:	ee10 2a10 	vmov	r2, s0
 800759a:	462b      	mov	r3, r5
 800759c:	ee10 0a10 	vmov	r0, s0
 80075a0:	f7f8 fe92 	bl	80002c8 <__aeabi_dsub>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	f7f9 f970 	bl	800088c <__aeabi_ddiv>
 80075ac:	e7e6      	b.n	800757c <__ieee754_sqrt+0x30>
 80075ae:	1509      	asrs	r1, r1, #20
 80075b0:	d076      	beq.n	80076a0 <__ieee754_sqrt+0x154>
 80075b2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80075b6:	07ce      	lsls	r6, r1, #31
 80075b8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80075bc:	bf5e      	ittt	pl
 80075be:	0fda      	lsrpl	r2, r3, #31
 80075c0:	005b      	lslpl	r3, r3, #1
 80075c2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80075c6:	0fda      	lsrs	r2, r3, #31
 80075c8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80075cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80075d0:	2000      	movs	r0, #0
 80075d2:	106d      	asrs	r5, r5, #1
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	f04f 0e16 	mov.w	lr, #22
 80075da:	4684      	mov	ip, r0
 80075dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075e0:	eb0c 0401 	add.w	r4, ip, r1
 80075e4:	4294      	cmp	r4, r2
 80075e6:	bfde      	ittt	le
 80075e8:	1b12      	suble	r2, r2, r4
 80075ea:	eb04 0c01 	addle.w	ip, r4, r1
 80075ee:	1840      	addle	r0, r0, r1
 80075f0:	0052      	lsls	r2, r2, #1
 80075f2:	f1be 0e01 	subs.w	lr, lr, #1
 80075f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80075fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80075fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007602:	d1ed      	bne.n	80075e0 <__ieee754_sqrt+0x94>
 8007604:	4671      	mov	r1, lr
 8007606:	2720      	movs	r7, #32
 8007608:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800760c:	4562      	cmp	r2, ip
 800760e:	eb04 060e 	add.w	r6, r4, lr
 8007612:	dc02      	bgt.n	800761a <__ieee754_sqrt+0xce>
 8007614:	d113      	bne.n	800763e <__ieee754_sqrt+0xf2>
 8007616:	429e      	cmp	r6, r3
 8007618:	d811      	bhi.n	800763e <__ieee754_sqrt+0xf2>
 800761a:	2e00      	cmp	r6, #0
 800761c:	eb06 0e04 	add.w	lr, r6, r4
 8007620:	da43      	bge.n	80076aa <__ieee754_sqrt+0x15e>
 8007622:	f1be 0f00 	cmp.w	lr, #0
 8007626:	db40      	blt.n	80076aa <__ieee754_sqrt+0x15e>
 8007628:	f10c 0801 	add.w	r8, ip, #1
 800762c:	eba2 020c 	sub.w	r2, r2, ip
 8007630:	429e      	cmp	r6, r3
 8007632:	bf88      	it	hi
 8007634:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007638:	1b9b      	subs	r3, r3, r6
 800763a:	4421      	add	r1, r4
 800763c:	46c4      	mov	ip, r8
 800763e:	0052      	lsls	r2, r2, #1
 8007640:	3f01      	subs	r7, #1
 8007642:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007646:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800764a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800764e:	d1dd      	bne.n	800760c <__ieee754_sqrt+0xc0>
 8007650:	4313      	orrs	r3, r2
 8007652:	d006      	beq.n	8007662 <__ieee754_sqrt+0x116>
 8007654:	1c4c      	adds	r4, r1, #1
 8007656:	bf13      	iteet	ne
 8007658:	3101      	addne	r1, #1
 800765a:	3001      	addeq	r0, #1
 800765c:	4639      	moveq	r1, r7
 800765e:	f021 0101 	bicne.w	r1, r1, #1
 8007662:	1043      	asrs	r3, r0, #1
 8007664:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007668:	0849      	lsrs	r1, r1, #1
 800766a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800766e:	07c2      	lsls	r2, r0, #31
 8007670:	bf48      	it	mi
 8007672:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007676:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800767a:	460c      	mov	r4, r1
 800767c:	463d      	mov	r5, r7
 800767e:	e77f      	b.n	8007580 <__ieee754_sqrt+0x34>
 8007680:	0ada      	lsrs	r2, r3, #11
 8007682:	3815      	subs	r0, #21
 8007684:	055b      	lsls	r3, r3, #21
 8007686:	2a00      	cmp	r2, #0
 8007688:	d0fa      	beq.n	8007680 <__ieee754_sqrt+0x134>
 800768a:	02d7      	lsls	r7, r2, #11
 800768c:	d50a      	bpl.n	80076a4 <__ieee754_sqrt+0x158>
 800768e:	f1c1 0420 	rsb	r4, r1, #32
 8007692:	fa23 f404 	lsr.w	r4, r3, r4
 8007696:	1e4d      	subs	r5, r1, #1
 8007698:	408b      	lsls	r3, r1
 800769a:	4322      	orrs	r2, r4
 800769c:	1b41      	subs	r1, r0, r5
 800769e:	e788      	b.n	80075b2 <__ieee754_sqrt+0x66>
 80076a0:	4608      	mov	r0, r1
 80076a2:	e7f0      	b.n	8007686 <__ieee754_sqrt+0x13a>
 80076a4:	0052      	lsls	r2, r2, #1
 80076a6:	3101      	adds	r1, #1
 80076a8:	e7ef      	b.n	800768a <__ieee754_sqrt+0x13e>
 80076aa:	46e0      	mov	r8, ip
 80076ac:	e7be      	b.n	800762c <__ieee754_sqrt+0xe0>
 80076ae:	bf00      	nop
 80076b0:	7ff00000 	.word	0x7ff00000

080076b4 <__ieee754_rem_pio2f>:
 80076b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076b6:	ee10 6a10 	vmov	r6, s0
 80076ba:	4b8e      	ldr	r3, [pc, #568]	; (80078f4 <__ieee754_rem_pio2f+0x240>)
 80076bc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80076c0:	429d      	cmp	r5, r3
 80076c2:	b087      	sub	sp, #28
 80076c4:	eef0 7a40 	vmov.f32	s15, s0
 80076c8:	4604      	mov	r4, r0
 80076ca:	dc05      	bgt.n	80076d8 <__ieee754_rem_pio2f+0x24>
 80076cc:	2300      	movs	r3, #0
 80076ce:	ed80 0a00 	vstr	s0, [r0]
 80076d2:	6043      	str	r3, [r0, #4]
 80076d4:	2000      	movs	r0, #0
 80076d6:	e01a      	b.n	800770e <__ieee754_rem_pio2f+0x5a>
 80076d8:	4b87      	ldr	r3, [pc, #540]	; (80078f8 <__ieee754_rem_pio2f+0x244>)
 80076da:	429d      	cmp	r5, r3
 80076dc:	dc46      	bgt.n	800776c <__ieee754_rem_pio2f+0xb8>
 80076de:	2e00      	cmp	r6, #0
 80076e0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80078fc <__ieee754_rem_pio2f+0x248>
 80076e4:	4b86      	ldr	r3, [pc, #536]	; (8007900 <__ieee754_rem_pio2f+0x24c>)
 80076e6:	f025 050f 	bic.w	r5, r5, #15
 80076ea:	dd1f      	ble.n	800772c <__ieee754_rem_pio2f+0x78>
 80076ec:	429d      	cmp	r5, r3
 80076ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80076f2:	d00e      	beq.n	8007712 <__ieee754_rem_pio2f+0x5e>
 80076f4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007904 <__ieee754_rem_pio2f+0x250>
 80076f8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80076fc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007700:	ed80 0a00 	vstr	s0, [r0]
 8007704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007708:	2001      	movs	r0, #1
 800770a:	edc4 7a01 	vstr	s15, [r4, #4]
 800770e:	b007      	add	sp, #28
 8007710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007712:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007908 <__ieee754_rem_pio2f+0x254>
 8007716:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800790c <__ieee754_rem_pio2f+0x258>
 800771a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800771e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007722:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007726:	edc0 6a00 	vstr	s13, [r0]
 800772a:	e7eb      	b.n	8007704 <__ieee754_rem_pio2f+0x50>
 800772c:	429d      	cmp	r5, r3
 800772e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007732:	d00e      	beq.n	8007752 <__ieee754_rem_pio2f+0x9e>
 8007734:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007904 <__ieee754_rem_pio2f+0x250>
 8007738:	ee37 0a87 	vadd.f32	s0, s15, s14
 800773c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007740:	ed80 0a00 	vstr	s0, [r0]
 8007744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	edc4 7a01 	vstr	s15, [r4, #4]
 8007750:	e7dd      	b.n	800770e <__ieee754_rem_pio2f+0x5a>
 8007752:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007908 <__ieee754_rem_pio2f+0x254>
 8007756:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800790c <__ieee754_rem_pio2f+0x258>
 800775a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800775e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007762:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007766:	edc0 6a00 	vstr	s13, [r0]
 800776a:	e7eb      	b.n	8007744 <__ieee754_rem_pio2f+0x90>
 800776c:	4b68      	ldr	r3, [pc, #416]	; (8007910 <__ieee754_rem_pio2f+0x25c>)
 800776e:	429d      	cmp	r5, r3
 8007770:	dc72      	bgt.n	8007858 <__ieee754_rem_pio2f+0x1a4>
 8007772:	f000 fc0d 	bl	8007f90 <fabsf>
 8007776:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007914 <__ieee754_rem_pio2f+0x260>
 800777a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800777e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800778a:	ee17 0a90 	vmov	r0, s15
 800778e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80078fc <__ieee754_rem_pio2f+0x248>
 8007792:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007796:	281f      	cmp	r0, #31
 8007798:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007904 <__ieee754_rem_pio2f+0x250>
 800779c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a0:	eeb1 6a47 	vneg.f32	s12, s14
 80077a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80077a8:	ee16 2a90 	vmov	r2, s13
 80077ac:	dc1c      	bgt.n	80077e8 <__ieee754_rem_pio2f+0x134>
 80077ae:	495a      	ldr	r1, [pc, #360]	; (8007918 <__ieee754_rem_pio2f+0x264>)
 80077b0:	1e47      	subs	r7, r0, #1
 80077b2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80077b6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80077ba:	428b      	cmp	r3, r1
 80077bc:	d014      	beq.n	80077e8 <__ieee754_rem_pio2f+0x134>
 80077be:	6022      	str	r2, [r4, #0]
 80077c0:	ed94 7a00 	vldr	s14, [r4]
 80077c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80077c8:	2e00      	cmp	r6, #0
 80077ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80077ce:	ed84 0a01 	vstr	s0, [r4, #4]
 80077d2:	da9c      	bge.n	800770e <__ieee754_rem_pio2f+0x5a>
 80077d4:	eeb1 7a47 	vneg.f32	s14, s14
 80077d8:	eeb1 0a40 	vneg.f32	s0, s0
 80077dc:	ed84 7a00 	vstr	s14, [r4]
 80077e0:	ed84 0a01 	vstr	s0, [r4, #4]
 80077e4:	4240      	negs	r0, r0
 80077e6:	e792      	b.n	800770e <__ieee754_rem_pio2f+0x5a>
 80077e8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80077ec:	15eb      	asrs	r3, r5, #23
 80077ee:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80077f2:	2d08      	cmp	r5, #8
 80077f4:	dde3      	ble.n	80077be <__ieee754_rem_pio2f+0x10a>
 80077f6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007908 <__ieee754_rem_pio2f+0x254>
 80077fa:	eef0 6a40 	vmov.f32	s13, s0
 80077fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007802:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007806:	eea6 0a27 	vfma.f32	s0, s12, s15
 800780a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800790c <__ieee754_rem_pio2f+0x258>
 800780e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8007812:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007816:	eef0 7a40 	vmov.f32	s15, s0
 800781a:	ee15 2a90 	vmov	r2, s11
 800781e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007822:	1a5b      	subs	r3, r3, r1
 8007824:	2b19      	cmp	r3, #25
 8007826:	dc04      	bgt.n	8007832 <__ieee754_rem_pio2f+0x17e>
 8007828:	edc4 5a00 	vstr	s11, [r4]
 800782c:	eeb0 0a66 	vmov.f32	s0, s13
 8007830:	e7c6      	b.n	80077c0 <__ieee754_rem_pio2f+0x10c>
 8007832:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800791c <__ieee754_rem_pio2f+0x268>
 8007836:	eeb0 0a66 	vmov.f32	s0, s13
 800783a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800783e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007842:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007920 <__ieee754_rem_pio2f+0x26c>
 8007846:	eee6 7a25 	vfma.f32	s15, s12, s11
 800784a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800784e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007852:	ed84 7a00 	vstr	s14, [r4]
 8007856:	e7b3      	b.n	80077c0 <__ieee754_rem_pio2f+0x10c>
 8007858:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800785c:	db06      	blt.n	800786c <__ieee754_rem_pio2f+0x1b8>
 800785e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007862:	edc0 7a01 	vstr	s15, [r0, #4]
 8007866:	edc0 7a00 	vstr	s15, [r0]
 800786a:	e733      	b.n	80076d4 <__ieee754_rem_pio2f+0x20>
 800786c:	15ea      	asrs	r2, r5, #23
 800786e:	3a86      	subs	r2, #134	; 0x86
 8007870:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007874:	ee07 3a90 	vmov	s15, r3
 8007878:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800787c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007924 <__ieee754_rem_pio2f+0x270>
 8007880:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007888:	ed8d 7a03 	vstr	s14, [sp, #12]
 800788c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007890:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007894:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800789c:	ed8d 7a04 	vstr	s14, [sp, #16]
 80078a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ac:	edcd 7a05 	vstr	s15, [sp, #20]
 80078b0:	d11e      	bne.n	80078f0 <__ieee754_rem_pio2f+0x23c>
 80078b2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80078b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ba:	bf14      	ite	ne
 80078bc:	2302      	movne	r3, #2
 80078be:	2301      	moveq	r3, #1
 80078c0:	4919      	ldr	r1, [pc, #100]	; (8007928 <__ieee754_rem_pio2f+0x274>)
 80078c2:	9101      	str	r1, [sp, #4]
 80078c4:	2102      	movs	r1, #2
 80078c6:	9100      	str	r1, [sp, #0]
 80078c8:	a803      	add	r0, sp, #12
 80078ca:	4621      	mov	r1, r4
 80078cc:	f000 f88e 	bl	80079ec <__kernel_rem_pio2f>
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	f6bf af1c 	bge.w	800770e <__ieee754_rem_pio2f+0x5a>
 80078d6:	edd4 7a00 	vldr	s15, [r4]
 80078da:	eef1 7a67 	vneg.f32	s15, s15
 80078de:	edc4 7a00 	vstr	s15, [r4]
 80078e2:	edd4 7a01 	vldr	s15, [r4, #4]
 80078e6:	eef1 7a67 	vneg.f32	s15, s15
 80078ea:	edc4 7a01 	vstr	s15, [r4, #4]
 80078ee:	e779      	b.n	80077e4 <__ieee754_rem_pio2f+0x130>
 80078f0:	2303      	movs	r3, #3
 80078f2:	e7e5      	b.n	80078c0 <__ieee754_rem_pio2f+0x20c>
 80078f4:	3f490fd8 	.word	0x3f490fd8
 80078f8:	4016cbe3 	.word	0x4016cbe3
 80078fc:	3fc90f80 	.word	0x3fc90f80
 8007900:	3fc90fd0 	.word	0x3fc90fd0
 8007904:	37354443 	.word	0x37354443
 8007908:	37354400 	.word	0x37354400
 800790c:	2e85a308 	.word	0x2e85a308
 8007910:	43490f80 	.word	0x43490f80
 8007914:	3f22f984 	.word	0x3f22f984
 8007918:	080082c8 	.word	0x080082c8
 800791c:	2e85a300 	.word	0x2e85a300
 8007920:	248d3132 	.word	0x248d3132
 8007924:	43800000 	.word	0x43800000
 8007928:	08008348 	.word	0x08008348

0800792c <__kernel_cosf>:
 800792c:	ee10 3a10 	vmov	r3, s0
 8007930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007934:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007938:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800793c:	da05      	bge.n	800794a <__kernel_cosf+0x1e>
 800793e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007942:	ee17 2a90 	vmov	r2, s15
 8007946:	2a00      	cmp	r2, #0
 8007948:	d03d      	beq.n	80079c6 <__kernel_cosf+0x9a>
 800794a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800794e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80079cc <__kernel_cosf+0xa0>
 8007952:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80079d0 <__kernel_cosf+0xa4>
 8007956:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80079d4 <__kernel_cosf+0xa8>
 800795a:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <__kernel_cosf+0xac>)
 800795c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007960:	4293      	cmp	r3, r2
 8007962:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80079dc <__kernel_cosf+0xb0>
 8007966:	eee7 7a25 	vfma.f32	s15, s14, s11
 800796a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80079e0 <__kernel_cosf+0xb4>
 800796e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007972:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80079e4 <__kernel_cosf+0xb8>
 8007976:	eee7 7a25 	vfma.f32	s15, s14, s11
 800797a:	eeb0 7a66 	vmov.f32	s14, s13
 800797e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007982:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007986:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800798a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800798e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007992:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007996:	dc04      	bgt.n	80079a2 <__kernel_cosf+0x76>
 8007998:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800799c:	ee36 0a47 	vsub.f32	s0, s12, s14
 80079a0:	4770      	bx	lr
 80079a2:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <__kernel_cosf+0xbc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	bfda      	itte	le
 80079a8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80079ac:	ee06 3a90 	vmovle	s13, r3
 80079b0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80079b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079b8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80079bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80079c4:	4770      	bx	lr
 80079c6:	eeb0 0a46 	vmov.f32	s0, s12
 80079ca:	4770      	bx	lr
 80079cc:	ad47d74e 	.word	0xad47d74e
 80079d0:	310f74f6 	.word	0x310f74f6
 80079d4:	3d2aaaab 	.word	0x3d2aaaab
 80079d8:	3e999999 	.word	0x3e999999
 80079dc:	b493f27c 	.word	0xb493f27c
 80079e0:	37d00d01 	.word	0x37d00d01
 80079e4:	bab60b61 	.word	0xbab60b61
 80079e8:	3f480000 	.word	0x3f480000

080079ec <__kernel_rem_pio2f>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	ed2d 8b04 	vpush	{d8-d9}
 80079f4:	b0d7      	sub	sp, #348	; 0x15c
 80079f6:	4616      	mov	r6, r2
 80079f8:	4698      	mov	r8, r3
 80079fa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80079fc:	4bbb      	ldr	r3, [pc, #748]	; (8007cec <__kernel_rem_pio2f+0x300>)
 80079fe:	9001      	str	r0, [sp, #4]
 8007a00:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007a04:	1d33      	adds	r3, r6, #4
 8007a06:	460d      	mov	r5, r1
 8007a08:	f108 39ff 	add.w	r9, r8, #4294967295
 8007a0c:	db29      	blt.n	8007a62 <__kernel_rem_pio2f+0x76>
 8007a0e:	1ef1      	subs	r1, r6, #3
 8007a10:	bf48      	it	mi
 8007a12:	1d31      	addmi	r1, r6, #4
 8007a14:	10c9      	asrs	r1, r1, #3
 8007a16:	1c4c      	adds	r4, r1, #1
 8007a18:	00e3      	lsls	r3, r4, #3
 8007a1a:	9302      	str	r3, [sp, #8]
 8007a1c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007a1e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007cfc <__kernel_rem_pio2f+0x310>
 8007a22:	eba1 0009 	sub.w	r0, r1, r9
 8007a26:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007a2a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8007a2e:	eb07 0c09 	add.w	ip, r7, r9
 8007a32:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8007a36:	2300      	movs	r3, #0
 8007a38:	4563      	cmp	r3, ip
 8007a3a:	dd14      	ble.n	8007a66 <__kernel_rem_pio2f+0x7a>
 8007a3c:	ab1a      	add	r3, sp, #104	; 0x68
 8007a3e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007a42:	46cc      	mov	ip, r9
 8007a44:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007a48:	f1c8 0b01 	rsb	fp, r8, #1
 8007a4c:	eb0b 020c 	add.w	r2, fp, ip
 8007a50:	4297      	cmp	r7, r2
 8007a52:	db27      	blt.n	8007aa4 <__kernel_rem_pio2f+0xb8>
 8007a54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007a58:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007cfc <__kernel_rem_pio2f+0x310>
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	2200      	movs	r2, #0
 8007a60:	e016      	b.n	8007a90 <__kernel_rem_pio2f+0xa4>
 8007a62:	2100      	movs	r1, #0
 8007a64:	e7d7      	b.n	8007a16 <__kernel_rem_pio2f+0x2a>
 8007a66:	42d8      	cmn	r0, r3
 8007a68:	bf5d      	ittte	pl
 8007a6a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007a6e:	ee07 2a90 	vmovpl	s15, r2
 8007a72:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007a76:	eef0 7a47 	vmovmi.f32	s15, s14
 8007a7a:	ecea 7a01 	vstmia	sl!, {s15}
 8007a7e:	3301      	adds	r3, #1
 8007a80:	e7da      	b.n	8007a38 <__kernel_rem_pio2f+0x4c>
 8007a82:	ecfe 6a01 	vldmia	lr!, {s13}
 8007a86:	ed90 7a00 	vldr	s14, [r0]
 8007a8a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007a8e:	3201      	adds	r2, #1
 8007a90:	454a      	cmp	r2, r9
 8007a92:	f1a0 0004 	sub.w	r0, r0, #4
 8007a96:	ddf4      	ble.n	8007a82 <__kernel_rem_pio2f+0x96>
 8007a98:	ecea 7a01 	vstmia	sl!, {s15}
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	f10c 0c01 	add.w	ip, ip, #1
 8007aa2:	e7d3      	b.n	8007a4c <__kernel_rem_pio2f+0x60>
 8007aa4:	ab06      	add	r3, sp, #24
 8007aa6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007aae:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007cf8 <__kernel_rem_pio2f+0x30c>
 8007ab2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007cf4 <__kernel_rem_pio2f+0x308>
 8007ab6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007aba:	9303      	str	r3, [sp, #12]
 8007abc:	46ba      	mov	sl, r7
 8007abe:	ab56      	add	r3, sp, #344	; 0x158
 8007ac0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007ac4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007ac8:	ab06      	add	r3, sp, #24
 8007aca:	4618      	mov	r0, r3
 8007acc:	4652      	mov	r2, sl
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	dc51      	bgt.n	8007b76 <__kernel_rem_pio2f+0x18a>
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	9305      	str	r3, [sp, #20]
 8007ad6:	f000 faa5 	bl	8008024 <scalbnf>
 8007ada:	eeb0 8a40 	vmov.f32	s16, s0
 8007ade:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007ae2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007ae6:	f000 fa5b 	bl	8007fa0 <floorf>
 8007aea:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007aee:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007af2:	2c00      	cmp	r4, #0
 8007af4:	9b05      	ldr	r3, [sp, #20]
 8007af6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007afa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007afe:	edcd 7a00 	vstr	s15, [sp]
 8007b02:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007b06:	dd4b      	ble.n	8007ba0 <__kernel_rem_pio2f+0x1b4>
 8007b08:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007b0c:	aa06      	add	r2, sp, #24
 8007b0e:	f1c4 0e08 	rsb	lr, r4, #8
 8007b12:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007b16:	ee17 1a90 	vmov	r1, s15
 8007b1a:	fa42 f00e 	asr.w	r0, r2, lr
 8007b1e:	4401      	add	r1, r0
 8007b20:	9100      	str	r1, [sp, #0]
 8007b22:	fa00 f00e 	lsl.w	r0, r0, lr
 8007b26:	a906      	add	r1, sp, #24
 8007b28:	1a12      	subs	r2, r2, r0
 8007b2a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007b2e:	f1c4 0007 	rsb	r0, r4, #7
 8007b32:	fa42 fb00 	asr.w	fp, r2, r0
 8007b36:	f1bb 0f00 	cmp.w	fp, #0
 8007b3a:	dd43      	ble.n	8007bc4 <__kernel_rem_pio2f+0x1d8>
 8007b3c:	9a00      	ldr	r2, [sp, #0]
 8007b3e:	f04f 0e00 	mov.w	lr, #0
 8007b42:	3201      	adds	r2, #1
 8007b44:	9200      	str	r2, [sp, #0]
 8007b46:	4670      	mov	r0, lr
 8007b48:	45f2      	cmp	sl, lr
 8007b4a:	dc6c      	bgt.n	8007c26 <__kernel_rem_pio2f+0x23a>
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	dd04      	ble.n	8007b5a <__kernel_rem_pio2f+0x16e>
 8007b50:	2c01      	cmp	r4, #1
 8007b52:	d079      	beq.n	8007c48 <__kernel_rem_pio2f+0x25c>
 8007b54:	2c02      	cmp	r4, #2
 8007b56:	f000 8082 	beq.w	8007c5e <__kernel_rem_pio2f+0x272>
 8007b5a:	f1bb 0f02 	cmp.w	fp, #2
 8007b5e:	d131      	bne.n	8007bc4 <__kernel_rem_pio2f+0x1d8>
 8007b60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007b64:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007b68:	b360      	cbz	r0, 8007bc4 <__kernel_rem_pio2f+0x1d8>
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fa5a 	bl	8008024 <scalbnf>
 8007b70:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007b74:	e026      	b.n	8007bc4 <__kernel_rem_pio2f+0x1d8>
 8007b76:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007b7a:	3a01      	subs	r2, #1
 8007b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b80:	a942      	add	r1, sp, #264	; 0x108
 8007b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b86:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007b8a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007b8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007b92:	eca0 0a01 	vstmia	r0!, {s0}
 8007b96:	ed9c 0a00 	vldr	s0, [ip]
 8007b9a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007b9e:	e796      	b.n	8007ace <__kernel_rem_pio2f+0xe2>
 8007ba0:	d107      	bne.n	8007bb2 <__kernel_rem_pio2f+0x1c6>
 8007ba2:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007ba6:	a906      	add	r1, sp, #24
 8007ba8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007bac:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007bb0:	e7c1      	b.n	8007b36 <__kernel_rem_pio2f+0x14a>
 8007bb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007bb6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbe:	da2f      	bge.n	8007c20 <__kernel_rem_pio2f+0x234>
 8007bc0:	f04f 0b00 	mov.w	fp, #0
 8007bc4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bcc:	f040 8098 	bne.w	8007d00 <__kernel_rem_pio2f+0x314>
 8007bd0:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007bd4:	469c      	mov	ip, r3
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	45bc      	cmp	ip, r7
 8007bda:	da48      	bge.n	8007c6e <__kernel_rem_pio2f+0x282>
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	d05f      	beq.n	8007ca0 <__kernel_rem_pio2f+0x2b4>
 8007be0:	aa06      	add	r2, sp, #24
 8007be2:	3c08      	subs	r4, #8
 8007be4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007be8:	2900      	cmp	r1, #0
 8007bea:	d07d      	beq.n	8007ce8 <__kernel_rem_pio2f+0x2fc>
 8007bec:	4620      	mov	r0, r4
 8007bee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	f000 fa16 	bl	8008024 <scalbnf>
 8007bf8:	9b01      	ldr	r3, [sp, #4]
 8007bfa:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007cf8 <__kernel_rem_pio2f+0x30c>
 8007bfe:	4619      	mov	r1, r3
 8007c00:	2900      	cmp	r1, #0
 8007c02:	f280 80af 	bge.w	8007d64 <__kernel_rem_pio2f+0x378>
 8007c06:	4618      	mov	r0, r3
 8007c08:	2400      	movs	r4, #0
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f2c0 80d0 	blt.w	8007db0 <__kernel_rem_pio2f+0x3c4>
 8007c10:	a942      	add	r1, sp, #264	; 0x108
 8007c12:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007c16:	4a36      	ldr	r2, [pc, #216]	; (8007cf0 <__kernel_rem_pio2f+0x304>)
 8007c18:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007cfc <__kernel_rem_pio2f+0x310>
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	e0bb      	b.n	8007d98 <__kernel_rem_pio2f+0x3ac>
 8007c20:	f04f 0b02 	mov.w	fp, #2
 8007c24:	e78a      	b.n	8007b3c <__kernel_rem_pio2f+0x150>
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	b948      	cbnz	r0, 8007c3e <__kernel_rem_pio2f+0x252>
 8007c2a:	b11a      	cbz	r2, 8007c34 <__kernel_rem_pio2f+0x248>
 8007c2c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f10e 0e01 	add.w	lr, lr, #1
 8007c38:	3304      	adds	r3, #4
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	e784      	b.n	8007b48 <__kernel_rem_pio2f+0x15c>
 8007c3e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	4602      	mov	r2, r0
 8007c46:	e7f5      	b.n	8007c34 <__kernel_rem_pio2f+0x248>
 8007c48:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007c4c:	ab06      	add	r3, sp, #24
 8007c4e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c56:	aa06      	add	r2, sp, #24
 8007c58:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007c5c:	e77d      	b.n	8007b5a <__kernel_rem_pio2f+0x16e>
 8007c5e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007c62:	ab06      	add	r3, sp, #24
 8007c64:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c6c:	e7f3      	b.n	8007c56 <__kernel_rem_pio2f+0x26a>
 8007c6e:	a906      	add	r1, sp, #24
 8007c70:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007c74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c78:	4302      	orrs	r2, r0
 8007c7a:	e7ad      	b.n	8007bd8 <__kernel_rem_pio2f+0x1ec>
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	d0fa      	beq.n	8007c7c <__kernel_rem_pio2f+0x290>
 8007c86:	a91a      	add	r1, sp, #104	; 0x68
 8007c88:	eb0a 0208 	add.w	r2, sl, r8
 8007c8c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007c90:	f10a 0301 	add.w	r3, sl, #1
 8007c94:	eb0a 0100 	add.w	r1, sl, r0
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	da04      	bge.n	8007ca6 <__kernel_rem_pio2f+0x2ba>
 8007c9c:	468a      	mov	sl, r1
 8007c9e:	e70e      	b.n	8007abe <__kernel_rem_pio2f+0xd2>
 8007ca0:	9b04      	ldr	r3, [sp, #16]
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	e7eb      	b.n	8007c7e <__kernel_rem_pio2f+0x292>
 8007ca6:	9803      	ldr	r0, [sp, #12]
 8007ca8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007cac:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007cb0:	9000      	str	r0, [sp, #0]
 8007cb2:	ee07 0a90 	vmov	s15, r0
 8007cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cba:	2000      	movs	r0, #0
 8007cbc:	ece2 7a01 	vstmia	r2!, {s15}
 8007cc0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007cfc <__kernel_rem_pio2f+0x310>
 8007cc4:	4696      	mov	lr, r2
 8007cc6:	4548      	cmp	r0, r9
 8007cc8:	dd06      	ble.n	8007cd8 <__kernel_rem_pio2f+0x2ec>
 8007cca:	a842      	add	r0, sp, #264	; 0x108
 8007ccc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007cd0:	edc0 7a00 	vstr	s15, [r0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	e7df      	b.n	8007c98 <__kernel_rem_pio2f+0x2ac>
 8007cd8:	ecfc 6a01 	vldmia	ip!, {s13}
 8007cdc:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ce6:	e7ee      	b.n	8007cc6 <__kernel_rem_pio2f+0x2da>
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	e779      	b.n	8007be0 <__kernel_rem_pio2f+0x1f4>
 8007cec:	0800868c 	.word	0x0800868c
 8007cf0:	08008660 	.word	0x08008660
 8007cf4:	43800000 	.word	0x43800000
 8007cf8:	3b800000 	.word	0x3b800000
 8007cfc:	00000000 	.word	0x00000000
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	eeb0 0a48 	vmov.f32	s0, s16
 8007d06:	1b98      	subs	r0, r3, r6
 8007d08:	f000 f98c 	bl	8008024 <scalbnf>
 8007d0c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007cf4 <__kernel_rem_pio2f+0x308>
 8007d10:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d18:	db1b      	blt.n	8007d52 <__kernel_rem_pio2f+0x366>
 8007d1a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007cf8 <__kernel_rem_pio2f+0x30c>
 8007d1e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007d22:	aa06      	add	r2, sp, #24
 8007d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d28:	a906      	add	r1, sp, #24
 8007d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d2e:	3408      	adds	r4, #8
 8007d30:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007d3c:	ee10 3a10 	vmov	r3, s0
 8007d40:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007d44:	ee17 2a90 	vmov	r2, s15
 8007d48:	f10a 0301 	add.w	r3, sl, #1
 8007d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007d50:	e74c      	b.n	8007bec <__kernel_rem_pio2f+0x200>
 8007d52:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007d56:	aa06      	add	r2, sp, #24
 8007d58:	ee10 3a10 	vmov	r3, s0
 8007d5c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8007d60:	4653      	mov	r3, sl
 8007d62:	e743      	b.n	8007bec <__kernel_rem_pio2f+0x200>
 8007d64:	aa42      	add	r2, sp, #264	; 0x108
 8007d66:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007d6a:	aa06      	add	r2, sp, #24
 8007d6c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007d70:	9201      	str	r2, [sp, #4]
 8007d72:	ee07 2a90 	vmov	s15, r2
 8007d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d7a:	3901      	subs	r1, #1
 8007d7c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007d80:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007d84:	edc0 7a00 	vstr	s15, [r0]
 8007d88:	e73a      	b.n	8007c00 <__kernel_rem_pio2f+0x214>
 8007d8a:	ecf2 6a01 	vldmia	r2!, {s13}
 8007d8e:	ecb6 7a01 	vldmia	r6!, {s14}
 8007d92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d96:	3101      	adds	r1, #1
 8007d98:	42b9      	cmp	r1, r7
 8007d9a:	dc01      	bgt.n	8007da0 <__kernel_rem_pio2f+0x3b4>
 8007d9c:	428c      	cmp	r4, r1
 8007d9e:	daf4      	bge.n	8007d8a <__kernel_rem_pio2f+0x39e>
 8007da0:	aa56      	add	r2, sp, #344	; 0x158
 8007da2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8007da6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007daa:	3801      	subs	r0, #1
 8007dac:	3401      	adds	r4, #1
 8007dae:	e72c      	b.n	8007c0a <__kernel_rem_pio2f+0x21e>
 8007db0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007db2:	2a02      	cmp	r2, #2
 8007db4:	dc0a      	bgt.n	8007dcc <__kernel_rem_pio2f+0x3e0>
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	dc61      	bgt.n	8007e7e <__kernel_rem_pio2f+0x492>
 8007dba:	d03c      	beq.n	8007e36 <__kernel_rem_pio2f+0x44a>
 8007dbc:	9b00      	ldr	r3, [sp, #0]
 8007dbe:	f003 0007 	and.w	r0, r3, #7
 8007dc2:	b057      	add	sp, #348	; 0x15c
 8007dc4:	ecbd 8b04 	vpop	{d8-d9}
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dcc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007dce:	2a03      	cmp	r2, #3
 8007dd0:	d1f4      	bne.n	8007dbc <__kernel_rem_pio2f+0x3d0>
 8007dd2:	aa2e      	add	r2, sp, #184	; 0xb8
 8007dd4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007dd8:	4608      	mov	r0, r1
 8007dda:	461c      	mov	r4, r3
 8007ddc:	2c00      	cmp	r4, #0
 8007dde:	f1a0 0004 	sub.w	r0, r0, #4
 8007de2:	dc59      	bgt.n	8007e98 <__kernel_rem_pio2f+0x4ac>
 8007de4:	4618      	mov	r0, r3
 8007de6:	2801      	cmp	r0, #1
 8007de8:	f1a1 0104 	sub.w	r1, r1, #4
 8007dec:	dc64      	bgt.n	8007eb8 <__kernel_rem_pio2f+0x4cc>
 8007dee:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007cfc <__kernel_rem_pio2f+0x310>
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	dc70      	bgt.n	8007ed8 <__kernel_rem_pio2f+0x4ec>
 8007df6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007dfa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007dfe:	f1bb 0f00 	cmp.w	fp, #0
 8007e02:	d172      	bne.n	8007eea <__kernel_rem_pio2f+0x4fe>
 8007e04:	edc5 6a00 	vstr	s13, [r5]
 8007e08:	ed85 7a01 	vstr	s14, [r5, #4]
 8007e0c:	edc5 7a02 	vstr	s15, [r5, #8]
 8007e10:	e7d4      	b.n	8007dbc <__kernel_rem_pio2f+0x3d0>
 8007e12:	aa2e      	add	r2, sp, #184	; 0xb8
 8007e14:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007e18:	ed91 7a00 	vldr	s14, [r1]
 8007e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e20:	3b01      	subs	r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	daf5      	bge.n	8007e12 <__kernel_rem_pio2f+0x426>
 8007e26:	f1bb 0f00 	cmp.w	fp, #0
 8007e2a:	d001      	beq.n	8007e30 <__kernel_rem_pio2f+0x444>
 8007e2c:	eef1 7a67 	vneg.f32	s15, s15
 8007e30:	edc5 7a00 	vstr	s15, [r5]
 8007e34:	e7c2      	b.n	8007dbc <__kernel_rem_pio2f+0x3d0>
 8007e36:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007cfc <__kernel_rem_pio2f+0x310>
 8007e3a:	e7f2      	b.n	8007e22 <__kernel_rem_pio2f+0x436>
 8007e3c:	aa2e      	add	r2, sp, #184	; 0xb8
 8007e3e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007e42:	edd0 7a00 	vldr	s15, [r0]
 8007e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e4a:	3901      	subs	r1, #1
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	daf5      	bge.n	8007e3c <__kernel_rem_pio2f+0x450>
 8007e50:	f1bb 0f00 	cmp.w	fp, #0
 8007e54:	d017      	beq.n	8007e86 <__kernel_rem_pio2f+0x49a>
 8007e56:	eef1 7a47 	vneg.f32	s15, s14
 8007e5a:	edc5 7a00 	vstr	s15, [r5]
 8007e5e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e66:	a82f      	add	r0, sp, #188	; 0xbc
 8007e68:	2101      	movs	r1, #1
 8007e6a:	428b      	cmp	r3, r1
 8007e6c:	da0e      	bge.n	8007e8c <__kernel_rem_pio2f+0x4a0>
 8007e6e:	f1bb 0f00 	cmp.w	fp, #0
 8007e72:	d001      	beq.n	8007e78 <__kernel_rem_pio2f+0x48c>
 8007e74:	eef1 7a67 	vneg.f32	s15, s15
 8007e78:	edc5 7a01 	vstr	s15, [r5, #4]
 8007e7c:	e79e      	b.n	8007dbc <__kernel_rem_pio2f+0x3d0>
 8007e7e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007cfc <__kernel_rem_pio2f+0x310>
 8007e82:	4619      	mov	r1, r3
 8007e84:	e7e2      	b.n	8007e4c <__kernel_rem_pio2f+0x460>
 8007e86:	eef0 7a47 	vmov.f32	s15, s14
 8007e8a:	e7e6      	b.n	8007e5a <__kernel_rem_pio2f+0x46e>
 8007e8c:	ecb0 7a01 	vldmia	r0!, {s14}
 8007e90:	3101      	adds	r1, #1
 8007e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e96:	e7e8      	b.n	8007e6a <__kernel_rem_pio2f+0x47e>
 8007e98:	edd0 7a00 	vldr	s15, [r0]
 8007e9c:	edd0 6a01 	vldr	s13, [r0, #4]
 8007ea0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007ea4:	3c01      	subs	r4, #1
 8007ea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007eaa:	ed80 7a00 	vstr	s14, [r0]
 8007eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb2:	edc0 7a01 	vstr	s15, [r0, #4]
 8007eb6:	e791      	b.n	8007ddc <__kernel_rem_pio2f+0x3f0>
 8007eb8:	edd1 7a00 	vldr	s15, [r1]
 8007ebc:	edd1 6a01 	vldr	s13, [r1, #4]
 8007ec0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007ec4:	3801      	subs	r0, #1
 8007ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007eca:	ed81 7a00 	vstr	s14, [r1]
 8007ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed2:	edc1 7a01 	vstr	s15, [r1, #4]
 8007ed6:	e786      	b.n	8007de6 <__kernel_rem_pio2f+0x3fa>
 8007ed8:	aa2e      	add	r2, sp, #184	; 0xb8
 8007eda:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007ede:	ed91 7a00 	vldr	s14, [r1]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ee8:	e783      	b.n	8007df2 <__kernel_rem_pio2f+0x406>
 8007eea:	eef1 6a66 	vneg.f32	s13, s13
 8007eee:	eeb1 7a47 	vneg.f32	s14, s14
 8007ef2:	edc5 6a00 	vstr	s13, [r5]
 8007ef6:	ed85 7a01 	vstr	s14, [r5, #4]
 8007efa:	eef1 7a67 	vneg.f32	s15, s15
 8007efe:	e785      	b.n	8007e0c <__kernel_rem_pio2f+0x420>

08007f00 <__kernel_sinf>:
 8007f00:	ee10 3a10 	vmov	r3, s0
 8007f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f08:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007f0c:	da04      	bge.n	8007f18 <__kernel_sinf+0x18>
 8007f0e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007f12:	ee17 3a90 	vmov	r3, s15
 8007f16:	b35b      	cbz	r3, 8007f70 <__kernel_sinf+0x70>
 8007f18:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007f1c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007f74 <__kernel_sinf+0x74>
 8007f20:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007f78 <__kernel_sinf+0x78>
 8007f24:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007f28:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007f7c <__kernel_sinf+0x7c>
 8007f2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f30:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007f80 <__kernel_sinf+0x80>
 8007f34:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007f38:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007f84 <__kernel_sinf+0x84>
 8007f3c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007f40:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f44:	b930      	cbnz	r0, 8007f54 <__kernel_sinf+0x54>
 8007f46:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007f88 <__kernel_sinf+0x88>
 8007f4a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007f4e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007f52:	4770      	bx	lr
 8007f54:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007f58:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007f5c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007f60:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007f64:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007f8c <__kernel_sinf+0x8c>
 8007f68:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007f6c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	2f2ec9d3 	.word	0x2f2ec9d3
 8007f78:	b2d72f34 	.word	0xb2d72f34
 8007f7c:	3638ef1b 	.word	0x3638ef1b
 8007f80:	b9500d01 	.word	0xb9500d01
 8007f84:	3c088889 	.word	0x3c088889
 8007f88:	be2aaaab 	.word	0xbe2aaaab
 8007f8c:	3e2aaaab 	.word	0x3e2aaaab

08007f90 <fabsf>:
 8007f90:	ee10 3a10 	vmov	r3, s0
 8007f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f98:	ee00 3a10 	vmov	s0, r3
 8007f9c:	4770      	bx	lr
	...

08007fa0 <floorf>:
 8007fa0:	ee10 3a10 	vmov	r3, s0
 8007fa4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007fa8:	3a7f      	subs	r2, #127	; 0x7f
 8007faa:	2a16      	cmp	r2, #22
 8007fac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007fb0:	dc2a      	bgt.n	8008008 <floorf+0x68>
 8007fb2:	2a00      	cmp	r2, #0
 8007fb4:	da11      	bge.n	8007fda <floorf+0x3a>
 8007fb6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008018 <floorf+0x78>
 8007fba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc6:	dd05      	ble.n	8007fd4 <floorf+0x34>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	da23      	bge.n	8008014 <floorf+0x74>
 8007fcc:	4a13      	ldr	r2, [pc, #76]	; (800801c <floorf+0x7c>)
 8007fce:	2900      	cmp	r1, #0
 8007fd0:	bf18      	it	ne
 8007fd2:	4613      	movne	r3, r2
 8007fd4:	ee00 3a10 	vmov	s0, r3
 8007fd8:	4770      	bx	lr
 8007fda:	4911      	ldr	r1, [pc, #68]	; (8008020 <floorf+0x80>)
 8007fdc:	4111      	asrs	r1, r2
 8007fde:	420b      	tst	r3, r1
 8007fe0:	d0fa      	beq.n	8007fd8 <floorf+0x38>
 8007fe2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008018 <floorf+0x78>
 8007fe6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff2:	ddef      	ble.n	8007fd4 <floorf+0x34>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfbe      	ittt	lt
 8007ff8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007ffc:	fa40 f202 	asrlt.w	r2, r0, r2
 8008000:	189b      	addlt	r3, r3, r2
 8008002:	ea23 0301 	bic.w	r3, r3, r1
 8008006:	e7e5      	b.n	8007fd4 <floorf+0x34>
 8008008:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800800c:	d3e4      	bcc.n	8007fd8 <floorf+0x38>
 800800e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008012:	4770      	bx	lr
 8008014:	2300      	movs	r3, #0
 8008016:	e7dd      	b.n	8007fd4 <floorf+0x34>
 8008018:	7149f2ca 	.word	0x7149f2ca
 800801c:	bf800000 	.word	0xbf800000
 8008020:	007fffff 	.word	0x007fffff

08008024 <scalbnf>:
 8008024:	ee10 3a10 	vmov	r3, s0
 8008028:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800802c:	d025      	beq.n	800807a <scalbnf+0x56>
 800802e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008032:	d302      	bcc.n	800803a <scalbnf+0x16>
 8008034:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008038:	4770      	bx	lr
 800803a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800803e:	d122      	bne.n	8008086 <scalbnf+0x62>
 8008040:	4b2a      	ldr	r3, [pc, #168]	; (80080ec <scalbnf+0xc8>)
 8008042:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80080f0 <scalbnf+0xcc>
 8008046:	4298      	cmp	r0, r3
 8008048:	ee20 0a27 	vmul.f32	s0, s0, s15
 800804c:	db16      	blt.n	800807c <scalbnf+0x58>
 800804e:	ee10 3a10 	vmov	r3, s0
 8008052:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008056:	3a19      	subs	r2, #25
 8008058:	4402      	add	r2, r0
 800805a:	2afe      	cmp	r2, #254	; 0xfe
 800805c:	dd15      	ble.n	800808a <scalbnf+0x66>
 800805e:	ee10 3a10 	vmov	r3, s0
 8008062:	eddf 7a24 	vldr	s15, [pc, #144]	; 80080f4 <scalbnf+0xd0>
 8008066:	eddf 6a24 	vldr	s13, [pc, #144]	; 80080f8 <scalbnf+0xd4>
 800806a:	2b00      	cmp	r3, #0
 800806c:	eeb0 7a67 	vmov.f32	s14, s15
 8008070:	bfb8      	it	lt
 8008072:	eef0 7a66 	vmovlt.f32	s15, s13
 8008076:	ee27 0a27 	vmul.f32	s0, s14, s15
 800807a:	4770      	bx	lr
 800807c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80080fc <scalbnf+0xd8>
 8008080:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008084:	4770      	bx	lr
 8008086:	0dd2      	lsrs	r2, r2, #23
 8008088:	e7e6      	b.n	8008058 <scalbnf+0x34>
 800808a:	2a00      	cmp	r2, #0
 800808c:	dd06      	ble.n	800809c <scalbnf+0x78>
 800808e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008092:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008096:	ee00 3a10 	vmov	s0, r3
 800809a:	4770      	bx	lr
 800809c:	f112 0f16 	cmn.w	r2, #22
 80080a0:	da1a      	bge.n	80080d8 <scalbnf+0xb4>
 80080a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80080a6:	4298      	cmp	r0, r3
 80080a8:	ee10 3a10 	vmov	r3, s0
 80080ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080b0:	dd0a      	ble.n	80080c8 <scalbnf+0xa4>
 80080b2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80080f4 <scalbnf+0xd0>
 80080b6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80080f8 <scalbnf+0xd4>
 80080ba:	eef0 7a40 	vmov.f32	s15, s0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bf18      	it	ne
 80080c2:	eeb0 0a47 	vmovne.f32	s0, s14
 80080c6:	e7db      	b.n	8008080 <scalbnf+0x5c>
 80080c8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80080fc <scalbnf+0xd8>
 80080cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008100 <scalbnf+0xdc>
 80080d0:	eef0 7a40 	vmov.f32	s15, s0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	e7f3      	b.n	80080c0 <scalbnf+0x9c>
 80080d8:	3219      	adds	r2, #25
 80080da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080de:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80080e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008104 <scalbnf+0xe0>
 80080e6:	ee07 3a10 	vmov	s14, r3
 80080ea:	e7c4      	b.n	8008076 <scalbnf+0x52>
 80080ec:	ffff3cb0 	.word	0xffff3cb0
 80080f0:	4c000000 	.word	0x4c000000
 80080f4:	7149f2ca 	.word	0x7149f2ca
 80080f8:	f149f2ca 	.word	0xf149f2ca
 80080fc:	0da24260 	.word	0x0da24260
 8008100:	8da24260 	.word	0x8da24260
 8008104:	33000000 	.word	0x33000000

08008108 <_init>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	bf00      	nop
 800810c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810e:	bc08      	pop	{r3}
 8008110:	469e      	mov	lr, r3
 8008112:	4770      	bx	lr

08008114 <_fini>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	bf00      	nop
 8008118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811a:	bc08      	pop	{r3}
 800811c:	469e      	mov	lr, r3
 800811e:	4770      	bx	lr
