
PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  080089d8  080089d8  000189d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009004  08009004  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009004  08009004  00019004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800900c  0800900c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013bc4  200001ec  08009200  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013db0  08009200  00023db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a42  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002487  00000000  00000000  00030c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  000330e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  00034088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e30  00000000  00000000  00034f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf40  00000000  00000000  00058d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df68d  00000000  00000000  00065c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014531d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c50  00000000  00000000  00145398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001ec 	.word	0x200001ec
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080089bc 	.word	0x080089bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001f0 	.word	0x200001f0
 8000204:	080089bc 	.word	0x080089bc

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b092      	sub	sp, #72	; 0x48
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Cope string into buffer (Buffer is integer buffer therefore (char*))
  uint8_t buf[30];
  strcpy((char*)buf, "Hello!\r\n");
 8000ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <main+0x50>)
 8000eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eee:	c303      	stmia	r3!, {r0, r1}
 8000ef0:	701a      	strb	r2, [r3, #0]

  // String buffer for USART
  char adcUsartBuf[40];

  // Sine creator test:
  sine_creator2();
 8000ef2:	f000 fce5 	bl	80018c0 <sine_creator2>
  sine_creator3();
 8000ef6:	f000 fd3f 	bl	8001978 <sine_creator3>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f001 f87b 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f81d 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 fa59 	bl	80013b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f06:	f000 fa19 	bl	800133c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f0a:	f000 f9ed 	bl	80012e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f0e:	f000 f887 	bl	8001020 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000f12:	f000 f99f 	bl	8001254 <MX_TIM10_Init>
  MX_DAC_Init();
 8000f16:	f000 f927 	bl	8001168 <MX_DAC_Init>
  MX_TIM2_Init();
 8000f1a:	f000 f94f 	bl	80011bc <MX_TIM2_Init>
  MX_ADC2_Init();
 8000f1e:	f000 f8d1 	bl	80010c4 <MX_ADC2_Init>

  // DAC DMA
//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)&adcBuf[0], sizeof(adcReading0), DAC_ALIGN_12B_R);//  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)testArray, sizeof(testArray)/sizeof(uint16_t), DAC_ALIGN_12B_R);

  // Timer interrupt start
  HAL_TIM_Base_Start_IT(&htim10);
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <main+0x54>)
 8000f24:	f003 f9e6 	bl	80042f4 <HAL_TIM_Base_Start_IT>

 // Timer 2 start - DAC starts on every timer 2 update!
  HAL_TIM_Base_Start(&htim2);
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <main+0x58>)
 8000f2a:	f003 f97b 	bl	8004224 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <main+0x4e>
 8000f30:	080089d8 	.word	0x080089d8
 8000f34:	20000284 	.word	0x20000284
 8000f38:	20013d14 	.word	0x20013d14

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	; 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2234      	movs	r2, #52	; 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 f970 	bl	8006230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <SystemClock_Config+0xdc>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a2b      	ldr	r2, [pc, #172]	; (8001018 <SystemClock_Config+0xdc>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <SystemClock_Config+0xdc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <SystemClock_Config+0xe0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a25      	ldr	r2, [pc, #148]	; (800101c <SystemClock_Config+0xe0>)
 8000f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <SystemClock_Config+0xe0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fac:	2308      	movs	r3, #8
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fb0:	23b4      	movs	r3, #180	; 0xb4
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fe3f 	bl	8003c48 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd0:	f000 fd3a 	bl	8001a48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fd4:	f002 fb7c 	bl	80036d0 <HAL_PWREx_EnableOverDrive>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fde:	f000 fd33 	bl	8001a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2105      	movs	r1, #5
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fbb5 	bl	8003770 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800100c:	f000 fd1c 	bl	8001a48 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	; 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <MX_ADC1_Init+0x9c>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_ADC1_Init+0x98>)
 800103a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800103e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_ADC1_Init+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_ADC1_Init+0xa0>)
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_ADC1_Init+0x98>)
 800106e:	2201      	movs	r2, #1
 8001070:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_ADC1_Init+0x98>)
 800107c:	2201      	movs	r2, #1
 800107e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_ADC1_Init+0x98>)
 8001082:	f001 f829 	bl	80020d8 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800108c:	f000 fcdc 	bl	8001a48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001090:	2300      	movs	r3, #0
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC1_Init+0x98>)
 80010a2:	f001 f9c7 	bl	8002434 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ac:	f000 fccc 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20009f98 	.word	0x20009f98
 80010bc:	40012000 	.word	0x40012000
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_ADC2_Init+0x98>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <MX_ADC2_Init+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_ADC2_Init+0x98>)
 80010de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_ADC2_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_ADC2_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_ADC2_Init+0x98>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_ADC2_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_ADC2_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_ADC2_Init+0x98>)
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <MX_ADC2_Init+0xa0>)
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_ADC2_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_ADC2_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_ADC2_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_ADC2_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_ADC2_Init+0x98>)
 8001126:	f000 ffd7 	bl	80020d8 <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001130:	f000 fc8a 	bl	8001a48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001134:	2301      	movs	r3, #1
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_ADC2_Init+0x98>)
 8001146:	f001 f975 	bl	8002434 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001150:	f000 fc7a 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000023c 	.word	0x2000023c
 8001160:	40012100 	.word	0x40012100
 8001164:	0f000001 	.word	0x0f000001

08001168 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_DAC_Init+0x4c>)
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <MX_DAC_Init+0x50>)
 800117a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_DAC_Init+0x4c>)
 800117e:	f001 fc98 	bl	8002ab2 <HAL_DAC_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001188:	f000 fc5e 	bl	8001a48 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800118c:	2324      	movs	r3, #36	; 0x24
 800118e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_DAC_Init+0x4c>)
 800119c:	f001 fd22 	bl	8002be4 <HAL_DAC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011a6:	f000 fc4f 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000a044 	.word	0x2000a044
 80011b8:	40007400 	.word	0x40007400

080011bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_TIM2_Init+0x94>)
 80011da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_TIM2_Init+0x94>)
 80011e2:	2259      	movs	r2, #89	; 0x59
 80011e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_TIM2_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_TIM2_Init+0x94>)
 80011ee:	2209      	movs	r2, #9
 80011f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM2_Init+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fe:	4814      	ldr	r0, [pc, #80]	; (8001250 <MX_TIM2_Init+0x94>)
 8001200:	f002 ffc0 	bl	8004184 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800120a:	f000 fc1d 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_TIM2_Init+0x94>)
 800121c:	f003 fa94 	bl	8004748 <HAL_TIM_ConfigClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 fc0f 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800122a:	2320      	movs	r3, #32
 800122c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_TIM2_Init+0x94>)
 8001238:	f003 fe50 	bl	8004edc <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001242:	f000 fc01 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20013d14 	.word	0x20013d14

08001254 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_TIM10_Init+0x8c>)
 800126e:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <MX_TIM10_Init+0x90>)
 8001270:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_TIM10_Init+0x8c>)
 8001274:	2263      	movs	r2, #99	; 0x63
 8001276:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_TIM10_Init+0x8c>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 180-1;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_TIM10_Init+0x8c>)
 8001280:	22b3      	movs	r2, #179	; 0xb3
 8001282:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_TIM10_Init+0x8c>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_TIM10_Init+0x8c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <MX_TIM10_Init+0x8c>)
 8001292:	f002 ff77 	bl	8004184 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 800129c:	f000 fbd4 	bl	8001a48 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <MX_TIM10_Init+0x8c>)
 80012a2:	f003 f897 	bl	80043d4 <HAL_TIM_OC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 80012ac:	f000 fbcc 	bl	8001a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_TIM10_Init+0x8c>)
 80012c8:	f003 f9e6 	bl	8004698 <HAL_TIM_OC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 80012d2:	f000 fbb9 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000284 	.word	0x20000284
 80012e4:	40014400 	.word	0x40014400

080012e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <MX_USART2_UART_Init+0x50>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_USART2_UART_Init+0x4c>)
 8001320:	f003 fe6c 	bl	8004ffc <HAL_UART_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132a:	f000 fb8d 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20013d64 	.word	0x20013d64
 8001338:	40004400 	.word	0x40004400

0800133c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_DMA_Init+0x78>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <MX_DMA_Init+0x78>)
 800134c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_DMA_Init+0x78>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_DMA_Init+0x78>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <MX_DMA_Init+0x78>)
 8001368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_DMA_Init+0x78>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2010      	movs	r0, #16
 8001380:	f001 fb61 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001384:	2010      	movs	r0, #16
 8001386:	f001 fb7a 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2011      	movs	r0, #17
 8001390:	f001 fb59 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001394:	2011      	movs	r0, #17
 8001396:	f001 fb72 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2038      	movs	r0, #56	; 0x38
 80013a0:	f001 fb51 	bl	8002a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013a4:	2038      	movs	r0, #56	; 0x38
 80013a6:	f001 fb6a 	bl	8002a7e <HAL_NVIC_EnableIRQ>

}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <MX_GPIO_Init+0xe8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <MX_GPIO_Init+0xe8>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <MX_GPIO_Init+0xe8>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_GPIO_Init+0xe8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <MX_GPIO_Init+0xe8>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <MX_GPIO_Init+0xe8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <MX_GPIO_Init+0xe8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <MX_GPIO_Init+0xe8>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <MX_GPIO_Init+0xe8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2120      	movs	r1, #32
 8001426:	481f      	ldr	r0, [pc, #124]	; (80014a4 <MX_GPIO_Init+0xec>)
 8001428:	f002 f938 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2101      	movs	r1, #1
 8001430:	481d      	ldr	r0, [pc, #116]	; (80014a8 <MX_GPIO_Init+0xf0>)
 8001432:	f002 f933 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800143c:	481b      	ldr	r0, [pc, #108]	; (80014ac <MX_GPIO_Init+0xf4>)
 800143e:	f002 f92d 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001442:	2320      	movs	r3, #32
 8001444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	4619      	mov	r1, r3
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <MX_GPIO_Init+0xec>)
 800145a:	f001 ff8d 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800145e:	2301      	movs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <MX_GPIO_Init+0xf0>)
 8001476:	f001 ff7f 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800147a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800147e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_GPIO_Init+0xf4>)
 8001494:	f001 ff70 	bl	8003378 <HAL_GPIO_Init>

}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800

080014b0 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
//}

// Timer 10 (TIM10) interrupt:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if (htim == &htim10)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4acf      	ldr	r2, [pc, #828]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	f040 81ef 	bne.w	80018a0 <HAL_TIM_PeriodElapsedCallback+0x3f0>
  {
	// Set pin: Start timer
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	48cd      	ldr	r0, [pc, #820]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80014c8:	f002 f8e8 	bl	800369c <HAL_GPIO_WritePin>
//    static float angle, alpha1, beta1, Vq, Vd, alpha2, beta2, cosGrid, sinGrid;

    // PLL variables end

    // ADC 1
    HAL_ADC_Start(&hadc1);
 80014cc:	48cc      	ldr	r0, [pc, #816]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80014ce:	f000 fe47 	bl	8002160 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014d2:	f04f 31ff 	mov.w	r1, #4294967295
 80014d6:	48ca      	ldr	r0, [pc, #808]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80014d8:	f000 ff14 	bl	8002304 <HAL_ADC_PollForConversion>
    adcValue1 = HAL_ADC_GetValue(&hadc1);
 80014dc:	48c8      	ldr	r0, [pc, #800]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80014de:	f000 ff9c 	bl	800241a <HAL_ADC_GetValue>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4bc7      	ldr	r3, [pc, #796]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80014e8:	801a      	strh	r2, [r3, #0]

    // ADC 2
    HAL_ADC_Start(&hadc2);
 80014ea:	48c7      	ldr	r0, [pc, #796]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014ec:	f000 fe38 	bl	8002160 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	48c4      	ldr	r0, [pc, #784]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014f6:	f000 ff05 	bl	8002304 <HAL_ADC_PollForConversion>
    adcValue2 = HAL_ADC_GetValue(&hadc2);
 80014fa:	48c3      	ldr	r0, [pc, #780]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80014fc:	f000 ff8d 	bl	800241a <HAL_ADC_GetValue>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	4bc1      	ldr	r3, [pc, #772]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001506:	801a      	strh	r2, [r3, #0]


    phaseA = (float)adcValue1/(0xFFF+1);
 8001508:	4bbe      	ldr	r3, [pc, #760]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001514:	eddf 6abe 	vldr	s13, [pc, #760]	; 8001810 <HAL_TIM_PeriodElapsedCallback+0x360>
 8001518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151c:	4bbd      	ldr	r3, [pc, #756]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800151e:	edc3 7a00 	vstr	s15, [r3]
    phaseB = (float)adcValue2/(0xFFF+1);
 8001522:	4bba      	ldr	r3, [pc, #744]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800152e:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8001810 <HAL_TIM_PeriodElapsedCallback+0x360>
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	4bb8      	ldr	r3, [pc, #736]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001538:	edc3 7a00 	vstr	s15, [r3]
    phaseC = two_to_three_phase(&phaseA, &phaseB);
 800153c:	49b6      	ldr	r1, [pc, #728]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800153e:	48b5      	ldr	r0, [pc, #724]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001540:	f004 fe35 	bl	80061ae <two_to_three_phase>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	4bb4      	ldr	r3, [pc, #720]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800154a:	edc3 7a00 	vstr	s15, [r3]
//	HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg_2,
//						(uint32_t)&huart2.Instance->DR, strlen(msg_2));

    // PLL StartT_SAMPLE
    //--------------------------------------------------------------------------------------------
    angle = angle + T_SAMPLE*F_RAD;
 800154e:	4bb4      	ldr	r3, [pc, #720]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffc4 	bl	80004e0 <__aeabi_f2d>
 8001558:	a3a3      	add	r3, pc, #652	; (adr r3, 80017e8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe fe61 	bl	8000224 <__adddf3>
 8001562:	4603      	mov	r3, r0
 8001564:	460c      	mov	r4, r1
 8001566:	4618      	mov	r0, r3
 8001568:	4621      	mov	r1, r4
 800156a:	f7ff fae9 	bl	8000b40 <__aeabi_d2f>
 800156e:	4602      	mov	r2, r0
 8001570:	4bab      	ldr	r3, [pc, #684]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001572:	601a      	str	r2, [r3, #0]
    if (angle > TWO_PI)
 8001574:	4baa      	ldr	r3, [pc, #680]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffb1 	bl	80004e0 <__aeabi_f2d>
 800157e:	a39c      	add	r3, pc, #624	; (adr r3, 80017f0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff fa94 	bl	8000ab0 <__aeabi_dcmpgt>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d012      	beq.n	80015b4 <HAL_TIM_PeriodElapsedCallback+0x104>
    {
    	angle = angle - TWO_PI;
 800158e:	4ba4      	ldr	r3, [pc, #656]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffa4 	bl	80004e0 <__aeabi_f2d>
 8001598:	a395      	add	r3, pc, #596	; (adr r3, 80017f0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7fe fe3f 	bl	8000220 <__aeabi_dsub>
 80015a2:	4603      	mov	r3, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	4618      	mov	r0, r3
 80015a8:	4621      	mov	r1, r4
 80015aa:	f7ff fac9 	bl	8000b40 <__aeabi_d2f>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b9b      	ldr	r3, [pc, #620]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80015b2:	601a      	str	r2, [r3, #0]
    }


    alpha1 = abc_to_alpha(phaseA, phaseB, phaseC);
 80015b4:	4b97      	ldr	r3, [pc, #604]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	4b97      	ldr	r3, [pc, #604]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	4b96      	ldr	r3, [pc, #600]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015c2:	edd3 6a00 	vldr	s13, [r3]
 80015c6:	eeb0 1a66 	vmov.f32	s2, s13
 80015ca:	eef0 0a47 	vmov.f32	s1, s14
 80015ce:	eeb0 0a67 	vmov.f32	s0, s15
 80015d2:	f004 fa55 	bl	8005a80 <abc_to_alpha>
 80015d6:	eef0 7a40 	vmov.f32	s15, s0
 80015da:	4b92      	ldr	r3, [pc, #584]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]
    beta1 = abc_to_beta(phaseA, phaseB, phaseC);
 80015e0:	4b8c      	ldr	r3, [pc, #560]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	4b8b      	ldr	r3, [pc, #556]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80015ee:	edd3 6a00 	vldr	s13, [r3]
 80015f2:	eeb0 1a66 	vmov.f32	s2, s13
 80015f6:	eef0 0a47 	vmov.f32	s1, s14
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	f004 fa8f 	bl	8005b20 <abc_to_beta>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	4b88      	ldr	r3, [pc, #544]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001608:	edc3 7a00 	vstr	s15, [r3]

    Vd = alphabeta_to_d(alpha1, beta1, angle);
 800160c:	4b85      	ldr	r3, [pc, #532]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	4b85      	ldr	r3, [pc, #532]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001614:	ed93 7a00 	vldr	s14, [r3]
 8001618:	4b81      	ldr	r3, [pc, #516]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800161a:	edd3 6a00 	vldr	s13, [r3]
 800161e:	eeb0 1a66 	vmov.f32	s2, s13
 8001622:	eef0 0a47 	vmov.f32	s1, s14
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	f004 fabd 	bl	8005ba8 <alphabeta_to_d>
 800162e:	eef0 7a40 	vmov.f32	s15, s0
 8001632:	4b7e      	ldr	r3, [pc, #504]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001634:	edc3 7a00 	vstr	s15, [r3]
    Vq = alphabeta_to_q(alpha1, beta1, angle);
 8001638:	4b7a      	ldr	r3, [pc, #488]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	4b7a      	ldr	r3, [pc, #488]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	4b76      	ldr	r3, [pc, #472]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001646:	edd3 6a00 	vldr	s13, [r3]
 800164a:	eeb0 1a66 	vmov.f32	s2, s13
 800164e:	eef0 0a47 	vmov.f32	s1, s14
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f004 fad4 	bl	8005c02 <alphabeta_to_q>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	4b74      	ldr	r3, [pc, #464]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001660:	edc3 7a00 	vstr	s15, [r3]

    alpha2 = dq_to_alpha(Vd, Vq, angle);
 8001664:	4b71      	ldr	r3, [pc, #452]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	4b71      	ldr	r3, [pc, #452]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001672:	edd3 6a00 	vldr	s13, [r3]
 8001676:	eeb0 1a66 	vmov.f32	s2, s13
 800167a:	eef0 0a47 	vmov.f32	s1, s14
 800167e:	eeb0 0a67 	vmov.f32	s0, s15
 8001682:	f004 faed 	bl	8005c60 <dq_to_alpha>
 8001686:	eef0 7a40 	vmov.f32	s15, s0
 800168a:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800168c:	edc3 7a00 	vstr	s15, [r3]
    beta2 = dq_to_beta(Vd, Vq, angle);
 8001690:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	4b66      	ldr	r3, [pc, #408]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001698:	ed93 7a00 	vldr	s14, [r3]
 800169c:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800169e:	edd3 6a00 	vldr	s13, [r3]
 80016a2:	eeb0 1a66 	vmov.f32	s2, s13
 80016a6:	eef0 0a47 	vmov.f32	s1, s14
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	f004 fb04 	bl	8005cba <dq_to_beta>
 80016b2:	eef0 7a40 	vmov.f32	s15, s0
 80016b6:	4b60      	ldr	r3, [pc, #384]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80016b8:	edc3 7a00 	vstr	s15, [r3]

    cosGrid = cos_grid(alpha2, beta2);
 80016bc:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	eef0 0a47 	vmov.f32	s1, s14
 80016cc:	eeb0 0a67 	vmov.f32	s0, s15
 80016d0:	f004 fb20 	bl	8005d14 <cos_grid>
 80016d4:	eef0 7a40 	vmov.f32	s15, s0
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80016da:	edc3 7a00 	vstr	s15, [r3]
    sinGrid = sin_grid(alpha2, beta2);
 80016de:	4b55      	ldr	r3, [pc, #340]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	4b54      	ldr	r3, [pc, #336]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80016e6:	ed93 7a00 	vldr	s14, [r3]
 80016ea:	eef0 0a47 	vmov.f32	s1, s14
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	f004 fb49 	bl	8005d88 <sin_grid>
 80016f6:	eef0 7a40 	vmov.f32	s15, s0
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]

    phaseError = phase_detector(cosGrid, sinGrid, anglePllComp);
 8001700:	4b4e      	ldr	r3, [pc, #312]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001708:	ed93 7a00 	vldr	s14, [r3]
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800170e:	edd3 6a00 	vldr	s13, [r3]
 8001712:	eeb0 1a66 	vmov.f32	s2, s13
 8001716:	eef0 0a47 	vmov.f32	s1, s14
 800171a:	eeb0 0a67 	vmov.f32	s0, s15
 800171e:	f004 fd19 	bl	8006154 <phase_detector>
 8001722:	eef0 7a40 	vmov.f32	s15, s0
 8001726:	4b48      	ldr	r3, [pc, #288]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001728:	edc3 7a00 	vstr	s15, [r3]

    anglePll = pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	4b46      	ldr	r3, [pc, #280]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001734:	ed93 7a00 	vldr	s14, [r3]
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800173a:	edd3 6a00 	vldr	s13, [r3]
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001740:	ed93 6a00 	vldr	s12, [r3]
 8001744:	eddf 2a44 	vldr	s5, [pc, #272]	; 8001858 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8001748:	eeb0 2a46 	vmov.f32	s4, s12
 800174c:	eef0 1a66 	vmov.f32	s3, s13
 8001750:	eeb0 1a47 	vmov.f32	s2, s14
 8001754:	eddf 0a41 	vldr	s1, [pc, #260]	; 800185c <HAL_TIM_PeriodElapsedCallback+0x3ac>
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	f004 fb4e 	bl	8005dfc <pi_regulator>
 8001760:	eef0 7a40 	vmov.f32	s15, s0
 8001764:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001766:	edc3 7a00 	vstr	s15, [r3]
    anglePllComp = pi_regulator_comp(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 800176a:	4b37      	ldr	r3, [pc, #220]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001772:	ed93 7a00 	vldr	s14, [r3]
 8001776:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001778:	edd3 6a00 	vldr	s13, [r3]
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800177e:	ed93 6a00 	vldr	s12, [r3]
 8001782:	eddf 2a35 	vldr	s5, [pc, #212]	; 8001858 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8001786:	eeb0 2a46 	vmov.f32	s4, s12
 800178a:	eef0 1a66 	vmov.f32	s3, s13
 800178e:	eeb0 1a47 	vmov.f32	s2, s14
 8001792:	eddf 0a32 	vldr	s1, [pc, #200]	; 800185c <HAL_TIM_PeriodElapsedCallback+0x3ac>
 8001796:	eeb0 0a67 	vmov.f32	s0, s15
 800179a:	f004 fbf9 	bl	8005f90 <pi_regulator_comp>
 800179e:	eef0 7a40 	vmov.f32	s15, s0
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80017a4:	edc3 7a00 	vstr	s15, [r3]
    anglePll = pi_regulator(phaseError, F_RAD, ki, kp, kPhi, T_SAMPLE);
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80017b0:	ed93 7a00 	vldr	s14, [r3]
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80017b6:	edd3 6a00 	vldr	s13, [r3]
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80017bc:	ed93 6a00 	vldr	s12, [r3]
 80017c0:	eddf 2a25 	vldr	s5, [pc, #148]	; 8001858 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80017c4:	eeb0 2a46 	vmov.f32	s4, s12
 80017c8:	eef0 1a66 	vmov.f32	s3, s13
 80017cc:	eeb0 1a47 	vmov.f32	s2, s14
 80017d0:	eddf 0a22 	vldr	s1, [pc, #136]	; 800185c <HAL_TIM_PeriodElapsedCallback+0x3ac>
 80017d4:	eeb0 0a67 	vmov.f32	s0, s15
 80017d8:	f004 fb10 	bl	8005dfc <pi_regulator>
 80017dc:	eef0 7a40 	vmov.f32	s15, s0
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80017e2:	edc3 7a00 	vstr	s15, [r3]
 80017e6:	e03d      	b.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80017e8:	92172844 	.word	0x92172844
 80017ec:	3fa015bf 	.word	0x3fa015bf
 80017f0:	54442eea 	.word	0x54442eea
 80017f4:	401921fb 	.word	0x401921fb
 80017f8:	20000284 	.word	0x20000284
 80017fc:	40020800 	.word	0x40020800
 8001800:	20009f98 	.word	0x20009f98
 8001804:	2000a0c4 	.word	0x2000a0c4
 8001808:	2000023c 	.word	0x2000023c
 800180c:	20009f34 	.word	0x20009f34
 8001810:	45800000 	.word	0x45800000
 8001814:	200002cc 	.word	0x200002cc
 8001818:	20013d5c 	.word	0x20013d5c
 800181c:	2000a058 	.word	0x2000a058
 8001820:	2000a05c 	.word	0x2000a05c
 8001824:	20009f18 	.word	0x20009f18
 8001828:	2000a0d0 	.word	0x2000a0d0
 800182c:	20009f10 	.word	0x20009f10
 8001830:	20009f1c 	.word	0x20009f1c
 8001834:	20009fe0 	.word	0x20009fe0
 8001838:	20000238 	.word	0x20000238
 800183c:	2000a0c8 	.word	0x2000a0c8
 8001840:	2000a0c0 	.word	0x2000a0c0
 8001844:	2000a0cc 	.word	0x2000a0cc
 8001848:	20009f14 	.word	0x20009f14
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004
 8001854:	20000008 	.word	0x20000008
 8001858:	38d1b717 	.word	0x38d1b717
 800185c:	439d1463 	.word	0x439d1463
 8001860:	20013d60 	.word	0x20013d60
    //--------------------------------------------------------------------------------------------
    // PLL End

    // DAC
    var = Vd*(0xFFF+1);
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80018ac <HAL_TIM_PeriodElapsedCallback+0x3fc>
 800186e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001876:	ee17 3a90 	vmov	r3, s15
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800187e:	801a      	strh	r2, [r3, #0]
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1); 	// Start the DAC
 8001880:	2100      	movs	r1, #0
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8001884:	f001 f937 	bl	8002af6 <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var); // Set dac to digital value
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	4808      	ldr	r0, [pc, #32]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8001892:	f001 f982 	bl	8002b9a <HAL_DAC_SetValue>

	// Reset pin: Stop timer
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2140      	movs	r1, #64	; 0x40
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800189c:	f001 fefe 	bl	800369c <HAL_GPIO_WritePin>
  }
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	20009f10 	.word	0x20009f10
 80018ac:	45800000 	.word	0x45800000
 80018b0:	20000208 	.word	0x20000208
 80018b4:	2000a044 	.word	0x2000a044
 80018b8:	40020800 	.word	0x40020800
 80018bc:	00000000 	.word	0x00000000

080018c0 <sine_creator2>:

void sine_creator2()
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
	// Create 50 Hz sine with 0 phase shift
	uint32_t var;
	for (var = 0; var < 10000; ++var)
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	e03d      	b.n	8001948 <sine_creator2+0x88>
	{
		sine1[var] = sinf(50.0*(float)var*1/F_SAMPLE*2*PI);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d6:	ee17 0a90 	vmov	r0, s15
 80018da:	f7fe fe01 	bl	80004e0 <__aeabi_f2d>
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <sine_creator2+0xb0>)
 80018e4:	f7fe fe54 	bl	8000590 <__aeabi_dmul>
 80018e8:	4603      	mov	r3, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	4618      	mov	r0, r3
 80018ee:	4621      	mov	r1, r4
 80018f0:	a31b      	add	r3, pc, #108	; (adr r3, 8001960 <sine_creator2+0xa0>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe ff75 	bl	80007e4 <__aeabi_ddiv>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	4618      	mov	r0, r3
 8001900:	4621      	mov	r1, r4
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	f7fe fc8d 	bl	8000224 <__adddf3>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	a315      	add	r3, pc, #84	; (adr r3, 8001968 <sine_creator2+0xa8>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fe3a 	bl	8000590 <__aeabi_dmul>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	4618      	mov	r0, r3
 8001922:	4621      	mov	r1, r4
 8001924:	f7ff f90c 	bl	8000b40 <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	ee00 3a10 	vmov	s0, r3
 800192e:	f006 f9ed 	bl	8007d0c <sinf>
 8001932:	eef0 7a40 	vmov.f32	s15, s0
 8001936:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <sine_creator2+0xb4>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	edc3 7a00 	vstr	s15, [r3]
	for (var = 0; var < 10000; ++var)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f242 720f 	movw	r2, #9999	; 0x270f
 800194e:	4293      	cmp	r3, r2
 8001950:	d9bc      	bls.n	80018cc <sine_creator2+0xc>
	}
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	00000000 	.word	0x00000000
 8001964:	40c38800 	.word	0x40c38800
 8001968:	54442eea 	.word	0x54442eea
 800196c:	400921fb 	.word	0x400921fb
 8001970:	40490000 	.word	0x40490000
 8001974:	200002d0 	.word	0x200002d0

08001978 <sine_creator3>:

void sine_creator3()
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
	// Create 50 Hz sine with 120 deg phase shift
	uint32_t var;
	for (var = 0; var < 10000; ++var)
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	e046      	b.n	8001a12 <sine_creator3+0x9a>
	{
		sine2[var] = sinf(50.0*(float)var*1/F_SAMPLE*2*PI + 120*PI/180);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198e:	ee17 0a90 	vmov	r0, s15
 8001992:	f7fe fda5 	bl	80004e0 <__aeabi_f2d>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <sine_creator3+0xc8>)
 800199c:	f7fe fdf8 	bl	8000590 <__aeabi_dmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	460c      	mov	r4, r1
 80019a4:	4618      	mov	r0, r3
 80019a6:	4621      	mov	r1, r4
 80019a8:	a31f      	add	r3, pc, #124	; (adr r3, 8001a28 <sine_creator3+0xb0>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe ff19 	bl	80007e4 <__aeabi_ddiv>
 80019b2:	4603      	mov	r3, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	4618      	mov	r0, r3
 80019b8:	4621      	mov	r1, r4
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	f7fe fc31 	bl	8000224 <__adddf3>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	a319      	add	r3, pc, #100	; (adr r3, 8001a30 <sine_creator3+0xb8>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fdde 	bl	8000590 <__aeabi_dmul>
 80019d4:	4603      	mov	r3, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	4618      	mov	r0, r3
 80019da:	4621      	mov	r1, r4
 80019dc:	a316      	add	r3, pc, #88	; (adr r3, 8001a38 <sine_creator3+0xc0>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fc1f 	bl	8000224 <__adddf3>
 80019e6:	4603      	mov	r3, r0
 80019e8:	460c      	mov	r4, r1
 80019ea:	4618      	mov	r0, r3
 80019ec:	4621      	mov	r1, r4
 80019ee:	f7ff f8a7 	bl	8000b40 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	ee00 3a10 	vmov	s0, r3
 80019f8:	f006 f988 	bl	8007d0c <sinf>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <sine_creator3+0xcc>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	edc3 7a00 	vstr	s15, [r3]
	for (var = 0; var < 10000; ++var)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d9b3      	bls.n	8001984 <sine_creator3+0xc>
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}
 8001a24:	f3af 8000 	nop.w
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40c38800 	.word	0x40c38800
 8001a30:	54442eea 	.word	0x54442eea
 8001a34:	400921fb 	.word	0x400921fb
 8001a38:	382d749c 	.word	0x382d749c
 8001a3c:	4000c152 	.word	0x4000c152
 8001a40:	40490000 	.word	0x40490000
 8001a44:	2000a0d4 	.word	0x2000a0d4

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <Error_Handler+0x6>

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a45      	ldr	r2, [pc, #276]	; (8001bd4 <HAL_ADC_MspInit+0x134>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d157      	bne.n	8001b72 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001afa:	2301      	movs	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4833      	ldr	r0, [pc, #204]	; (8001bdc <HAL_ADC_MspInit+0x13c>)
 8001b0e:	f001 fc33 	bl	8003378 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b12:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b14:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <HAL_ADC_MspInit+0x144>)
 8001b16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b18:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b46:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b54:	4822      	ldr	r0, [pc, #136]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b56:	f001 f895 	bl	8002c84 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b60:	f7ff ff72 	bl	8001a48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_ADC_MspInit+0x140>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b70:	e02c      	b.n	8001bcc <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_ADC_MspInit+0x148>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d127      	bne.n	8001bcc <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_ADC_MspInit+0x138>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_ADC_MspInit+0x13c>)
 8001bc8:	f001 fbd6 	bl	8003378 <HAL_GPIO_Init>
}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012000 	.word	0x40012000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	2000a060 	.word	0x2000a060
 8001be4:	40026410 	.word	0x40026410
 8001be8:	40012100 	.word	0x40012100

08001bec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <HAL_DAC_MspInit+0xdc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d157      	bne.n	8001cbe <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_DAC_MspInit+0xe0>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <HAL_DAC_MspInit+0xe0>)
 8001c18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_DAC_MspInit+0xe0>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_DAC_MspInit+0xe0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_DAC_MspInit+0xe0>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_DAC_MspInit+0xe0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c46:	2310      	movs	r3, #16
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	481d      	ldr	r0, [pc, #116]	; (8001cd0 <HAL_DAC_MspInit+0xe4>)
 8001c5a:	f001 fb8d 	bl	8003378 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_DAC_MspInit+0xec>)
 8001c62:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c66:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001c6a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c6e:	2240      	movs	r2, #64	; 0x40
 8001c70:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_DISABLE;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c84:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c94:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001ca2:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001ca4:	f000 ffee 	bl	8002c84 <HAL_DMA_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8001cae:	f7ff fecb 	bl	8001a48 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_DAC_MspInit+0xe8>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	; 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40007400 	.word	0x40007400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	20009f38 	.word	0x20009f38
 8001cd8:	40026088 	.word	0x40026088

08001cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_TIM_Base_MspInit+0x70>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_TIM_Base_MspInit+0x70>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_TIM_Base_MspInit+0x70>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001d0a:	e01a      	b.n	8001d42 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_TIM_Base_MspInit+0x74>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d115      	bne.n	8001d42 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_TIM_Base_MspInit+0x70>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_TIM_Base_MspInit+0x70>)
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_TIM_Base_MspInit+0x70>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2019      	movs	r0, #25
 8001d38:	f000 fe85 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d3c:	2019      	movs	r0, #25
 8001d3e:	f000 fe9e 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40014400 	.word	0x40014400

08001d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <HAL_UART_MspInit+0xf0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d161      	bne.n	8001e3a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_UART_MspInit+0xf4>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a32      	ldr	r2, [pc, #200]	; (8001e48 <HAL_UART_MspInit+0xf4>)
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_UART_MspInit+0xf4>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <HAL_UART_MspInit+0xf4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a2b      	ldr	r2, [pc, #172]	; (8001e48 <HAL_UART_MspInit+0xf4>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_UART_MspInit+0xf4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dae:	230c      	movs	r3, #12
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4820      	ldr	r0, [pc, #128]	; (8001e4c <HAL_UART_MspInit+0xf8>)
 8001dca:	f001 fad5 	bl	8003378 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_UART_MspInit+0x100>)
 8001dd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001dd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df0:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e0e:	4810      	ldr	r0, [pc, #64]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001e10:	f000 ff38 	bl	8002c84 <HAL_DMA_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001e1a:	f7ff fe15 	bl	8001a48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_UART_MspInit+0xfc>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2026      	movs	r0, #38	; 0x26
 8001e30:	f000 fe09 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e34:	2026      	movs	r0, #38	; 0x26
 8001e36:	f000 fe22 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40004400 	.word	0x40004400
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	20009fe4 	.word	0x20009fe4
 8001e54:	400260a0 	.word	0x400260a0

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <NMI_Handler+0x4>

08001e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea4:	f000 f8f8 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <DMA1_Stream5_IRQHandler+0x10>)
 8001eb2:	f001 f827 	bl	8002f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20009f38 	.word	0x20009f38

08001ec0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <DMA1_Stream6_IRQHandler+0x10>)
 8001ec6:	f001 f81d 	bl	8002f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20009fe4 	.word	0x20009fe4

08001ed4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001eda:	f002 fad4 	bl	8004486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000284 	.word	0x20000284

08001ee8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <USART2_IRQHandler+0x10>)
 8001eee:	f003 f8d3 	bl	8005098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20013d64 	.word	0x20013d64

08001efc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <DMA2_Stream0_IRQHandler+0x10>)
 8001f02:	f000 ffff 	bl	8002f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000a060 	.word	0x2000a060

08001f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f40:	f004 f94c 	bl	80061dc <__errno>
 8001f44:	4602      	mov	r2, r0
 8001f46:	230c      	movs	r3, #12
 8001f48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20020000 	.word	0x20020000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	2000020c 	.word	0x2000020c
 8001f78:	20013db0 	.word	0x20013db0

08001f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <SystemInit+0x20>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <SystemInit+0x20>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fa6:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fbc:	4c0b      	ldr	r4, [pc, #44]	; (8001fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fca:	f7ff ffd7 	bl	8001f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fce:	f004 f90b 	bl	80061e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd2:	f7fe ff85 	bl	8000ee0 <main>
  bx  lr    
 8001fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001fe4:	08009014 	.word	0x08009014
  ldr r2, =_sbss
 8001fe8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001fec:	20013db0 	.word	0x20013db0

08001ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_Init+0x40>)
 8001ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_Init+0x40>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_Init+0x40>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201c:	2003      	movs	r0, #3
 800201e:	f000 fd07 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002022:	2000      	movs	r0, #0
 8002024:	f000 f808 	bl	8002038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002028:	f7ff fd12 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x54>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x58>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fd1f 	bl	8002a9a <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00e      	b.n	8002084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d80a      	bhi.n	8002082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f000 fce7 	bl	8002a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_InitTick+0x5c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	2000000c 	.word	0x2000000c
 8002090:	20000014 	.word	0x20000014
 8002094:	20000010 	.word	0x20000010

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000014 	.word	0x20000014
 80020bc:	20013da8 	.word	0x20013da8

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20013da8 	.word	0x20013da8

080020d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e033      	b.n	8002156 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fcd2 	bl	8001aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800211e:	f023 0302 	bic.w	r3, r3, #2
 8002122:	f043 0202 	orr.w	r2, r3, #2
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fab4 	bl	8002698 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
 8002146:	e001      	b.n	800214c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_ADC_Start+0x1a>
 8002176:	2302      	movs	r3, #2
 8002178:	e0b2      	b.n	80022e0 <HAL_ADC_Start+0x180>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d018      	beq.n	80021c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021a0:	4b52      	ldr	r3, [pc, #328]	; (80022ec <HAL_ADC_Start+0x18c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_ADC_Start+0x190>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0c9a      	lsrs	r2, r3, #18
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021b4:	e002      	b.n	80021bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f9      	bne.n	80021b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d17a      	bne.n	80022c6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	d106      	bne.n	800221e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	f023 0206 	bic.w	r2, r3, #6
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
 800221c:	e002      	b.n	8002224 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_ADC_Start+0x194>)
 800222e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002238:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2b00      	cmp	r3, #0
 8002244:	d12a      	bne.n	800229c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a2b      	ldr	r2, [pc, #172]	; (80022f8 <HAL_ADC_Start+0x198>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d015      	beq.n	800227c <HAL_ADC_Start+0x11c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a29      	ldr	r2, [pc, #164]	; (80022fc <HAL_ADC_Start+0x19c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d105      	bne.n	8002266 <HAL_ADC_Start+0x106>
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_ADC_Start+0x194>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a25      	ldr	r2, [pc, #148]	; (8002300 <HAL_ADC_Start+0x1a0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d136      	bne.n	80022de <HAL_ADC_Start+0x17e>
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_ADC_Start+0x194>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d830      	bhi.n	80022de <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d129      	bne.n	80022de <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	e020      	b.n	80022de <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <HAL_ADC_Start+0x198>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d11b      	bne.n	80022de <HAL_ADC_Start+0x17e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d114      	bne.n	80022de <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e00b      	b.n	80022de <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	2000000c 	.word	0x2000000c
 80022f0:	431bde83 	.word	0x431bde83
 80022f4:	40012300 	.word	0x40012300
 80022f8:	40012000 	.word	0x40012000
 80022fc:	40012100 	.word	0x40012100
 8002300:	40012200 	.word	0x40012200

08002304 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002320:	d113      	bne.n	800234a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800232c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002330:	d10b      	bne.n	800234a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e063      	b.n	8002412 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800234a:	f7ff feb9 	bl	80020c0 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002350:	e021      	b.n	8002396 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d01d      	beq.n	8002396 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_ADC_PollForConversion+0x6c>
 8002360:	f7ff feae 	bl	80020c0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d212      	bcs.n	8002396 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b02      	cmp	r3, #2
 800237c:	d00b      	beq.n	8002396 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f043 0204 	orr.w	r2, r3, #4
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03d      	b.n	8002412 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d1d6      	bne.n	8002352 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0212 	mvn.w	r2, #18
 80023ac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d123      	bne.n	8002410 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11f      	bne.n	8002410 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x1c>
 800244c:	2302      	movs	r3, #2
 800244e:	e113      	b.n	8002678 <HAL_ADC_ConfigChannel+0x244>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b09      	cmp	r3, #9
 800245e:	d925      	bls.n	80024ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	3b1e      	subs	r3, #30
 8002476:	2207      	movs	r2, #7
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43da      	mvns	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	400a      	ands	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68d9      	ldr	r1, [r3, #12]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	4603      	mov	r3, r0
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4403      	add	r3, r0
 800249e:	3b1e      	subs	r3, #30
 80024a0:	409a      	lsls	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	e022      	b.n	80024f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	2207      	movs	r2, #7
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	400a      	ands	r2, r1
 80024ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6919      	ldr	r1, [r3, #16]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4403      	add	r3, r0
 80024e8:	409a      	lsls	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d824      	bhi.n	8002544 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b05      	subs	r3, #5
 800250c:	221f      	movs	r2, #31
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b05      	subs	r3, #5
 8002536:	fa00 f203 	lsl.w	r2, r0, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	635a      	str	r2, [r3, #52]	; 0x34
 8002542:	e04c      	b.n	80025de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d824      	bhi.n	8002596 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b23      	subs	r3, #35	; 0x23
 800255e:	221f      	movs	r2, #31
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b23      	subs	r3, #35	; 0x23
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
 8002594:	e023      	b.n	80025de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b41      	subs	r3, #65	; 0x41
 80025a8:	221f      	movs	r2, #31
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b41      	subs	r3, #65	; 0x41
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_ADC_ConfigChannel+0x250>)
 80025e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_ADC_ConfigChannel+0x254>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d10f      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1d8>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b12      	cmp	r3, #18
 80025f2:	d10b      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_ADC_ConfigChannel+0x254>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12b      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_ADC_ConfigChannel+0x258>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <HAL_ADC_ConfigChannel+0x1f4>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b11      	cmp	r3, #17
 8002626:	d122      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_ADC_ConfigChannel+0x258>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d111      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_ADC_ConfigChannel+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_ADC_ConfigChannel+0x260>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9a      	lsrs	r2, r3, #18
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002660:	e002      	b.n	8002668 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3b01      	subs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40012300 	.word	0x40012300
 8002688:	40012000 	.word	0x40012000
 800268c:	10000012 	.word	0x10000012
 8002690:	2000000c 	.word	0x2000000c
 8002694:	431bde83 	.word	0x431bde83

08002698 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <ADC_Init+0x1f0>)
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6899      	ldr	r1, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	4a58      	ldr	r2, [pc, #352]	; (800288c <ADC_Init+0x1f4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800273e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	e00f      	b.n	8002796 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002794:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0202 	bic.w	r2, r2, #2
 80027a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7e1b      	ldrb	r3, [r3, #24]
 80027b0:	005a      	lsls	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	3b01      	subs	r3, #1
 80027f0:	035a      	lsls	r2, r3, #13
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e007      	b.n	800280c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	3b01      	subs	r3, #1
 8002828:	051a      	lsls	r2, r3, #20
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800284e:	025a      	lsls	r2, r3, #9
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	029a      	lsls	r2, r3, #10
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40012300 	.word	0x40012300
 800288c:	0f000001 	.word	0x0f000001

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff8e 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff29 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff3e 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff8e 	bl	8002984 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5d 	bl	8002930 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff31 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa2 	bl	80029ec <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e014      	b.n	8002aee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	791b      	ldrb	r3, [r3, #4]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff f889 	bl	8001bec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	795b      	ldrb	r3, [r3, #5]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_DAC_Start+0x16>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e040      	b.n	8002b8e <HAL_DAC_Start+0x98>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2201      	movs	r2, #1
 8002b26:	409a      	lsls	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002b40:	2b3c      	cmp	r3, #60	; 0x3c
 8002b42:	d11d      	bne.n	8002b80 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	e014      	b.n	8002b80 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	213c      	movs	r1, #60	; 0x3c
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0202 	orr.w	r2, r2, #2
 8002b7e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	e004      	b.n	8002bce <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3314      	adds	r3, #20
 8002bcc:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	795b      	ldrb	r3, [r3, #5]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_DAC_ConfigChannel+0x18>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e03c      	b.n	8002c76 <HAL_DAC_ConfigChannel+0x92>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2202      	movs	r2, #2
 8002c06:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4013      	ands	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	22c0      	movs	r2, #192	; 0xc0
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c90:	f7ff fa16 	bl	80020c0 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e099      	b.n	8002dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc0:	e00f      	b.n	8002ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc2:	f7ff f9fd 	bl	80020c0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d908      	bls.n	8002ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2203      	movs	r2, #3
 8002cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e078      	b.n	8002dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e8      	bne.n	8002cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_DMA_Init+0x158>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d107      	bne.n	8002d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	4313      	orrs	r3, r2
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f023 0307 	bic.w	r3, r3, #7
 8002d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d117      	bne.n	8002da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fa7b 	bl	8003284 <DMA_CheckFifoParam>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2240      	movs	r2, #64	; 0x40
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002da2:	2301      	movs	r3, #1
 8002da4:	e016      	b.n	8002dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa32 	bl	8003218 <DMA_CalcBaseAndBitshift>
 8002db4:	4603      	mov	r3, r0
 8002db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	223f      	movs	r2, #63	; 0x3f
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	f010803f 	.word	0xf010803f

08002de0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dee:	f7ff f967 	bl	80020c0 <HAL_GetTick>
 8002df2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d008      	beq.n	8002e12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e052      	b.n	8002eb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0216 	bic.w	r2, r2, #22
 8002e20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <HAL_DMA_Abort+0x62>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0208 	bic.w	r2, r2, #8
 8002e50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e62:	e013      	b.n	8002e8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e64:	f7ff f92c 	bl	80020c0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d90c      	bls.n	8002e8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2203      	movs	r2, #3
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e015      	b.n	8002eb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e4      	bne.n	8002e64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	223f      	movs	r2, #63	; 0x3f
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d004      	beq.n	8002ede <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00c      	b.n	8002ef8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2205      	movs	r2, #5
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_DMA_IRQHandler+0x258>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a92      	ldr	r2, [pc, #584]	; (8003160 <HAL_DMA_IRQHandler+0x25c>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0a9b      	lsrs	r3, r3, #10
 8002f1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	2208      	movs	r2, #8
 8002f30:	409a      	lsls	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01a      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2201      	movs	r2, #1
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d012      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	2201      	movs	r2, #1
 8002f94:	409a      	lsls	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f043 0202 	orr.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2204      	movs	r2, #4
 8002fac:	409a      	lsls	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d012      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00b      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2204      	movs	r2, #4
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	f043 0204 	orr.w	r2, r3, #4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d043      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03c      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	2210      	movs	r2, #16
 8003000:	409a      	lsls	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d018      	beq.n	8003046 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d024      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
 8003032:	e01f      	b.n	8003074 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01b      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
 8003044:	e016      	b.n	8003074 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0208 	bic.w	r2, r2, #8
 8003062:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	2220      	movs	r2, #32
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 808e 	beq.w	80031a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8086 	beq.w	80031a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	2220      	movs	r2, #32
 800309c:	409a      	lsls	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d136      	bne.n	800311c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0216 	bic.w	r2, r2, #22
 80030bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_DMA_IRQHandler+0x1da>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0208 	bic.w	r2, r2, #8
 80030ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	223f      	movs	r2, #63	; 0x3f
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310e:	2b00      	cmp	r3, #0
 8003110:	d07d      	beq.n	800320e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
        }
        return;
 800311a:	e078      	b.n	800320e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01c      	beq.n	8003164 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d108      	bne.n	800314a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	2b00      	cmp	r3, #0
 800313e:	d030      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
 8003148:	e02b      	b.n	80031a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d027      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
 800315a:	e022      	b.n	80031a2 <HAL_DMA_IRQHandler+0x29e>
 800315c:	2000000c 	.word	0x2000000c
 8003160:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0210 	bic.w	r2, r2, #16
 8003180:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d032      	beq.n	8003210 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d022      	beq.n	80031fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2205      	movs	r2, #5
 80031ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	3301      	adds	r3, #1
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d307      	bcc.n	80031ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f2      	bne.n	80031ce <HAL_DMA_IRQHandler+0x2ca>
 80031e8:	e000      	b.n	80031ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
 800320c:	e000      	b.n	8003210 <HAL_DMA_IRQHandler+0x30c>
        return;
 800320e:	bf00      	nop
    }
  }
}
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop

08003218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3b10      	subs	r3, #16
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <DMA_CalcBaseAndBitshift+0x64>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <DMA_CalcBaseAndBitshift+0x68>)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d909      	bls.n	800325a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	659a      	str	r2, [r3, #88]	; 0x58
 8003258:	e007      	b.n	800326a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	aaaaaaab 	.word	0xaaaaaaab
 8003280:	080089fc 	.word	0x080089fc

08003284 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11f      	bne.n	80032de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d855      	bhi.n	8003350 <DMA_CheckFifoParam+0xcc>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <DMA_CheckFifoParam+0x28>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032cf 	.word	0x080032cf
 80032b4:	080032bd 	.word	0x080032bd
 80032b8:	08003351 	.word	0x08003351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d045      	beq.n	8003354 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032cc:	e042      	b.n	8003354 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032d6:	d13f      	bne.n	8003358 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032dc:	e03c      	b.n	8003358 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d121      	bne.n	800332c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d836      	bhi.n	800335c <DMA_CheckFifoParam+0xd8>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <DMA_CheckFifoParam+0x70>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003305 	.word	0x08003305
 80032f8:	0800330b 	.word	0x0800330b
 80032fc:	08003305 	.word	0x08003305
 8003300:	0800331d 	.word	0x0800331d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e02f      	b.n	800336a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d024      	beq.n	8003360 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331a:	e021      	b.n	8003360 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003324:	d11e      	bne.n	8003364 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800332a:	e01b      	b.n	8003364 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d902      	bls.n	8003338 <DMA_CheckFifoParam+0xb4>
 8003332:	2b03      	cmp	r3, #3
 8003334:	d003      	beq.n	800333e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003336:	e018      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      break;
 800333c:	e015      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00e      	beq.n	8003368 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      break;
 800334e:	e00b      	b.n	8003368 <DMA_CheckFifoParam+0xe4>
      break;
 8003350:	bf00      	nop
 8003352:	e00a      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003354:	bf00      	nop
 8003356:	e008      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003358:	bf00      	nop
 800335a:	e006      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 800335c:	bf00      	nop
 800335e:	e004      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003360:	bf00      	nop
 8003362:	e002      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;   
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003368:	bf00      	nop
    }
  } 
  
  return status; 
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	e165      	b.n	8003660 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f040 8154 	bne.w	800365a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d005      	beq.n	80033ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d130      	bne.n	800342c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003400:	2201      	movs	r2, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 0201 	and.w	r2, r3, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b03      	cmp	r3, #3
 8003436:	d017      	beq.n	8003468 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d123      	bne.n	80034bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80ae 	beq.w	800365a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_GPIO_Init+0x2fc>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a5b      	ldr	r2, [pc, #364]	; (8003674 <HAL_GPIO_Init+0x2fc>)
 8003508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_GPIO_Init+0x2fc>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351a:	4a57      	ldr	r2, [pc, #348]	; (8003678 <HAL_GPIO_Init+0x300>)
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	3302      	adds	r3, #2
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4e      	ldr	r2, [pc, #312]	; (800367c <HAL_GPIO_Init+0x304>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d025      	beq.n	8003592 <HAL_GPIO_Init+0x21a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4d      	ldr	r2, [pc, #308]	; (8003680 <HAL_GPIO_Init+0x308>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01f      	beq.n	800358e <HAL_GPIO_Init+0x216>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_GPIO_Init+0x30c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d019      	beq.n	800358a <HAL_GPIO_Init+0x212>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4b      	ldr	r2, [pc, #300]	; (8003688 <HAL_GPIO_Init+0x310>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_GPIO_Init+0x20e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4a      	ldr	r2, [pc, #296]	; (800368c <HAL_GPIO_Init+0x314>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00d      	beq.n	8003582 <HAL_GPIO_Init+0x20a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a49      	ldr	r2, [pc, #292]	; (8003690 <HAL_GPIO_Init+0x318>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <HAL_GPIO_Init+0x206>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a48      	ldr	r2, [pc, #288]	; (8003694 <HAL_GPIO_Init+0x31c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_GPIO_Init+0x202>
 8003576:	2306      	movs	r3, #6
 8003578:	e00c      	b.n	8003594 <HAL_GPIO_Init+0x21c>
 800357a:	2307      	movs	r3, #7
 800357c:	e00a      	b.n	8003594 <HAL_GPIO_Init+0x21c>
 800357e:	2305      	movs	r3, #5
 8003580:	e008      	b.n	8003594 <HAL_GPIO_Init+0x21c>
 8003582:	2304      	movs	r3, #4
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x21c>
 8003586:	2303      	movs	r3, #3
 8003588:	e004      	b.n	8003594 <HAL_GPIO_Init+0x21c>
 800358a:	2302      	movs	r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x21c>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_GPIO_Init+0x21c>
 8003592:	2300      	movs	r3, #0
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f002 0203 	and.w	r2, r2, #3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	4093      	lsls	r3, r2
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a4:	4934      	ldr	r1, [pc, #208]	; (8003678 <HAL_GPIO_Init+0x300>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b2:	4b39      	ldr	r3, [pc, #228]	; (8003698 <HAL_GPIO_Init+0x320>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d6:	4a30      	ldr	r2, [pc, #192]	; (8003698 <HAL_GPIO_Init+0x320>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_GPIO_Init+0x320>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <HAL_GPIO_Init+0x320>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_GPIO_Init+0x320>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362a:	4a1b      	ldr	r2, [pc, #108]	; (8003698 <HAL_GPIO_Init+0x320>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_GPIO_Init+0x320>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003654:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_GPIO_Init+0x320>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3301      	adds	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	f67f ae96 	bls.w	8003394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003668:	bf00      	nop
 800366a:	3724      	adds	r7, #36	; 0x24
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40023800 	.word	0x40023800
 8003678:	40013800 	.word	0x40013800
 800367c:	40020000 	.word	0x40020000
 8003680:	40020400 	.word	0x40020400
 8003684:	40020800 	.word	0x40020800
 8003688:	40020c00 	.word	0x40020c00
 800368c:	40021000 	.word	0x40021000
 8003690:	40021400 	.word	0x40021400
 8003694:	40021800 	.word	0x40021800
 8003698:	40013c00 	.word	0x40013c00

0800369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
 80036a8:	4613      	mov	r3, r2
 80036aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ac:	787b      	ldrb	r3, [r7, #1]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036b8:	e003      	b.n	80036c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	041a      	lsls	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	619a      	str	r2, [r3, #24]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_PWREx_EnableOverDrive+0x90>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_PWREx_EnableOverDrive+0x90>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ea:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_PWREx_EnableOverDrive+0x90>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_PWREx_EnableOverDrive+0x94>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036fc:	f7fe fce0 	bl	80020c0 <HAL_GetTick>
 8003700:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003702:	e009      	b.n	8003718 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003704:	f7fe fcdc 	bl	80020c0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003712:	d901      	bls.n	8003718 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e01f      	b.n	8003758 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <HAL_PWREx_EnableOverDrive+0x98>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003724:	d1ee      	bne.n	8003704 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800372c:	f7fe fcc8 	bl	80020c0 <HAL_GetTick>
 8003730:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003732:	e009      	b.n	8003748 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003734:	f7fe fcc4 	bl	80020c0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003742:	d901      	bls.n	8003748 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e007      	b.n	8003758 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003748:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_PWREx_EnableOverDrive+0x98>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003754:	d1ee      	bne.n	8003734 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	420e0040 	.word	0x420e0040
 8003768:	40007000 	.word	0x40007000
 800376c:	420e0044 	.word	0x420e0044

08003770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0cc      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003784:	4b68      	ldr	r3, [pc, #416]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d90c      	bls.n	80037ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0b8      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e8:	4b50      	ldr	r3, [pc, #320]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	494d      	ldr	r1, [pc, #308]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d044      	beq.n	8003890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d119      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d003      	beq.n	800382e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	2b03      	cmp	r3, #3
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	4b3f      	ldr	r3, [pc, #252]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383e:	4b3b      	ldr	r3, [pc, #236]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e067      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4934      	ldr	r1, [pc, #208]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003860:	f7fe fc2e 	bl	80020c0 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e00a      	b.n	800387e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fe fc2a 	bl	80020c0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e04f      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b2b      	ldr	r3, [pc, #172]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 020c 	and.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1eb      	bne.n	8003868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003890:	4b25      	ldr	r3, [pc, #148]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d20c      	bcs.n	80038b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e032      	b.n	800391e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c4:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4916      	ldr	r1, [pc, #88]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	490e      	ldr	r1, [pc, #56]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038f6:	f000 f855 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 80038fa:	4601      	mov	r1, r0
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x1c0>)
 8003908:	5cd3      	ldrb	r3, [r2, r3]
 800390a:	fa21 f303 	lsr.w	r3, r1, r3
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fb8e 	bl	8002038 <HAL_InitTick>

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00
 800392c:	40023800 	.word	0x40023800
 8003930:	080089e4 	.word	0x080089e4
 8003934:	2000000c 	.word	0x2000000c
 8003938:	20000010 	.word	0x20000010

0800393c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_GetHCLKFreq+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	2000000c 	.word	0x2000000c

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003958:	f7ff fff0 	bl	800393c <HAL_RCC_GetHCLKFreq>
 800395c:	4601      	mov	r1, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	0a9b      	lsrs	r3, r3, #10
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4a03      	ldr	r2, [pc, #12]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800396a:	5cd3      	ldrb	r3, [r2, r3]
 800396c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40023800 	.word	0x40023800
 8003978:	080089f4 	.word	0x080089f4

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003980:	f7ff ffdc 	bl	800393c <HAL_RCC_GetHCLKFreq>
 8003984:	4601      	mov	r1, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0b5b      	lsrs	r3, r3, #13
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	080089f4 	.word	0x080089f4

080039a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039be:	4b9f      	ldr	r3, [pc, #636]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	f200 8130 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x288>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_RCC_GetSysClockFreq+0x30>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	08003a09 	.word	0x08003a09
 80039d8:	08003c2d 	.word	0x08003c2d
 80039dc:	08003c2d 	.word	0x08003c2d
 80039e0:	08003c2d 	.word	0x08003c2d
 80039e4:	08003a0f 	.word	0x08003a0f
 80039e8:	08003c2d 	.word	0x08003c2d
 80039ec:	08003c2d 	.word	0x08003c2d
 80039f0:	08003c2d 	.word	0x08003c2d
 80039f4:	08003a15 	.word	0x08003a15
 80039f8:	08003c2d 	.word	0x08003c2d
 80039fc:	08003c2d 	.word	0x08003c2d
 8003a00:	08003c2d 	.word	0x08003c2d
 8003a04:	08003b23 	.word	0x08003b23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b8d      	ldr	r3, [pc, #564]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003a0a:	613b      	str	r3, [r7, #16]
       break;
 8003a0c:	e111      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b8d      	ldr	r3, [pc, #564]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003a10:	613b      	str	r3, [r7, #16]
      break;
 8003a12:	e10e      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a14:	4b89      	ldr	r3, [pc, #548]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a1e:	4b87      	ldr	r3, [pc, #540]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d023      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b84      	ldr	r3, [pc, #528]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	ea03 0501 	and.w	r5, r3, r1
 8003a40:	ea04 0602 	and.w	r6, r4, r2
 8003a44:	4a7f      	ldr	r2, [pc, #508]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003a46:	fb02 f106 	mul.w	r1, r2, r6
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	fb02 f205 	mul.w	r2, r2, r5
 8003a50:	440a      	add	r2, r1
 8003a52:	497c      	ldr	r1, [pc, #496]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003a54:	fba5 0101 	umull	r0, r1, r5, r1
 8003a58:	1853      	adds	r3, r2, r1
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f04f 0400 	mov.w	r4, #0
 8003a62:	461a      	mov	r2, r3
 8003a64:	4623      	mov	r3, r4
 8003a66:	f7fd f8bb 	bl	8000be0 <__aeabi_uldivmod>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e049      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b72      	ldr	r3, [pc, #456]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	f04f 0400 	mov.w	r4, #0
 8003a7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	ea03 0501 	and.w	r5, r3, r1
 8003a88:	ea04 0602 	and.w	r6, r4, r2
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4632      	mov	r2, r6
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	0154      	lsls	r4, r2, #5
 8003a9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a9e:	014b      	lsls	r3, r1, #5
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	1b49      	subs	r1, r1, r5
 8003aa6:	eb62 0206 	sbc.w	r2, r2, r6
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	0194      	lsls	r4, r2, #6
 8003ab4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ab8:	018b      	lsls	r3, r1, #6
 8003aba:	1a5b      	subs	r3, r3, r1
 8003abc:	eb64 0402 	sbc.w	r4, r4, r2
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	00e2      	lsls	r2, r4, #3
 8003aca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ace:	00d9      	lsls	r1, r3, #3
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	195b      	adds	r3, r3, r5
 8003ad6:	eb44 0406 	adc.w	r4, r4, r6
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	02a2      	lsls	r2, r4, #10
 8003ae4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ae8:	0299      	lsls	r1, r3, #10
 8003aea:	460b      	mov	r3, r1
 8003aec:	4614      	mov	r4, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	4621      	mov	r1, r4
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	461a      	mov	r2, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	f7fd f870 	bl	8000be0 <__aeabi_uldivmod>
 8003b00:	4603      	mov	r3, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b06:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	3301      	adds	r3, #1
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	613b      	str	r3, [r7, #16]
      break;
 8003b20:	e087      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b22:	4b46      	ldr	r3, [pc, #280]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b2a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b2c:	4b43      	ldr	r3, [pc, #268]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d023      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b38:	4b40      	ldr	r3, [pc, #256]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	f04f 0400 	mov.w	r4, #0
 8003b42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	ea03 0501 	and.w	r5, r3, r1
 8003b4e:	ea04 0602 	and.w	r6, r4, r2
 8003b52:	4a3c      	ldr	r2, [pc, #240]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003b54:	fb02 f106 	mul.w	r1, r2, r6
 8003b58:	2200      	movs	r2, #0
 8003b5a:	fb02 f205 	mul.w	r2, r2, r5
 8003b5e:	440a      	add	r2, r1
 8003b60:	4938      	ldr	r1, [pc, #224]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003b62:	fba5 0101 	umull	r0, r1, r5, r1
 8003b66:	1853      	adds	r3, r2, r1
 8003b68:	4619      	mov	r1, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	461a      	mov	r2, r3
 8003b72:	4623      	mov	r3, r4
 8003b74:	f7fd f834 	bl	8000be0 <__aeabi_uldivmod>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e049      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b80:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	f04f 0400 	mov.w	r4, #0
 8003b8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	ea03 0501 	and.w	r5, r3, r1
 8003b96:	ea04 0602 	and.w	r6, r4, r2
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4632      	mov	r2, r6
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	f04f 0400 	mov.w	r4, #0
 8003ba6:	0154      	lsls	r4, r2, #5
 8003ba8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bac:	014b      	lsls	r3, r1, #5
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	1b49      	subs	r1, r1, r5
 8003bb4:	eb62 0206 	sbc.w	r2, r2, r6
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	f04f 0400 	mov.w	r4, #0
 8003bc0:	0194      	lsls	r4, r2, #6
 8003bc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bc6:	018b      	lsls	r3, r1, #6
 8003bc8:	1a5b      	subs	r3, r3, r1
 8003bca:	eb64 0402 	sbc.w	r4, r4, r2
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	00e2      	lsls	r2, r4, #3
 8003bd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bdc:	00d9      	lsls	r1, r3, #3
 8003bde:	460b      	mov	r3, r1
 8003be0:	4614      	mov	r4, r2
 8003be2:	195b      	adds	r3, r3, r5
 8003be4:	eb44 0406 	adc.w	r4, r4, r6
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	02a2      	lsls	r2, r4, #10
 8003bf2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bf6:	0299      	lsls	r1, r3, #10
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4614      	mov	r4, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	4621      	mov	r1, r4
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f04f 0400 	mov.w	r4, #0
 8003c06:	461a      	mov	r2, r3
 8003c08:	4623      	mov	r3, r4
 8003c0a:	f7fc ffe9 	bl	8000be0 <__aeabi_uldivmod>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	460c      	mov	r4, r1
 8003c12:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x298>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0f1b      	lsrs	r3, r3, #28
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	613b      	str	r3, [r7, #16]
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003c2e:	613b      	str	r3, [r7, #16]
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	693b      	ldr	r3, [r7, #16]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	017d7840 	.word	0x017d7840

08003c48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e28d      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8083 	beq.w	8003d6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c68:	4b94      	ldr	r3, [pc, #592]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d019      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c74:	4b91      	ldr	r3, [pc, #580]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c80:	4b8e      	ldr	r3, [pc, #568]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c8c:	d00c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8e:	4b8b      	ldr	r3, [pc, #556]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d112      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9a:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	4b84      	ldr	r3, [pc, #528]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05b      	beq.n	8003d6c <HAL_RCC_OscConfig+0x124>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d157      	bne.n	8003d6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e25a      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc8:	d106      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x90>
 8003cca:	4b7c      	ldr	r3, [pc, #496]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7b      	ldr	r2, [pc, #492]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e01d      	b.n	8003d14 <HAL_RCC_OscConfig+0xcc>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0xb4>
 8003ce2:	4b76      	ldr	r3, [pc, #472]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a75      	ldr	r2, [pc, #468]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a72      	ldr	r2, [pc, #456]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xcc>
 8003cfc:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6e      	ldr	r2, [pc, #440]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b6c      	ldr	r3, [pc, #432]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6b      	ldr	r2, [pc, #428]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f9d0 	bl	80020c0 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe f9cc 	bl	80020c0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e21f      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xdc>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe f9bc 	bl	80020c0 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fe f9b8 	bl	80020c0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e20b      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x104>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d06f      	beq.n	8003e5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d7a:	4b50      	ldr	r3, [pc, #320]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d017      	beq.n	8003db6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d86:	4b4d      	ldr	r3, [pc, #308]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d105      	bne.n	8003d9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d92:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003daa:	4b44      	ldr	r3, [pc, #272]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x186>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1d3      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4937      	ldr	r1, [pc, #220]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e03a      	b.n	8003e5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x278>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fe f965 	bl	80020c0 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fe f961 	bl	80020c0 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e1b4      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4925      	ldr	r1, [pc, #148]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2e:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_RCC_OscConfig+0x278>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe f944 	bl	80020c0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7fe f940 	bl	80020c0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e193      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d036      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_RCC_OscConfig+0x27c>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fe f924 	bl	80020c0 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fe f920 	bl	80020c0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e173      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_OscConfig+0x274>)
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x234>
 8003e9a:	e01b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_RCC_OscConfig+0x27c>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f90d 	bl	80020c0 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	e00e      	b.n	8003ec8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fe f909 	bl	80020c0 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d907      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e15c      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470000 	.word	0x42470000
 8003ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	4b8a      	ldr	r3, [pc, #552]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ea      	bne.n	8003eaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8097 	beq.w	8004010 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee6:	4b83      	ldr	r3, [pc, #524]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	4b7f      	ldr	r3, [pc, #508]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a7e      	ldr	r2, [pc, #504]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b7c      	ldr	r3, [pc, #496]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b79      	ldr	r3, [pc, #484]	; (80040f8 <HAL_RCC_OscConfig+0x4b0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d118      	bne.n	8003f50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1e:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCC_OscConfig+0x4b0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a75      	ldr	r2, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x4b0>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2a:	f7fe f8c9 	bl	80020c0 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f32:	f7fe f8c5 	bl	80020c0 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e118      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	4b6c      	ldr	r3, [pc, #432]	; (80040f8 <HAL_RCC_OscConfig+0x4b0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x31e>
 8003f58:	4b66      	ldr	r3, [pc, #408]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a65      	ldr	r2, [pc, #404]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	e01c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x358>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x340>
 8003f6e:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4a60      	ldr	r2, [pc, #384]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7a:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a5d      	ldr	r2, [pc, #372]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x358>
 8003f88:	4b5a      	ldr	r3, [pc, #360]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4a59      	ldr	r2, [pc, #356]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	6713      	str	r3, [r2, #112]	; 0x70
 8003f94:	4b57      	ldr	r3, [pc, #348]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	4a56      	ldr	r2, [pc, #344]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003f9a:	f023 0304 	bic.w	r3, r3, #4
 8003f9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d015      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fe f88a 	bl	80020c0 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe f886 	bl	80020c0 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0d7      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ee      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x368>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fe f874 	bl	80020c0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fe f870 	bl	80020c0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0c1      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff2:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ee      	bne.n	8003fdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b3b      	ldr	r3, [pc, #236]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	4a3a      	ldr	r2, [pc, #232]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80ad 	beq.w	8004174 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b08      	cmp	r3, #8
 8004024:	d060      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d145      	bne.n	80040ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <HAL_RCC_OscConfig+0x4b4>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe f844 	bl	80020c0 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403c:	f7fe f840 	bl	80020c0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e093      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	491b      	ldr	r1, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x4b4>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fe f815 	bl	80020c0 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe f811 	bl	80020c0 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e064      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x452>
 80040b8:	e05c      	b.n	8004174 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_RCC_OscConfig+0x4b4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd fffe 	bl	80020c0 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd fffa 	bl	80020c0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e04d      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x480>
 80040e6:	e045      	b.n	8004174 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e040      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <HAL_RCC_OscConfig+0x538>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d030      	beq.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d129      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d122      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004138:	4293      	cmp	r3, r2
 800413a:	d119      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d10f      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e041      	b.n	800421a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fd fd96 	bl	8001cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f000 fba0 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e046      	b.n	80042ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_TIM_Base_Start+0xb4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d022      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d01d      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <HAL_TIM_Base_Start+0xb8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <HAL_TIM_Base_Start+0xbc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_TIM_Base_Start+0xc0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_TIM_Base_Start+0xc4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <HAL_TIM_Base_Start+0xc8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_TIM_Base_Start+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40001800 	.word	0x40001800

080042f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e04e      	b.n	80043aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a23      	ldr	r2, [pc, #140]	; (80043b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d01d      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <HAL_TIM_Base_Start_IT+0xc8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a19      	ldr	r2, [pc, #100]	; (80043cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0x80>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d111      	bne.n	8004398 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b06      	cmp	r3, #6
 8004384:	d010      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	e007      	b.n	80043a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	40010400 	.word	0x40010400
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40001800 	.word	0x40001800

080043d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e041      	b.n	800446a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f839 	bl	8004472 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 fa78 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d122      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d11b      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f06f 0202 	mvn.w	r2, #2
 80044b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f9fe 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 80044ce:	e005      	b.n	80044dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f9f0 	bl	80048b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa01 	bl	80048de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d122      	bne.n	8004536 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d11b      	bne.n	8004536 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0204 	mvn.w	r2, #4
 8004506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9d4 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 8004522:	e005      	b.n	8004530 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f9c6 	bl	80048b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9d7 	bl	80048de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d122      	bne.n	800458a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d11b      	bne.n	800458a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0208 	mvn.w	r2, #8
 800455a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2204      	movs	r2, #4
 8004560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f9aa 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 8004576:	e005      	b.n	8004584 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f99c 	bl	80048b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9ad 	bl	80048de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b10      	cmp	r3, #16
 8004596:	d122      	bne.n	80045de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d11b      	bne.n	80045de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f06f 0210 	mvn.w	r2, #16
 80045ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2208      	movs	r2, #8
 80045b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f980 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 80045ca:	e005      	b.n	80045d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f972 	bl	80048b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f983 	bl	80048de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10e      	bne.n	800460a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f06f 0201 	mvn.w	r2, #1
 8004602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fc ff53 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d10e      	bne.n	8004636 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d107      	bne.n	8004636 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800462e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fcd9 	bl	8004fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d10e      	bne.n	8004662 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d107      	bne.n	8004662 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f948 	bl	80048f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b20      	cmp	r3, #32
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0220 	mvn.w	r2, #32
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fca3 	bl	8004fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e046      	b.n	8004740 <HAL_TIM_OC_ConfigChannel+0xa8>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d839      	bhi.n	8004734 <HAL_TIM_OC_ConfigChannel+0x9c>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046fd 	.word	0x080046fd
 80046cc:	08004735 	.word	0x08004735
 80046d0:	08004735 	.word	0x08004735
 80046d4:	08004735 	.word	0x08004735
 80046d8:	0800470b 	.word	0x0800470b
 80046dc:	08004735 	.word	0x08004735
 80046e0:	08004735 	.word	0x08004735
 80046e4:	08004735 	.word	0x08004735
 80046e8:	08004719 	.word	0x08004719
 80046ec:	08004735 	.word	0x08004735
 80046f0:	08004735 	.word	0x08004735
 80046f4:	08004735 	.word	0x08004735
 80046f8:	08004727 	.word	0x08004727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f9a0 	bl	8004a48 <TIM_OC1_SetConfig>
      break;
 8004708:	e015      	b.n	8004736 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fa09 	bl	8004b28 <TIM_OC2_SetConfig>
      break;
 8004716:	e00e      	b.n	8004736 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fa78 	bl	8004c14 <TIM_OC3_SetConfig>
      break;
 8004724:	e007      	b.n	8004736 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fae5 	bl	8004cfc <TIM_OC4_SetConfig>
      break;
 8004732:	e000      	b.n	8004736 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIM_ConfigClockSource+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e0a6      	b.n	80048ae <HAL_TIM_ConfigClockSource+0x166>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800477e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004786:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d067      	beq.n	8004868 <HAL_TIM_ConfigClockSource+0x120>
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d80b      	bhi.n	80047b4 <HAL_TIM_ConfigClockSource+0x6c>
 800479c:	2b10      	cmp	r3, #16
 800479e:	d073      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0x140>
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d802      	bhi.n	80047aa <HAL_TIM_ConfigClockSource+0x62>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d06f      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047a8:	e078      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d06c      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0x140>
 80047ae:	2b30      	cmp	r3, #48	; 0x30
 80047b0:	d06a      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80047b2:	e073      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047b4:	2b70      	cmp	r3, #112	; 0x70
 80047b6:	d00d      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0x8c>
 80047b8:	2b70      	cmp	r3, #112	; 0x70
 80047ba:	d804      	bhi.n	80047c6 <HAL_TIM_ConfigClockSource+0x7e>
 80047bc:	2b50      	cmp	r3, #80	; 0x50
 80047be:	d033      	beq.n	8004828 <HAL_TIM_ConfigClockSource+0xe0>
 80047c0:	2b60      	cmp	r3, #96	; 0x60
 80047c2:	d041      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047c4:	e06a      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ca:	d066      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x152>
 80047cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d0:	d017      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047d2:	e063      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6899      	ldr	r1, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f000 fb5a 	bl	8004e9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	609a      	str	r2, [r3, #8]
      break;
 8004800:	e04c      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6899      	ldr	r1, [r3, #8]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f000 fb43 	bl	8004e9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004824:	609a      	str	r2, [r3, #8]
      break;
 8004826:	e039      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	461a      	mov	r2, r3
 8004836:	f000 fab7 	bl	8004da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2150      	movs	r1, #80	; 0x50
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fb10 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 8004846:	e029      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	461a      	mov	r2, r3
 8004856:	f000 fad6 	bl	8004e06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2160      	movs	r1, #96	; 0x60
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fb00 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 8004866:	e019      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	461a      	mov	r2, r3
 8004876:	f000 fa97 	bl	8004da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	4618      	mov	r0, r3
 8004882:	f000 faf0 	bl	8004e66 <TIM_ITRx_SetConfig>
      break;
 8004886:	e009      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f000 fae7 	bl	8004e66 <TIM_ITRx_SetConfig>
        break;
 8004898:	e000      	b.n	800489c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800489a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a40      	ldr	r2, [pc, #256]	; (8004a1c <TIM_Base_SetConfig+0x114>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d00f      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a3d      	ldr	r2, [pc, #244]	; (8004a20 <TIM_Base_SetConfig+0x118>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00b      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <TIM_Base_SetConfig+0x11c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d007      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a3b      	ldr	r2, [pc, #236]	; (8004a28 <TIM_Base_SetConfig+0x120>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3a      	ldr	r2, [pc, #232]	; (8004a2c <TIM_Base_SetConfig+0x124>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d108      	bne.n	800495a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2f      	ldr	r2, [pc, #188]	; (8004a1c <TIM_Base_SetConfig+0x114>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02b      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d027      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <TIM_Base_SetConfig+0x118>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d023      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <TIM_Base_SetConfig+0x11c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01f      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <TIM_Base_SetConfig+0x120>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01b      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <TIM_Base_SetConfig+0x124>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d017      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a28      	ldr	r2, [pc, #160]	; (8004a30 <TIM_Base_SetConfig+0x128>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a27      	ldr	r2, [pc, #156]	; (8004a34 <TIM_Base_SetConfig+0x12c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00f      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <TIM_Base_SetConfig+0x130>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a25      	ldr	r2, [pc, #148]	; (8004a3c <TIM_Base_SetConfig+0x134>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <TIM_Base_SetConfig+0x138>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <TIM_Base_SetConfig+0x13c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <TIM_Base_SetConfig+0x114>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_Base_SetConfig+0xf8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <TIM_Base_SetConfig+0x124>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d103      	bne.n	8004a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	615a      	str	r2, [r3, #20]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40000c00 	.word	0x40000c00
 8004a2c:	40010400 	.word	0x40010400
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40014400 	.word	0x40014400
 8004a38:	40014800 	.word	0x40014800
 8004a3c:	40001800 	.word	0x40001800
 8004a40:	40001c00 	.word	0x40001c00
 8004a44:	40002000 	.word	0x40002000

08004a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0201 	bic.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0302 	bic.w	r3, r3, #2
 8004a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a20      	ldr	r2, [pc, #128]	; (8004b20 <TIM_OC1_SetConfig+0xd8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_OC1_SetConfig+0x64>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <TIM_OC1_SetConfig+0xdc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d10c      	bne.n	8004ac6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f023 0308 	bic.w	r3, r3, #8
 8004ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <TIM_OC1_SetConfig+0xd8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d003      	beq.n	8004ad6 <TIM_OC1_SetConfig+0x8e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <TIM_OC1_SetConfig+0xdc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d111      	bne.n	8004afa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	621a      	str	r2, [r3, #32]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40010000 	.word	0x40010000
 8004b24:	40010400 	.word	0x40010400

08004b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0210 	bic.w	r2, r3, #16
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0320 	bic.w	r3, r3, #32
 8004b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <TIM_OC2_SetConfig+0xe4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_OC2_SetConfig+0x68>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <TIM_OC2_SetConfig+0xe8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10d      	bne.n	8004bac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004baa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <TIM_OC2_SetConfig+0xe4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC2_SetConfig+0x94>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <TIM_OC2_SetConfig+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d113      	bne.n	8004be4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40010400 	.word	0x40010400

08004c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0303 	bic.w	r3, r3, #3
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a21      	ldr	r2, [pc, #132]	; (8004cf4 <TIM_OC3_SetConfig+0xe0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d003      	beq.n	8004c7a <TIM_OC3_SetConfig+0x66>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <TIM_OC3_SetConfig+0xe4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10d      	bne.n	8004c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <TIM_OC3_SetConfig+0xe0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d003      	beq.n	8004ca6 <TIM_OC3_SetConfig+0x92>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <TIM_OC3_SetConfig+0xe4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d113      	bne.n	8004cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	621a      	str	r2, [r3, #32]
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40010400 	.word	0x40010400

08004cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	031b      	lsls	r3, r3, #12
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <TIM_OC4_SetConfig+0xa4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC4_SetConfig+0x68>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a11      	ldr	r2, [pc, #68]	; (8004da4 <TIM_OC4_SetConfig+0xa8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d109      	bne.n	8004d78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	019b      	lsls	r3, r3, #6
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40010400 	.word	0x40010400

08004da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 030a 	bic.w	r3, r3, #10
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b087      	sub	sp, #28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0210 	bic.w	r2, r3, #16
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f043 0307 	orr.w	r3, r3, #7
 8004e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	609a      	str	r2, [r3, #8]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e05a      	b.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d022      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d01d      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1d      	ldr	r2, [pc, #116]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d018      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d013      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a18      	ldr	r2, [pc, #96]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10c      	bne.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40010400 	.word	0x40010400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40001800 	.word	0x40001800

08004fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e03f      	b.n	800508e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fc fe96 	bl	8001d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2224      	movs	r2, #36	; 0x24
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800503e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fb3f 	bl	80056c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10d      	bne.n	80050ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_UART_IRQHandler+0x52>
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa57 	bl	8005596 <UART_Receive_IT>
      return;
 80050e8:	e17d      	b.n	80053e6 <HAL_UART_IRQHandler+0x34e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80b1 	beq.w	8005254 <HAL_UART_IRQHandler+0x1bc>
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <HAL_UART_IRQHandler+0x70>
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80a6 	beq.w	8005254 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_UART_IRQHandler+0x90>
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f043 0201 	orr.w	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_UART_IRQHandler+0xb0>
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	f043 0202 	orr.w	r2, r3, #2
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_UART_IRQHandler+0xd0>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f043 0204 	orr.w	r2, r3, #4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00f      	beq.n	8005192 <HAL_UART_IRQHandler+0xfa>
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_UART_IRQHandler+0xee>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f043 0208 	orr.w	r2, r3, #8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8120 	beq.w	80053dc <HAL_UART_IRQHandler+0x344>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_UART_IRQHandler+0x11e>
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f9f0 	bl	8005596 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <HAL_UART_IRQHandler+0x146>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d031      	beq.n	8005242 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f930 	bl	8005444 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d123      	bne.n	800523a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005200:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d013      	beq.n	8005232 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	4a77      	ldr	r2, [pc, #476]	; (80053ec <HAL_UART_IRQHandler+0x354>)
 8005210:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	4618      	mov	r0, r3
 8005218:	f7fd fe52 	bl	8002ec0 <HAL_DMA_Abort_IT>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800522c:	4610      	mov	r0, r2
 800522e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	e00e      	b.n	8005250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8f0 	bl	8005418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e00a      	b.n	8005250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8ec 	bl	8005418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e006      	b.n	8005250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8e8 	bl	8005418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800524e:	e0c5      	b.n	80053dc <HAL_UART_IRQHandler+0x344>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	bf00      	nop
    return;
 8005252:	e0c3      	b.n	80053dc <HAL_UART_IRQHandler+0x344>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	2b01      	cmp	r3, #1
 800525a:	f040 80a2 	bne.w	80053a2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 809c 	beq.w	80053a2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8096 	beq.w	80053a2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005296:	2b40      	cmp	r3, #64	; 0x40
 8005298:	d14f      	bne.n	800533a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80052a4:	8a3b      	ldrh	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 809a 	beq.w	80053e0 <HAL_UART_IRQHandler+0x348>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052b0:	8a3a      	ldrh	r2, [r7, #16]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	f080 8094 	bcs.w	80053e0 <HAL_UART_IRQHandler+0x348>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8a3a      	ldrh	r2, [r7, #16]
 80052bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c8:	d02b      	beq.n	8005322 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695a      	ldr	r2, [r3, #20]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0210 	bic.w	r2, r2, #16
 8005316:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	4618      	mov	r0, r3
 800531e:	f7fd fd5f 	bl	8002de0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800532a:	b29b      	uxth	r3, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f87a 	bl	800542c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005338:	e052      	b.n	80053e0 <HAL_UART_IRQHandler+0x348>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005342:	b29b      	uxth	r3, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d048      	beq.n	80053e4 <HAL_UART_IRQHandler+0x34c>
          &&(nb_rx_data > 0U) )
 8005352:	8a7b      	ldrh	r3, [r7, #18]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d045      	beq.n	80053e4 <HAL_UART_IRQHandler+0x34c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005366:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0210 	bic.w	r2, r2, #16
 8005394:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005396:	8a7b      	ldrh	r3, [r7, #18]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f846 	bl	800542c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053a0:	e020      	b.n	80053e4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_UART_IRQHandler+0x326>
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f885 	bl	80054c6 <UART_Transmit_IT>
    return;
 80053bc:	e013      	b.n	80053e6 <HAL_UART_IRQHandler+0x34e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00e      	beq.n	80053e6 <HAL_UART_IRQHandler+0x34e>
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <HAL_UART_IRQHandler+0x34e>
  {
    UART_EndTransmit_IT(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8c7 	bl	8005566 <UART_EndTransmit_IT>
    return;
 80053d8:	bf00      	nop
 80053da:	e004      	b.n	80053e6 <HAL_UART_IRQHandler+0x34e>
    return;
 80053dc:	bf00      	nop
 80053de:	e002      	b.n	80053e6 <HAL_UART_IRQHandler+0x34e>
      return;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <HAL_UART_IRQHandler+0x34e>
      return;
 80053e4:	bf00      	nop
  }
}
 80053e6:	3728      	adds	r7, #40	; 0x28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	0800549f 	.word	0x0800549f

080053f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800545a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005470:	2b01      	cmp	r3, #1
 8005472:	d107      	bne.n	8005484 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0210 	bic.w	r2, r2, #16
 8005482:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff ffad 	bl	8005418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b21      	cmp	r3, #33	; 0x21
 80054d8:	d13e      	bne.n	8005558 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e2:	d114      	bne.n	800550e <UART_Transmit_IT+0x48>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d110      	bne.n	800550e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005500:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	1c9a      	adds	r2, r3, #2
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	621a      	str	r2, [r3, #32]
 800550c:	e008      	b.n	8005520 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6211      	str	r1, [r2, #32]
 8005518:	781a      	ldrb	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29b      	uxth	r3, r3
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4619      	mov	r1, r3
 800552e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10f      	bne.n	8005554 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005542:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005552:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff ff32 	bl	80053f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b22      	cmp	r3, #34	; 0x22
 80055a8:	f040 8087 	bne.w	80056ba <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b4:	d117      	bne.n	80055e6 <UART_Receive_IT+0x50>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d113      	bne.n	80055e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	1c9a      	adds	r2, r3, #2
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28
 80055e4:	e026      	b.n	8005634 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f8:	d007      	beq.n	800560a <UART_Receive_IT+0x74>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <UART_Receive_IT+0x82>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	e008      	b.n	800562a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29b      	uxth	r3, r3
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4619      	mov	r1, r3
 8005642:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005644:	2b00      	cmp	r3, #0
 8005646:	d136      	bne.n	80056b6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0220 	bic.w	r2, r2, #32
 8005656:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005666:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0201 	bic.w	r2, r2, #1
 8005676:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	2b01      	cmp	r3, #1
 8005686:	d10e      	bne.n	80056a6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0210 	bic.w	r2, r2, #16
 8005696:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800569c:	4619      	mov	r1, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff fec4 	bl	800542c <HAL_UARTEx_RxEventCallback>
 80056a4:	e002      	b.n	80056ac <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff feac 	bl	8005404 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e002      	b.n	80056bc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e000      	b.n	80056bc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
  }
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005706:	f023 030c 	bic.w	r3, r3, #12
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	430b      	orrs	r3, r1
 8005712:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4ad0      	ldr	r2, [pc, #832]	; (8005a70 <UART_SetConfig+0x3ac>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <UART_SetConfig+0x7a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4ace      	ldr	r2, [pc, #824]	; (8005a74 <UART_SetConfig+0x3b0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d103      	bne.n	8005746 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800573e:	f7fe f91d 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	e002      	b.n	800574c <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005746:	f7fe f905 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 800574a:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005754:	f040 80ba 	bne.w	80058cc <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	461d      	mov	r5, r3
 800575c:	f04f 0600 	mov.w	r6, #0
 8005760:	46a8      	mov	r8, r5
 8005762:	46b1      	mov	r9, r6
 8005764:	eb18 0308 	adds.w	r3, r8, r8
 8005768:	eb49 0409 	adc.w	r4, r9, r9
 800576c:	4698      	mov	r8, r3
 800576e:	46a1      	mov	r9, r4
 8005770:	eb18 0805 	adds.w	r8, r8, r5
 8005774:	eb49 0906 	adc.w	r9, r9, r6
 8005778:	f04f 0100 	mov.w	r1, #0
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005784:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005788:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800578c:	4688      	mov	r8, r1
 800578e:	4691      	mov	r9, r2
 8005790:	eb18 0005 	adds.w	r0, r8, r5
 8005794:	eb49 0106 	adc.w	r1, r9, r6
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	461d      	mov	r5, r3
 800579e:	f04f 0600 	mov.w	r6, #0
 80057a2:	196b      	adds	r3, r5, r5
 80057a4:	eb46 0406 	adc.w	r4, r6, r6
 80057a8:	461a      	mov	r2, r3
 80057aa:	4623      	mov	r3, r4
 80057ac:	f7fb fa18 	bl	8000be0 <__aeabi_uldivmod>
 80057b0:	4603      	mov	r3, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	461a      	mov	r2, r3
 80057b6:	4bb0      	ldr	r3, [pc, #704]	; (8005a78 <UART_SetConfig+0x3b4>)
 80057b8:	fba3 2302 	umull	r2, r3, r3, r2
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	461d      	mov	r5, r3
 80057c6:	f04f 0600 	mov.w	r6, #0
 80057ca:	46a9      	mov	r9, r5
 80057cc:	46b2      	mov	sl, r6
 80057ce:	eb19 0309 	adds.w	r3, r9, r9
 80057d2:	eb4a 040a 	adc.w	r4, sl, sl
 80057d6:	4699      	mov	r9, r3
 80057d8:	46a2      	mov	sl, r4
 80057da:	eb19 0905 	adds.w	r9, r9, r5
 80057de:	eb4a 0a06 	adc.w	sl, sl, r6
 80057e2:	f04f 0100 	mov.w	r1, #0
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057f6:	4689      	mov	r9, r1
 80057f8:	4692      	mov	sl, r2
 80057fa:	eb19 0005 	adds.w	r0, r9, r5
 80057fe:	eb4a 0106 	adc.w	r1, sl, r6
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	461d      	mov	r5, r3
 8005808:	f04f 0600 	mov.w	r6, #0
 800580c:	196b      	adds	r3, r5, r5
 800580e:	eb46 0406 	adc.w	r4, r6, r6
 8005812:	461a      	mov	r2, r3
 8005814:	4623      	mov	r3, r4
 8005816:	f7fb f9e3 	bl	8000be0 <__aeabi_uldivmod>
 800581a:	4603      	mov	r3, r0
 800581c:	460c      	mov	r4, r1
 800581e:	461a      	mov	r2, r3
 8005820:	4b95      	ldr	r3, [pc, #596]	; (8005a78 <UART_SetConfig+0x3b4>)
 8005822:	fba3 1302 	umull	r1, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	2164      	movs	r1, #100	; 0x64
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	3332      	adds	r3, #50	; 0x32
 8005834:	4a90      	ldr	r2, [pc, #576]	; (8005a78 <UART_SetConfig+0x3b4>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005842:	4498      	add	r8, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	461d      	mov	r5, r3
 8005848:	f04f 0600 	mov.w	r6, #0
 800584c:	46a9      	mov	r9, r5
 800584e:	46b2      	mov	sl, r6
 8005850:	eb19 0309 	adds.w	r3, r9, r9
 8005854:	eb4a 040a 	adc.w	r4, sl, sl
 8005858:	4699      	mov	r9, r3
 800585a:	46a2      	mov	sl, r4
 800585c:	eb19 0905 	adds.w	r9, r9, r5
 8005860:	eb4a 0a06 	adc.w	sl, sl, r6
 8005864:	f04f 0100 	mov.w	r1, #0
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005870:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005874:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005878:	4689      	mov	r9, r1
 800587a:	4692      	mov	sl, r2
 800587c:	eb19 0005 	adds.w	r0, r9, r5
 8005880:	eb4a 0106 	adc.w	r1, sl, r6
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	461d      	mov	r5, r3
 800588a:	f04f 0600 	mov.w	r6, #0
 800588e:	196b      	adds	r3, r5, r5
 8005890:	eb46 0406 	adc.w	r4, r6, r6
 8005894:	461a      	mov	r2, r3
 8005896:	4623      	mov	r3, r4
 8005898:	f7fb f9a2 	bl	8000be0 <__aeabi_uldivmod>
 800589c:	4603      	mov	r3, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b75      	ldr	r3, [pc, #468]	; (8005a78 <UART_SetConfig+0x3b4>)
 80058a4:	fba3 1302 	umull	r1, r3, r3, r2
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	2164      	movs	r1, #100	; 0x64
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	3332      	adds	r3, #50	; 0x32
 80058b6:	4a70      	ldr	r2, [pc, #448]	; (8005a78 <UART_SetConfig+0x3b4>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	f003 0207 	and.w	r2, r3, #7
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4442      	add	r2, r8
 80058c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058ca:	e0cc      	b.n	8005a66 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	469a      	mov	sl, r3
 80058d0:	f04f 0b00 	mov.w	fp, #0
 80058d4:	46d0      	mov	r8, sl
 80058d6:	46d9      	mov	r9, fp
 80058d8:	eb18 0308 	adds.w	r3, r8, r8
 80058dc:	eb49 0409 	adc.w	r4, r9, r9
 80058e0:	4698      	mov	r8, r3
 80058e2:	46a1      	mov	r9, r4
 80058e4:	eb18 080a 	adds.w	r8, r8, sl
 80058e8:	eb49 090b 	adc.w	r9, r9, fp
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005900:	4688      	mov	r8, r1
 8005902:	4691      	mov	r9, r2
 8005904:	eb1a 0508 	adds.w	r5, sl, r8
 8005908:	eb4b 0609 	adc.w	r6, fp, r9
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4619      	mov	r1, r3
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	f04f 0400 	mov.w	r4, #0
 800591e:	0094      	lsls	r4, r2, #2
 8005920:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005924:	008b      	lsls	r3, r1, #2
 8005926:	461a      	mov	r2, r3
 8005928:	4623      	mov	r3, r4
 800592a:	4628      	mov	r0, r5
 800592c:	4631      	mov	r1, r6
 800592e:	f7fb f957 	bl	8000be0 <__aeabi_uldivmod>
 8005932:	4603      	mov	r3, r0
 8005934:	460c      	mov	r4, r1
 8005936:	461a      	mov	r2, r3
 8005938:	4b4f      	ldr	r3, [pc, #316]	; (8005a78 <UART_SetConfig+0x3b4>)
 800593a:	fba3 2302 	umull	r2, r3, r3, r2
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	469b      	mov	fp, r3
 8005948:	f04f 0c00 	mov.w	ip, #0
 800594c:	46d9      	mov	r9, fp
 800594e:	46e2      	mov	sl, ip
 8005950:	eb19 0309 	adds.w	r3, r9, r9
 8005954:	eb4a 040a 	adc.w	r4, sl, sl
 8005958:	4699      	mov	r9, r3
 800595a:	46a2      	mov	sl, r4
 800595c:	eb19 090b 	adds.w	r9, r9, fp
 8005960:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005970:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005978:	4689      	mov	r9, r1
 800597a:	4692      	mov	sl, r2
 800597c:	eb1b 0509 	adds.w	r5, fp, r9
 8005980:	eb4c 060a 	adc.w	r6, ip, sl
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4619      	mov	r1, r3
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	f04f 0400 	mov.w	r4, #0
 8005996:	0094      	lsls	r4, r2, #2
 8005998:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800599c:	008b      	lsls	r3, r1, #2
 800599e:	461a      	mov	r2, r3
 80059a0:	4623      	mov	r3, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	4631      	mov	r1, r6
 80059a6:	f7fb f91b 	bl	8000be0 <__aeabi_uldivmod>
 80059aa:	4603      	mov	r3, r0
 80059ac:	460c      	mov	r4, r1
 80059ae:	461a      	mov	r2, r3
 80059b0:	4b31      	ldr	r3, [pc, #196]	; (8005a78 <UART_SetConfig+0x3b4>)
 80059b2:	fba3 1302 	umull	r1, r3, r3, r2
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	2164      	movs	r1, #100	; 0x64
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	3332      	adds	r3, #50	; 0x32
 80059c4:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <UART_SetConfig+0x3b4>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d0:	4498      	add	r8, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	469b      	mov	fp, r3
 80059d6:	f04f 0c00 	mov.w	ip, #0
 80059da:	46d9      	mov	r9, fp
 80059dc:	46e2      	mov	sl, ip
 80059de:	eb19 0309 	adds.w	r3, r9, r9
 80059e2:	eb4a 040a 	adc.w	r4, sl, sl
 80059e6:	4699      	mov	r9, r3
 80059e8:	46a2      	mov	sl, r4
 80059ea:	eb19 090b 	adds.w	r9, r9, fp
 80059ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a06:	4689      	mov	r9, r1
 8005a08:	4692      	mov	sl, r2
 8005a0a:	eb1b 0509 	adds.w	r5, fp, r9
 8005a0e:	eb4c 060a 	adc.w	r6, ip, sl
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4619      	mov	r1, r3
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	f04f 0400 	mov.w	r4, #0
 8005a24:	0094      	lsls	r4, r2, #2
 8005a26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a2a:	008b      	lsls	r3, r1, #2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4623      	mov	r3, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	4631      	mov	r1, r6
 8005a34:	f7fb f8d4 	bl	8000be0 <__aeabi_uldivmod>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <UART_SetConfig+0x3b4>)
 8005a40:	fba3 1302 	umull	r1, r3, r3, r2
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	2164      	movs	r1, #100	; 0x64
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	3332      	adds	r3, #50	; 0x32
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <UART_SetConfig+0x3b4>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	f003 020f 	and.w	r2, r3, #15
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4442      	add	r2, r8
 8005a64:	609a      	str	r2, [r3, #8]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a70:	40011000 	.word	0x40011000
 8005a74:	40011400 	.word	0x40011400
 8005a78:	51eb851f 	.word	0x51eb851f
 8005a7c:	00000000 	.word	0x00000000

08005a80 <abc_to_alpha>:
// this file contains all the functions of PLL.
#include <math.h>

float abc_to_alpha(float a, float b, float c)
{
 8005a80:	b5b0      	push	{r4, r5, r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a8a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a8e:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;
    // alpha = (float)2 * (float)a / ((float) 3); // - 0.3333333 * b - 0.3333333 * c;
    alpha =  0.66666667 * a - 0.3333333 * b - 0.3333333 * c;
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7fa fd24 	bl	80004e0 <__aeabi_f2d>
 8005a98:	a31d      	add	r3, pc, #116	; (adr r3, 8005b10 <abc_to_alpha+0x90>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7fa fd77 	bl	8000590 <__aeabi_dmul>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	4625      	mov	r5, r4
 8005aa8:	461c      	mov	r4, r3
 8005aaa:	68b8      	ldr	r0, [r7, #8]
 8005aac:	f7fa fd18 	bl	80004e0 <__aeabi_f2d>
 8005ab0:	a319      	add	r3, pc, #100	; (adr r3, 8005b18 <abc_to_alpha+0x98>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa fd6b 	bl	8000590 <__aeabi_dmul>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4620      	mov	r0, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	f7fa fbad 	bl	8000220 <__aeabi_dsub>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	460c      	mov	r4, r1
 8005aca:	4625      	mov	r5, r4
 8005acc:	461c      	mov	r4, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fa fd06 	bl	80004e0 <__aeabi_f2d>
 8005ad4:	a310      	add	r3, pc, #64	; (adr r3, 8005b18 <abc_to_alpha+0x98>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f7fa fd59 	bl	8000590 <__aeabi_dmul>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	f7fa fb9b 	bl	8000220 <__aeabi_dsub>
 8005aea:	4603      	mov	r3, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	4618      	mov	r0, r3
 8005af0:	4621      	mov	r1, r4
 8005af2:	f7fb f825 	bl	8000b40 <__aeabi_d2f>
 8005af6:	4603      	mov	r3, r0
 8005af8:	617b      	str	r3, [r7, #20]
    // alpha = 2.0/3.0 * a - 1.0/3.0 * b - 1.0/3.0 * c;

    return alpha;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	ee07 3a90 	vmov	s15, r3
    // return a;
}
 8005b00:	eeb0 0a67 	vmov.f32	s0, s15
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bdb0      	pop	{r4, r5, r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w
 8005b10:	571f7693 	.word	0x571f7693
 8005b14:	3fe55555 	.word	0x3fe55555
 8005b18:	318abc87 	.word	0x318abc87
 8005b1c:	3fd55555 	.word	0x3fd55555

08005b20 <abc_to_beta>:

float abc_to_beta(float a, float b, float c)
{
 8005b20:	b5b0      	push	{r4, r5, r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	ed87 0a03 	vstr	s0, [r7, #12]
 8005b2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005b2e:	ed87 1a01 	vstr	s2, [r7, #4]
    float beta;


    // beta = 0.5773503*b - 0.5773503*c;
    beta = 2.0/3.0*((sqrt(3.0)/2.0)*b - (sqrt(3.0)/2.0)*c);
 8005b32:	68b8      	ldr	r0, [r7, #8]
 8005b34:	f7fa fcd4 	bl	80004e0 <__aeabi_f2d>
 8005b38:	a317      	add	r3, pc, #92	; (adr r3, 8005b98 <abc_to_beta+0x78>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fd27 	bl	8000590 <__aeabi_dmul>
 8005b42:	4603      	mov	r3, r0
 8005b44:	460c      	mov	r4, r1
 8005b46:	4625      	mov	r5, r4
 8005b48:	461c      	mov	r4, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fa fcc8 	bl	80004e0 <__aeabi_f2d>
 8005b50:	a311      	add	r3, pc, #68	; (adr r3, 8005b98 <abc_to_beta+0x78>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fd1b 	bl	8000590 <__aeabi_dmul>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4620      	mov	r0, r4
 8005b60:	4629      	mov	r1, r5
 8005b62:	f7fa fb5d 	bl	8000220 <__aeabi_dsub>
 8005b66:	4603      	mov	r3, r0
 8005b68:	460c      	mov	r4, r1
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	a30c      	add	r3, pc, #48	; (adr r3, 8005ba0 <abc_to_beta+0x80>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f7fa fd0c 	bl	8000590 <__aeabi_dmul>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	4621      	mov	r1, r4
 8005b80:	f7fa ffde 	bl	8000b40 <__aeabi_d2f>
 8005b84:	4603      	mov	r3, r0
 8005b86:	617b      	str	r3, [r7, #20]

    return beta;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	ee07 3a90 	vmov	s15, r3
}
 8005b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bdb0      	pop	{r4, r5, r7, pc}
 8005b98:	e8584caa 	.word	0xe8584caa
 8005b9c:	3febb67a 	.word	0x3febb67a
 8005ba0:	55555555 	.word	0x55555555
 8005ba4:	3fe55555 	.word	0x3fe55555

08005ba8 <alphabeta_to_d>:

float alphabeta_to_d(float alpha, float beta, float angle)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	ed2d 8b02 	vpush	{d8}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	ed87 0a03 	vstr	s0, [r7, #12]
 8005bb6:	edc7 0a02 	vstr	s1, [r7, #8]
 8005bba:	ed87 1a01 	vstr	s2, [r7, #4]
    float d;


    d = cosf(angle)*alpha + sinf(angle)*beta;
 8005bbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8005bc2:	f002 f863 	bl	8007c8c <cosf>
 8005bc6:	eeb0 7a40 	vmov.f32	s14, s0
 8005bca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bce:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005bd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005bd6:	f002 f899 	bl	8007d0c <sinf>
 8005bda:	eeb0 7a40 	vmov.f32	s14, s0
 8005bde:	edd7 7a02 	vldr	s15, [r7, #8]
 8005be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005bea:	edc7 7a05 	vstr	s15, [r7, #20]

    return d;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	ee07 3a90 	vmov	s15, r3
}
 8005bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	ecbd 8b02 	vpop	{d8}
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <alphabeta_to_q>:

float alphabeta_to_q(float alpha, float beta, float angle)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	ed2d 8b02 	vpush	{d8}
 8005c08:	b086      	sub	sp, #24
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005c10:	edc7 0a02 	vstr	s1, [r7, #8]
 8005c14:	ed87 1a01 	vstr	s2, [r7, #4]
    float q;


    q = -sinf(angle)*alpha + cosf(angle)*beta;
 8005c18:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c1c:	f002 f876 	bl	8007d0c <sinf>
 8005c20:	eef0 7a40 	vmov.f32	s15, s0
 8005c24:	eeb1 7a67 	vneg.f32	s14, s15
 8005c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c2c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005c30:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c34:	f002 f82a 	bl	8007c8c <cosf>
 8005c38:	eeb0 7a40 	vmov.f32	s14, s0
 8005c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005c48:	edc7 7a05 	vstr	s15, [r7, #20]

    return q;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	ee07 3a90 	vmov	s15, r3
}
 8005c52:	eeb0 0a67 	vmov.f32	s0, s15
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	ecbd 8b02 	vpop	{d8}
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <dq_to_alpha>:

float dq_to_alpha(float d, float q, float angle)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	ed2d 8b02 	vpush	{d8}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005c6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005c72:	ed87 1a01 	vstr	s2, [r7, #4]
    float alpha;

    alpha = cosf(angle)*d - sinf(angle)*q;
 8005c76:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c7a:	f002 f807 	bl	8007c8c <cosf>
 8005c7e:	eeb0 7a40 	vmov.f32	s14, s0
 8005c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c86:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005c8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c8e:	f002 f83d 	bl	8007d0c <sinf>
 8005c92:	eeb0 7a40 	vmov.f32	s14, s0
 8005c96:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005ca2:	edc7 7a05 	vstr	s15, [r7, #20]

    return alpha;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	ee07 3a90 	vmov	s15, r3
}
 8005cac:	eeb0 0a67 	vmov.f32	s0, s15
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	ecbd 8b02 	vpop	{d8}
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <dq_to_beta>:

float dq_to_beta(float d, float q, float angle)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	ed2d 8b02 	vpush	{d8}
 8005cc0:	b086      	sub	sp, #24
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	ed87 0a03 	vstr	s0, [r7, #12]
 8005cc8:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ccc:	ed87 1a01 	vstr	s2, [r7, #4]
    float beta;


    beta = sinf(angle)*d + cosf(angle)*q;
 8005cd0:	ed97 0a01 	vldr	s0, [r7, #4]
 8005cd4:	f002 f81a 	bl	8007d0c <sinf>
 8005cd8:	eeb0 7a40 	vmov.f32	s14, s0
 8005cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ce0:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005ce4:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ce8:	f001 ffd0 	bl	8007c8c <cosf>
 8005cec:	eeb0 7a40 	vmov.f32	s14, s0
 8005cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005cfc:	edc7 7a05 	vstr	s15, [r7, #20]

    return beta;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	ee07 3a90 	vmov	s15, r3
}
 8005d06:	eeb0 0a67 	vmov.f32	s0, s15
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	ecbd 8b02 	vpop	{d8}
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <cos_grid>:

float cos_grid(float alpha, float beta)
{
 8005d14:	b5b0      	push	{r4, r5, r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d1e:	edc7 0a00 	vstr	s1, [r7]
    float cosGrid;

    cosGrid = alpha/ (sqrt(alpha*alpha + beta*beta));
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fa fbdc 	bl	80004e0 <__aeabi_f2d>
 8005d28:	4604      	mov	r4, r0
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d30:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d38:	edd7 6a00 	vldr	s13, [r7]
 8005d3c:	edd7 7a00 	vldr	s15, [r7]
 8005d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d48:	ee17 0a90 	vmov	r0, s15
 8005d4c:	f7fa fbc8 	bl	80004e0 <__aeabi_f2d>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	ec43 2b10 	vmov	d0, r2, r3
 8005d58:	f002 f81a 	bl	8007d90 <sqrt>
 8005d5c:	ec53 2b10 	vmov	r2, r3, d0
 8005d60:	4620      	mov	r0, r4
 8005d62:	4629      	mov	r1, r5
 8005d64:	f7fa fd3e 	bl	80007e4 <__aeabi_ddiv>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	4621      	mov	r1, r4
 8005d70:	f7fa fee6 	bl	8000b40 <__aeabi_d2f>
 8005d74:	4603      	mov	r3, r0
 8005d76:	60fb      	str	r3, [r7, #12]
    

    return cosGrid;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	ee07 3a90 	vmov	s15, r3
}
 8005d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bdb0      	pop	{r4, r5, r7, pc}

08005d88 <sin_grid>:

float sin_grid(float alpha, float beta)
{
 8005d88:	b5b0      	push	{r4, r5, r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d92:	edc7 0a00 	vstr	s1, [r7]
    float sinGrid;


    sinGrid = beta/ (sqrt(alpha*alpha + beta*beta));
 8005d96:	6838      	ldr	r0, [r7, #0]
 8005d98:	f7fa fba2 	bl	80004e0 <__aeabi_f2d>
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	460d      	mov	r5, r1
 8005da0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dac:	edd7 6a00 	vldr	s13, [r7]
 8005db0:	edd7 7a00 	vldr	s15, [r7]
 8005db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dbc:	ee17 0a90 	vmov	r0, s15
 8005dc0:	f7fa fb8e 	bl	80004e0 <__aeabi_f2d>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	ec43 2b10 	vmov	d0, r2, r3
 8005dcc:	f001 ffe0 	bl	8007d90 <sqrt>
 8005dd0:	ec53 2b10 	vmov	r2, r3, d0
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f7fa fd04 	bl	80007e4 <__aeabi_ddiv>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	4618      	mov	r0, r3
 8005de2:	4621      	mov	r1, r4
 8005de4:	f7fa feac 	bl	8000b40 <__aeabi_d2f>
 8005de8:	4603      	mov	r3, r0
 8005dea:	60fb      	str	r3, [r7, #12]

    return sinGrid;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	ee07 3a90 	vmov	s15, r3
}
 8005df2:	eeb0 0a67 	vmov.f32	s0, s15
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bdb0      	pop	{r4, r5, r7, pc}

08005dfc <pi_regulator>:



float pi_regulator(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
 8005dfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e00:	b08a      	sub	sp, #40	; 0x28
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	ed87 0a05 	vstr	s0, [r7, #20]
 8005e08:	edc7 0a04 	vstr	s1, [r7, #16]
 8005e0c:	ed87 1a03 	vstr	s2, [r7, #12]
 8005e10:	edc7 1a02 	vstr	s3, [r7, #8]
 8005e14:	ed87 2a01 	vstr	s4, [r7, #4]
 8005e18:	edc7 2a00 	vstr	s5, [r7]
    float anglePll, integral, omega;

    static float phaseError_old, integral_old, angle_old, omega_old;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7fa fb5f 	bl	80004e0 <__aeabi_f2d>
 8005e22:	4604      	mov	r4, r0
 8005e24:	460d      	mov	r5, r1
 8005e26:	6978      	ldr	r0, [r7, #20]
 8005e28:	f7fa fb5a 	bl	80004e0 <__aeabi_f2d>
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	4b52      	ldr	r3, [pc, #328]	; (8005f7c <pi_regulator+0x180>)
 8005e32:	f7fa fbad 	bl	8000590 <__aeabi_dmul>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4690      	mov	r8, r2
 8005e3c:	4699      	mov	r9, r3
 8005e3e:	4b50      	ldr	r3, [pc, #320]	; (8005f80 <pi_regulator+0x184>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fa fb4c 	bl	80004e0 <__aeabi_f2d>
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <pi_regulator+0x180>)
 8005e4e:	f7fa fb9f 	bl	8000590 <__aeabi_dmul>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4640      	mov	r0, r8
 8005e58:	4649      	mov	r1, r9
 8005e5a:	f7fa f9e3 	bl	8000224 <__adddf3>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	f7fa fb93 	bl	8000590 <__aeabi_dmul>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4625      	mov	r5, r4
 8005e70:	461c      	mov	r4, r3
 8005e72:	6838      	ldr	r0, [r7, #0]
 8005e74:	f7fa fb34 	bl	80004e0 <__aeabi_f2d>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fb86 	bl	8000590 <__aeabi_dmul>
 8005e84:	4603      	mov	r3, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	4625      	mov	r5, r4
 8005e8a:	461c      	mov	r4, r3
 8005e8c:	4b3d      	ldr	r3, [pc, #244]	; (8005f84 <pi_regulator+0x188>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fa fb25 	bl	80004e0 <__aeabi_f2d>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7fa f9c1 	bl	8000224 <__adddf3>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	f7fa fe49 	bl	8000b40 <__aeabi_d2f>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
    omega = phaseError*kp + integral + feedForward; 
 8005eb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8005eb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ebe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ec6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ece:	edc7 7a08 	vstr	s15, [r7, #32]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 8005ed2:	6a38      	ldr	r0, [r7, #32]
 8005ed4:	f7fa fb04 	bl	80004e0 <__aeabi_f2d>
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <pi_regulator+0x180>)
 8005ede:	f7fa fb57 	bl	8000590 <__aeabi_dmul>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	4625      	mov	r5, r4
 8005ee8:	461c      	mov	r4, r3
 8005eea:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <pi_regulator+0x18c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa faf6 	bl	80004e0 <__aeabi_f2d>
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <pi_regulator+0x180>)
 8005efa:	f7fa fb49 	bl	8000590 <__aeabi_dmul>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa f98d 	bl	8000224 <__adddf3>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	4625      	mov	r5, r4
 8005f10:	461c      	mov	r4, r3
 8005f12:	6838      	ldr	r0, [r7, #0]
 8005f14:	f7fa fae4 	bl	80004e0 <__aeabi_f2d>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa fb36 	bl	8000590 <__aeabi_dmul>
 8005f24:	4603      	mov	r3, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	4625      	mov	r5, r4
 8005f2a:	461c      	mov	r4, r3
 8005f2c:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <pi_regulator+0x190>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fa fad5 	bl	80004e0 <__aeabi_f2d>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f7fa f971 	bl	8000224 <__adddf3>
 8005f42:	4603      	mov	r3, r0
 8005f44:	460c      	mov	r4, r1
 8005f46:	4618      	mov	r0, r3
 8005f48:	4621      	mov	r1, r4
 8005f4a:	f7fa fdf9 	bl	8000b40 <__aeabi_d2f>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	61fb      	str	r3, [r7, #28]
    // anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;

    phaseError_old = phaseError;
 8005f52:	4a0b      	ldr	r2, [pc, #44]	; (8005f80 <pi_regulator+0x184>)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 8005f58:	4a0a      	ldr	r2, [pc, #40]	; (8005f84 <pi_regulator+0x188>)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 8005f5e:	4a0b      	ldr	r2, [pc, #44]	; (8005f8c <pi_regulator+0x190>)
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 8005f64:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <pi_regulator+0x18c>)
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	6013      	str	r3, [r2, #0]
    

    return anglePll;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	ee07 3a90 	vmov	s15, r3
}
 8005f70:	eeb0 0a67 	vmov.f32	s0, s15
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f7c:	3fe00000 	.word	0x3fe00000
 8005f80:	20000210 	.word	0x20000210
 8005f84:	20000214 	.word	0x20000214
 8005f88:	20000218 	.word	0x20000218
 8005f8c:	2000021c 	.word	0x2000021c

08005f90 <pi_regulator_comp>:

float pi_regulator_comp(float phaseError, float feedForward, float ki, float kp, float kPhi, float Ts)
{
 8005f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f94:	b08a      	sub	sp, #40	; 0x28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	ed87 0a05 	vstr	s0, [r7, #20]
 8005f9c:	edc7 0a04 	vstr	s1, [r7, #16]
 8005fa0:	ed87 1a03 	vstr	s2, [r7, #12]
 8005fa4:	edc7 1a02 	vstr	s3, [r7, #8]
 8005fa8:	ed87 2a01 	vstr	s4, [r7, #4]
 8005fac:	edc7 2a00 	vstr	s5, [r7]
    float anglePll, integral, omega, anglePllComp;
    static float phaseError_old, integral_old, angle_old, omega_old;

    integral = ki*(phaseError*0.5 + phaseError_old*0.5)*Ts + integral_old;
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f7fa fa95 	bl	80004e0 <__aeabi_f2d>
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	460d      	mov	r5, r1
 8005fba:	6978      	ldr	r0, [r7, #20]
 8005fbc:	f7fa fa90 	bl	80004e0 <__aeabi_f2d>
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	4b5e      	ldr	r3, [pc, #376]	; (8006140 <pi_regulator_comp+0x1b0>)
 8005fc6:	f7fa fae3 	bl	8000590 <__aeabi_dmul>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4690      	mov	r8, r2
 8005fd0:	4699      	mov	r9, r3
 8005fd2:	4b5c      	ldr	r3, [pc, #368]	; (8006144 <pi_regulator_comp+0x1b4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fa fa82 	bl	80004e0 <__aeabi_f2d>
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	4b57      	ldr	r3, [pc, #348]	; (8006140 <pi_regulator_comp+0x1b0>)
 8005fe2:	f7fa fad5 	bl	8000590 <__aeabi_dmul>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4640      	mov	r0, r8
 8005fec:	4649      	mov	r1, r9
 8005fee:	f7fa f919 	bl	8000224 <__adddf3>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7fa fac9 	bl	8000590 <__aeabi_dmul>
 8005ffe:	4603      	mov	r3, r0
 8006000:	460c      	mov	r4, r1
 8006002:	4625      	mov	r5, r4
 8006004:	461c      	mov	r4, r3
 8006006:	6838      	ldr	r0, [r7, #0]
 8006008:	f7fa fa6a 	bl	80004e0 <__aeabi_f2d>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4620      	mov	r0, r4
 8006012:	4629      	mov	r1, r5
 8006014:	f7fa fabc 	bl	8000590 <__aeabi_dmul>
 8006018:	4603      	mov	r3, r0
 800601a:	460c      	mov	r4, r1
 800601c:	4625      	mov	r5, r4
 800601e:	461c      	mov	r4, r3
 8006020:	4b49      	ldr	r3, [pc, #292]	; (8006148 <pi_regulator_comp+0x1b8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7fa fa5b 	bl	80004e0 <__aeabi_f2d>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4620      	mov	r0, r4
 8006030:	4629      	mov	r1, r5
 8006032:	f7fa f8f7 	bl	8000224 <__adddf3>
 8006036:	4603      	mov	r3, r0
 8006038:	460c      	mov	r4, r1
 800603a:	4618      	mov	r0, r3
 800603c:	4621      	mov	r1, r4
 800603e:	f7fa fd7f 	bl	8000b40 <__aeabi_d2f>
 8006042:	4603      	mov	r3, r0
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
    omega = phaseError*kp + integral + feedForward; 
 8006046:	ed97 7a05 	vldr	s14, [r7, #20]
 800604a:	edd7 7a02 	vldr	s15, [r7, #8]
 800604e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006052:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800605a:	ed97 7a04 	vldr	s14, [r7, #16]
 800605e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006062:	edc7 7a08 	vstr	s15, [r7, #32]

    anglePll = (omega*0.5 + omega_old*0.5)*Ts + angle_old; 
 8006066:	6a38      	ldr	r0, [r7, #32]
 8006068:	f7fa fa3a 	bl	80004e0 <__aeabi_f2d>
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	4b33      	ldr	r3, [pc, #204]	; (8006140 <pi_regulator_comp+0x1b0>)
 8006072:	f7fa fa8d 	bl	8000590 <__aeabi_dmul>
 8006076:	4603      	mov	r3, r0
 8006078:	460c      	mov	r4, r1
 800607a:	4625      	mov	r5, r4
 800607c:	461c      	mov	r4, r3
 800607e:	4b33      	ldr	r3, [pc, #204]	; (800614c <pi_regulator_comp+0x1bc>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fa fa2c 	bl	80004e0 <__aeabi_f2d>
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <pi_regulator_comp+0x1b0>)
 800608e:	f7fa fa7f 	bl	8000590 <__aeabi_dmul>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4620      	mov	r0, r4
 8006098:	4629      	mov	r1, r5
 800609a:	f7fa f8c3 	bl	8000224 <__adddf3>
 800609e:	4603      	mov	r3, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	4625      	mov	r5, r4
 80060a4:	461c      	mov	r4, r3
 80060a6:	6838      	ldr	r0, [r7, #0]
 80060a8:	f7fa fa1a 	bl	80004e0 <__aeabi_f2d>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4620      	mov	r0, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7fa fa6c 	bl	8000590 <__aeabi_dmul>
 80060b8:	4603      	mov	r3, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	4625      	mov	r5, r4
 80060be:	461c      	mov	r4, r3
 80060c0:	4b23      	ldr	r3, [pc, #140]	; (8006150 <pi_regulator_comp+0x1c0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fa fa0b 	bl	80004e0 <__aeabi_f2d>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7fa f8a7 	bl	8000224 <__adddf3>
 80060d6:	4603      	mov	r3, r0
 80060d8:	460c      	mov	r4, r1
 80060da:	4618      	mov	r0, r3
 80060dc:	4621      	mov	r1, r4
 80060de:	f7fa fd2f 	bl	8000b40 <__aeabi_d2f>
 80060e2:	4603      	mov	r3, r0
 80060e4:	61fb      	str	r3, [r7, #28]
    anglePllComp = anglePll - (omega - feedForward - phaseError*kp)*kPhi;
 80060e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80060ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80060ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060f2:	edd7 6a05 	vldr	s13, [r7, #20]
 80060f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80060fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006102:	edd7 7a01 	vldr	s15, [r7, #4]
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	ed97 7a07 	vldr	s14, [r7, #28]
 800610e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006112:	edc7 7a06 	vstr	s15, [r7, #24]

    phaseError_old = phaseError;
 8006116:	4a0b      	ldr	r2, [pc, #44]	; (8006144 <pi_regulator_comp+0x1b4>)
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	6013      	str	r3, [r2, #0]
    integral_old = integral;
 800611c:	4a0a      	ldr	r2, [pc, #40]	; (8006148 <pi_regulator_comp+0x1b8>)
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	6013      	str	r3, [r2, #0]
    angle_old = anglePll;
 8006122:	4a0b      	ldr	r2, [pc, #44]	; (8006150 <pi_regulator_comp+0x1c0>)
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	6013      	str	r3, [r2, #0]
    omega_old = omega;
 8006128:	4a08      	ldr	r2, [pc, #32]	; (800614c <pi_regulator_comp+0x1bc>)
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	6013      	str	r3, [r2, #0]

    
    return anglePllComp;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	ee07 3a90 	vmov	s15, r3
}
 8006134:	eeb0 0a67 	vmov.f32	s0, s15
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006140:	3fe00000 	.word	0x3fe00000
 8006144:	20000220 	.word	0x20000220
 8006148:	20000224 	.word	0x20000224
 800614c:	20000228 	.word	0x20000228
 8006150:	2000022c 	.word	0x2000022c

08006154 <phase_detector>:


float phase_detector(float cosGrid, float sinGrid, float anglePllComp)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	ed2d 8b02 	vpush	{d8}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006162:	edc7 0a02 	vstr	s1, [r7, #8]
 8006166:	ed87 1a01 	vstr	s2, [r7, #4]
    float phaseError;

    phaseError = sinGrid*cosf(anglePllComp) - cosGrid*sinf(anglePllComp);
 800616a:	ed97 0a01 	vldr	s0, [r7, #4]
 800616e:	f001 fd8d 	bl	8007c8c <cosf>
 8006172:	eeb0 7a40 	vmov.f32	s14, s0
 8006176:	edd7 7a02 	vldr	s15, [r7, #8]
 800617a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800617e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006182:	f001 fdc3 	bl	8007d0c <sinf>
 8006186:	eeb0 7a40 	vmov.f32	s14, s0
 800618a:	edd7 7a03 	vldr	s15, [r7, #12]
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006196:	edc7 7a05 	vstr	s15, [r7, #20]
    

    return phaseError;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	ee07 3a90 	vmov	s15, r3
}
 80061a0:	eeb0 0a67 	vmov.f32	s0, s15
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	ecbd 8b02 	vpop	{d8}
 80061ac:	bd80      	pop	{r7, pc}

080061ae <two_to_three_phase>:
float two_to_three_phase(float *phaseA, float *phaseB)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
	return -*phaseA - *phaseB;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	edd3 7a00 	vldr	s15, [r3]
 80061be:	eeb1 7a67 	vneg.f32	s14, s15
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	edd3 7a00 	vldr	s15, [r3]
 80061c8:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80061cc:	eeb0 0a67 	vmov.f32	s0, s15
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <__errno>:
 80061dc:	4b01      	ldr	r3, [pc, #4]	; (80061e4 <__errno+0x8>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000018 	.word	0x20000018

080061e8 <__libc_init_array>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	4e0d      	ldr	r6, [pc, #52]	; (8006220 <__libc_init_array+0x38>)
 80061ec:	4c0d      	ldr	r4, [pc, #52]	; (8006224 <__libc_init_array+0x3c>)
 80061ee:	1ba4      	subs	r4, r4, r6
 80061f0:	10a4      	asrs	r4, r4, #2
 80061f2:	2500      	movs	r5, #0
 80061f4:	42a5      	cmp	r5, r4
 80061f6:	d109      	bne.n	800620c <__libc_init_array+0x24>
 80061f8:	4e0b      	ldr	r6, [pc, #44]	; (8006228 <__libc_init_array+0x40>)
 80061fa:	4c0c      	ldr	r4, [pc, #48]	; (800622c <__libc_init_array+0x44>)
 80061fc:	f002 fbde 	bl	80089bc <_init>
 8006200:	1ba4      	subs	r4, r4, r6
 8006202:	10a4      	asrs	r4, r4, #2
 8006204:	2500      	movs	r5, #0
 8006206:	42a5      	cmp	r5, r4
 8006208:	d105      	bne.n	8006216 <__libc_init_array+0x2e>
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006210:	4798      	blx	r3
 8006212:	3501      	adds	r5, #1
 8006214:	e7ee      	b.n	80061f4 <__libc_init_array+0xc>
 8006216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800621a:	4798      	blx	r3
 800621c:	3501      	adds	r5, #1
 800621e:	e7f2      	b.n	8006206 <__libc_init_array+0x1e>
 8006220:	0800900c 	.word	0x0800900c
 8006224:	0800900c 	.word	0x0800900c
 8006228:	0800900c 	.word	0x0800900c
 800622c:	08009010 	.word	0x08009010

08006230 <memset>:
 8006230:	4402      	add	r2, r0
 8006232:	4603      	mov	r3, r0
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <memset+0xa>
 8006238:	4770      	bx	lr
 800623a:	f803 1b01 	strb.w	r1, [r3], #1
 800623e:	e7f9      	b.n	8006234 <memset+0x4>

08006240 <__cvt>:
 8006240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	ec55 4b10 	vmov	r4, r5, d0
 8006248:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800624a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800624e:	2d00      	cmp	r5, #0
 8006250:	460e      	mov	r6, r1
 8006252:	4691      	mov	r9, r2
 8006254:	4619      	mov	r1, r3
 8006256:	bfb8      	it	lt
 8006258:	4622      	movlt	r2, r4
 800625a:	462b      	mov	r3, r5
 800625c:	f027 0720 	bic.w	r7, r7, #32
 8006260:	bfbb      	ittet	lt
 8006262:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006266:	461d      	movlt	r5, r3
 8006268:	2300      	movge	r3, #0
 800626a:	232d      	movlt	r3, #45	; 0x2d
 800626c:	bfb8      	it	lt
 800626e:	4614      	movlt	r4, r2
 8006270:	2f46      	cmp	r7, #70	; 0x46
 8006272:	700b      	strb	r3, [r1, #0]
 8006274:	d004      	beq.n	8006280 <__cvt+0x40>
 8006276:	2f45      	cmp	r7, #69	; 0x45
 8006278:	d100      	bne.n	800627c <__cvt+0x3c>
 800627a:	3601      	adds	r6, #1
 800627c:	2102      	movs	r1, #2
 800627e:	e000      	b.n	8006282 <__cvt+0x42>
 8006280:	2103      	movs	r1, #3
 8006282:	ab03      	add	r3, sp, #12
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	ab02      	add	r3, sp, #8
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	4632      	mov	r2, r6
 800628c:	4653      	mov	r3, sl
 800628e:	ec45 4b10 	vmov	d0, r4, r5
 8006292:	f000 fbad 	bl	80069f0 <_dtoa_r>
 8006296:	2f47      	cmp	r7, #71	; 0x47
 8006298:	4680      	mov	r8, r0
 800629a:	d102      	bne.n	80062a2 <__cvt+0x62>
 800629c:	f019 0f01 	tst.w	r9, #1
 80062a0:	d026      	beq.n	80062f0 <__cvt+0xb0>
 80062a2:	2f46      	cmp	r7, #70	; 0x46
 80062a4:	eb08 0906 	add.w	r9, r8, r6
 80062a8:	d111      	bne.n	80062ce <__cvt+0x8e>
 80062aa:	f898 3000 	ldrb.w	r3, [r8]
 80062ae:	2b30      	cmp	r3, #48	; 0x30
 80062b0:	d10a      	bne.n	80062c8 <__cvt+0x88>
 80062b2:	2200      	movs	r2, #0
 80062b4:	2300      	movs	r3, #0
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa fbd1 	bl	8000a60 <__aeabi_dcmpeq>
 80062be:	b918      	cbnz	r0, 80062c8 <__cvt+0x88>
 80062c0:	f1c6 0601 	rsb	r6, r6, #1
 80062c4:	f8ca 6000 	str.w	r6, [sl]
 80062c8:	f8da 3000 	ldr.w	r3, [sl]
 80062cc:	4499      	add	r9, r3
 80062ce:	2200      	movs	r2, #0
 80062d0:	2300      	movs	r3, #0
 80062d2:	4620      	mov	r0, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7fa fbc3 	bl	8000a60 <__aeabi_dcmpeq>
 80062da:	b938      	cbnz	r0, 80062ec <__cvt+0xac>
 80062dc:	2230      	movs	r2, #48	; 0x30
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	454b      	cmp	r3, r9
 80062e2:	d205      	bcs.n	80062f0 <__cvt+0xb0>
 80062e4:	1c59      	adds	r1, r3, #1
 80062e6:	9103      	str	r1, [sp, #12]
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e7f8      	b.n	80062de <__cvt+0x9e>
 80062ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80062f0:	9b03      	ldr	r3, [sp, #12]
 80062f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062f4:	eba3 0308 	sub.w	r3, r3, r8
 80062f8:	4640      	mov	r0, r8
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	b004      	add	sp, #16
 80062fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006302 <__exponent>:
 8006302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006304:	2900      	cmp	r1, #0
 8006306:	4604      	mov	r4, r0
 8006308:	bfba      	itte	lt
 800630a:	4249      	neglt	r1, r1
 800630c:	232d      	movlt	r3, #45	; 0x2d
 800630e:	232b      	movge	r3, #43	; 0x2b
 8006310:	2909      	cmp	r1, #9
 8006312:	f804 2b02 	strb.w	r2, [r4], #2
 8006316:	7043      	strb	r3, [r0, #1]
 8006318:	dd20      	ble.n	800635c <__exponent+0x5a>
 800631a:	f10d 0307 	add.w	r3, sp, #7
 800631e:	461f      	mov	r7, r3
 8006320:	260a      	movs	r6, #10
 8006322:	fb91 f5f6 	sdiv	r5, r1, r6
 8006326:	fb06 1115 	mls	r1, r6, r5, r1
 800632a:	3130      	adds	r1, #48	; 0x30
 800632c:	2d09      	cmp	r5, #9
 800632e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006332:	f103 32ff 	add.w	r2, r3, #4294967295
 8006336:	4629      	mov	r1, r5
 8006338:	dc09      	bgt.n	800634e <__exponent+0x4c>
 800633a:	3130      	adds	r1, #48	; 0x30
 800633c:	3b02      	subs	r3, #2
 800633e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006342:	42bb      	cmp	r3, r7
 8006344:	4622      	mov	r2, r4
 8006346:	d304      	bcc.n	8006352 <__exponent+0x50>
 8006348:	1a10      	subs	r0, r2, r0
 800634a:	b003      	add	sp, #12
 800634c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800634e:	4613      	mov	r3, r2
 8006350:	e7e7      	b.n	8006322 <__exponent+0x20>
 8006352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006356:	f804 2b01 	strb.w	r2, [r4], #1
 800635a:	e7f2      	b.n	8006342 <__exponent+0x40>
 800635c:	2330      	movs	r3, #48	; 0x30
 800635e:	4419      	add	r1, r3
 8006360:	7083      	strb	r3, [r0, #2]
 8006362:	1d02      	adds	r2, r0, #4
 8006364:	70c1      	strb	r1, [r0, #3]
 8006366:	e7ef      	b.n	8006348 <__exponent+0x46>

08006368 <_printf_float>:
 8006368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636c:	b08d      	sub	sp, #52	; 0x34
 800636e:	460c      	mov	r4, r1
 8006370:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006374:	4616      	mov	r6, r2
 8006376:	461f      	mov	r7, r3
 8006378:	4605      	mov	r5, r0
 800637a:	f001 f8f1 	bl	8007560 <_localeconv_r>
 800637e:	6803      	ldr	r3, [r0, #0]
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	4618      	mov	r0, r3
 8006384:	f7f9 ff40 	bl	8000208 <strlen>
 8006388:	2300      	movs	r3, #0
 800638a:	930a      	str	r3, [sp, #40]	; 0x28
 800638c:	f8d8 3000 	ldr.w	r3, [r8]
 8006390:	9005      	str	r0, [sp, #20]
 8006392:	3307      	adds	r3, #7
 8006394:	f023 0307 	bic.w	r3, r3, #7
 8006398:	f103 0208 	add.w	r2, r3, #8
 800639c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063a0:	f8d4 b000 	ldr.w	fp, [r4]
 80063a4:	f8c8 2000 	str.w	r2, [r8]
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80063b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063b8:	9307      	str	r3, [sp, #28]
 80063ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80063be:	f04f 32ff 	mov.w	r2, #4294967295
 80063c2:	4ba7      	ldr	r3, [pc, #668]	; (8006660 <_printf_float+0x2f8>)
 80063c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c8:	f7fa fb7c 	bl	8000ac4 <__aeabi_dcmpun>
 80063cc:	bb70      	cbnz	r0, 800642c <_printf_float+0xc4>
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295
 80063d2:	4ba3      	ldr	r3, [pc, #652]	; (8006660 <_printf_float+0x2f8>)
 80063d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d8:	f7fa fb56 	bl	8000a88 <__aeabi_dcmple>
 80063dc:	bb30      	cbnz	r0, 800642c <_printf_float+0xc4>
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7fa fb45 	bl	8000a74 <__aeabi_dcmplt>
 80063ea:	b110      	cbz	r0, 80063f2 <_printf_float+0x8a>
 80063ec:	232d      	movs	r3, #45	; 0x2d
 80063ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f2:	4a9c      	ldr	r2, [pc, #624]	; (8006664 <_printf_float+0x2fc>)
 80063f4:	4b9c      	ldr	r3, [pc, #624]	; (8006668 <_printf_float+0x300>)
 80063f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80063fa:	bf8c      	ite	hi
 80063fc:	4690      	movhi	r8, r2
 80063fe:	4698      	movls	r8, r3
 8006400:	2303      	movs	r3, #3
 8006402:	f02b 0204 	bic.w	r2, fp, #4
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	6022      	str	r2, [r4, #0]
 800640a:	f04f 0900 	mov.w	r9, #0
 800640e:	9700      	str	r7, [sp, #0]
 8006410:	4633      	mov	r3, r6
 8006412:	aa0b      	add	r2, sp, #44	; 0x2c
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f9e6 	bl	80067e8 <_printf_common>
 800641c:	3001      	adds	r0, #1
 800641e:	f040 808d 	bne.w	800653c <_printf_float+0x1d4>
 8006422:	f04f 30ff 	mov.w	r0, #4294967295
 8006426:	b00d      	add	sp, #52	; 0x34
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7fa fb46 	bl	8000ac4 <__aeabi_dcmpun>
 8006438:	b110      	cbz	r0, 8006440 <_printf_float+0xd8>
 800643a:	4a8c      	ldr	r2, [pc, #560]	; (800666c <_printf_float+0x304>)
 800643c:	4b8c      	ldr	r3, [pc, #560]	; (8006670 <_printf_float+0x308>)
 800643e:	e7da      	b.n	80063f6 <_printf_float+0x8e>
 8006440:	6861      	ldr	r1, [r4, #4]
 8006442:	1c4b      	adds	r3, r1, #1
 8006444:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006448:	a80a      	add	r0, sp, #40	; 0x28
 800644a:	d13e      	bne.n	80064ca <_printf_float+0x162>
 800644c:	2306      	movs	r3, #6
 800644e:	6063      	str	r3, [r4, #4]
 8006450:	2300      	movs	r3, #0
 8006452:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006456:	ab09      	add	r3, sp, #36	; 0x24
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	ec49 8b10 	vmov	d0, r8, r9
 800645e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006462:	6022      	str	r2, [r4, #0]
 8006464:	f8cd a004 	str.w	sl, [sp, #4]
 8006468:	6861      	ldr	r1, [r4, #4]
 800646a:	4628      	mov	r0, r5
 800646c:	f7ff fee8 	bl	8006240 <__cvt>
 8006470:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006474:	2b47      	cmp	r3, #71	; 0x47
 8006476:	4680      	mov	r8, r0
 8006478:	d109      	bne.n	800648e <_printf_float+0x126>
 800647a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647c:	1cd8      	adds	r0, r3, #3
 800647e:	db02      	blt.n	8006486 <_printf_float+0x11e>
 8006480:	6862      	ldr	r2, [r4, #4]
 8006482:	4293      	cmp	r3, r2
 8006484:	dd47      	ble.n	8006516 <_printf_float+0x1ae>
 8006486:	f1aa 0a02 	sub.w	sl, sl, #2
 800648a:	fa5f fa8a 	uxtb.w	sl, sl
 800648e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006494:	d824      	bhi.n	80064e0 <_printf_float+0x178>
 8006496:	3901      	subs	r1, #1
 8006498:	4652      	mov	r2, sl
 800649a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800649e:	9109      	str	r1, [sp, #36]	; 0x24
 80064a0:	f7ff ff2f 	bl	8006302 <__exponent>
 80064a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064a6:	1813      	adds	r3, r2, r0
 80064a8:	2a01      	cmp	r2, #1
 80064aa:	4681      	mov	r9, r0
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	dc02      	bgt.n	80064b6 <_printf_float+0x14e>
 80064b0:	6822      	ldr	r2, [r4, #0]
 80064b2:	07d1      	lsls	r1, r2, #31
 80064b4:	d501      	bpl.n	80064ba <_printf_float+0x152>
 80064b6:	3301      	adds	r3, #1
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0a5      	beq.n	800640e <_printf_float+0xa6>
 80064c2:	232d      	movs	r3, #45	; 0x2d
 80064c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c8:	e7a1      	b.n	800640e <_printf_float+0xa6>
 80064ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80064ce:	f000 8177 	beq.w	80067c0 <_printf_float+0x458>
 80064d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80064d6:	d1bb      	bne.n	8006450 <_printf_float+0xe8>
 80064d8:	2900      	cmp	r1, #0
 80064da:	d1b9      	bne.n	8006450 <_printf_float+0xe8>
 80064dc:	2301      	movs	r3, #1
 80064de:	e7b6      	b.n	800644e <_printf_float+0xe6>
 80064e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80064e4:	d119      	bne.n	800651a <_printf_float+0x1b2>
 80064e6:	2900      	cmp	r1, #0
 80064e8:	6863      	ldr	r3, [r4, #4]
 80064ea:	dd0c      	ble.n	8006506 <_printf_float+0x19e>
 80064ec:	6121      	str	r1, [r4, #16]
 80064ee:	b913      	cbnz	r3, 80064f6 <_printf_float+0x18e>
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	07d2      	lsls	r2, r2, #31
 80064f4:	d502      	bpl.n	80064fc <_printf_float+0x194>
 80064f6:	3301      	adds	r3, #1
 80064f8:	440b      	add	r3, r1
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8006500:	f04f 0900 	mov.w	r9, #0
 8006504:	e7d9      	b.n	80064ba <_printf_float+0x152>
 8006506:	b913      	cbnz	r3, 800650e <_printf_float+0x1a6>
 8006508:	6822      	ldr	r2, [r4, #0]
 800650a:	07d0      	lsls	r0, r2, #31
 800650c:	d501      	bpl.n	8006512 <_printf_float+0x1aa>
 800650e:	3302      	adds	r3, #2
 8006510:	e7f3      	b.n	80064fa <_printf_float+0x192>
 8006512:	2301      	movs	r3, #1
 8006514:	e7f1      	b.n	80064fa <_printf_float+0x192>
 8006516:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800651a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800651e:	4293      	cmp	r3, r2
 8006520:	db05      	blt.n	800652e <_printf_float+0x1c6>
 8006522:	6822      	ldr	r2, [r4, #0]
 8006524:	6123      	str	r3, [r4, #16]
 8006526:	07d1      	lsls	r1, r2, #31
 8006528:	d5e8      	bpl.n	80064fc <_printf_float+0x194>
 800652a:	3301      	adds	r3, #1
 800652c:	e7e5      	b.n	80064fa <_printf_float+0x192>
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfd4      	ite	le
 8006532:	f1c3 0302 	rsble	r3, r3, #2
 8006536:	2301      	movgt	r3, #1
 8006538:	4413      	add	r3, r2
 800653a:	e7de      	b.n	80064fa <_printf_float+0x192>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	055a      	lsls	r2, r3, #21
 8006540:	d407      	bmi.n	8006552 <_printf_float+0x1ea>
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	4642      	mov	r2, r8
 8006546:	4631      	mov	r1, r6
 8006548:	4628      	mov	r0, r5
 800654a:	47b8      	blx	r7
 800654c:	3001      	adds	r0, #1
 800654e:	d12b      	bne.n	80065a8 <_printf_float+0x240>
 8006550:	e767      	b.n	8006422 <_printf_float+0xba>
 8006552:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006556:	f240 80dc 	bls.w	8006712 <_printf_float+0x3aa>
 800655a:	2200      	movs	r2, #0
 800655c:	2300      	movs	r3, #0
 800655e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006562:	f7fa fa7d 	bl	8000a60 <__aeabi_dcmpeq>
 8006566:	2800      	cmp	r0, #0
 8006568:	d033      	beq.n	80065d2 <_printf_float+0x26a>
 800656a:	2301      	movs	r3, #1
 800656c:	4a41      	ldr	r2, [pc, #260]	; (8006674 <_printf_float+0x30c>)
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	f43f af54 	beq.w	8006422 <_printf_float+0xba>
 800657a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800657e:	429a      	cmp	r2, r3
 8006580:	db02      	blt.n	8006588 <_printf_float+0x220>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	07d8      	lsls	r0, r3, #31
 8006586:	d50f      	bpl.n	80065a8 <_printf_float+0x240>
 8006588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800658c:	4631      	mov	r1, r6
 800658e:	4628      	mov	r0, r5
 8006590:	47b8      	blx	r7
 8006592:	3001      	adds	r0, #1
 8006594:	f43f af45 	beq.w	8006422 <_printf_float+0xba>
 8006598:	f04f 0800 	mov.w	r8, #0
 800659c:	f104 091a 	add.w	r9, r4, #26
 80065a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a2:	3b01      	subs	r3, #1
 80065a4:	4543      	cmp	r3, r8
 80065a6:	dc09      	bgt.n	80065bc <_printf_float+0x254>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	079b      	lsls	r3, r3, #30
 80065ac:	f100 8103 	bmi.w	80067b6 <_printf_float+0x44e>
 80065b0:	68e0      	ldr	r0, [r4, #12]
 80065b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b4:	4298      	cmp	r0, r3
 80065b6:	bfb8      	it	lt
 80065b8:	4618      	movlt	r0, r3
 80065ba:	e734      	b.n	8006426 <_printf_float+0xbe>
 80065bc:	2301      	movs	r3, #1
 80065be:	464a      	mov	r2, r9
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f af2b 	beq.w	8006422 <_printf_float+0xba>
 80065cc:	f108 0801 	add.w	r8, r8, #1
 80065d0:	e7e6      	b.n	80065a0 <_printf_float+0x238>
 80065d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dc2b      	bgt.n	8006630 <_printf_float+0x2c8>
 80065d8:	2301      	movs	r3, #1
 80065da:	4a26      	ldr	r2, [pc, #152]	; (8006674 <_printf_float+0x30c>)
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	f43f af1d 	beq.w	8006422 <_printf_float+0xba>
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	b923      	cbnz	r3, 80065f6 <_printf_float+0x28e>
 80065ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ee:	b913      	cbnz	r3, 80065f6 <_printf_float+0x28e>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	07d9      	lsls	r1, r3, #31
 80065f4:	d5d8      	bpl.n	80065a8 <_printf_float+0x240>
 80065f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065fa:	4631      	mov	r1, r6
 80065fc:	4628      	mov	r0, r5
 80065fe:	47b8      	blx	r7
 8006600:	3001      	adds	r0, #1
 8006602:	f43f af0e 	beq.w	8006422 <_printf_float+0xba>
 8006606:	f04f 0900 	mov.w	r9, #0
 800660a:	f104 0a1a 	add.w	sl, r4, #26
 800660e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006610:	425b      	negs	r3, r3
 8006612:	454b      	cmp	r3, r9
 8006614:	dc01      	bgt.n	800661a <_printf_float+0x2b2>
 8006616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006618:	e794      	b.n	8006544 <_printf_float+0x1dc>
 800661a:	2301      	movs	r3, #1
 800661c:	4652      	mov	r2, sl
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	f43f aefc 	beq.w	8006422 <_printf_float+0xba>
 800662a:	f109 0901 	add.w	r9, r9, #1
 800662e:	e7ee      	b.n	800660e <_printf_float+0x2a6>
 8006630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006634:	429a      	cmp	r2, r3
 8006636:	bfa8      	it	ge
 8006638:	461a      	movge	r2, r3
 800663a:	2a00      	cmp	r2, #0
 800663c:	4691      	mov	r9, r2
 800663e:	dd07      	ble.n	8006650 <_printf_float+0x2e8>
 8006640:	4613      	mov	r3, r2
 8006642:	4631      	mov	r1, r6
 8006644:	4642      	mov	r2, r8
 8006646:	4628      	mov	r0, r5
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	f43f aee9 	beq.w	8006422 <_printf_float+0xba>
 8006650:	f104 031a 	add.w	r3, r4, #26
 8006654:	f04f 0b00 	mov.w	fp, #0
 8006658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800665c:	9306      	str	r3, [sp, #24]
 800665e:	e015      	b.n	800668c <_printf_float+0x324>
 8006660:	7fefffff 	.word	0x7fefffff
 8006664:	08008a08 	.word	0x08008a08
 8006668:	08008a04 	.word	0x08008a04
 800666c:	08008a10 	.word	0x08008a10
 8006670:	08008a0c 	.word	0x08008a0c
 8006674:	08008a14 	.word	0x08008a14
 8006678:	2301      	movs	r3, #1
 800667a:	9a06      	ldr	r2, [sp, #24]
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	f43f aecd 	beq.w	8006422 <_printf_float+0xba>
 8006688:	f10b 0b01 	add.w	fp, fp, #1
 800668c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006690:	ebaa 0309 	sub.w	r3, sl, r9
 8006694:	455b      	cmp	r3, fp
 8006696:	dcef      	bgt.n	8006678 <_printf_float+0x310>
 8006698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800669c:	429a      	cmp	r2, r3
 800669e:	44d0      	add	r8, sl
 80066a0:	db15      	blt.n	80066ce <_printf_float+0x366>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	07da      	lsls	r2, r3, #31
 80066a6:	d412      	bmi.n	80066ce <_printf_float+0x366>
 80066a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ac:	eba3 020a 	sub.w	r2, r3, sl
 80066b0:	eba3 0a01 	sub.w	sl, r3, r1
 80066b4:	4592      	cmp	sl, r2
 80066b6:	bfa8      	it	ge
 80066b8:	4692      	movge	sl, r2
 80066ba:	f1ba 0f00 	cmp.w	sl, #0
 80066be:	dc0e      	bgt.n	80066de <_printf_float+0x376>
 80066c0:	f04f 0800 	mov.w	r8, #0
 80066c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066c8:	f104 091a 	add.w	r9, r4, #26
 80066cc:	e019      	b.n	8006702 <_printf_float+0x39a>
 80066ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	d1e5      	bne.n	80066a8 <_printf_float+0x340>
 80066dc:	e6a1      	b.n	8006422 <_printf_float+0xba>
 80066de:	4653      	mov	r3, sl
 80066e0:	4642      	mov	r2, r8
 80066e2:	4631      	mov	r1, r6
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b8      	blx	r7
 80066e8:	3001      	adds	r0, #1
 80066ea:	d1e9      	bne.n	80066c0 <_printf_float+0x358>
 80066ec:	e699      	b.n	8006422 <_printf_float+0xba>
 80066ee:	2301      	movs	r3, #1
 80066f0:	464a      	mov	r2, r9
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	f43f ae92 	beq.w	8006422 <_printf_float+0xba>
 80066fe:	f108 0801 	add.w	r8, r8, #1
 8006702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	eba3 030a 	sub.w	r3, r3, sl
 800670c:	4543      	cmp	r3, r8
 800670e:	dcee      	bgt.n	80066ee <_printf_float+0x386>
 8006710:	e74a      	b.n	80065a8 <_printf_float+0x240>
 8006712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006714:	2a01      	cmp	r2, #1
 8006716:	dc01      	bgt.n	800671c <_printf_float+0x3b4>
 8006718:	07db      	lsls	r3, r3, #31
 800671a:	d53a      	bpl.n	8006792 <_printf_float+0x42a>
 800671c:	2301      	movs	r3, #1
 800671e:	4642      	mov	r2, r8
 8006720:	4631      	mov	r1, r6
 8006722:	4628      	mov	r0, r5
 8006724:	47b8      	blx	r7
 8006726:	3001      	adds	r0, #1
 8006728:	f43f ae7b 	beq.w	8006422 <_printf_float+0xba>
 800672c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f108 0801 	add.w	r8, r8, #1
 800673c:	f43f ae71 	beq.w	8006422 <_printf_float+0xba>
 8006740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006742:	2200      	movs	r2, #0
 8006744:	f103 3aff 	add.w	sl, r3, #4294967295
 8006748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800674c:	2300      	movs	r3, #0
 800674e:	f7fa f987 	bl	8000a60 <__aeabi_dcmpeq>
 8006752:	b9c8      	cbnz	r0, 8006788 <_printf_float+0x420>
 8006754:	4653      	mov	r3, sl
 8006756:	4642      	mov	r2, r8
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	d10e      	bne.n	8006780 <_printf_float+0x418>
 8006762:	e65e      	b.n	8006422 <_printf_float+0xba>
 8006764:	2301      	movs	r3, #1
 8006766:	4652      	mov	r2, sl
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f ae57 	beq.w	8006422 <_printf_float+0xba>
 8006774:	f108 0801 	add.w	r8, r8, #1
 8006778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677a:	3b01      	subs	r3, #1
 800677c:	4543      	cmp	r3, r8
 800677e:	dcf1      	bgt.n	8006764 <_printf_float+0x3fc>
 8006780:	464b      	mov	r3, r9
 8006782:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006786:	e6de      	b.n	8006546 <_printf_float+0x1de>
 8006788:	f04f 0800 	mov.w	r8, #0
 800678c:	f104 0a1a 	add.w	sl, r4, #26
 8006790:	e7f2      	b.n	8006778 <_printf_float+0x410>
 8006792:	2301      	movs	r3, #1
 8006794:	e7df      	b.n	8006756 <_printf_float+0x3ee>
 8006796:	2301      	movs	r3, #1
 8006798:	464a      	mov	r2, r9
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f ae3e 	beq.w	8006422 <_printf_float+0xba>
 80067a6:	f108 0801 	add.w	r8, r8, #1
 80067aa:	68e3      	ldr	r3, [r4, #12]
 80067ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	4543      	cmp	r3, r8
 80067b2:	dcf0      	bgt.n	8006796 <_printf_float+0x42e>
 80067b4:	e6fc      	b.n	80065b0 <_printf_float+0x248>
 80067b6:	f04f 0800 	mov.w	r8, #0
 80067ba:	f104 0919 	add.w	r9, r4, #25
 80067be:	e7f4      	b.n	80067aa <_printf_float+0x442>
 80067c0:	2900      	cmp	r1, #0
 80067c2:	f43f ae8b 	beq.w	80064dc <_printf_float+0x174>
 80067c6:	2300      	movs	r3, #0
 80067c8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80067cc:	ab09      	add	r3, sp, #36	; 0x24
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	ec49 8b10 	vmov	d0, r8, r9
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	f8cd a004 	str.w	sl, [sp, #4]
 80067da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067de:	4628      	mov	r0, r5
 80067e0:	f7ff fd2e 	bl	8006240 <__cvt>
 80067e4:	4680      	mov	r8, r0
 80067e6:	e648      	b.n	800647a <_printf_float+0x112>

080067e8 <_printf_common>:
 80067e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	4691      	mov	r9, r2
 80067ee:	461f      	mov	r7, r3
 80067f0:	688a      	ldr	r2, [r1, #8]
 80067f2:	690b      	ldr	r3, [r1, #16]
 80067f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	bfb8      	it	lt
 80067fc:	4613      	movlt	r3, r2
 80067fe:	f8c9 3000 	str.w	r3, [r9]
 8006802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006806:	4606      	mov	r6, r0
 8006808:	460c      	mov	r4, r1
 800680a:	b112      	cbz	r2, 8006812 <_printf_common+0x2a>
 800680c:	3301      	adds	r3, #1
 800680e:	f8c9 3000 	str.w	r3, [r9]
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	0699      	lsls	r1, r3, #26
 8006816:	bf42      	ittt	mi
 8006818:	f8d9 3000 	ldrmi.w	r3, [r9]
 800681c:	3302      	addmi	r3, #2
 800681e:	f8c9 3000 	strmi.w	r3, [r9]
 8006822:	6825      	ldr	r5, [r4, #0]
 8006824:	f015 0506 	ands.w	r5, r5, #6
 8006828:	d107      	bne.n	800683a <_printf_common+0x52>
 800682a:	f104 0a19 	add.w	sl, r4, #25
 800682e:	68e3      	ldr	r3, [r4, #12]
 8006830:	f8d9 2000 	ldr.w	r2, [r9]
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	42ab      	cmp	r3, r5
 8006838:	dc28      	bgt.n	800688c <_printf_common+0xa4>
 800683a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800683e:	6822      	ldr	r2, [r4, #0]
 8006840:	3300      	adds	r3, #0
 8006842:	bf18      	it	ne
 8006844:	2301      	movne	r3, #1
 8006846:	0692      	lsls	r2, r2, #26
 8006848:	d42d      	bmi.n	80068a6 <_printf_common+0xbe>
 800684a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800684e:	4639      	mov	r1, r7
 8006850:	4630      	mov	r0, r6
 8006852:	47c0      	blx	r8
 8006854:	3001      	adds	r0, #1
 8006856:	d020      	beq.n	800689a <_printf_common+0xb2>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	68e5      	ldr	r5, [r4, #12]
 800685c:	f8d9 2000 	ldr.w	r2, [r9]
 8006860:	f003 0306 	and.w	r3, r3, #6
 8006864:	2b04      	cmp	r3, #4
 8006866:	bf08      	it	eq
 8006868:	1aad      	subeq	r5, r5, r2
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	6922      	ldr	r2, [r4, #16]
 800686e:	bf0c      	ite	eq
 8006870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006874:	2500      	movne	r5, #0
 8006876:	4293      	cmp	r3, r2
 8006878:	bfc4      	itt	gt
 800687a:	1a9b      	subgt	r3, r3, r2
 800687c:	18ed      	addgt	r5, r5, r3
 800687e:	f04f 0900 	mov.w	r9, #0
 8006882:	341a      	adds	r4, #26
 8006884:	454d      	cmp	r5, r9
 8006886:	d11a      	bne.n	80068be <_printf_common+0xd6>
 8006888:	2000      	movs	r0, #0
 800688a:	e008      	b.n	800689e <_printf_common+0xb6>
 800688c:	2301      	movs	r3, #1
 800688e:	4652      	mov	r2, sl
 8006890:	4639      	mov	r1, r7
 8006892:	4630      	mov	r0, r6
 8006894:	47c0      	blx	r8
 8006896:	3001      	adds	r0, #1
 8006898:	d103      	bne.n	80068a2 <_printf_common+0xba>
 800689a:	f04f 30ff 	mov.w	r0, #4294967295
 800689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a2:	3501      	adds	r5, #1
 80068a4:	e7c3      	b.n	800682e <_printf_common+0x46>
 80068a6:	18e1      	adds	r1, r4, r3
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	2030      	movs	r0, #48	; 0x30
 80068ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068b0:	4422      	add	r2, r4
 80068b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ba:	3302      	adds	r3, #2
 80068bc:	e7c5      	b.n	800684a <_printf_common+0x62>
 80068be:	2301      	movs	r3, #1
 80068c0:	4622      	mov	r2, r4
 80068c2:	4639      	mov	r1, r7
 80068c4:	4630      	mov	r0, r6
 80068c6:	47c0      	blx	r8
 80068c8:	3001      	adds	r0, #1
 80068ca:	d0e6      	beq.n	800689a <_printf_common+0xb2>
 80068cc:	f109 0901 	add.w	r9, r9, #1
 80068d0:	e7d8      	b.n	8006884 <_printf_common+0x9c>

080068d2 <quorem>:
 80068d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d6:	6903      	ldr	r3, [r0, #16]
 80068d8:	690c      	ldr	r4, [r1, #16]
 80068da:	42a3      	cmp	r3, r4
 80068dc:	4680      	mov	r8, r0
 80068de:	f2c0 8082 	blt.w	80069e6 <quorem+0x114>
 80068e2:	3c01      	subs	r4, #1
 80068e4:	f101 0714 	add.w	r7, r1, #20
 80068e8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80068ec:	f100 0614 	add.w	r6, r0, #20
 80068f0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80068f4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80068f8:	eb06 030c 	add.w	r3, r6, ip
 80068fc:	3501      	adds	r5, #1
 80068fe:	eb07 090c 	add.w	r9, r7, ip
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	fbb0 f5f5 	udiv	r5, r0, r5
 8006908:	b395      	cbz	r5, 8006970 <quorem+0x9e>
 800690a:	f04f 0a00 	mov.w	sl, #0
 800690e:	4638      	mov	r0, r7
 8006910:	46b6      	mov	lr, r6
 8006912:	46d3      	mov	fp, sl
 8006914:	f850 2b04 	ldr.w	r2, [r0], #4
 8006918:	b293      	uxth	r3, r2
 800691a:	fb05 a303 	mla	r3, r5, r3, sl
 800691e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006922:	b29b      	uxth	r3, r3
 8006924:	ebab 0303 	sub.w	r3, fp, r3
 8006928:	0c12      	lsrs	r2, r2, #16
 800692a:	f8de b000 	ldr.w	fp, [lr]
 800692e:	fb05 a202 	mla	r2, r5, r2, sl
 8006932:	fa13 f38b 	uxtah	r3, r3, fp
 8006936:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800693a:	fa1f fb82 	uxth.w	fp, r2
 800693e:	f8de 2000 	ldr.w	r2, [lr]
 8006942:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800694a:	b29b      	uxth	r3, r3
 800694c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006950:	4581      	cmp	r9, r0
 8006952:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006956:	f84e 3b04 	str.w	r3, [lr], #4
 800695a:	d2db      	bcs.n	8006914 <quorem+0x42>
 800695c:	f856 300c 	ldr.w	r3, [r6, ip]
 8006960:	b933      	cbnz	r3, 8006970 <quorem+0x9e>
 8006962:	9b01      	ldr	r3, [sp, #4]
 8006964:	3b04      	subs	r3, #4
 8006966:	429e      	cmp	r6, r3
 8006968:	461a      	mov	r2, r3
 800696a:	d330      	bcc.n	80069ce <quorem+0xfc>
 800696c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006970:	4640      	mov	r0, r8
 8006972:	f001 f82b 	bl	80079cc <__mcmp>
 8006976:	2800      	cmp	r0, #0
 8006978:	db25      	blt.n	80069c6 <quorem+0xf4>
 800697a:	3501      	adds	r5, #1
 800697c:	4630      	mov	r0, r6
 800697e:	f04f 0c00 	mov.w	ip, #0
 8006982:	f857 2b04 	ldr.w	r2, [r7], #4
 8006986:	f8d0 e000 	ldr.w	lr, [r0]
 800698a:	b293      	uxth	r3, r2
 800698c:	ebac 0303 	sub.w	r3, ip, r3
 8006990:	0c12      	lsrs	r2, r2, #16
 8006992:	fa13 f38e 	uxtah	r3, r3, lr
 8006996:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800699a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a4:	45b9      	cmp	r9, r7
 80069a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069aa:	f840 3b04 	str.w	r3, [r0], #4
 80069ae:	d2e8      	bcs.n	8006982 <quorem+0xb0>
 80069b0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80069b4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80069b8:	b92a      	cbnz	r2, 80069c6 <quorem+0xf4>
 80069ba:	3b04      	subs	r3, #4
 80069bc:	429e      	cmp	r6, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	d30b      	bcc.n	80069da <quorem+0x108>
 80069c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80069c6:	4628      	mov	r0, r5
 80069c8:	b003      	add	sp, #12
 80069ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	3b04      	subs	r3, #4
 80069d2:	2a00      	cmp	r2, #0
 80069d4:	d1ca      	bne.n	800696c <quorem+0x9a>
 80069d6:	3c01      	subs	r4, #1
 80069d8:	e7c5      	b.n	8006966 <quorem+0x94>
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	3b04      	subs	r3, #4
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d1ef      	bne.n	80069c2 <quorem+0xf0>
 80069e2:	3c01      	subs	r4, #1
 80069e4:	e7ea      	b.n	80069bc <quorem+0xea>
 80069e6:	2000      	movs	r0, #0
 80069e8:	e7ee      	b.n	80069c8 <quorem+0xf6>
 80069ea:	0000      	movs	r0, r0
 80069ec:	0000      	movs	r0, r0
	...

080069f0 <_dtoa_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ec57 6b10 	vmov	r6, r7, d0
 80069f8:	b097      	sub	sp, #92	; 0x5c
 80069fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069fc:	9106      	str	r1, [sp, #24]
 80069fe:	4604      	mov	r4, r0
 8006a00:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a02:	9312      	str	r3, [sp, #72]	; 0x48
 8006a04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a08:	e9cd 6700 	strd	r6, r7, [sp]
 8006a0c:	b93d      	cbnz	r5, 8006a1e <_dtoa_r+0x2e>
 8006a0e:	2010      	movs	r0, #16
 8006a10:	f000 fdb4 	bl	800757c <malloc>
 8006a14:	6260      	str	r0, [r4, #36]	; 0x24
 8006a16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a1a:	6005      	str	r5, [r0, #0]
 8006a1c:	60c5      	str	r5, [r0, #12]
 8006a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a20:	6819      	ldr	r1, [r3, #0]
 8006a22:	b151      	cbz	r1, 8006a3a <_dtoa_r+0x4a>
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	604a      	str	r2, [r1, #4]
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4093      	lsls	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 fdeb 	bl	800760a <_Bfree>
 8006a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	1e3b      	subs	r3, r7, #0
 8006a3c:	bfbb      	ittet	lt
 8006a3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	9301      	strlt	r3, [sp, #4]
 8006a44:	2300      	movge	r3, #0
 8006a46:	2201      	movlt	r2, #1
 8006a48:	bfac      	ite	ge
 8006a4a:	f8c8 3000 	strge.w	r3, [r8]
 8006a4e:	f8c8 2000 	strlt.w	r2, [r8]
 8006a52:	4baf      	ldr	r3, [pc, #700]	; (8006d10 <_dtoa_r+0x320>)
 8006a54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a58:	ea33 0308 	bics.w	r3, r3, r8
 8006a5c:	d114      	bne.n	8006a88 <_dtoa_r+0x98>
 8006a5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a60:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	b923      	cbnz	r3, 8006a74 <_dtoa_r+0x84>
 8006a6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f000 8542 	beq.w	80074f8 <_dtoa_r+0xb08>
 8006a74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006d24 <_dtoa_r+0x334>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8544 	beq.w	8007508 <_dtoa_r+0xb18>
 8006a80:	f10b 0303 	add.w	r3, fp, #3
 8006a84:	f000 bd3e 	b.w	8007504 <_dtoa_r+0xb14>
 8006a88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4630      	mov	r0, r6
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7f9 ffe4 	bl	8000a60 <__aeabi_dcmpeq>
 8006a98:	4681      	mov	r9, r0
 8006a9a:	b168      	cbz	r0, 8006ab8 <_dtoa_r+0xc8>
 8006a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8524 	beq.w	80074f2 <_dtoa_r+0xb02>
 8006aaa:	4b9a      	ldr	r3, [pc, #616]	; (8006d14 <_dtoa_r+0x324>)
 8006aac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006aae:	f103 3bff 	add.w	fp, r3, #4294967295
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	f000 bd28 	b.w	8007508 <_dtoa_r+0xb18>
 8006ab8:	aa14      	add	r2, sp, #80	; 0x50
 8006aba:	a915      	add	r1, sp, #84	; 0x54
 8006abc:	ec47 6b10 	vmov	d0, r6, r7
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fffa 	bl	8007aba <__d2b>
 8006ac6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006aca:	9004      	str	r0, [sp, #16]
 8006acc:	2d00      	cmp	r5, #0
 8006ace:	d07c      	beq.n	8006bca <_dtoa_r+0x1da>
 8006ad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ad4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006ad8:	46b2      	mov	sl, r6
 8006ada:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006ade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ae2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4b8b      	ldr	r3, [pc, #556]	; (8006d18 <_dtoa_r+0x328>)
 8006aea:	4650      	mov	r0, sl
 8006aec:	4659      	mov	r1, fp
 8006aee:	f7f9 fb97 	bl	8000220 <__aeabi_dsub>
 8006af2:	a381      	add	r3, pc, #516	; (adr r3, 8006cf8 <_dtoa_r+0x308>)
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fd4a 	bl	8000590 <__aeabi_dmul>
 8006afc:	a380      	add	r3, pc, #512	; (adr r3, 8006d00 <_dtoa_r+0x310>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fb8f 	bl	8000224 <__adddf3>
 8006b06:	4606      	mov	r6, r0
 8006b08:	4628      	mov	r0, r5
 8006b0a:	460f      	mov	r7, r1
 8006b0c:	f7f9 fcd6 	bl	80004bc <__aeabi_i2d>
 8006b10:	a37d      	add	r3, pc, #500	; (adr r3, 8006d08 <_dtoa_r+0x318>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fd3b 	bl	8000590 <__aeabi_dmul>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4630      	mov	r0, r6
 8006b20:	4639      	mov	r1, r7
 8006b22:	f7f9 fb7f 	bl	8000224 <__adddf3>
 8006b26:	4606      	mov	r6, r0
 8006b28:	460f      	mov	r7, r1
 8006b2a:	f7f9 ffe1 	bl	8000af0 <__aeabi_d2iz>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4682      	mov	sl, r0
 8006b32:	2300      	movs	r3, #0
 8006b34:	4630      	mov	r0, r6
 8006b36:	4639      	mov	r1, r7
 8006b38:	f7f9 ff9c 	bl	8000a74 <__aeabi_dcmplt>
 8006b3c:	b148      	cbz	r0, 8006b52 <_dtoa_r+0x162>
 8006b3e:	4650      	mov	r0, sl
 8006b40:	f7f9 fcbc 	bl	80004bc <__aeabi_i2d>
 8006b44:	4632      	mov	r2, r6
 8006b46:	463b      	mov	r3, r7
 8006b48:	f7f9 ff8a 	bl	8000a60 <__aeabi_dcmpeq>
 8006b4c:	b908      	cbnz	r0, 8006b52 <_dtoa_r+0x162>
 8006b4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b52:	f1ba 0f16 	cmp.w	sl, #22
 8006b56:	d859      	bhi.n	8006c0c <_dtoa_r+0x21c>
 8006b58:	4970      	ldr	r1, [pc, #448]	; (8006d1c <_dtoa_r+0x32c>)
 8006b5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b66:	f7f9 ffa3 	bl	8000ab0 <__aeabi_dcmpgt>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d050      	beq.n	8006c10 <_dtoa_r+0x220>
 8006b6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b72:	2300      	movs	r3, #0
 8006b74:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b78:	1b5d      	subs	r5, r3, r5
 8006b7a:	f1b5 0801 	subs.w	r8, r5, #1
 8006b7e:	bf49      	itett	mi
 8006b80:	f1c5 0301 	rsbmi	r3, r5, #1
 8006b84:	2300      	movpl	r3, #0
 8006b86:	9305      	strmi	r3, [sp, #20]
 8006b88:	f04f 0800 	movmi.w	r8, #0
 8006b8c:	bf58      	it	pl
 8006b8e:	9305      	strpl	r3, [sp, #20]
 8006b90:	f1ba 0f00 	cmp.w	sl, #0
 8006b94:	db3e      	blt.n	8006c14 <_dtoa_r+0x224>
 8006b96:	2300      	movs	r3, #0
 8006b98:	44d0      	add	r8, sl
 8006b9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	9b06      	ldr	r3, [sp, #24]
 8006ba2:	2b09      	cmp	r3, #9
 8006ba4:	f200 8090 	bhi.w	8006cc8 <_dtoa_r+0x2d8>
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	bfc4      	itt	gt
 8006bac:	3b04      	subgt	r3, #4
 8006bae:	9306      	strgt	r3, [sp, #24]
 8006bb0:	9b06      	ldr	r3, [sp, #24]
 8006bb2:	f1a3 0302 	sub.w	r3, r3, #2
 8006bb6:	bfcc      	ite	gt
 8006bb8:	2500      	movgt	r5, #0
 8006bba:	2501      	movle	r5, #1
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	f200 808f 	bhi.w	8006ce0 <_dtoa_r+0x2f0>
 8006bc2:	e8df f003 	tbb	[pc, r3]
 8006bc6:	7f7d      	.short	0x7f7d
 8006bc8:	7131      	.short	0x7131
 8006bca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006bce:	441d      	add	r5, r3
 8006bd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006bd4:	2820      	cmp	r0, #32
 8006bd6:	dd13      	ble.n	8006c00 <_dtoa_r+0x210>
 8006bd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006bdc:	9b00      	ldr	r3, [sp, #0]
 8006bde:	fa08 f800 	lsl.w	r8, r8, r0
 8006be2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006be6:	fa23 f000 	lsr.w	r0, r3, r0
 8006bea:	ea48 0000 	orr.w	r0, r8, r0
 8006bee:	f7f9 fc55 	bl	800049c <__aeabi_ui2d>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4682      	mov	sl, r0
 8006bf6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006bfa:	3d01      	subs	r5, #1
 8006bfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8006bfe:	e772      	b.n	8006ae6 <_dtoa_r+0xf6>
 8006c00:	9b00      	ldr	r3, [sp, #0]
 8006c02:	f1c0 0020 	rsb	r0, r0, #32
 8006c06:	fa03 f000 	lsl.w	r0, r3, r0
 8006c0a:	e7f0      	b.n	8006bee <_dtoa_r+0x1fe>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e7b1      	b.n	8006b74 <_dtoa_r+0x184>
 8006c10:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c12:	e7b0      	b.n	8006b76 <_dtoa_r+0x186>
 8006c14:	9b05      	ldr	r3, [sp, #20]
 8006c16:	eba3 030a 	sub.w	r3, r3, sl
 8006c1a:	9305      	str	r3, [sp, #20]
 8006c1c:	f1ca 0300 	rsb	r3, sl, #0
 8006c20:	9307      	str	r3, [sp, #28]
 8006c22:	2300      	movs	r3, #0
 8006c24:	930e      	str	r3, [sp, #56]	; 0x38
 8006c26:	e7bb      	b.n	8006ba0 <_dtoa_r+0x1b0>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dd59      	ble.n	8006ce6 <_dtoa_r+0x2f6>
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	4699      	mov	r9, r3
 8006c36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c38:	2200      	movs	r2, #0
 8006c3a:	6072      	str	r2, [r6, #4]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	f102 0014 	add.w	r0, r2, #20
 8006c42:	4298      	cmp	r0, r3
 8006c44:	6871      	ldr	r1, [r6, #4]
 8006c46:	d953      	bls.n	8006cf0 <_dtoa_r+0x300>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 fcaa 	bl	80075a2 <_Balloc>
 8006c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c50:	6030      	str	r0, [r6, #0]
 8006c52:	f1b9 0f0e 	cmp.w	r9, #14
 8006c56:	f8d3 b000 	ldr.w	fp, [r3]
 8006c5a:	f200 80e6 	bhi.w	8006e2a <_dtoa_r+0x43a>
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	f000 80e3 	beq.w	8006e2a <_dtoa_r+0x43a>
 8006c64:	ed9d 7b00 	vldr	d7, [sp]
 8006c68:	f1ba 0f00 	cmp.w	sl, #0
 8006c6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006c70:	dd74      	ble.n	8006d5c <_dtoa_r+0x36c>
 8006c72:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <_dtoa_r+0x32c>)
 8006c74:	f00a 030f 	and.w	r3, sl, #15
 8006c78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c7c:	ed93 7b00 	vldr	d7, [r3]
 8006c80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006c84:	06f0      	lsls	r0, r6, #27
 8006c86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006c8a:	d565      	bpl.n	8006d58 <_dtoa_r+0x368>
 8006c8c:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <_dtoa_r+0x330>)
 8006c8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c96:	f7f9 fda5 	bl	80007e4 <__aeabi_ddiv>
 8006c9a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c9e:	f006 060f 	and.w	r6, r6, #15
 8006ca2:	2503      	movs	r5, #3
 8006ca4:	4f1e      	ldr	r7, [pc, #120]	; (8006d20 <_dtoa_r+0x330>)
 8006ca6:	e04c      	b.n	8006d42 <_dtoa_r+0x352>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	930a      	str	r3, [sp, #40]	; 0x28
 8006cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cae:	4453      	add	r3, sl
 8006cb0:	f103 0901 	add.w	r9, r3, #1
 8006cb4:	9302      	str	r3, [sp, #8]
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	bfb8      	it	lt
 8006cbc:	2301      	movlt	r3, #1
 8006cbe:	e7ba      	b.n	8006c36 <_dtoa_r+0x246>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e7b2      	b.n	8006c2a <_dtoa_r+0x23a>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e7f0      	b.n	8006caa <_dtoa_r+0x2ba>
 8006cc8:	2501      	movs	r5, #1
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9306      	str	r3, [sp, #24]
 8006cce:	950a      	str	r5, [sp, #40]	; 0x28
 8006cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd4:	9302      	str	r3, [sp, #8]
 8006cd6:	4699      	mov	r9, r3
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2312      	movs	r3, #18
 8006cdc:	920b      	str	r2, [sp, #44]	; 0x2c
 8006cde:	e7aa      	b.n	8006c36 <_dtoa_r+0x246>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ce4:	e7f4      	b.n	8006cd0 <_dtoa_r+0x2e0>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	9302      	str	r3, [sp, #8]
 8006cea:	4699      	mov	r9, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	e7f5      	b.n	8006cdc <_dtoa_r+0x2ec>
 8006cf0:	3101      	adds	r1, #1
 8006cf2:	6071      	str	r1, [r6, #4]
 8006cf4:	0052      	lsls	r2, r2, #1
 8006cf6:	e7a2      	b.n	8006c3e <_dtoa_r+0x24e>
 8006cf8:	636f4361 	.word	0x636f4361
 8006cfc:	3fd287a7 	.word	0x3fd287a7
 8006d00:	8b60c8b3 	.word	0x8b60c8b3
 8006d04:	3fc68a28 	.word	0x3fc68a28
 8006d08:	509f79fb 	.word	0x509f79fb
 8006d0c:	3fd34413 	.word	0x3fd34413
 8006d10:	7ff00000 	.word	0x7ff00000
 8006d14:	08008a15 	.word	0x08008a15
 8006d18:	3ff80000 	.word	0x3ff80000
 8006d1c:	08008a50 	.word	0x08008a50
 8006d20:	08008a28 	.word	0x08008a28
 8006d24:	08008a1f 	.word	0x08008a1f
 8006d28:	07f1      	lsls	r1, r6, #31
 8006d2a:	d508      	bpl.n	8006d3e <_dtoa_r+0x34e>
 8006d2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d34:	f7f9 fc2c 	bl	8000590 <__aeabi_dmul>
 8006d38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	1076      	asrs	r6, r6, #1
 8006d40:	3708      	adds	r7, #8
 8006d42:	2e00      	cmp	r6, #0
 8006d44:	d1f0      	bne.n	8006d28 <_dtoa_r+0x338>
 8006d46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d4e:	f7f9 fd49 	bl	80007e4 <__aeabi_ddiv>
 8006d52:	e9cd 0100 	strd	r0, r1, [sp]
 8006d56:	e01a      	b.n	8006d8e <_dtoa_r+0x39e>
 8006d58:	2502      	movs	r5, #2
 8006d5a:	e7a3      	b.n	8006ca4 <_dtoa_r+0x2b4>
 8006d5c:	f000 80a0 	beq.w	8006ea0 <_dtoa_r+0x4b0>
 8006d60:	f1ca 0600 	rsb	r6, sl, #0
 8006d64:	4b9f      	ldr	r3, [pc, #636]	; (8006fe4 <_dtoa_r+0x5f4>)
 8006d66:	4fa0      	ldr	r7, [pc, #640]	; (8006fe8 <_dtoa_r+0x5f8>)
 8006d68:	f006 020f 	and.w	r2, r6, #15
 8006d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d78:	f7f9 fc0a 	bl	8000590 <__aeabi_dmul>
 8006d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8006d80:	1136      	asrs	r6, r6, #4
 8006d82:	2300      	movs	r3, #0
 8006d84:	2502      	movs	r5, #2
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d17f      	bne.n	8006e8a <_dtoa_r+0x49a>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e1      	bne.n	8006d52 <_dtoa_r+0x362>
 8006d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8087 	beq.w	8006ea4 <_dtoa_r+0x4b4>
 8006d96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4b93      	ldr	r3, [pc, #588]	; (8006fec <_dtoa_r+0x5fc>)
 8006d9e:	4630      	mov	r0, r6
 8006da0:	4639      	mov	r1, r7
 8006da2:	f7f9 fe67 	bl	8000a74 <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d07c      	beq.n	8006ea4 <_dtoa_r+0x4b4>
 8006daa:	f1b9 0f00 	cmp.w	r9, #0
 8006dae:	d079      	beq.n	8006ea4 <_dtoa_r+0x4b4>
 8006db0:	9b02      	ldr	r3, [sp, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dd35      	ble.n	8006e22 <_dtoa_r+0x432>
 8006db6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006dba:	9308      	str	r3, [sp, #32]
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4b8b      	ldr	r3, [pc, #556]	; (8006ff0 <_dtoa_r+0x600>)
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7f9 fbe4 	bl	8000590 <__aeabi_dmul>
 8006dc8:	e9cd 0100 	strd	r0, r1, [sp]
 8006dcc:	9f02      	ldr	r7, [sp, #8]
 8006dce:	3501      	adds	r5, #1
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f7f9 fb73 	bl	80004bc <__aeabi_i2d>
 8006dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dda:	f7f9 fbd9 	bl	8000590 <__aeabi_dmul>
 8006dde:	2200      	movs	r2, #0
 8006de0:	4b84      	ldr	r3, [pc, #528]	; (8006ff4 <_dtoa_r+0x604>)
 8006de2:	f7f9 fa1f 	bl	8000224 <__adddf3>
 8006de6:	4605      	mov	r5, r0
 8006de8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006dec:	2f00      	cmp	r7, #0
 8006dee:	d15d      	bne.n	8006eac <_dtoa_r+0x4bc>
 8006df0:	2200      	movs	r2, #0
 8006df2:	4b81      	ldr	r3, [pc, #516]	; (8006ff8 <_dtoa_r+0x608>)
 8006df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006df8:	f7f9 fa12 	bl	8000220 <__aeabi_dsub>
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	4633      	mov	r3, r6
 8006e00:	e9cd 0100 	strd	r0, r1, [sp]
 8006e04:	f7f9 fe54 	bl	8000ab0 <__aeabi_dcmpgt>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f040 8288 	bne.w	800731e <_dtoa_r+0x92e>
 8006e0e:	462a      	mov	r2, r5
 8006e10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e18:	f7f9 fe2c 	bl	8000a74 <__aeabi_dcmplt>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	f040 827c 	bne.w	800731a <_dtoa_r+0x92a>
 8006e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e26:	e9cd 2300 	strd	r2, r3, [sp]
 8006e2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f2c0 8150 	blt.w	80070d2 <_dtoa_r+0x6e2>
 8006e32:	f1ba 0f0e 	cmp.w	sl, #14
 8006e36:	f300 814c 	bgt.w	80070d2 <_dtoa_r+0x6e2>
 8006e3a:	4b6a      	ldr	r3, [pc, #424]	; (8006fe4 <_dtoa_r+0x5f4>)
 8006e3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e40:	ed93 7b00 	vldr	d7, [r3]
 8006e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e4c:	f280 80d8 	bge.w	8007000 <_dtoa_r+0x610>
 8006e50:	f1b9 0f00 	cmp.w	r9, #0
 8006e54:	f300 80d4 	bgt.w	8007000 <_dtoa_r+0x610>
 8006e58:	f040 825e 	bne.w	8007318 <_dtoa_r+0x928>
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4b66      	ldr	r3, [pc, #408]	; (8006ff8 <_dtoa_r+0x608>)
 8006e60:	ec51 0b17 	vmov	r0, r1, d7
 8006e64:	f7f9 fb94 	bl	8000590 <__aeabi_dmul>
 8006e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e6c:	f7f9 fe16 	bl	8000a9c <__aeabi_dcmpge>
 8006e70:	464f      	mov	r7, r9
 8006e72:	464e      	mov	r6, r9
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f040 8234 	bne.w	80072e2 <_dtoa_r+0x8f2>
 8006e7a:	2331      	movs	r3, #49	; 0x31
 8006e7c:	f10b 0501 	add.w	r5, fp, #1
 8006e80:	f88b 3000 	strb.w	r3, [fp]
 8006e84:	f10a 0a01 	add.w	sl, sl, #1
 8006e88:	e22f      	b.n	80072ea <_dtoa_r+0x8fa>
 8006e8a:	07f2      	lsls	r2, r6, #31
 8006e8c:	d505      	bpl.n	8006e9a <_dtoa_r+0x4aa>
 8006e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e92:	f7f9 fb7d 	bl	8000590 <__aeabi_dmul>
 8006e96:	3501      	adds	r5, #1
 8006e98:	2301      	movs	r3, #1
 8006e9a:	1076      	asrs	r6, r6, #1
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	e772      	b.n	8006d86 <_dtoa_r+0x396>
 8006ea0:	2502      	movs	r5, #2
 8006ea2:	e774      	b.n	8006d8e <_dtoa_r+0x39e>
 8006ea4:	f8cd a020 	str.w	sl, [sp, #32]
 8006ea8:	464f      	mov	r7, r9
 8006eaa:	e791      	b.n	8006dd0 <_dtoa_r+0x3e0>
 8006eac:	4b4d      	ldr	r3, [pc, #308]	; (8006fe4 <_dtoa_r+0x5f4>)
 8006eae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006eb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d047      	beq.n	8006f4c <_dtoa_r+0x55c>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	494e      	ldr	r1, [pc, #312]	; (8006ffc <_dtoa_r+0x60c>)
 8006ec4:	f7f9 fc8e 	bl	80007e4 <__aeabi_ddiv>
 8006ec8:	462a      	mov	r2, r5
 8006eca:	4633      	mov	r3, r6
 8006ecc:	f7f9 f9a8 	bl	8000220 <__aeabi_dsub>
 8006ed0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ed4:	465d      	mov	r5, fp
 8006ed6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eda:	f7f9 fe09 	bl	8000af0 <__aeabi_d2iz>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	f7f9 faec 	bl	80004bc <__aeabi_i2d>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eec:	f7f9 f998 	bl	8000220 <__aeabi_dsub>
 8006ef0:	3630      	adds	r6, #48	; 0x30
 8006ef2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ef6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006efa:	e9cd 0100 	strd	r0, r1, [sp]
 8006efe:	f7f9 fdb9 	bl	8000a74 <__aeabi_dcmplt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d163      	bne.n	8006fce <_dtoa_r+0x5de>
 8006f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	4937      	ldr	r1, [pc, #220]	; (8006fec <_dtoa_r+0x5fc>)
 8006f0e:	f7f9 f987 	bl	8000220 <__aeabi_dsub>
 8006f12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f16:	f7f9 fdad 	bl	8000a74 <__aeabi_dcmplt>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f040 80b7 	bne.w	800708e <_dtoa_r+0x69e>
 8006f20:	eba5 030b 	sub.w	r3, r5, fp
 8006f24:	429f      	cmp	r7, r3
 8006f26:	f77f af7c 	ble.w	8006e22 <_dtoa_r+0x432>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4b30      	ldr	r3, [pc, #192]	; (8006ff0 <_dtoa_r+0x600>)
 8006f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f32:	f7f9 fb2d 	bl	8000590 <__aeabi_dmul>
 8006f36:	2200      	movs	r2, #0
 8006f38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ff0 <_dtoa_r+0x600>)
 8006f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f42:	f7f9 fb25 	bl	8000590 <__aeabi_dmul>
 8006f46:	e9cd 0100 	strd	r0, r1, [sp]
 8006f4a:	e7c4      	b.n	8006ed6 <_dtoa_r+0x4e6>
 8006f4c:	462a      	mov	r2, r5
 8006f4e:	4633      	mov	r3, r6
 8006f50:	f7f9 fb1e 	bl	8000590 <__aeabi_dmul>
 8006f54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f58:	eb0b 0507 	add.w	r5, fp, r7
 8006f5c:	465e      	mov	r6, fp
 8006f5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f62:	f7f9 fdc5 	bl	8000af0 <__aeabi_d2iz>
 8006f66:	4607      	mov	r7, r0
 8006f68:	f7f9 faa8 	bl	80004bc <__aeabi_i2d>
 8006f6c:	3730      	adds	r7, #48	; 0x30
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f76:	f7f9 f953 	bl	8000220 <__aeabi_dsub>
 8006f7a:	f806 7b01 	strb.w	r7, [r6], #1
 8006f7e:	42ae      	cmp	r6, r5
 8006f80:	e9cd 0100 	strd	r0, r1, [sp]
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	d126      	bne.n	8006fd8 <_dtoa_r+0x5e8>
 8006f8a:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <_dtoa_r+0x60c>)
 8006f8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f90:	f7f9 f948 	bl	8000224 <__adddf3>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f9c:	f7f9 fd88 	bl	8000ab0 <__aeabi_dcmpgt>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d174      	bne.n	800708e <_dtoa_r+0x69e>
 8006fa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006fa8:	2000      	movs	r0, #0
 8006faa:	4914      	ldr	r1, [pc, #80]	; (8006ffc <_dtoa_r+0x60c>)
 8006fac:	f7f9 f938 	bl	8000220 <__aeabi_dsub>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fb8:	f7f9 fd5c 	bl	8000a74 <__aeabi_dcmplt>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f43f af30 	beq.w	8006e22 <_dtoa_r+0x432>
 8006fc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fc6:	2b30      	cmp	r3, #48	; 0x30
 8006fc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8006fcc:	d002      	beq.n	8006fd4 <_dtoa_r+0x5e4>
 8006fce:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006fd2:	e04a      	b.n	800706a <_dtoa_r+0x67a>
 8006fd4:	4615      	mov	r5, r2
 8006fd6:	e7f4      	b.n	8006fc2 <_dtoa_r+0x5d2>
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <_dtoa_r+0x600>)
 8006fda:	f7f9 fad9 	bl	8000590 <__aeabi_dmul>
 8006fde:	e9cd 0100 	strd	r0, r1, [sp]
 8006fe2:	e7bc      	b.n	8006f5e <_dtoa_r+0x56e>
 8006fe4:	08008a50 	.word	0x08008a50
 8006fe8:	08008a28 	.word	0x08008a28
 8006fec:	3ff00000 	.word	0x3ff00000
 8006ff0:	40240000 	.word	0x40240000
 8006ff4:	401c0000 	.word	0x401c0000
 8006ff8:	40140000 	.word	0x40140000
 8006ffc:	3fe00000 	.word	0x3fe00000
 8007000:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007004:	465d      	mov	r5, fp
 8007006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800700a:	4630      	mov	r0, r6
 800700c:	4639      	mov	r1, r7
 800700e:	f7f9 fbe9 	bl	80007e4 <__aeabi_ddiv>
 8007012:	f7f9 fd6d 	bl	8000af0 <__aeabi_d2iz>
 8007016:	4680      	mov	r8, r0
 8007018:	f7f9 fa50 	bl	80004bc <__aeabi_i2d>
 800701c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007020:	f7f9 fab6 	bl	8000590 <__aeabi_dmul>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007030:	f7f9 f8f6 	bl	8000220 <__aeabi_dsub>
 8007034:	f805 6b01 	strb.w	r6, [r5], #1
 8007038:	eba5 060b 	sub.w	r6, r5, fp
 800703c:	45b1      	cmp	r9, r6
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	d139      	bne.n	80070b8 <_dtoa_r+0x6c8>
 8007044:	f7f9 f8ee 	bl	8000224 <__adddf3>
 8007048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800704c:	4606      	mov	r6, r0
 800704e:	460f      	mov	r7, r1
 8007050:	f7f9 fd2e 	bl	8000ab0 <__aeabi_dcmpgt>
 8007054:	b9c8      	cbnz	r0, 800708a <_dtoa_r+0x69a>
 8007056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800705a:	4630      	mov	r0, r6
 800705c:	4639      	mov	r1, r7
 800705e:	f7f9 fcff 	bl	8000a60 <__aeabi_dcmpeq>
 8007062:	b110      	cbz	r0, 800706a <_dtoa_r+0x67a>
 8007064:	f018 0f01 	tst.w	r8, #1
 8007068:	d10f      	bne.n	800708a <_dtoa_r+0x69a>
 800706a:	9904      	ldr	r1, [sp, #16]
 800706c:	4620      	mov	r0, r4
 800706e:	f000 facc 	bl	800760a <_Bfree>
 8007072:	2300      	movs	r3, #0
 8007074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007076:	702b      	strb	r3, [r5, #0]
 8007078:	f10a 0301 	add.w	r3, sl, #1
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8241 	beq.w	8007508 <_dtoa_r+0xb18>
 8007086:	601d      	str	r5, [r3, #0]
 8007088:	e23e      	b.n	8007508 <_dtoa_r+0xb18>
 800708a:	f8cd a020 	str.w	sl, [sp, #32]
 800708e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007092:	2a39      	cmp	r2, #57	; 0x39
 8007094:	f105 33ff 	add.w	r3, r5, #4294967295
 8007098:	d108      	bne.n	80070ac <_dtoa_r+0x6bc>
 800709a:	459b      	cmp	fp, r3
 800709c:	d10a      	bne.n	80070b4 <_dtoa_r+0x6c4>
 800709e:	9b08      	ldr	r3, [sp, #32]
 80070a0:	3301      	adds	r3, #1
 80070a2:	9308      	str	r3, [sp, #32]
 80070a4:	2330      	movs	r3, #48	; 0x30
 80070a6:	f88b 3000 	strb.w	r3, [fp]
 80070aa:	465b      	mov	r3, fp
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	3201      	adds	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e78c      	b.n	8006fce <_dtoa_r+0x5de>
 80070b4:	461d      	mov	r5, r3
 80070b6:	e7ea      	b.n	800708e <_dtoa_r+0x69e>
 80070b8:	2200      	movs	r2, #0
 80070ba:	4b9b      	ldr	r3, [pc, #620]	; (8007328 <_dtoa_r+0x938>)
 80070bc:	f7f9 fa68 	bl	8000590 <__aeabi_dmul>
 80070c0:	2200      	movs	r2, #0
 80070c2:	2300      	movs	r3, #0
 80070c4:	4606      	mov	r6, r0
 80070c6:	460f      	mov	r7, r1
 80070c8:	f7f9 fcca 	bl	8000a60 <__aeabi_dcmpeq>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d09a      	beq.n	8007006 <_dtoa_r+0x616>
 80070d0:	e7cb      	b.n	800706a <_dtoa_r+0x67a>
 80070d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070d4:	2a00      	cmp	r2, #0
 80070d6:	f000 808b 	beq.w	80071f0 <_dtoa_r+0x800>
 80070da:	9a06      	ldr	r2, [sp, #24]
 80070dc:	2a01      	cmp	r2, #1
 80070de:	dc6e      	bgt.n	80071be <_dtoa_r+0x7ce>
 80070e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	d067      	beq.n	80071b6 <_dtoa_r+0x7c6>
 80070e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070ea:	9f07      	ldr	r7, [sp, #28]
 80070ec:	9d05      	ldr	r5, [sp, #20]
 80070ee:	9a05      	ldr	r2, [sp, #20]
 80070f0:	2101      	movs	r1, #1
 80070f2:	441a      	add	r2, r3
 80070f4:	4620      	mov	r0, r4
 80070f6:	9205      	str	r2, [sp, #20]
 80070f8:	4498      	add	r8, r3
 80070fa:	f000 fb26 	bl	800774a <__i2b>
 80070fe:	4606      	mov	r6, r0
 8007100:	2d00      	cmp	r5, #0
 8007102:	dd0c      	ble.n	800711e <_dtoa_r+0x72e>
 8007104:	f1b8 0f00 	cmp.w	r8, #0
 8007108:	dd09      	ble.n	800711e <_dtoa_r+0x72e>
 800710a:	4545      	cmp	r5, r8
 800710c:	9a05      	ldr	r2, [sp, #20]
 800710e:	462b      	mov	r3, r5
 8007110:	bfa8      	it	ge
 8007112:	4643      	movge	r3, r8
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	9205      	str	r2, [sp, #20]
 8007118:	1aed      	subs	r5, r5, r3
 800711a:	eba8 0803 	sub.w	r8, r8, r3
 800711e:	9b07      	ldr	r3, [sp, #28]
 8007120:	b1eb      	cbz	r3, 800715e <_dtoa_r+0x76e>
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	2b00      	cmp	r3, #0
 8007126:	d067      	beq.n	80071f8 <_dtoa_r+0x808>
 8007128:	b18f      	cbz	r7, 800714e <_dtoa_r+0x75e>
 800712a:	4631      	mov	r1, r6
 800712c:	463a      	mov	r2, r7
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fbaa 	bl	8007888 <__pow5mult>
 8007134:	9a04      	ldr	r2, [sp, #16]
 8007136:	4601      	mov	r1, r0
 8007138:	4606      	mov	r6, r0
 800713a:	4620      	mov	r0, r4
 800713c:	f000 fb0e 	bl	800775c <__multiply>
 8007140:	9904      	ldr	r1, [sp, #16]
 8007142:	9008      	str	r0, [sp, #32]
 8007144:	4620      	mov	r0, r4
 8007146:	f000 fa60 	bl	800760a <_Bfree>
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	9b07      	ldr	r3, [sp, #28]
 8007150:	1bda      	subs	r2, r3, r7
 8007152:	d004      	beq.n	800715e <_dtoa_r+0x76e>
 8007154:	9904      	ldr	r1, [sp, #16]
 8007156:	4620      	mov	r0, r4
 8007158:	f000 fb96 	bl	8007888 <__pow5mult>
 800715c:	9004      	str	r0, [sp, #16]
 800715e:	2101      	movs	r1, #1
 8007160:	4620      	mov	r0, r4
 8007162:	f000 faf2 	bl	800774a <__i2b>
 8007166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007168:	4607      	mov	r7, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 81d0 	beq.w	8007510 <_dtoa_r+0xb20>
 8007170:	461a      	mov	r2, r3
 8007172:	4601      	mov	r1, r0
 8007174:	4620      	mov	r0, r4
 8007176:	f000 fb87 	bl	8007888 <__pow5mult>
 800717a:	9b06      	ldr	r3, [sp, #24]
 800717c:	2b01      	cmp	r3, #1
 800717e:	4607      	mov	r7, r0
 8007180:	dc40      	bgt.n	8007204 <_dtoa_r+0x814>
 8007182:	9b00      	ldr	r3, [sp, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d139      	bne.n	80071fc <_dtoa_r+0x80c>
 8007188:	9b01      	ldr	r3, [sp, #4]
 800718a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800718e:	2b00      	cmp	r3, #0
 8007190:	d136      	bne.n	8007200 <_dtoa_r+0x810>
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007198:	0d1b      	lsrs	r3, r3, #20
 800719a:	051b      	lsls	r3, r3, #20
 800719c:	b12b      	cbz	r3, 80071aa <_dtoa_r+0x7ba>
 800719e:	9b05      	ldr	r3, [sp, #20]
 80071a0:	3301      	adds	r3, #1
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	f108 0801 	add.w	r8, r8, #1
 80071a8:	2301      	movs	r3, #1
 80071aa:	9307      	str	r3, [sp, #28]
 80071ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d12a      	bne.n	8007208 <_dtoa_r+0x818>
 80071b2:	2001      	movs	r0, #1
 80071b4:	e030      	b.n	8007218 <_dtoa_r+0x828>
 80071b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071bc:	e795      	b.n	80070ea <_dtoa_r+0x6fa>
 80071be:	9b07      	ldr	r3, [sp, #28]
 80071c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80071c4:	42bb      	cmp	r3, r7
 80071c6:	bfbf      	itttt	lt
 80071c8:	9b07      	ldrlt	r3, [sp, #28]
 80071ca:	9707      	strlt	r7, [sp, #28]
 80071cc:	1afa      	sublt	r2, r7, r3
 80071ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80071d0:	bfbb      	ittet	lt
 80071d2:	189b      	addlt	r3, r3, r2
 80071d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80071d6:	1bdf      	subge	r7, r3, r7
 80071d8:	2700      	movlt	r7, #0
 80071da:	f1b9 0f00 	cmp.w	r9, #0
 80071de:	bfb5      	itete	lt
 80071e0:	9b05      	ldrlt	r3, [sp, #20]
 80071e2:	9d05      	ldrge	r5, [sp, #20]
 80071e4:	eba3 0509 	sublt.w	r5, r3, r9
 80071e8:	464b      	movge	r3, r9
 80071ea:	bfb8      	it	lt
 80071ec:	2300      	movlt	r3, #0
 80071ee:	e77e      	b.n	80070ee <_dtoa_r+0x6fe>
 80071f0:	9f07      	ldr	r7, [sp, #28]
 80071f2:	9d05      	ldr	r5, [sp, #20]
 80071f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80071f6:	e783      	b.n	8007100 <_dtoa_r+0x710>
 80071f8:	9a07      	ldr	r2, [sp, #28]
 80071fa:	e7ab      	b.n	8007154 <_dtoa_r+0x764>
 80071fc:	2300      	movs	r3, #0
 80071fe:	e7d4      	b.n	80071aa <_dtoa_r+0x7ba>
 8007200:	9b00      	ldr	r3, [sp, #0]
 8007202:	e7d2      	b.n	80071aa <_dtoa_r+0x7ba>
 8007204:	2300      	movs	r3, #0
 8007206:	9307      	str	r3, [sp, #28]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800720e:	6918      	ldr	r0, [r3, #16]
 8007210:	f000 fa4d 	bl	80076ae <__hi0bits>
 8007214:	f1c0 0020 	rsb	r0, r0, #32
 8007218:	4440      	add	r0, r8
 800721a:	f010 001f 	ands.w	r0, r0, #31
 800721e:	d047      	beq.n	80072b0 <_dtoa_r+0x8c0>
 8007220:	f1c0 0320 	rsb	r3, r0, #32
 8007224:	2b04      	cmp	r3, #4
 8007226:	dd3b      	ble.n	80072a0 <_dtoa_r+0x8b0>
 8007228:	9b05      	ldr	r3, [sp, #20]
 800722a:	f1c0 001c 	rsb	r0, r0, #28
 800722e:	4403      	add	r3, r0
 8007230:	9305      	str	r3, [sp, #20]
 8007232:	4405      	add	r5, r0
 8007234:	4480      	add	r8, r0
 8007236:	9b05      	ldr	r3, [sp, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	dd05      	ble.n	8007248 <_dtoa_r+0x858>
 800723c:	461a      	mov	r2, r3
 800723e:	9904      	ldr	r1, [sp, #16]
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fb6f 	bl	8007924 <__lshift>
 8007246:	9004      	str	r0, [sp, #16]
 8007248:	f1b8 0f00 	cmp.w	r8, #0
 800724c:	dd05      	ble.n	800725a <_dtoa_r+0x86a>
 800724e:	4639      	mov	r1, r7
 8007250:	4642      	mov	r2, r8
 8007252:	4620      	mov	r0, r4
 8007254:	f000 fb66 	bl	8007924 <__lshift>
 8007258:	4607      	mov	r7, r0
 800725a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800725c:	b353      	cbz	r3, 80072b4 <_dtoa_r+0x8c4>
 800725e:	4639      	mov	r1, r7
 8007260:	9804      	ldr	r0, [sp, #16]
 8007262:	f000 fbb3 	bl	80079cc <__mcmp>
 8007266:	2800      	cmp	r0, #0
 8007268:	da24      	bge.n	80072b4 <_dtoa_r+0x8c4>
 800726a:	2300      	movs	r3, #0
 800726c:	220a      	movs	r2, #10
 800726e:	9904      	ldr	r1, [sp, #16]
 8007270:	4620      	mov	r0, r4
 8007272:	f000 f9e1 	bl	8007638 <__multadd>
 8007276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007278:	9004      	str	r0, [sp, #16]
 800727a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 814d 	beq.w	800751e <_dtoa_r+0xb2e>
 8007284:	2300      	movs	r3, #0
 8007286:	4631      	mov	r1, r6
 8007288:	220a      	movs	r2, #10
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f9d4 	bl	8007638 <__multadd>
 8007290:	9b02      	ldr	r3, [sp, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	4606      	mov	r6, r0
 8007296:	dc4f      	bgt.n	8007338 <_dtoa_r+0x948>
 8007298:	9b06      	ldr	r3, [sp, #24]
 800729a:	2b02      	cmp	r3, #2
 800729c:	dd4c      	ble.n	8007338 <_dtoa_r+0x948>
 800729e:	e011      	b.n	80072c4 <_dtoa_r+0x8d4>
 80072a0:	d0c9      	beq.n	8007236 <_dtoa_r+0x846>
 80072a2:	9a05      	ldr	r2, [sp, #20]
 80072a4:	331c      	adds	r3, #28
 80072a6:	441a      	add	r2, r3
 80072a8:	9205      	str	r2, [sp, #20]
 80072aa:	441d      	add	r5, r3
 80072ac:	4498      	add	r8, r3
 80072ae:	e7c2      	b.n	8007236 <_dtoa_r+0x846>
 80072b0:	4603      	mov	r3, r0
 80072b2:	e7f6      	b.n	80072a2 <_dtoa_r+0x8b2>
 80072b4:	f1b9 0f00 	cmp.w	r9, #0
 80072b8:	dc38      	bgt.n	800732c <_dtoa_r+0x93c>
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	dd35      	ble.n	800732c <_dtoa_r+0x93c>
 80072c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	b963      	cbnz	r3, 80072e2 <_dtoa_r+0x8f2>
 80072c8:	4639      	mov	r1, r7
 80072ca:	2205      	movs	r2, #5
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 f9b3 	bl	8007638 <__multadd>
 80072d2:	4601      	mov	r1, r0
 80072d4:	4607      	mov	r7, r0
 80072d6:	9804      	ldr	r0, [sp, #16]
 80072d8:	f000 fb78 	bl	80079cc <__mcmp>
 80072dc:	2800      	cmp	r0, #0
 80072de:	f73f adcc 	bgt.w	8006e7a <_dtoa_r+0x48a>
 80072e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e4:	465d      	mov	r5, fp
 80072e6:	ea6f 0a03 	mvn.w	sl, r3
 80072ea:	f04f 0900 	mov.w	r9, #0
 80072ee:	4639      	mov	r1, r7
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 f98a 	bl	800760a <_Bfree>
 80072f6:	2e00      	cmp	r6, #0
 80072f8:	f43f aeb7 	beq.w	800706a <_dtoa_r+0x67a>
 80072fc:	f1b9 0f00 	cmp.w	r9, #0
 8007300:	d005      	beq.n	800730e <_dtoa_r+0x91e>
 8007302:	45b1      	cmp	r9, r6
 8007304:	d003      	beq.n	800730e <_dtoa_r+0x91e>
 8007306:	4649      	mov	r1, r9
 8007308:	4620      	mov	r0, r4
 800730a:	f000 f97e 	bl	800760a <_Bfree>
 800730e:	4631      	mov	r1, r6
 8007310:	4620      	mov	r0, r4
 8007312:	f000 f97a 	bl	800760a <_Bfree>
 8007316:	e6a8      	b.n	800706a <_dtoa_r+0x67a>
 8007318:	2700      	movs	r7, #0
 800731a:	463e      	mov	r6, r7
 800731c:	e7e1      	b.n	80072e2 <_dtoa_r+0x8f2>
 800731e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007322:	463e      	mov	r6, r7
 8007324:	e5a9      	b.n	8006e7a <_dtoa_r+0x48a>
 8007326:	bf00      	nop
 8007328:	40240000 	.word	0x40240000
 800732c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80fa 	beq.w	800752c <_dtoa_r+0xb3c>
 8007338:	2d00      	cmp	r5, #0
 800733a:	dd05      	ble.n	8007348 <_dtoa_r+0x958>
 800733c:	4631      	mov	r1, r6
 800733e:	462a      	mov	r2, r5
 8007340:	4620      	mov	r0, r4
 8007342:	f000 faef 	bl	8007924 <__lshift>
 8007346:	4606      	mov	r6, r0
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d04c      	beq.n	80073e8 <_dtoa_r+0x9f8>
 800734e:	6871      	ldr	r1, [r6, #4]
 8007350:	4620      	mov	r0, r4
 8007352:	f000 f926 	bl	80075a2 <_Balloc>
 8007356:	6932      	ldr	r2, [r6, #16]
 8007358:	3202      	adds	r2, #2
 800735a:	4605      	mov	r5, r0
 800735c:	0092      	lsls	r2, r2, #2
 800735e:	f106 010c 	add.w	r1, r6, #12
 8007362:	300c      	adds	r0, #12
 8007364:	f000 f912 	bl	800758c <memcpy>
 8007368:	2201      	movs	r2, #1
 800736a:	4629      	mov	r1, r5
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fad9 	bl	8007924 <__lshift>
 8007372:	9b00      	ldr	r3, [sp, #0]
 8007374:	f8cd b014 	str.w	fp, [sp, #20]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	46b1      	mov	r9, r6
 800737e:	9307      	str	r3, [sp, #28]
 8007380:	4606      	mov	r6, r0
 8007382:	4639      	mov	r1, r7
 8007384:	9804      	ldr	r0, [sp, #16]
 8007386:	f7ff faa4 	bl	80068d2 <quorem>
 800738a:	4649      	mov	r1, r9
 800738c:	4605      	mov	r5, r0
 800738e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007392:	9804      	ldr	r0, [sp, #16]
 8007394:	f000 fb1a 	bl	80079cc <__mcmp>
 8007398:	4632      	mov	r2, r6
 800739a:	9000      	str	r0, [sp, #0]
 800739c:	4639      	mov	r1, r7
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 fb2e 	bl	8007a00 <__mdiff>
 80073a4:	68c3      	ldr	r3, [r0, #12]
 80073a6:	4602      	mov	r2, r0
 80073a8:	bb03      	cbnz	r3, 80073ec <_dtoa_r+0x9fc>
 80073aa:	4601      	mov	r1, r0
 80073ac:	9008      	str	r0, [sp, #32]
 80073ae:	9804      	ldr	r0, [sp, #16]
 80073b0:	f000 fb0c 	bl	80079cc <__mcmp>
 80073b4:	9a08      	ldr	r2, [sp, #32]
 80073b6:	4603      	mov	r3, r0
 80073b8:	4611      	mov	r1, r2
 80073ba:	4620      	mov	r0, r4
 80073bc:	9308      	str	r3, [sp, #32]
 80073be:	f000 f924 	bl	800760a <_Bfree>
 80073c2:	9b08      	ldr	r3, [sp, #32]
 80073c4:	b9a3      	cbnz	r3, 80073f0 <_dtoa_r+0xa00>
 80073c6:	9a06      	ldr	r2, [sp, #24]
 80073c8:	b992      	cbnz	r2, 80073f0 <_dtoa_r+0xa00>
 80073ca:	9a07      	ldr	r2, [sp, #28]
 80073cc:	b982      	cbnz	r2, 80073f0 <_dtoa_r+0xa00>
 80073ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80073d2:	d029      	beq.n	8007428 <_dtoa_r+0xa38>
 80073d4:	9b00      	ldr	r3, [sp, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dd01      	ble.n	80073de <_dtoa_r+0x9ee>
 80073da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80073de:	9b05      	ldr	r3, [sp, #20]
 80073e0:	1c5d      	adds	r5, r3, #1
 80073e2:	f883 8000 	strb.w	r8, [r3]
 80073e6:	e782      	b.n	80072ee <_dtoa_r+0x8fe>
 80073e8:	4630      	mov	r0, r6
 80073ea:	e7c2      	b.n	8007372 <_dtoa_r+0x982>
 80073ec:	2301      	movs	r3, #1
 80073ee:	e7e3      	b.n	80073b8 <_dtoa_r+0x9c8>
 80073f0:	9a00      	ldr	r2, [sp, #0]
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	db04      	blt.n	8007400 <_dtoa_r+0xa10>
 80073f6:	d125      	bne.n	8007444 <_dtoa_r+0xa54>
 80073f8:	9a06      	ldr	r2, [sp, #24]
 80073fa:	bb1a      	cbnz	r2, 8007444 <_dtoa_r+0xa54>
 80073fc:	9a07      	ldr	r2, [sp, #28]
 80073fe:	bb0a      	cbnz	r2, 8007444 <_dtoa_r+0xa54>
 8007400:	2b00      	cmp	r3, #0
 8007402:	ddec      	ble.n	80073de <_dtoa_r+0x9ee>
 8007404:	2201      	movs	r2, #1
 8007406:	9904      	ldr	r1, [sp, #16]
 8007408:	4620      	mov	r0, r4
 800740a:	f000 fa8b 	bl	8007924 <__lshift>
 800740e:	4639      	mov	r1, r7
 8007410:	9004      	str	r0, [sp, #16]
 8007412:	f000 fadb 	bl	80079cc <__mcmp>
 8007416:	2800      	cmp	r0, #0
 8007418:	dc03      	bgt.n	8007422 <_dtoa_r+0xa32>
 800741a:	d1e0      	bne.n	80073de <_dtoa_r+0x9ee>
 800741c:	f018 0f01 	tst.w	r8, #1
 8007420:	d0dd      	beq.n	80073de <_dtoa_r+0x9ee>
 8007422:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007426:	d1d8      	bne.n	80073da <_dtoa_r+0x9ea>
 8007428:	9b05      	ldr	r3, [sp, #20]
 800742a:	9a05      	ldr	r2, [sp, #20]
 800742c:	1c5d      	adds	r5, r3, #1
 800742e:	2339      	movs	r3, #57	; 0x39
 8007430:	7013      	strb	r3, [r2, #0]
 8007432:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007436:	2b39      	cmp	r3, #57	; 0x39
 8007438:	f105 32ff 	add.w	r2, r5, #4294967295
 800743c:	d04f      	beq.n	80074de <_dtoa_r+0xaee>
 800743e:	3301      	adds	r3, #1
 8007440:	7013      	strb	r3, [r2, #0]
 8007442:	e754      	b.n	80072ee <_dtoa_r+0x8fe>
 8007444:	9a05      	ldr	r2, [sp, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f102 0501 	add.w	r5, r2, #1
 800744c:	dd06      	ble.n	800745c <_dtoa_r+0xa6c>
 800744e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007452:	d0e9      	beq.n	8007428 <_dtoa_r+0xa38>
 8007454:	f108 0801 	add.w	r8, r8, #1
 8007458:	9b05      	ldr	r3, [sp, #20]
 800745a:	e7c2      	b.n	80073e2 <_dtoa_r+0x9f2>
 800745c:	9a02      	ldr	r2, [sp, #8]
 800745e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007462:	eba5 030b 	sub.w	r3, r5, fp
 8007466:	4293      	cmp	r3, r2
 8007468:	d021      	beq.n	80074ae <_dtoa_r+0xabe>
 800746a:	2300      	movs	r3, #0
 800746c:	220a      	movs	r2, #10
 800746e:	9904      	ldr	r1, [sp, #16]
 8007470:	4620      	mov	r0, r4
 8007472:	f000 f8e1 	bl	8007638 <__multadd>
 8007476:	45b1      	cmp	r9, r6
 8007478:	9004      	str	r0, [sp, #16]
 800747a:	f04f 0300 	mov.w	r3, #0
 800747e:	f04f 020a 	mov.w	r2, #10
 8007482:	4649      	mov	r1, r9
 8007484:	4620      	mov	r0, r4
 8007486:	d105      	bne.n	8007494 <_dtoa_r+0xaa4>
 8007488:	f000 f8d6 	bl	8007638 <__multadd>
 800748c:	4681      	mov	r9, r0
 800748e:	4606      	mov	r6, r0
 8007490:	9505      	str	r5, [sp, #20]
 8007492:	e776      	b.n	8007382 <_dtoa_r+0x992>
 8007494:	f000 f8d0 	bl	8007638 <__multadd>
 8007498:	4631      	mov	r1, r6
 800749a:	4681      	mov	r9, r0
 800749c:	2300      	movs	r3, #0
 800749e:	220a      	movs	r2, #10
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 f8c9 	bl	8007638 <__multadd>
 80074a6:	4606      	mov	r6, r0
 80074a8:	e7f2      	b.n	8007490 <_dtoa_r+0xaa0>
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	2201      	movs	r2, #1
 80074b0:	9904      	ldr	r1, [sp, #16]
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fa36 	bl	8007924 <__lshift>
 80074b8:	4639      	mov	r1, r7
 80074ba:	9004      	str	r0, [sp, #16]
 80074bc:	f000 fa86 	bl	80079cc <__mcmp>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	dcb6      	bgt.n	8007432 <_dtoa_r+0xa42>
 80074c4:	d102      	bne.n	80074cc <_dtoa_r+0xadc>
 80074c6:	f018 0f01 	tst.w	r8, #1
 80074ca:	d1b2      	bne.n	8007432 <_dtoa_r+0xa42>
 80074cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074d0:	2b30      	cmp	r3, #48	; 0x30
 80074d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80074d6:	f47f af0a 	bne.w	80072ee <_dtoa_r+0x8fe>
 80074da:	4615      	mov	r5, r2
 80074dc:	e7f6      	b.n	80074cc <_dtoa_r+0xadc>
 80074de:	4593      	cmp	fp, r2
 80074e0:	d105      	bne.n	80074ee <_dtoa_r+0xafe>
 80074e2:	2331      	movs	r3, #49	; 0x31
 80074e4:	f10a 0a01 	add.w	sl, sl, #1
 80074e8:	f88b 3000 	strb.w	r3, [fp]
 80074ec:	e6ff      	b.n	80072ee <_dtoa_r+0x8fe>
 80074ee:	4615      	mov	r5, r2
 80074f0:	e79f      	b.n	8007432 <_dtoa_r+0xa42>
 80074f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007558 <_dtoa_r+0xb68>
 80074f6:	e007      	b.n	8007508 <_dtoa_r+0xb18>
 80074f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800755c <_dtoa_r+0xb6c>
 80074fe:	b11b      	cbz	r3, 8007508 <_dtoa_r+0xb18>
 8007500:	f10b 0308 	add.w	r3, fp, #8
 8007504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	4658      	mov	r0, fp
 800750a:	b017      	add	sp, #92	; 0x5c
 800750c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007510:	9b06      	ldr	r3, [sp, #24]
 8007512:	2b01      	cmp	r3, #1
 8007514:	f77f ae35 	ble.w	8007182 <_dtoa_r+0x792>
 8007518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751a:	9307      	str	r3, [sp, #28]
 800751c:	e649      	b.n	80071b2 <_dtoa_r+0x7c2>
 800751e:	9b02      	ldr	r3, [sp, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	dc03      	bgt.n	800752c <_dtoa_r+0xb3c>
 8007524:	9b06      	ldr	r3, [sp, #24]
 8007526:	2b02      	cmp	r3, #2
 8007528:	f73f aecc 	bgt.w	80072c4 <_dtoa_r+0x8d4>
 800752c:	465d      	mov	r5, fp
 800752e:	4639      	mov	r1, r7
 8007530:	9804      	ldr	r0, [sp, #16]
 8007532:	f7ff f9ce 	bl	80068d2 <quorem>
 8007536:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800753a:	f805 8b01 	strb.w	r8, [r5], #1
 800753e:	9a02      	ldr	r2, [sp, #8]
 8007540:	eba5 030b 	sub.w	r3, r5, fp
 8007544:	429a      	cmp	r2, r3
 8007546:	ddb0      	ble.n	80074aa <_dtoa_r+0xaba>
 8007548:	2300      	movs	r3, #0
 800754a:	220a      	movs	r2, #10
 800754c:	9904      	ldr	r1, [sp, #16]
 800754e:	4620      	mov	r0, r4
 8007550:	f000 f872 	bl	8007638 <__multadd>
 8007554:	9004      	str	r0, [sp, #16]
 8007556:	e7ea      	b.n	800752e <_dtoa_r+0xb3e>
 8007558:	08008a14 	.word	0x08008a14
 800755c:	08008a16 	.word	0x08008a16

08007560 <_localeconv_r>:
 8007560:	4b04      	ldr	r3, [pc, #16]	; (8007574 <_localeconv_r+0x14>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6a18      	ldr	r0, [r3, #32]
 8007566:	4b04      	ldr	r3, [pc, #16]	; (8007578 <_localeconv_r+0x18>)
 8007568:	2800      	cmp	r0, #0
 800756a:	bf08      	it	eq
 800756c:	4618      	moveq	r0, r3
 800756e:	30f0      	adds	r0, #240	; 0xf0
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000018 	.word	0x20000018
 8007578:	2000007c 	.word	0x2000007c

0800757c <malloc>:
 800757c:	4b02      	ldr	r3, [pc, #8]	; (8007588 <malloc+0xc>)
 800757e:	4601      	mov	r1, r0
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	f000 baf7 	b.w	8007b74 <_malloc_r>
 8007586:	bf00      	nop
 8007588:	20000018 	.word	0x20000018

0800758c <memcpy>:
 800758c:	b510      	push	{r4, lr}
 800758e:	1e43      	subs	r3, r0, #1
 8007590:	440a      	add	r2, r1
 8007592:	4291      	cmp	r1, r2
 8007594:	d100      	bne.n	8007598 <memcpy+0xc>
 8007596:	bd10      	pop	{r4, pc}
 8007598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800759c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075a0:	e7f7      	b.n	8007592 <memcpy+0x6>

080075a2 <_Balloc>:
 80075a2:	b570      	push	{r4, r5, r6, lr}
 80075a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075a6:	4604      	mov	r4, r0
 80075a8:	460e      	mov	r6, r1
 80075aa:	b93d      	cbnz	r5, 80075bc <_Balloc+0x1a>
 80075ac:	2010      	movs	r0, #16
 80075ae:	f7ff ffe5 	bl	800757c <malloc>
 80075b2:	6260      	str	r0, [r4, #36]	; 0x24
 80075b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075b8:	6005      	str	r5, [r0, #0]
 80075ba:	60c5      	str	r5, [r0, #12]
 80075bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80075be:	68eb      	ldr	r3, [r5, #12]
 80075c0:	b183      	cbz	r3, 80075e4 <_Balloc+0x42>
 80075c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80075ca:	b9b8      	cbnz	r0, 80075fc <_Balloc+0x5a>
 80075cc:	2101      	movs	r1, #1
 80075ce:	fa01 f506 	lsl.w	r5, r1, r6
 80075d2:	1d6a      	adds	r2, r5, #5
 80075d4:	0092      	lsls	r2, r2, #2
 80075d6:	4620      	mov	r0, r4
 80075d8:	f000 fabe 	bl	8007b58 <_calloc_r>
 80075dc:	b160      	cbz	r0, 80075f8 <_Balloc+0x56>
 80075de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80075e2:	e00e      	b.n	8007602 <_Balloc+0x60>
 80075e4:	2221      	movs	r2, #33	; 0x21
 80075e6:	2104      	movs	r1, #4
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 fab5 	bl	8007b58 <_calloc_r>
 80075ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f0:	60e8      	str	r0, [r5, #12]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e4      	bne.n	80075c2 <_Balloc+0x20>
 80075f8:	2000      	movs	r0, #0
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	6802      	ldr	r2, [r0, #0]
 80075fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007602:	2300      	movs	r3, #0
 8007604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007608:	e7f7      	b.n	80075fa <_Balloc+0x58>

0800760a <_Bfree>:
 800760a:	b570      	push	{r4, r5, r6, lr}
 800760c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800760e:	4606      	mov	r6, r0
 8007610:	460d      	mov	r5, r1
 8007612:	b93c      	cbnz	r4, 8007624 <_Bfree+0x1a>
 8007614:	2010      	movs	r0, #16
 8007616:	f7ff ffb1 	bl	800757c <malloc>
 800761a:	6270      	str	r0, [r6, #36]	; 0x24
 800761c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007620:	6004      	str	r4, [r0, #0]
 8007622:	60c4      	str	r4, [r0, #12]
 8007624:	b13d      	cbz	r5, 8007636 <_Bfree+0x2c>
 8007626:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007628:	686a      	ldr	r2, [r5, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007630:	6029      	str	r1, [r5, #0]
 8007632:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007636:	bd70      	pop	{r4, r5, r6, pc}

08007638 <__multadd>:
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	690d      	ldr	r5, [r1, #16]
 800763e:	461f      	mov	r7, r3
 8007640:	4606      	mov	r6, r0
 8007642:	460c      	mov	r4, r1
 8007644:	f101 0c14 	add.w	ip, r1, #20
 8007648:	2300      	movs	r3, #0
 800764a:	f8dc 0000 	ldr.w	r0, [ip]
 800764e:	b281      	uxth	r1, r0
 8007650:	fb02 7101 	mla	r1, r2, r1, r7
 8007654:	0c0f      	lsrs	r7, r1, #16
 8007656:	0c00      	lsrs	r0, r0, #16
 8007658:	fb02 7000 	mla	r0, r2, r0, r7
 800765c:	b289      	uxth	r1, r1
 800765e:	3301      	adds	r3, #1
 8007660:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007664:	429d      	cmp	r5, r3
 8007666:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800766a:	f84c 1b04 	str.w	r1, [ip], #4
 800766e:	dcec      	bgt.n	800764a <__multadd+0x12>
 8007670:	b1d7      	cbz	r7, 80076a8 <__multadd+0x70>
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	42ab      	cmp	r3, r5
 8007676:	dc12      	bgt.n	800769e <__multadd+0x66>
 8007678:	6861      	ldr	r1, [r4, #4]
 800767a:	4630      	mov	r0, r6
 800767c:	3101      	adds	r1, #1
 800767e:	f7ff ff90 	bl	80075a2 <_Balloc>
 8007682:	6922      	ldr	r2, [r4, #16]
 8007684:	3202      	adds	r2, #2
 8007686:	f104 010c 	add.w	r1, r4, #12
 800768a:	4680      	mov	r8, r0
 800768c:	0092      	lsls	r2, r2, #2
 800768e:	300c      	adds	r0, #12
 8007690:	f7ff ff7c 	bl	800758c <memcpy>
 8007694:	4621      	mov	r1, r4
 8007696:	4630      	mov	r0, r6
 8007698:	f7ff ffb7 	bl	800760a <_Bfree>
 800769c:	4644      	mov	r4, r8
 800769e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076a2:	3501      	adds	r5, #1
 80076a4:	615f      	str	r7, [r3, #20]
 80076a6:	6125      	str	r5, [r4, #16]
 80076a8:	4620      	mov	r0, r4
 80076aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076ae <__hi0bits>:
 80076ae:	0c02      	lsrs	r2, r0, #16
 80076b0:	0412      	lsls	r2, r2, #16
 80076b2:	4603      	mov	r3, r0
 80076b4:	b9b2      	cbnz	r2, 80076e4 <__hi0bits+0x36>
 80076b6:	0403      	lsls	r3, r0, #16
 80076b8:	2010      	movs	r0, #16
 80076ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076be:	bf04      	itt	eq
 80076c0:	021b      	lsleq	r3, r3, #8
 80076c2:	3008      	addeq	r0, #8
 80076c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076c8:	bf04      	itt	eq
 80076ca:	011b      	lsleq	r3, r3, #4
 80076cc:	3004      	addeq	r0, #4
 80076ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076d2:	bf04      	itt	eq
 80076d4:	009b      	lsleq	r3, r3, #2
 80076d6:	3002      	addeq	r0, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	db06      	blt.n	80076ea <__hi0bits+0x3c>
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	d503      	bpl.n	80076e8 <__hi0bits+0x3a>
 80076e0:	3001      	adds	r0, #1
 80076e2:	4770      	bx	lr
 80076e4:	2000      	movs	r0, #0
 80076e6:	e7e8      	b.n	80076ba <__hi0bits+0xc>
 80076e8:	2020      	movs	r0, #32
 80076ea:	4770      	bx	lr

080076ec <__lo0bits>:
 80076ec:	6803      	ldr	r3, [r0, #0]
 80076ee:	f013 0207 	ands.w	r2, r3, #7
 80076f2:	4601      	mov	r1, r0
 80076f4:	d00b      	beq.n	800770e <__lo0bits+0x22>
 80076f6:	07da      	lsls	r2, r3, #31
 80076f8:	d423      	bmi.n	8007742 <__lo0bits+0x56>
 80076fa:	0798      	lsls	r0, r3, #30
 80076fc:	bf49      	itett	mi
 80076fe:	085b      	lsrmi	r3, r3, #1
 8007700:	089b      	lsrpl	r3, r3, #2
 8007702:	2001      	movmi	r0, #1
 8007704:	600b      	strmi	r3, [r1, #0]
 8007706:	bf5c      	itt	pl
 8007708:	600b      	strpl	r3, [r1, #0]
 800770a:	2002      	movpl	r0, #2
 800770c:	4770      	bx	lr
 800770e:	b298      	uxth	r0, r3
 8007710:	b9a8      	cbnz	r0, 800773e <__lo0bits+0x52>
 8007712:	0c1b      	lsrs	r3, r3, #16
 8007714:	2010      	movs	r0, #16
 8007716:	f013 0fff 	tst.w	r3, #255	; 0xff
 800771a:	bf04      	itt	eq
 800771c:	0a1b      	lsreq	r3, r3, #8
 800771e:	3008      	addeq	r0, #8
 8007720:	071a      	lsls	r2, r3, #28
 8007722:	bf04      	itt	eq
 8007724:	091b      	lsreq	r3, r3, #4
 8007726:	3004      	addeq	r0, #4
 8007728:	079a      	lsls	r2, r3, #30
 800772a:	bf04      	itt	eq
 800772c:	089b      	lsreq	r3, r3, #2
 800772e:	3002      	addeq	r0, #2
 8007730:	07da      	lsls	r2, r3, #31
 8007732:	d402      	bmi.n	800773a <__lo0bits+0x4e>
 8007734:	085b      	lsrs	r3, r3, #1
 8007736:	d006      	beq.n	8007746 <__lo0bits+0x5a>
 8007738:	3001      	adds	r0, #1
 800773a:	600b      	str	r3, [r1, #0]
 800773c:	4770      	bx	lr
 800773e:	4610      	mov	r0, r2
 8007740:	e7e9      	b.n	8007716 <__lo0bits+0x2a>
 8007742:	2000      	movs	r0, #0
 8007744:	4770      	bx	lr
 8007746:	2020      	movs	r0, #32
 8007748:	4770      	bx	lr

0800774a <__i2b>:
 800774a:	b510      	push	{r4, lr}
 800774c:	460c      	mov	r4, r1
 800774e:	2101      	movs	r1, #1
 8007750:	f7ff ff27 	bl	80075a2 <_Balloc>
 8007754:	2201      	movs	r2, #1
 8007756:	6144      	str	r4, [r0, #20]
 8007758:	6102      	str	r2, [r0, #16]
 800775a:	bd10      	pop	{r4, pc}

0800775c <__multiply>:
 800775c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	4614      	mov	r4, r2
 8007762:	690a      	ldr	r2, [r1, #16]
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	429a      	cmp	r2, r3
 8007768:	bfb8      	it	lt
 800776a:	460b      	movlt	r3, r1
 800776c:	4688      	mov	r8, r1
 800776e:	bfbc      	itt	lt
 8007770:	46a0      	movlt	r8, r4
 8007772:	461c      	movlt	r4, r3
 8007774:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007778:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800777c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007780:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007784:	eb07 0609 	add.w	r6, r7, r9
 8007788:	42b3      	cmp	r3, r6
 800778a:	bfb8      	it	lt
 800778c:	3101      	addlt	r1, #1
 800778e:	f7ff ff08 	bl	80075a2 <_Balloc>
 8007792:	f100 0514 	add.w	r5, r0, #20
 8007796:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800779a:	462b      	mov	r3, r5
 800779c:	2200      	movs	r2, #0
 800779e:	4573      	cmp	r3, lr
 80077a0:	d316      	bcc.n	80077d0 <__multiply+0x74>
 80077a2:	f104 0214 	add.w	r2, r4, #20
 80077a6:	f108 0114 	add.w	r1, r8, #20
 80077aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80077ae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	9b00      	ldr	r3, [sp, #0]
 80077b6:	9201      	str	r2, [sp, #4]
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d80c      	bhi.n	80077d6 <__multiply+0x7a>
 80077bc:	2e00      	cmp	r6, #0
 80077be:	dd03      	ble.n	80077c8 <__multiply+0x6c>
 80077c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d05d      	beq.n	8007884 <__multiply+0x128>
 80077c8:	6106      	str	r6, [r0, #16]
 80077ca:	b003      	add	sp, #12
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	f843 2b04 	str.w	r2, [r3], #4
 80077d4:	e7e3      	b.n	800779e <__multiply+0x42>
 80077d6:	f8b2 b000 	ldrh.w	fp, [r2]
 80077da:	f1bb 0f00 	cmp.w	fp, #0
 80077de:	d023      	beq.n	8007828 <__multiply+0xcc>
 80077e0:	4689      	mov	r9, r1
 80077e2:	46ac      	mov	ip, r5
 80077e4:	f04f 0800 	mov.w	r8, #0
 80077e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80077ec:	f8dc a000 	ldr.w	sl, [ip]
 80077f0:	b2a3      	uxth	r3, r4
 80077f2:	fa1f fa8a 	uxth.w	sl, sl
 80077f6:	fb0b a303 	mla	r3, fp, r3, sl
 80077fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80077fe:	f8dc 4000 	ldr.w	r4, [ip]
 8007802:	4443      	add	r3, r8
 8007804:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007808:	fb0b 840a 	mla	r4, fp, sl, r8
 800780c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007810:	46e2      	mov	sl, ip
 8007812:	b29b      	uxth	r3, r3
 8007814:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007818:	454f      	cmp	r7, r9
 800781a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800781e:	f84a 3b04 	str.w	r3, [sl], #4
 8007822:	d82b      	bhi.n	800787c <__multiply+0x120>
 8007824:	f8cc 8004 	str.w	r8, [ip, #4]
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800782e:	3204      	adds	r2, #4
 8007830:	f1ba 0f00 	cmp.w	sl, #0
 8007834:	d020      	beq.n	8007878 <__multiply+0x11c>
 8007836:	682b      	ldr	r3, [r5, #0]
 8007838:	4689      	mov	r9, r1
 800783a:	46a8      	mov	r8, r5
 800783c:	f04f 0b00 	mov.w	fp, #0
 8007840:	f8b9 c000 	ldrh.w	ip, [r9]
 8007844:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007848:	fb0a 440c 	mla	r4, sl, ip, r4
 800784c:	445c      	add	r4, fp
 800784e:	46c4      	mov	ip, r8
 8007850:	b29b      	uxth	r3, r3
 8007852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007856:	f84c 3b04 	str.w	r3, [ip], #4
 800785a:	f859 3b04 	ldr.w	r3, [r9], #4
 800785e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007862:	0c1b      	lsrs	r3, r3, #16
 8007864:	fb0a b303 	mla	r3, sl, r3, fp
 8007868:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800786c:	454f      	cmp	r7, r9
 800786e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007872:	d805      	bhi.n	8007880 <__multiply+0x124>
 8007874:	f8c8 3004 	str.w	r3, [r8, #4]
 8007878:	3504      	adds	r5, #4
 800787a:	e79b      	b.n	80077b4 <__multiply+0x58>
 800787c:	46d4      	mov	ip, sl
 800787e:	e7b3      	b.n	80077e8 <__multiply+0x8c>
 8007880:	46e0      	mov	r8, ip
 8007882:	e7dd      	b.n	8007840 <__multiply+0xe4>
 8007884:	3e01      	subs	r6, #1
 8007886:	e799      	b.n	80077bc <__multiply+0x60>

08007888 <__pow5mult>:
 8007888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800788c:	4615      	mov	r5, r2
 800788e:	f012 0203 	ands.w	r2, r2, #3
 8007892:	4606      	mov	r6, r0
 8007894:	460f      	mov	r7, r1
 8007896:	d007      	beq.n	80078a8 <__pow5mult+0x20>
 8007898:	3a01      	subs	r2, #1
 800789a:	4c21      	ldr	r4, [pc, #132]	; (8007920 <__pow5mult+0x98>)
 800789c:	2300      	movs	r3, #0
 800789e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078a2:	f7ff fec9 	bl	8007638 <__multadd>
 80078a6:	4607      	mov	r7, r0
 80078a8:	10ad      	asrs	r5, r5, #2
 80078aa:	d035      	beq.n	8007918 <__pow5mult+0x90>
 80078ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078ae:	b93c      	cbnz	r4, 80078c0 <__pow5mult+0x38>
 80078b0:	2010      	movs	r0, #16
 80078b2:	f7ff fe63 	bl	800757c <malloc>
 80078b6:	6270      	str	r0, [r6, #36]	; 0x24
 80078b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078bc:	6004      	str	r4, [r0, #0]
 80078be:	60c4      	str	r4, [r0, #12]
 80078c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078c8:	b94c      	cbnz	r4, 80078de <__pow5mult+0x56>
 80078ca:	f240 2171 	movw	r1, #625	; 0x271
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff ff3b 	bl	800774a <__i2b>
 80078d4:	2300      	movs	r3, #0
 80078d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80078da:	4604      	mov	r4, r0
 80078dc:	6003      	str	r3, [r0, #0]
 80078de:	f04f 0800 	mov.w	r8, #0
 80078e2:	07eb      	lsls	r3, r5, #31
 80078e4:	d50a      	bpl.n	80078fc <__pow5mult+0x74>
 80078e6:	4639      	mov	r1, r7
 80078e8:	4622      	mov	r2, r4
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff ff36 	bl	800775c <__multiply>
 80078f0:	4639      	mov	r1, r7
 80078f2:	4681      	mov	r9, r0
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7ff fe88 	bl	800760a <_Bfree>
 80078fa:	464f      	mov	r7, r9
 80078fc:	106d      	asrs	r5, r5, #1
 80078fe:	d00b      	beq.n	8007918 <__pow5mult+0x90>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	b938      	cbnz	r0, 8007914 <__pow5mult+0x8c>
 8007904:	4622      	mov	r2, r4
 8007906:	4621      	mov	r1, r4
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff ff27 	bl	800775c <__multiply>
 800790e:	6020      	str	r0, [r4, #0]
 8007910:	f8c0 8000 	str.w	r8, [r0]
 8007914:	4604      	mov	r4, r0
 8007916:	e7e4      	b.n	80078e2 <__pow5mult+0x5a>
 8007918:	4638      	mov	r0, r7
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791e:	bf00      	nop
 8007920:	08008b18 	.word	0x08008b18

08007924 <__lshift>:
 8007924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	460c      	mov	r4, r1
 800792a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	6849      	ldr	r1, [r1, #4]
 8007932:	eb0a 0903 	add.w	r9, sl, r3
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	4607      	mov	r7, r0
 800793a:	4616      	mov	r6, r2
 800793c:	f109 0501 	add.w	r5, r9, #1
 8007940:	42ab      	cmp	r3, r5
 8007942:	db32      	blt.n	80079aa <__lshift+0x86>
 8007944:	4638      	mov	r0, r7
 8007946:	f7ff fe2c 	bl	80075a2 <_Balloc>
 800794a:	2300      	movs	r3, #0
 800794c:	4680      	mov	r8, r0
 800794e:	f100 0114 	add.w	r1, r0, #20
 8007952:	461a      	mov	r2, r3
 8007954:	4553      	cmp	r3, sl
 8007956:	db2b      	blt.n	80079b0 <__lshift+0x8c>
 8007958:	6920      	ldr	r0, [r4, #16]
 800795a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800795e:	f104 0314 	add.w	r3, r4, #20
 8007962:	f016 021f 	ands.w	r2, r6, #31
 8007966:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800796a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800796e:	d025      	beq.n	80079bc <__lshift+0x98>
 8007970:	f1c2 0e20 	rsb	lr, r2, #32
 8007974:	2000      	movs	r0, #0
 8007976:	681e      	ldr	r6, [r3, #0]
 8007978:	468a      	mov	sl, r1
 800797a:	4096      	lsls	r6, r2
 800797c:	4330      	orrs	r0, r6
 800797e:	f84a 0b04 	str.w	r0, [sl], #4
 8007982:	f853 0b04 	ldr.w	r0, [r3], #4
 8007986:	459c      	cmp	ip, r3
 8007988:	fa20 f00e 	lsr.w	r0, r0, lr
 800798c:	d814      	bhi.n	80079b8 <__lshift+0x94>
 800798e:	6048      	str	r0, [r1, #4]
 8007990:	b108      	cbz	r0, 8007996 <__lshift+0x72>
 8007992:	f109 0502 	add.w	r5, r9, #2
 8007996:	3d01      	subs	r5, #1
 8007998:	4638      	mov	r0, r7
 800799a:	f8c8 5010 	str.w	r5, [r8, #16]
 800799e:	4621      	mov	r1, r4
 80079a0:	f7ff fe33 	bl	800760a <_Bfree>
 80079a4:	4640      	mov	r0, r8
 80079a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079aa:	3101      	adds	r1, #1
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	e7c7      	b.n	8007940 <__lshift+0x1c>
 80079b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80079b4:	3301      	adds	r3, #1
 80079b6:	e7cd      	b.n	8007954 <__lshift+0x30>
 80079b8:	4651      	mov	r1, sl
 80079ba:	e7dc      	b.n	8007976 <__lshift+0x52>
 80079bc:	3904      	subs	r1, #4
 80079be:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80079c6:	459c      	cmp	ip, r3
 80079c8:	d8f9      	bhi.n	80079be <__lshift+0x9a>
 80079ca:	e7e4      	b.n	8007996 <__lshift+0x72>

080079cc <__mcmp>:
 80079cc:	6903      	ldr	r3, [r0, #16]
 80079ce:	690a      	ldr	r2, [r1, #16]
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	b530      	push	{r4, r5, lr}
 80079d4:	d10c      	bne.n	80079f0 <__mcmp+0x24>
 80079d6:	0092      	lsls	r2, r2, #2
 80079d8:	3014      	adds	r0, #20
 80079da:	3114      	adds	r1, #20
 80079dc:	1884      	adds	r4, r0, r2
 80079de:	4411      	add	r1, r2
 80079e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079e8:	4295      	cmp	r5, r2
 80079ea:	d003      	beq.n	80079f4 <__mcmp+0x28>
 80079ec:	d305      	bcc.n	80079fa <__mcmp+0x2e>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4618      	mov	r0, r3
 80079f2:	bd30      	pop	{r4, r5, pc}
 80079f4:	42a0      	cmp	r0, r4
 80079f6:	d3f3      	bcc.n	80079e0 <__mcmp+0x14>
 80079f8:	e7fa      	b.n	80079f0 <__mcmp+0x24>
 80079fa:	f04f 33ff 	mov.w	r3, #4294967295
 80079fe:	e7f7      	b.n	80079f0 <__mcmp+0x24>

08007a00 <__mdiff>:
 8007a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a04:	460d      	mov	r5, r1
 8007a06:	4607      	mov	r7, r0
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	f7ff ffdd 	bl	80079cc <__mcmp>
 8007a12:	1e06      	subs	r6, r0, #0
 8007a14:	d108      	bne.n	8007a28 <__mdiff+0x28>
 8007a16:	4631      	mov	r1, r6
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f7ff fdc2 	bl	80075a2 <_Balloc>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a28:	bfa4      	itt	ge
 8007a2a:	4623      	movge	r3, r4
 8007a2c:	462c      	movge	r4, r5
 8007a2e:	4638      	mov	r0, r7
 8007a30:	6861      	ldr	r1, [r4, #4]
 8007a32:	bfa6      	itte	ge
 8007a34:	461d      	movge	r5, r3
 8007a36:	2600      	movge	r6, #0
 8007a38:	2601      	movlt	r6, #1
 8007a3a:	f7ff fdb2 	bl	80075a2 <_Balloc>
 8007a3e:	692b      	ldr	r3, [r5, #16]
 8007a40:	60c6      	str	r6, [r0, #12]
 8007a42:	6926      	ldr	r6, [r4, #16]
 8007a44:	f105 0914 	add.w	r9, r5, #20
 8007a48:	f104 0214 	add.w	r2, r4, #20
 8007a4c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007a50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007a54:	f100 0514 	add.w	r5, r0, #20
 8007a58:	f04f 0e00 	mov.w	lr, #0
 8007a5c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007a60:	f859 4b04 	ldr.w	r4, [r9], #4
 8007a64:	fa1e f18a 	uxtah	r1, lr, sl
 8007a68:	b2a3      	uxth	r3, r4
 8007a6a:	1ac9      	subs	r1, r1, r3
 8007a6c:	0c23      	lsrs	r3, r4, #16
 8007a6e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007a72:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a76:	b289      	uxth	r1, r1
 8007a78:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007a7c:	45c8      	cmp	r8, r9
 8007a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a82:	4694      	mov	ip, r2
 8007a84:	f845 3b04 	str.w	r3, [r5], #4
 8007a88:	d8e8      	bhi.n	8007a5c <__mdiff+0x5c>
 8007a8a:	45bc      	cmp	ip, r7
 8007a8c:	d304      	bcc.n	8007a98 <__mdiff+0x98>
 8007a8e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007a92:	b183      	cbz	r3, 8007ab6 <__mdiff+0xb6>
 8007a94:	6106      	str	r6, [r0, #16]
 8007a96:	e7c5      	b.n	8007a24 <__mdiff+0x24>
 8007a98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a9c:	fa1e f381 	uxtah	r3, lr, r1
 8007aa0:	141a      	asrs	r2, r3, #16
 8007aa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007ab0:	f845 3b04 	str.w	r3, [r5], #4
 8007ab4:	e7e9      	b.n	8007a8a <__mdiff+0x8a>
 8007ab6:	3e01      	subs	r6, #1
 8007ab8:	e7e9      	b.n	8007a8e <__mdiff+0x8e>

08007aba <__d2b>:
 8007aba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007abe:	460e      	mov	r6, r1
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	ec59 8b10 	vmov	r8, r9, d0
 8007ac6:	4615      	mov	r5, r2
 8007ac8:	f7ff fd6b 	bl	80075a2 <_Balloc>
 8007acc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ad6:	bb34      	cbnz	r4, 8007b26 <__d2b+0x6c>
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	f1b8 0300 	subs.w	r3, r8, #0
 8007ade:	d027      	beq.n	8007b30 <__d2b+0x76>
 8007ae0:	a802      	add	r0, sp, #8
 8007ae2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007ae6:	f7ff fe01 	bl	80076ec <__lo0bits>
 8007aea:	9900      	ldr	r1, [sp, #0]
 8007aec:	b1f0      	cbz	r0, 8007b2c <__d2b+0x72>
 8007aee:	9a01      	ldr	r2, [sp, #4]
 8007af0:	f1c0 0320 	rsb	r3, r0, #32
 8007af4:	fa02 f303 	lsl.w	r3, r2, r3
 8007af8:	430b      	orrs	r3, r1
 8007afa:	40c2      	lsrs	r2, r0
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	9201      	str	r2, [sp, #4]
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2102      	movne	r1, #2
 8007b0a:	2101      	moveq	r1, #1
 8007b0c:	6139      	str	r1, [r7, #16]
 8007b0e:	b1c4      	cbz	r4, 8007b42 <__d2b+0x88>
 8007b10:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007b14:	4404      	add	r4, r0
 8007b16:	6034      	str	r4, [r6, #0]
 8007b18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b1c:	6028      	str	r0, [r5, #0]
 8007b1e:	4638      	mov	r0, r7
 8007b20:	b003      	add	sp, #12
 8007b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b2a:	e7d5      	b.n	8007ad8 <__d2b+0x1e>
 8007b2c:	6179      	str	r1, [r7, #20]
 8007b2e:	e7e7      	b.n	8007b00 <__d2b+0x46>
 8007b30:	a801      	add	r0, sp, #4
 8007b32:	f7ff fddb 	bl	80076ec <__lo0bits>
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	6139      	str	r1, [r7, #16]
 8007b3e:	3020      	adds	r0, #32
 8007b40:	e7e5      	b.n	8007b0e <__d2b+0x54>
 8007b42:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007b46:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b4a:	6030      	str	r0, [r6, #0]
 8007b4c:	6918      	ldr	r0, [r3, #16]
 8007b4e:	f7ff fdae 	bl	80076ae <__hi0bits>
 8007b52:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007b56:	e7e1      	b.n	8007b1c <__d2b+0x62>

08007b58 <_calloc_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	fb02 f401 	mul.w	r4, r2, r1
 8007b5e:	4621      	mov	r1, r4
 8007b60:	f000 f808 	bl	8007b74 <_malloc_r>
 8007b64:	4605      	mov	r5, r0
 8007b66:	b118      	cbz	r0, 8007b70 <_calloc_r+0x18>
 8007b68:	4622      	mov	r2, r4
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	f7fe fb60 	bl	8006230 <memset>
 8007b70:	4628      	mov	r0, r5
 8007b72:	bd38      	pop	{r3, r4, r5, pc}

08007b74 <_malloc_r>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	1ccd      	adds	r5, r1, #3
 8007b78:	f025 0503 	bic.w	r5, r5, #3
 8007b7c:	3508      	adds	r5, #8
 8007b7e:	2d0c      	cmp	r5, #12
 8007b80:	bf38      	it	cc
 8007b82:	250c      	movcc	r5, #12
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	4606      	mov	r6, r0
 8007b88:	db01      	blt.n	8007b8e <_malloc_r+0x1a>
 8007b8a:	42a9      	cmp	r1, r5
 8007b8c:	d903      	bls.n	8007b96 <_malloc_r+0x22>
 8007b8e:	230c      	movs	r3, #12
 8007b90:	6033      	str	r3, [r6, #0]
 8007b92:	2000      	movs	r0, #0
 8007b94:	bd70      	pop	{r4, r5, r6, pc}
 8007b96:	f000 f869 	bl	8007c6c <__malloc_lock>
 8007b9a:	4a21      	ldr	r2, [pc, #132]	; (8007c20 <_malloc_r+0xac>)
 8007b9c:	6814      	ldr	r4, [r2, #0]
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	b991      	cbnz	r1, 8007bc8 <_malloc_r+0x54>
 8007ba2:	4c20      	ldr	r4, [pc, #128]	; (8007c24 <_malloc_r+0xb0>)
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	b91b      	cbnz	r3, 8007bb0 <_malloc_r+0x3c>
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 f83d 	bl	8007c28 <_sbrk_r>
 8007bae:	6020      	str	r0, [r4, #0]
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f000 f838 	bl	8007c28 <_sbrk_r>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d124      	bne.n	8007c06 <_malloc_r+0x92>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	6033      	str	r3, [r6, #0]
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f000 f854 	bl	8007c6e <__malloc_unlock>
 8007bc6:	e7e4      	b.n	8007b92 <_malloc_r+0x1e>
 8007bc8:	680b      	ldr	r3, [r1, #0]
 8007bca:	1b5b      	subs	r3, r3, r5
 8007bcc:	d418      	bmi.n	8007c00 <_malloc_r+0x8c>
 8007bce:	2b0b      	cmp	r3, #11
 8007bd0:	d90f      	bls.n	8007bf2 <_malloc_r+0x7e>
 8007bd2:	600b      	str	r3, [r1, #0]
 8007bd4:	50cd      	str	r5, [r1, r3]
 8007bd6:	18cc      	adds	r4, r1, r3
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f000 f848 	bl	8007c6e <__malloc_unlock>
 8007bde:	f104 000b 	add.w	r0, r4, #11
 8007be2:	1d23      	adds	r3, r4, #4
 8007be4:	f020 0007 	bic.w	r0, r0, #7
 8007be8:	1ac3      	subs	r3, r0, r3
 8007bea:	d0d3      	beq.n	8007b94 <_malloc_r+0x20>
 8007bec:	425a      	negs	r2, r3
 8007bee:	50e2      	str	r2, [r4, r3]
 8007bf0:	e7d0      	b.n	8007b94 <_malloc_r+0x20>
 8007bf2:	428c      	cmp	r4, r1
 8007bf4:	684b      	ldr	r3, [r1, #4]
 8007bf6:	bf16      	itet	ne
 8007bf8:	6063      	strne	r3, [r4, #4]
 8007bfa:	6013      	streq	r3, [r2, #0]
 8007bfc:	460c      	movne	r4, r1
 8007bfe:	e7eb      	b.n	8007bd8 <_malloc_r+0x64>
 8007c00:	460c      	mov	r4, r1
 8007c02:	6849      	ldr	r1, [r1, #4]
 8007c04:	e7cc      	b.n	8007ba0 <_malloc_r+0x2c>
 8007c06:	1cc4      	adds	r4, r0, #3
 8007c08:	f024 0403 	bic.w	r4, r4, #3
 8007c0c:	42a0      	cmp	r0, r4
 8007c0e:	d005      	beq.n	8007c1c <_malloc_r+0xa8>
 8007c10:	1a21      	subs	r1, r4, r0
 8007c12:	4630      	mov	r0, r6
 8007c14:	f000 f808 	bl	8007c28 <_sbrk_r>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d0cf      	beq.n	8007bbc <_malloc_r+0x48>
 8007c1c:	6025      	str	r5, [r4, #0]
 8007c1e:	e7db      	b.n	8007bd8 <_malloc_r+0x64>
 8007c20:	20000230 	.word	0x20000230
 8007c24:	20000234 	.word	0x20000234

08007c28 <_sbrk_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4c06      	ldr	r4, [pc, #24]	; (8007c44 <_sbrk_r+0x1c>)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4605      	mov	r5, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	f7fa f96c 	bl	8001f10 <_sbrk>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_sbrk_r+0x1a>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_sbrk_r+0x1a>
 8007c40:	602b      	str	r3, [r5, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20013dac 	.word	0x20013dac

08007c48 <__ascii_mbtowc>:
 8007c48:	b082      	sub	sp, #8
 8007c4a:	b901      	cbnz	r1, 8007c4e <__ascii_mbtowc+0x6>
 8007c4c:	a901      	add	r1, sp, #4
 8007c4e:	b142      	cbz	r2, 8007c62 <__ascii_mbtowc+0x1a>
 8007c50:	b14b      	cbz	r3, 8007c66 <__ascii_mbtowc+0x1e>
 8007c52:	7813      	ldrb	r3, [r2, #0]
 8007c54:	600b      	str	r3, [r1, #0]
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	1c10      	adds	r0, r2, #0
 8007c5a:	bf18      	it	ne
 8007c5c:	2001      	movne	r0, #1
 8007c5e:	b002      	add	sp, #8
 8007c60:	4770      	bx	lr
 8007c62:	4610      	mov	r0, r2
 8007c64:	e7fb      	b.n	8007c5e <__ascii_mbtowc+0x16>
 8007c66:	f06f 0001 	mvn.w	r0, #1
 8007c6a:	e7f8      	b.n	8007c5e <__ascii_mbtowc+0x16>

08007c6c <__malloc_lock>:
 8007c6c:	4770      	bx	lr

08007c6e <__malloc_unlock>:
 8007c6e:	4770      	bx	lr

08007c70 <__ascii_wctomb>:
 8007c70:	b149      	cbz	r1, 8007c86 <__ascii_wctomb+0x16>
 8007c72:	2aff      	cmp	r2, #255	; 0xff
 8007c74:	bf85      	ittet	hi
 8007c76:	238a      	movhi	r3, #138	; 0x8a
 8007c78:	6003      	strhi	r3, [r0, #0]
 8007c7a:	700a      	strbls	r2, [r1, #0]
 8007c7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c80:	bf98      	it	ls
 8007c82:	2001      	movls	r0, #1
 8007c84:	4770      	bx	lr
 8007c86:	4608      	mov	r0, r1
 8007c88:	4770      	bx	lr
	...

08007c8c <cosf>:
 8007c8c:	ee10 3a10 	vmov	r3, s0
 8007c90:	b507      	push	{r0, r1, r2, lr}
 8007c92:	4a1c      	ldr	r2, [pc, #112]	; (8007d04 <cosf+0x78>)
 8007c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	dc04      	bgt.n	8007ca6 <cosf+0x1a>
 8007c9c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8007d08 <cosf+0x7c>
 8007ca0:	f000 faac 	bl	80081fc <__kernel_cosf>
 8007ca4:	e004      	b.n	8007cb0 <cosf+0x24>
 8007ca6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007caa:	db04      	blt.n	8007cb6 <cosf+0x2a>
 8007cac:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007cb0:	b003      	add	sp, #12
 8007cb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cb6:	4668      	mov	r0, sp
 8007cb8:	f000 f974 	bl	8007fa4 <__ieee754_rem_pio2f>
 8007cbc:	f000 0003 	and.w	r0, r0, #3
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	d007      	beq.n	8007cd4 <cosf+0x48>
 8007cc4:	2802      	cmp	r0, #2
 8007cc6:	d00e      	beq.n	8007ce6 <cosf+0x5a>
 8007cc8:	b9a0      	cbnz	r0, 8007cf4 <cosf+0x68>
 8007cca:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cce:	ed9d 0a00 	vldr	s0, [sp]
 8007cd2:	e7e5      	b.n	8007ca0 <cosf+0x14>
 8007cd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cd8:	ed9d 0a00 	vldr	s0, [sp]
 8007cdc:	f000 fd6e 	bl	80087bc <__kernel_sinf>
 8007ce0:	eeb1 0a40 	vneg.f32	s0, s0
 8007ce4:	e7e4      	b.n	8007cb0 <cosf+0x24>
 8007ce6:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cea:	ed9d 0a00 	vldr	s0, [sp]
 8007cee:	f000 fa85 	bl	80081fc <__kernel_cosf>
 8007cf2:	e7f5      	b.n	8007ce0 <cosf+0x54>
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	eddd 0a01 	vldr	s1, [sp, #4]
 8007cfa:	ed9d 0a00 	vldr	s0, [sp]
 8007cfe:	f000 fd5d 	bl	80087bc <__kernel_sinf>
 8007d02:	e7d5      	b.n	8007cb0 <cosf+0x24>
 8007d04:	3f490fd8 	.word	0x3f490fd8
 8007d08:	00000000 	.word	0x00000000

08007d0c <sinf>:
 8007d0c:	ee10 3a10 	vmov	r3, s0
 8007d10:	b507      	push	{r0, r1, r2, lr}
 8007d12:	4a1d      	ldr	r2, [pc, #116]	; (8007d88 <sinf+0x7c>)
 8007d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	dc05      	bgt.n	8007d28 <sinf+0x1c>
 8007d1c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007d8c <sinf+0x80>
 8007d20:	2000      	movs	r0, #0
 8007d22:	f000 fd4b 	bl	80087bc <__kernel_sinf>
 8007d26:	e004      	b.n	8007d32 <sinf+0x26>
 8007d28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007d2c:	db04      	blt.n	8007d38 <sinf+0x2c>
 8007d2e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007d32:	b003      	add	sp, #12
 8007d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d38:	4668      	mov	r0, sp
 8007d3a:	f000 f933 	bl	8007fa4 <__ieee754_rem_pio2f>
 8007d3e:	f000 0003 	and.w	r0, r0, #3
 8007d42:	2801      	cmp	r0, #1
 8007d44:	d008      	beq.n	8007d58 <sinf+0x4c>
 8007d46:	2802      	cmp	r0, #2
 8007d48:	d00d      	beq.n	8007d66 <sinf+0x5a>
 8007d4a:	b9b0      	cbnz	r0, 8007d7a <sinf+0x6e>
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d52:	ed9d 0a00 	vldr	s0, [sp]
 8007d56:	e7e4      	b.n	8007d22 <sinf+0x16>
 8007d58:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d5c:	ed9d 0a00 	vldr	s0, [sp]
 8007d60:	f000 fa4c 	bl	80081fc <__kernel_cosf>
 8007d64:	e7e5      	b.n	8007d32 <sinf+0x26>
 8007d66:	2001      	movs	r0, #1
 8007d68:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d6c:	ed9d 0a00 	vldr	s0, [sp]
 8007d70:	f000 fd24 	bl	80087bc <__kernel_sinf>
 8007d74:	eeb1 0a40 	vneg.f32	s0, s0
 8007d78:	e7db      	b.n	8007d32 <sinf+0x26>
 8007d7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d7e:	ed9d 0a00 	vldr	s0, [sp]
 8007d82:	f000 fa3b 	bl	80081fc <__kernel_cosf>
 8007d86:	e7f5      	b.n	8007d74 <sinf+0x68>
 8007d88:	3f490fd8 	.word	0x3f490fd8
 8007d8c:	00000000 	.word	0x00000000

08007d90 <sqrt>:
 8007d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d94:	ed2d 8b02 	vpush	{d8}
 8007d98:	b08b      	sub	sp, #44	; 0x2c
 8007d9a:	ec55 4b10 	vmov	r4, r5, d0
 8007d9e:	f000 f851 	bl	8007e44 <__ieee754_sqrt>
 8007da2:	4b26      	ldr	r3, [pc, #152]	; (8007e3c <sqrt+0xac>)
 8007da4:	eeb0 8a40 	vmov.f32	s16, s0
 8007da8:	eef0 8a60 	vmov.f32	s17, s1
 8007dac:	f993 6000 	ldrsb.w	r6, [r3]
 8007db0:	1c73      	adds	r3, r6, #1
 8007db2:	d02a      	beq.n	8007e0a <sqrt+0x7a>
 8007db4:	4622      	mov	r2, r4
 8007db6:	462b      	mov	r3, r5
 8007db8:	4620      	mov	r0, r4
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f7f8 fe82 	bl	8000ac4 <__aeabi_dcmpun>
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	bb10      	cbnz	r0, 8007e0a <sqrt+0x7a>
 8007dc4:	f04f 0800 	mov.w	r8, #0
 8007dc8:	f04f 0900 	mov.w	r9, #0
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	f7f8 fe4e 	bl	8000a74 <__aeabi_dcmplt>
 8007dd8:	b1b8      	cbz	r0, 8007e0a <sqrt+0x7a>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <sqrt+0xb0>)
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	9708      	str	r7, [sp, #32]
 8007de4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007de8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007dec:	b9b6      	cbnz	r6, 8007e1c <sqrt+0x8c>
 8007dee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007df2:	4668      	mov	r0, sp
 8007df4:	f000 fd2a 	bl	800884c <matherr>
 8007df8:	b1d0      	cbz	r0, 8007e30 <sqrt+0xa0>
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	b11b      	cbz	r3, 8007e06 <sqrt+0x76>
 8007dfe:	f7fe f9ed 	bl	80061dc <__errno>
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	6003      	str	r3, [r0, #0]
 8007e06:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e0e:	eef0 0a68 	vmov.f32	s1, s17
 8007e12:	b00b      	add	sp, #44	; 0x2c
 8007e14:	ecbd 8b02 	vpop	{d8}
 8007e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	464b      	mov	r3, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f7f8 fcde 	bl	80007e4 <__aeabi_ddiv>
 8007e28:	2e02      	cmp	r6, #2
 8007e2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e2e:	d1e0      	bne.n	8007df2 <sqrt+0x62>
 8007e30:	f7fe f9d4 	bl	80061dc <__errno>
 8007e34:	2321      	movs	r3, #33	; 0x21
 8007e36:	6003      	str	r3, [r0, #0]
 8007e38:	e7df      	b.n	8007dfa <sqrt+0x6a>
 8007e3a:	bf00      	nop
 8007e3c:	200001e8 	.word	0x200001e8
 8007e40:	08008c2f 	.word	0x08008c2f

08007e44 <__ieee754_sqrt>:
 8007e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e48:	4955      	ldr	r1, [pc, #340]	; (8007fa0 <__ieee754_sqrt+0x15c>)
 8007e4a:	ec55 4b10 	vmov	r4, r5, d0
 8007e4e:	43a9      	bics	r1, r5
 8007e50:	462b      	mov	r3, r5
 8007e52:	462a      	mov	r2, r5
 8007e54:	d112      	bne.n	8007e7c <__ieee754_sqrt+0x38>
 8007e56:	ee10 2a10 	vmov	r2, s0
 8007e5a:	ee10 0a10 	vmov	r0, s0
 8007e5e:	4629      	mov	r1, r5
 8007e60:	f7f8 fb96 	bl	8000590 <__aeabi_dmul>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7f8 f9da 	bl	8000224 <__adddf3>
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	ec45 4b10 	vmov	d0, r4, r5
 8007e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7c:	2d00      	cmp	r5, #0
 8007e7e:	ee10 0a10 	vmov	r0, s0
 8007e82:	4621      	mov	r1, r4
 8007e84:	dc0f      	bgt.n	8007ea6 <__ieee754_sqrt+0x62>
 8007e86:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e8a:	4330      	orrs	r0, r6
 8007e8c:	d0f2      	beq.n	8007e74 <__ieee754_sqrt+0x30>
 8007e8e:	b155      	cbz	r5, 8007ea6 <__ieee754_sqrt+0x62>
 8007e90:	ee10 2a10 	vmov	r2, s0
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 f9c2 	bl	8000220 <__aeabi_dsub>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	f7f8 fca0 	bl	80007e4 <__aeabi_ddiv>
 8007ea4:	e7e4      	b.n	8007e70 <__ieee754_sqrt+0x2c>
 8007ea6:	151b      	asrs	r3, r3, #20
 8007ea8:	d073      	beq.n	8007f92 <__ieee754_sqrt+0x14e>
 8007eaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007eae:	07dd      	lsls	r5, r3, #31
 8007eb0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007eb4:	bf48      	it	mi
 8007eb6:	0fc8      	lsrmi	r0, r1, #31
 8007eb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ebc:	bf44      	itt	mi
 8007ebe:	0049      	lslmi	r1, r1, #1
 8007ec0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	1058      	asrs	r0, r3, #1
 8007ec8:	0fcb      	lsrs	r3, r1, #31
 8007eca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007ece:	0049      	lsls	r1, r1, #1
 8007ed0:	2316      	movs	r3, #22
 8007ed2:	462c      	mov	r4, r5
 8007ed4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007ed8:	19a7      	adds	r7, r4, r6
 8007eda:	4297      	cmp	r7, r2
 8007edc:	bfde      	ittt	le
 8007ede:	19bc      	addle	r4, r7, r6
 8007ee0:	1bd2      	suble	r2, r2, r7
 8007ee2:	19ad      	addle	r5, r5, r6
 8007ee4:	0fcf      	lsrs	r7, r1, #31
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007eec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007ef0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007ef4:	d1f0      	bne.n	8007ed8 <__ieee754_sqrt+0x94>
 8007ef6:	f04f 0c20 	mov.w	ip, #32
 8007efa:	469e      	mov	lr, r3
 8007efc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007f00:	42a2      	cmp	r2, r4
 8007f02:	eb06 070e 	add.w	r7, r6, lr
 8007f06:	dc02      	bgt.n	8007f0e <__ieee754_sqrt+0xca>
 8007f08:	d112      	bne.n	8007f30 <__ieee754_sqrt+0xec>
 8007f0a:	428f      	cmp	r7, r1
 8007f0c:	d810      	bhi.n	8007f30 <__ieee754_sqrt+0xec>
 8007f0e:	2f00      	cmp	r7, #0
 8007f10:	eb07 0e06 	add.w	lr, r7, r6
 8007f14:	da42      	bge.n	8007f9c <__ieee754_sqrt+0x158>
 8007f16:	f1be 0f00 	cmp.w	lr, #0
 8007f1a:	db3f      	blt.n	8007f9c <__ieee754_sqrt+0x158>
 8007f1c:	f104 0801 	add.w	r8, r4, #1
 8007f20:	1b12      	subs	r2, r2, r4
 8007f22:	428f      	cmp	r7, r1
 8007f24:	bf88      	it	hi
 8007f26:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007f2a:	1bc9      	subs	r1, r1, r7
 8007f2c:	4433      	add	r3, r6
 8007f2e:	4644      	mov	r4, r8
 8007f30:	0052      	lsls	r2, r2, #1
 8007f32:	f1bc 0c01 	subs.w	ip, ip, #1
 8007f36:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007f3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007f3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f42:	d1dd      	bne.n	8007f00 <__ieee754_sqrt+0xbc>
 8007f44:	430a      	orrs	r2, r1
 8007f46:	d006      	beq.n	8007f56 <__ieee754_sqrt+0x112>
 8007f48:	1c5c      	adds	r4, r3, #1
 8007f4a:	bf13      	iteet	ne
 8007f4c:	3301      	addne	r3, #1
 8007f4e:	3501      	addeq	r5, #1
 8007f50:	4663      	moveq	r3, ip
 8007f52:	f023 0301 	bicne.w	r3, r3, #1
 8007f56:	106a      	asrs	r2, r5, #1
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	07e9      	lsls	r1, r5, #31
 8007f5c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007f60:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007f64:	bf48      	it	mi
 8007f66:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007f6a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007f6e:	461c      	mov	r4, r3
 8007f70:	e780      	b.n	8007e74 <__ieee754_sqrt+0x30>
 8007f72:	0aca      	lsrs	r2, r1, #11
 8007f74:	3815      	subs	r0, #21
 8007f76:	0549      	lsls	r1, r1, #21
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	d0fa      	beq.n	8007f72 <__ieee754_sqrt+0x12e>
 8007f7c:	02d6      	lsls	r6, r2, #11
 8007f7e:	d50a      	bpl.n	8007f96 <__ieee754_sqrt+0x152>
 8007f80:	f1c3 0420 	rsb	r4, r3, #32
 8007f84:	fa21 f404 	lsr.w	r4, r1, r4
 8007f88:	1e5d      	subs	r5, r3, #1
 8007f8a:	4099      	lsls	r1, r3
 8007f8c:	4322      	orrs	r2, r4
 8007f8e:	1b43      	subs	r3, r0, r5
 8007f90:	e78b      	b.n	8007eaa <__ieee754_sqrt+0x66>
 8007f92:	4618      	mov	r0, r3
 8007f94:	e7f0      	b.n	8007f78 <__ieee754_sqrt+0x134>
 8007f96:	0052      	lsls	r2, r2, #1
 8007f98:	3301      	adds	r3, #1
 8007f9a:	e7ef      	b.n	8007f7c <__ieee754_sqrt+0x138>
 8007f9c:	46a0      	mov	r8, r4
 8007f9e:	e7bf      	b.n	8007f20 <__ieee754_sqrt+0xdc>
 8007fa0:	7ff00000 	.word	0x7ff00000

08007fa4 <__ieee754_rem_pio2f>:
 8007fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa6:	ee10 6a10 	vmov	r6, s0
 8007faa:	4b86      	ldr	r3, [pc, #536]	; (80081c4 <__ieee754_rem_pio2f+0x220>)
 8007fac:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007fb0:	429c      	cmp	r4, r3
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	dc05      	bgt.n	8007fc4 <__ieee754_rem_pio2f+0x20>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	ed85 0a00 	vstr	s0, [r5]
 8007fbe:	6043      	str	r3, [r0, #4]
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e020      	b.n	8008006 <__ieee754_rem_pio2f+0x62>
 8007fc4:	4b80      	ldr	r3, [pc, #512]	; (80081c8 <__ieee754_rem_pio2f+0x224>)
 8007fc6:	429c      	cmp	r4, r3
 8007fc8:	dc38      	bgt.n	800803c <__ieee754_rem_pio2f+0x98>
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	f024 040f 	bic.w	r4, r4, #15
 8007fd0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80081cc <__ieee754_rem_pio2f+0x228>
 8007fd4:	4b7e      	ldr	r3, [pc, #504]	; (80081d0 <__ieee754_rem_pio2f+0x22c>)
 8007fd6:	dd18      	ble.n	800800a <__ieee754_rem_pio2f+0x66>
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007fde:	bf09      	itett	eq
 8007fe0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80081d4 <__ieee754_rem_pio2f+0x230>
 8007fe4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80081d8 <__ieee754_rem_pio2f+0x234>
 8007fe8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007fec:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80081dc <__ieee754_rem_pio2f+0x238>
 8007ff0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007ff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ff8:	edc0 6a00 	vstr	s13, [r0]
 8007ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008000:	edc0 7a01 	vstr	s15, [r0, #4]
 8008004:	2001      	movs	r0, #1
 8008006:	b007      	add	sp, #28
 8008008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800a:	429c      	cmp	r4, r3
 800800c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008010:	bf09      	itett	eq
 8008012:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80081d4 <__ieee754_rem_pio2f+0x230>
 8008016:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80081d8 <__ieee754_rem_pio2f+0x234>
 800801a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800801e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80081dc <__ieee754_rem_pio2f+0x238>
 8008022:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008026:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800802a:	edc0 6a00 	vstr	s13, [r0]
 800802e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008032:	edc0 7a01 	vstr	s15, [r0, #4]
 8008036:	f04f 30ff 	mov.w	r0, #4294967295
 800803a:	e7e4      	b.n	8008006 <__ieee754_rem_pio2f+0x62>
 800803c:	4b68      	ldr	r3, [pc, #416]	; (80081e0 <__ieee754_rem_pio2f+0x23c>)
 800803e:	429c      	cmp	r4, r3
 8008040:	dc71      	bgt.n	8008126 <__ieee754_rem_pio2f+0x182>
 8008042:	f000 fc05 	bl	8008850 <fabsf>
 8008046:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80081e4 <__ieee754_rem_pio2f+0x240>
 800804a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800804e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008056:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800805a:	ee17 0a90 	vmov	r0, s15
 800805e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80081cc <__ieee754_rem_pio2f+0x228>
 8008062:	eeb1 7a46 	vneg.f32	s14, s12
 8008066:	eea7 0a27 	vfma.f32	s0, s14, s15
 800806a:	281f      	cmp	r0, #31
 800806c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80081d8 <__ieee754_rem_pio2f+0x234>
 8008070:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008074:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008078:	ee16 3a90 	vmov	r3, s13
 800807c:	dc1c      	bgt.n	80080b8 <__ieee754_rem_pio2f+0x114>
 800807e:	1e47      	subs	r7, r0, #1
 8008080:	4959      	ldr	r1, [pc, #356]	; (80081e8 <__ieee754_rem_pio2f+0x244>)
 8008082:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008086:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800808a:	428a      	cmp	r2, r1
 800808c:	d014      	beq.n	80080b8 <__ieee754_rem_pio2f+0x114>
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	ed95 7a00 	vldr	s14, [r5]
 8008094:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008098:	2e00      	cmp	r6, #0
 800809a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800809e:	ed85 0a01 	vstr	s0, [r5, #4]
 80080a2:	dab0      	bge.n	8008006 <__ieee754_rem_pio2f+0x62>
 80080a4:	eeb1 7a47 	vneg.f32	s14, s14
 80080a8:	eeb1 0a40 	vneg.f32	s0, s0
 80080ac:	ed85 7a00 	vstr	s14, [r5]
 80080b0:	ed85 0a01 	vstr	s0, [r5, #4]
 80080b4:	4240      	negs	r0, r0
 80080b6:	e7a6      	b.n	8008006 <__ieee754_rem_pio2f+0x62>
 80080b8:	15e4      	asrs	r4, r4, #23
 80080ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080be:	1aa2      	subs	r2, r4, r2
 80080c0:	2a08      	cmp	r2, #8
 80080c2:	dde4      	ble.n	800808e <__ieee754_rem_pio2f+0xea>
 80080c4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80081d4 <__ieee754_rem_pio2f+0x230>
 80080c8:	eef0 6a40 	vmov.f32	s13, s0
 80080cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80080d0:	ee30 0a66 	vsub.f32	s0, s0, s13
 80080d4:	eea7 0a27 	vfma.f32	s0, s14, s15
 80080d8:	eddf 7a40 	vldr	s15, [pc, #256]	; 80081dc <__ieee754_rem_pio2f+0x238>
 80080dc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80080e0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80080e4:	eef0 7a40 	vmov.f32	s15, s0
 80080e8:	ee15 3a90 	vmov	r3, s11
 80080ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080f0:	1aa4      	subs	r4, r4, r2
 80080f2:	2c19      	cmp	r4, #25
 80080f4:	dc04      	bgt.n	8008100 <__ieee754_rem_pio2f+0x15c>
 80080f6:	edc5 5a00 	vstr	s11, [r5]
 80080fa:	eeb0 0a66 	vmov.f32	s0, s13
 80080fe:	e7c7      	b.n	8008090 <__ieee754_rem_pio2f+0xec>
 8008100:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80081ec <__ieee754_rem_pio2f+0x248>
 8008104:	eeb0 0a66 	vmov.f32	s0, s13
 8008108:	eea7 0a25 	vfma.f32	s0, s14, s11
 800810c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008110:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008114:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80081f0 <__ieee754_rem_pio2f+0x24c>
 8008118:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800811c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008120:	ed85 7a00 	vstr	s14, [r5]
 8008124:	e7b4      	b.n	8008090 <__ieee754_rem_pio2f+0xec>
 8008126:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800812a:	db06      	blt.n	800813a <__ieee754_rem_pio2f+0x196>
 800812c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008130:	edc0 7a01 	vstr	s15, [r0, #4]
 8008134:	edc0 7a00 	vstr	s15, [r0]
 8008138:	e742      	b.n	8007fc0 <__ieee754_rem_pio2f+0x1c>
 800813a:	15e2      	asrs	r2, r4, #23
 800813c:	3a86      	subs	r2, #134	; 0x86
 800813e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800814a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80081f4 <__ieee754_rem_pio2f+0x250>
 800814e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008156:	ed8d 7a03 	vstr	s14, [sp, #12]
 800815a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800815e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008162:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800816a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800816e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008172:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817a:	edcd 7a05 	vstr	s15, [sp, #20]
 800817e:	d11e      	bne.n	80081be <__ieee754_rem_pio2f+0x21a>
 8008180:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008188:	bf0c      	ite	eq
 800818a:	2301      	moveq	r3, #1
 800818c:	2302      	movne	r3, #2
 800818e:	491a      	ldr	r1, [pc, #104]	; (80081f8 <__ieee754_rem_pio2f+0x254>)
 8008190:	9101      	str	r1, [sp, #4]
 8008192:	2102      	movs	r1, #2
 8008194:	9100      	str	r1, [sp, #0]
 8008196:	a803      	add	r0, sp, #12
 8008198:	4629      	mov	r1, r5
 800819a:	f000 f88d 	bl	80082b8 <__kernel_rem_pio2f>
 800819e:	2e00      	cmp	r6, #0
 80081a0:	f6bf af31 	bge.w	8008006 <__ieee754_rem_pio2f+0x62>
 80081a4:	edd5 7a00 	vldr	s15, [r5]
 80081a8:	eef1 7a67 	vneg.f32	s15, s15
 80081ac:	edc5 7a00 	vstr	s15, [r5]
 80081b0:	edd5 7a01 	vldr	s15, [r5, #4]
 80081b4:	eef1 7a67 	vneg.f32	s15, s15
 80081b8:	edc5 7a01 	vstr	s15, [r5, #4]
 80081bc:	e77a      	b.n	80080b4 <__ieee754_rem_pio2f+0x110>
 80081be:	2303      	movs	r3, #3
 80081c0:	e7e5      	b.n	800818e <__ieee754_rem_pio2f+0x1ea>
 80081c2:	bf00      	nop
 80081c4:	3f490fd8 	.word	0x3f490fd8
 80081c8:	4016cbe3 	.word	0x4016cbe3
 80081cc:	3fc90f80 	.word	0x3fc90f80
 80081d0:	3fc90fd0 	.word	0x3fc90fd0
 80081d4:	37354400 	.word	0x37354400
 80081d8:	37354443 	.word	0x37354443
 80081dc:	2e85a308 	.word	0x2e85a308
 80081e0:	43490f80 	.word	0x43490f80
 80081e4:	3f22f984 	.word	0x3f22f984
 80081e8:	08008c34 	.word	0x08008c34
 80081ec:	2e85a300 	.word	0x2e85a300
 80081f0:	248d3132 	.word	0x248d3132
 80081f4:	43800000 	.word	0x43800000
 80081f8:	08008cb4 	.word	0x08008cb4

080081fc <__kernel_cosf>:
 80081fc:	ee10 3a10 	vmov	r3, s0
 8008200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008204:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800820c:	da05      	bge.n	800821a <__kernel_cosf+0x1e>
 800820e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008212:	ee17 2a90 	vmov	r2, s15
 8008216:	2a00      	cmp	r2, #0
 8008218:	d03b      	beq.n	8008292 <__kernel_cosf+0x96>
 800821a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800821e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008222:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008298 <__kernel_cosf+0x9c>
 8008226:	4a1d      	ldr	r2, [pc, #116]	; (800829c <__kernel_cosf+0xa0>)
 8008228:	ee66 7a07 	vmul.f32	s15, s12, s14
 800822c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80082a0 <__kernel_cosf+0xa4>
 8008230:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008234:	4293      	cmp	r3, r2
 8008236:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80082a4 <__kernel_cosf+0xa8>
 800823a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800823e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80082a8 <__kernel_cosf+0xac>
 8008242:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008246:	eddf 5a19 	vldr	s11, [pc, #100]	; 80082ac <__kernel_cosf+0xb0>
 800824a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800824e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80082b0 <__kernel_cosf+0xb4>
 8008252:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008256:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800825a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800825e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8008262:	dc04      	bgt.n	800826e <__kernel_cosf+0x72>
 8008264:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8008268:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800826c:	4770      	bx	lr
 800826e:	4a11      	ldr	r2, [pc, #68]	; (80082b4 <__kernel_cosf+0xb8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	bfda      	itte	le
 8008274:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008278:	ee07 3a10 	vmovle	s14, r3
 800827c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008284:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008288:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800828c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008290:	4770      	bx	lr
 8008292:	eeb0 0a66 	vmov.f32	s0, s13
 8008296:	4770      	bx	lr
 8008298:	ad47d74e 	.word	0xad47d74e
 800829c:	3e999999 	.word	0x3e999999
 80082a0:	310f74f6 	.word	0x310f74f6
 80082a4:	b493f27c 	.word	0xb493f27c
 80082a8:	37d00d01 	.word	0x37d00d01
 80082ac:	bab60b61 	.word	0xbab60b61
 80082b0:	3d2aaaab 	.word	0x3d2aaaab
 80082b4:	3f480000 	.word	0x3f480000

080082b8 <__kernel_rem_pio2f>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	ed2d 8b04 	vpush	{d8-d9}
 80082c0:	b0d7      	sub	sp, #348	; 0x15c
 80082c2:	469b      	mov	fp, r3
 80082c4:	460e      	mov	r6, r1
 80082c6:	4bbe      	ldr	r3, [pc, #760]	; (80085c0 <__kernel_rem_pio2f+0x308>)
 80082c8:	9964      	ldr	r1, [sp, #400]	; 0x190
 80082ca:	9002      	str	r0, [sp, #8]
 80082cc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80082d0:	9865      	ldr	r0, [sp, #404]	; 0x194
 80082d2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80085d0 <__kernel_rem_pio2f+0x318>
 80082d6:	1ed1      	subs	r1, r2, #3
 80082d8:	2308      	movs	r3, #8
 80082da:	fb91 f1f3 	sdiv	r1, r1, r3
 80082de:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80082e2:	f10b 3aff 	add.w	sl, fp, #4294967295
 80082e6:	1c4c      	adds	r4, r1, #1
 80082e8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80082ec:	eba1 050a 	sub.w	r5, r1, sl
 80082f0:	aa1a      	add	r2, sp, #104	; 0x68
 80082f2:	eb09 070a 	add.w	r7, r9, sl
 80082f6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80082fa:	4696      	mov	lr, r2
 80082fc:	2300      	movs	r3, #0
 80082fe:	42bb      	cmp	r3, r7
 8008300:	dd0f      	ble.n	8008322 <__kernel_rem_pio2f+0x6a>
 8008302:	af42      	add	r7, sp, #264	; 0x108
 8008304:	2200      	movs	r2, #0
 8008306:	454a      	cmp	r2, r9
 8008308:	dc27      	bgt.n	800835a <__kernel_rem_pio2f+0xa2>
 800830a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800830e:	eb0b 0302 	add.w	r3, fp, r2
 8008312:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008316:	9d02      	ldr	r5, [sp, #8]
 8008318:	eddf 7aad 	vldr	s15, [pc, #692]	; 80085d0 <__kernel_rem_pio2f+0x318>
 800831c:	f04f 0c00 	mov.w	ip, #0
 8008320:	e015      	b.n	800834e <__kernel_rem_pio2f+0x96>
 8008322:	42dd      	cmn	r5, r3
 8008324:	bf5d      	ittte	pl
 8008326:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800832a:	ee07 2a90 	vmovpl	s15, r2
 800832e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008332:	eef0 7a47 	vmovmi.f32	s15, s14
 8008336:	ecee 7a01 	vstmia	lr!, {s15}
 800833a:	3301      	adds	r3, #1
 800833c:	e7df      	b.n	80082fe <__kernel_rem_pio2f+0x46>
 800833e:	ecf5 6a01 	vldmia	r5!, {s13}
 8008342:	ed33 7a01 	vldmdb	r3!, {s14}
 8008346:	eee6 7a87 	vfma.f32	s15, s13, s14
 800834a:	f10c 0c01 	add.w	ip, ip, #1
 800834e:	45d4      	cmp	ip, sl
 8008350:	ddf5      	ble.n	800833e <__kernel_rem_pio2f+0x86>
 8008352:	ece7 7a01 	vstmia	r7!, {s15}
 8008356:	3201      	adds	r2, #1
 8008358:	e7d5      	b.n	8008306 <__kernel_rem_pio2f+0x4e>
 800835a:	ab06      	add	r3, sp, #24
 800835c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80085cc <__kernel_rem_pio2f+0x314>
 8008366:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80085c8 <__kernel_rem_pio2f+0x310>
 800836a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800836e:	9303      	str	r3, [sp, #12]
 8008370:	464d      	mov	r5, r9
 8008372:	ab56      	add	r3, sp, #344	; 0x158
 8008374:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008378:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800837c:	3f01      	subs	r7, #1
 800837e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008382:	00bf      	lsls	r7, r7, #2
 8008384:	ab56      	add	r3, sp, #344	; 0x158
 8008386:	19da      	adds	r2, r3, r7
 8008388:	3a4c      	subs	r2, #76	; 0x4c
 800838a:	2300      	movs	r3, #0
 800838c:	1ae9      	subs	r1, r5, r3
 800838e:	2900      	cmp	r1, #0
 8008390:	dc4c      	bgt.n	800842c <__kernel_rem_pio2f+0x174>
 8008392:	4620      	mov	r0, r4
 8008394:	f000 faa6 	bl	80088e4 <scalbnf>
 8008398:	eeb0 8a40 	vmov.f32	s16, s0
 800839c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80083a0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80083a4:	f000 fa5c 	bl	8008860 <floorf>
 80083a8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80083ac:	eea0 8a67 	vfms.f32	s16, s0, s15
 80083b0:	2c00      	cmp	r4, #0
 80083b2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80083b6:	edcd 7a01 	vstr	s15, [sp, #4]
 80083ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083be:	ee38 8a67 	vsub.f32	s16, s16, s15
 80083c2:	dd48      	ble.n	8008456 <__kernel_rem_pio2f+0x19e>
 80083c4:	1e69      	subs	r1, r5, #1
 80083c6:	ab06      	add	r3, sp, #24
 80083c8:	f1c4 0008 	rsb	r0, r4, #8
 80083cc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80083d0:	9a01      	ldr	r2, [sp, #4]
 80083d2:	fa4c f300 	asr.w	r3, ip, r0
 80083d6:	441a      	add	r2, r3
 80083d8:	4083      	lsls	r3, r0
 80083da:	9201      	str	r2, [sp, #4]
 80083dc:	ebac 0203 	sub.w	r2, ip, r3
 80083e0:	ab06      	add	r3, sp, #24
 80083e2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80083e6:	f1c4 0307 	rsb	r3, r4, #7
 80083ea:	fa42 f803 	asr.w	r8, r2, r3
 80083ee:	f1b8 0f00 	cmp.w	r8, #0
 80083f2:	dd41      	ble.n	8008478 <__kernel_rem_pio2f+0x1c0>
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	2000      	movs	r0, #0
 80083f8:	3301      	adds	r3, #1
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	4601      	mov	r1, r0
 80083fe:	4285      	cmp	r5, r0
 8008400:	dc6d      	bgt.n	80084de <__kernel_rem_pio2f+0x226>
 8008402:	2c00      	cmp	r4, #0
 8008404:	dd04      	ble.n	8008410 <__kernel_rem_pio2f+0x158>
 8008406:	2c01      	cmp	r4, #1
 8008408:	d07e      	beq.n	8008508 <__kernel_rem_pio2f+0x250>
 800840a:	2c02      	cmp	r4, #2
 800840c:	f000 8086 	beq.w	800851c <__kernel_rem_pio2f+0x264>
 8008410:	f1b8 0f02 	cmp.w	r8, #2
 8008414:	d130      	bne.n	8008478 <__kernel_rem_pio2f+0x1c0>
 8008416:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800841a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800841e:	b359      	cbz	r1, 8008478 <__kernel_rem_pio2f+0x1c0>
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fa5f 	bl	80088e4 <scalbnf>
 8008426:	ee38 8a40 	vsub.f32	s16, s16, s0
 800842a:	e025      	b.n	8008478 <__kernel_rem_pio2f+0x1c0>
 800842c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008430:	a806      	add	r0, sp, #24
 8008432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800843a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800843e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008442:	ee10 1a10 	vmov	r1, s0
 8008446:	ed32 0a01 	vldmdb	r2!, {s0}
 800844a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800844e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008452:	3301      	adds	r3, #1
 8008454:	e79a      	b.n	800838c <__kernel_rem_pio2f+0xd4>
 8008456:	d106      	bne.n	8008466 <__kernel_rem_pio2f+0x1ae>
 8008458:	1e6b      	subs	r3, r5, #1
 800845a:	aa06      	add	r2, sp, #24
 800845c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008460:	ea4f 2822 	mov.w	r8, r2, asr #8
 8008464:	e7c3      	b.n	80083ee <__kernel_rem_pio2f+0x136>
 8008466:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800846a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800846e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008472:	da31      	bge.n	80084d8 <__kernel_rem_pio2f+0x220>
 8008474:	f04f 0800 	mov.w	r8, #0
 8008478:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800847c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008480:	f040 80a8 	bne.w	80085d4 <__kernel_rem_pio2f+0x31c>
 8008484:	1e6b      	subs	r3, r5, #1
 8008486:	4618      	mov	r0, r3
 8008488:	2200      	movs	r2, #0
 800848a:	4548      	cmp	r0, r9
 800848c:	da4d      	bge.n	800852a <__kernel_rem_pio2f+0x272>
 800848e:	2a00      	cmp	r2, #0
 8008490:	f000 8087 	beq.w	80085a2 <__kernel_rem_pio2f+0x2ea>
 8008494:	aa06      	add	r2, sp, #24
 8008496:	3c08      	subs	r4, #8
 8008498:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800849c:	2900      	cmp	r1, #0
 800849e:	f000 808d 	beq.w	80085bc <__kernel_rem_pio2f+0x304>
 80084a2:	4620      	mov	r0, r4
 80084a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80084a8:	9302      	str	r3, [sp, #8]
 80084aa:	f000 fa1b 	bl	80088e4 <scalbnf>
 80084ae:	9b02      	ldr	r3, [sp, #8]
 80084b0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80085cc <__kernel_rem_pio2f+0x314>
 80084b4:	0099      	lsls	r1, r3, #2
 80084b6:	aa42      	add	r2, sp, #264	; 0x108
 80084b8:	1850      	adds	r0, r2, r1
 80084ba:	1d05      	adds	r5, r0, #4
 80084bc:	461c      	mov	r4, r3
 80084be:	2c00      	cmp	r4, #0
 80084c0:	f280 80b8 	bge.w	8008634 <__kernel_rem_pio2f+0x37c>
 80084c4:	2500      	movs	r5, #0
 80084c6:	1b5c      	subs	r4, r3, r5
 80084c8:	2c00      	cmp	r4, #0
 80084ca:	f2c0 80d8 	blt.w	800867e <__kernel_rem_pio2f+0x3c6>
 80084ce:	4f3d      	ldr	r7, [pc, #244]	; (80085c4 <__kernel_rem_pio2f+0x30c>)
 80084d0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80085d0 <__kernel_rem_pio2f+0x318>
 80084d4:	2400      	movs	r4, #0
 80084d6:	e0c6      	b.n	8008666 <__kernel_rem_pio2f+0x3ae>
 80084d8:	f04f 0802 	mov.w	r8, #2
 80084dc:	e78a      	b.n	80083f4 <__kernel_rem_pio2f+0x13c>
 80084de:	ab06      	add	r3, sp, #24
 80084e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80084e4:	b949      	cbnz	r1, 80084fa <__kernel_rem_pio2f+0x242>
 80084e6:	b12b      	cbz	r3, 80084f4 <__kernel_rem_pio2f+0x23c>
 80084e8:	aa06      	add	r2, sp, #24
 80084ea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80084ee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80084f2:	2301      	movs	r3, #1
 80084f4:	3001      	adds	r0, #1
 80084f6:	4619      	mov	r1, r3
 80084f8:	e781      	b.n	80083fe <__kernel_rem_pio2f+0x146>
 80084fa:	aa06      	add	r2, sp, #24
 80084fc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008500:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008504:	460b      	mov	r3, r1
 8008506:	e7f5      	b.n	80084f4 <__kernel_rem_pio2f+0x23c>
 8008508:	1e68      	subs	r0, r5, #1
 800850a:	ab06      	add	r3, sp, #24
 800850c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008514:	aa06      	add	r2, sp, #24
 8008516:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800851a:	e779      	b.n	8008410 <__kernel_rem_pio2f+0x158>
 800851c:	1e68      	subs	r0, r5, #1
 800851e:	ab06      	add	r3, sp, #24
 8008520:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008528:	e7f4      	b.n	8008514 <__kernel_rem_pio2f+0x25c>
 800852a:	a906      	add	r1, sp, #24
 800852c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008530:	3801      	subs	r0, #1
 8008532:	430a      	orrs	r2, r1
 8008534:	e7a9      	b.n	800848a <__kernel_rem_pio2f+0x1d2>
 8008536:	f10c 0c01 	add.w	ip, ip, #1
 800853a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800853e:	2a00      	cmp	r2, #0
 8008540:	d0f9      	beq.n	8008536 <__kernel_rem_pio2f+0x27e>
 8008542:	eb0b 0305 	add.w	r3, fp, r5
 8008546:	aa1a      	add	r2, sp, #104	; 0x68
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	1898      	adds	r0, r3, r2
 800854c:	3004      	adds	r0, #4
 800854e:	1c69      	adds	r1, r5, #1
 8008550:	3704      	adds	r7, #4
 8008552:	2200      	movs	r2, #0
 8008554:	4465      	add	r5, ip
 8008556:	9005      	str	r0, [sp, #20]
 8008558:	428d      	cmp	r5, r1
 800855a:	f6ff af0a 	blt.w	8008372 <__kernel_rem_pio2f+0xba>
 800855e:	a81a      	add	r0, sp, #104	; 0x68
 8008560:	eb02 0c03 	add.w	ip, r2, r3
 8008564:	4484      	add	ip, r0
 8008566:	9803      	ldr	r0, [sp, #12]
 8008568:	f8dd e008 	ldr.w	lr, [sp, #8]
 800856c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8008570:	9001      	str	r0, [sp, #4]
 8008572:	ee07 0a90 	vmov	s15, r0
 8008576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800857a:	9805      	ldr	r0, [sp, #20]
 800857c:	edcc 7a00 	vstr	s15, [ip]
 8008580:	eddf 7a13 	vldr	s15, [pc, #76]	; 80085d0 <__kernel_rem_pio2f+0x318>
 8008584:	eb00 0802 	add.w	r8, r0, r2
 8008588:	f04f 0c00 	mov.w	ip, #0
 800858c:	45d4      	cmp	ip, sl
 800858e:	dd0c      	ble.n	80085aa <__kernel_rem_pio2f+0x2f2>
 8008590:	eb02 0c07 	add.w	ip, r2, r7
 8008594:	a842      	add	r0, sp, #264	; 0x108
 8008596:	4484      	add	ip, r0
 8008598:	edcc 7a01 	vstr	s15, [ip, #4]
 800859c:	3101      	adds	r1, #1
 800859e:	3204      	adds	r2, #4
 80085a0:	e7da      	b.n	8008558 <__kernel_rem_pio2f+0x2a0>
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	f04f 0c01 	mov.w	ip, #1
 80085a8:	e7c7      	b.n	800853a <__kernel_rem_pio2f+0x282>
 80085aa:	ecfe 6a01 	vldmia	lr!, {s13}
 80085ae:	ed38 7a01 	vldmdb	r8!, {s14}
 80085b2:	f10c 0c01 	add.w	ip, ip, #1
 80085b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085ba:	e7e7      	b.n	800858c <__kernel_rem_pio2f+0x2d4>
 80085bc:	3b01      	subs	r3, #1
 80085be:	e769      	b.n	8008494 <__kernel_rem_pio2f+0x1dc>
 80085c0:	08008ff8 	.word	0x08008ff8
 80085c4:	08008fcc 	.word	0x08008fcc
 80085c8:	43800000 	.word	0x43800000
 80085cc:	3b800000 	.word	0x3b800000
 80085d0:	00000000 	.word	0x00000000
 80085d4:	4260      	negs	r0, r4
 80085d6:	eeb0 0a48 	vmov.f32	s0, s16
 80085da:	f000 f983 	bl	80088e4 <scalbnf>
 80085de:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80085c8 <__kernel_rem_pio2f+0x310>
 80085e2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80085e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ea:	db1a      	blt.n	8008622 <__kernel_rem_pio2f+0x36a>
 80085ec:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80085cc <__kernel_rem_pio2f+0x314>
 80085f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80085f4:	aa06      	add	r2, sp, #24
 80085f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085fa:	a906      	add	r1, sp, #24
 80085fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008600:	3408      	adds	r4, #8
 8008602:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800860a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800860e:	ee10 3a10 	vmov	r3, s0
 8008612:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008616:	1c6b      	adds	r3, r5, #1
 8008618:	ee17 2a90 	vmov	r2, s15
 800861c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008620:	e73f      	b.n	80084a2 <__kernel_rem_pio2f+0x1ea>
 8008622:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008626:	aa06      	add	r2, sp, #24
 8008628:	ee10 3a10 	vmov	r3, s0
 800862c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008630:	462b      	mov	r3, r5
 8008632:	e736      	b.n	80084a2 <__kernel_rem_pio2f+0x1ea>
 8008634:	aa06      	add	r2, sp, #24
 8008636:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800863a:	9202      	str	r2, [sp, #8]
 800863c:	ee07 2a90 	vmov	s15, r2
 8008640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008644:	3c01      	subs	r4, #1
 8008646:	ee67 7a80 	vmul.f32	s15, s15, s0
 800864a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800864e:	ed65 7a01 	vstmdb	r5!, {s15}
 8008652:	e734      	b.n	80084be <__kernel_rem_pio2f+0x206>
 8008654:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8008658:	ecf7 6a01 	vldmia	r7!, {s13}
 800865c:	ed9c 7a00 	vldr	s14, [ip]
 8008660:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008664:	3401      	adds	r4, #1
 8008666:	454c      	cmp	r4, r9
 8008668:	dc01      	bgt.n	800866e <__kernel_rem_pio2f+0x3b6>
 800866a:	42a5      	cmp	r5, r4
 800866c:	daf2      	bge.n	8008654 <__kernel_rem_pio2f+0x39c>
 800866e:	aa56      	add	r2, sp, #344	; 0x158
 8008670:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8008674:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8008678:	3501      	adds	r5, #1
 800867a:	3804      	subs	r0, #4
 800867c:	e723      	b.n	80084c6 <__kernel_rem_pio2f+0x20e>
 800867e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8008680:	2a03      	cmp	r2, #3
 8008682:	d84d      	bhi.n	8008720 <__kernel_rem_pio2f+0x468>
 8008684:	e8df f002 	tbb	[pc, r2]
 8008688:	021f1f3e 	.word	0x021f1f3e
 800868c:	aa56      	add	r2, sp, #344	; 0x158
 800868e:	4411      	add	r1, r2
 8008690:	399c      	subs	r1, #156	; 0x9c
 8008692:	4608      	mov	r0, r1
 8008694:	461c      	mov	r4, r3
 8008696:	2c00      	cmp	r4, #0
 8008698:	dc5f      	bgt.n	800875a <__kernel_rem_pio2f+0x4a2>
 800869a:	4608      	mov	r0, r1
 800869c:	461c      	mov	r4, r3
 800869e:	2c01      	cmp	r4, #1
 80086a0:	dc6b      	bgt.n	800877a <__kernel_rem_pio2f+0x4c2>
 80086a2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80085d0 <__kernel_rem_pio2f+0x318>
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	dc77      	bgt.n	800879a <__kernel_rem_pio2f+0x4e2>
 80086aa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80086ae:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80086b2:	f1b8 0f00 	cmp.w	r8, #0
 80086b6:	d176      	bne.n	80087a6 <__kernel_rem_pio2f+0x4ee>
 80086b8:	edc6 6a00 	vstr	s13, [r6]
 80086bc:	ed86 7a01 	vstr	s14, [r6, #4]
 80086c0:	edc6 7a02 	vstr	s15, [r6, #8]
 80086c4:	e02c      	b.n	8008720 <__kernel_rem_pio2f+0x468>
 80086c6:	aa56      	add	r2, sp, #344	; 0x158
 80086c8:	4411      	add	r1, r2
 80086ca:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80085d0 <__kernel_rem_pio2f+0x318>
 80086ce:	399c      	subs	r1, #156	; 0x9c
 80086d0:	4618      	mov	r0, r3
 80086d2:	2800      	cmp	r0, #0
 80086d4:	da32      	bge.n	800873c <__kernel_rem_pio2f+0x484>
 80086d6:	f1b8 0f00 	cmp.w	r8, #0
 80086da:	d035      	beq.n	8008748 <__kernel_rem_pio2f+0x490>
 80086dc:	eef1 7a47 	vneg.f32	s15, s14
 80086e0:	edc6 7a00 	vstr	s15, [r6]
 80086e4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80086e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80086ec:	a82f      	add	r0, sp, #188	; 0xbc
 80086ee:	2101      	movs	r1, #1
 80086f0:	428b      	cmp	r3, r1
 80086f2:	da2c      	bge.n	800874e <__kernel_rem_pio2f+0x496>
 80086f4:	f1b8 0f00 	cmp.w	r8, #0
 80086f8:	d001      	beq.n	80086fe <__kernel_rem_pio2f+0x446>
 80086fa:	eef1 7a67 	vneg.f32	s15, s15
 80086fe:	edc6 7a01 	vstr	s15, [r6, #4]
 8008702:	e00d      	b.n	8008720 <__kernel_rem_pio2f+0x468>
 8008704:	aa56      	add	r2, sp, #344	; 0x158
 8008706:	4411      	add	r1, r2
 8008708:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80085d0 <__kernel_rem_pio2f+0x318>
 800870c:	399c      	subs	r1, #156	; 0x9c
 800870e:	2b00      	cmp	r3, #0
 8008710:	da0e      	bge.n	8008730 <__kernel_rem_pio2f+0x478>
 8008712:	f1b8 0f00 	cmp.w	r8, #0
 8008716:	d001      	beq.n	800871c <__kernel_rem_pio2f+0x464>
 8008718:	eef1 7a67 	vneg.f32	s15, s15
 800871c:	edc6 7a00 	vstr	s15, [r6]
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	f003 0007 	and.w	r0, r3, #7
 8008726:	b057      	add	sp, #348	; 0x15c
 8008728:	ecbd 8b04 	vpop	{d8-d9}
 800872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008730:	ed31 7a01 	vldmdb	r1!, {s14}
 8008734:	3b01      	subs	r3, #1
 8008736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800873a:	e7e8      	b.n	800870e <__kernel_rem_pio2f+0x456>
 800873c:	ed71 7a01 	vldmdb	r1!, {s15}
 8008740:	3801      	subs	r0, #1
 8008742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008746:	e7c4      	b.n	80086d2 <__kernel_rem_pio2f+0x41a>
 8008748:	eef0 7a47 	vmov.f32	s15, s14
 800874c:	e7c8      	b.n	80086e0 <__kernel_rem_pio2f+0x428>
 800874e:	ecb0 7a01 	vldmia	r0!, {s14}
 8008752:	3101      	adds	r1, #1
 8008754:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008758:	e7ca      	b.n	80086f0 <__kernel_rem_pio2f+0x438>
 800875a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800875e:	ed70 6a01 	vldmdb	r0!, {s13}
 8008762:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008766:	3c01      	subs	r4, #1
 8008768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800876c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008774:	edc0 7a00 	vstr	s15, [r0]
 8008778:	e78d      	b.n	8008696 <__kernel_rem_pio2f+0x3de>
 800877a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800877e:	ed70 6a01 	vldmdb	r0!, {s13}
 8008782:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008786:	3c01      	subs	r4, #1
 8008788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800878c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8008790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008794:	edc0 7a00 	vstr	s15, [r0]
 8008798:	e781      	b.n	800869e <__kernel_rem_pio2f+0x3e6>
 800879a:	ed31 7a01 	vldmdb	r1!, {s14}
 800879e:	3b01      	subs	r3, #1
 80087a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087a4:	e77f      	b.n	80086a6 <__kernel_rem_pio2f+0x3ee>
 80087a6:	eef1 6a66 	vneg.f32	s13, s13
 80087aa:	eeb1 7a47 	vneg.f32	s14, s14
 80087ae:	edc6 6a00 	vstr	s13, [r6]
 80087b2:	ed86 7a01 	vstr	s14, [r6, #4]
 80087b6:	eef1 7a67 	vneg.f32	s15, s15
 80087ba:	e781      	b.n	80086c0 <__kernel_rem_pio2f+0x408>

080087bc <__kernel_sinf>:
 80087bc:	ee10 3a10 	vmov	r3, s0
 80087c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80087c8:	da04      	bge.n	80087d4 <__kernel_sinf+0x18>
 80087ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80087ce:	ee17 3a90 	vmov	r3, s15
 80087d2:	b35b      	cbz	r3, 800882c <__kernel_sinf+0x70>
 80087d4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80087d8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008830 <__kernel_sinf+0x74>
 80087dc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008834 <__kernel_sinf+0x78>
 80087e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80087e4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008838 <__kernel_sinf+0x7c>
 80087e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80087ec:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800883c <__kernel_sinf+0x80>
 80087f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80087f4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008840 <__kernel_sinf+0x84>
 80087f8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80087fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008800:	b930      	cbnz	r0, 8008810 <__kernel_sinf+0x54>
 8008802:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008844 <__kernel_sinf+0x88>
 8008806:	eea7 6a27 	vfma.f32	s12, s14, s15
 800880a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800880e:	4770      	bx	lr
 8008810:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008814:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008818:	eee0 7a86 	vfma.f32	s15, s1, s12
 800881c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008820:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008848 <__kernel_sinf+0x8c>
 8008824:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008828:	ee30 0a60 	vsub.f32	s0, s0, s1
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	2f2ec9d3 	.word	0x2f2ec9d3
 8008834:	b2d72f34 	.word	0xb2d72f34
 8008838:	3638ef1b 	.word	0x3638ef1b
 800883c:	b9500d01 	.word	0xb9500d01
 8008840:	3c088889 	.word	0x3c088889
 8008844:	be2aaaab 	.word	0xbe2aaaab
 8008848:	3e2aaaab 	.word	0x3e2aaaab

0800884c <matherr>:
 800884c:	2000      	movs	r0, #0
 800884e:	4770      	bx	lr

08008850 <fabsf>:
 8008850:	ee10 3a10 	vmov	r3, s0
 8008854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008858:	ee00 3a10 	vmov	s0, r3
 800885c:	4770      	bx	lr
	...

08008860 <floorf>:
 8008860:	ee10 3a10 	vmov	r3, s0
 8008864:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008868:	0dca      	lsrs	r2, r1, #23
 800886a:	3a7f      	subs	r2, #127	; 0x7f
 800886c:	2a16      	cmp	r2, #22
 800886e:	dc2a      	bgt.n	80088c6 <floorf+0x66>
 8008870:	2a00      	cmp	r2, #0
 8008872:	da11      	bge.n	8008898 <floorf+0x38>
 8008874:	eddf 7a18 	vldr	s15, [pc, #96]	; 80088d8 <floorf+0x78>
 8008878:	ee30 0a27 	vadd.f32	s0, s0, s15
 800887c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008884:	dd05      	ble.n	8008892 <floorf+0x32>
 8008886:	2b00      	cmp	r3, #0
 8008888:	da23      	bge.n	80088d2 <floorf+0x72>
 800888a:	4a14      	ldr	r2, [pc, #80]	; (80088dc <floorf+0x7c>)
 800888c:	2900      	cmp	r1, #0
 800888e:	bf18      	it	ne
 8008890:	4613      	movne	r3, r2
 8008892:	ee00 3a10 	vmov	s0, r3
 8008896:	4770      	bx	lr
 8008898:	4911      	ldr	r1, [pc, #68]	; (80088e0 <floorf+0x80>)
 800889a:	4111      	asrs	r1, r2
 800889c:	420b      	tst	r3, r1
 800889e:	d0fa      	beq.n	8008896 <floorf+0x36>
 80088a0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80088d8 <floorf+0x78>
 80088a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80088a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80088ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b0:	ddef      	ble.n	8008892 <floorf+0x32>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfbe      	ittt	lt
 80088b6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80088ba:	fa40 f202 	asrlt.w	r2, r0, r2
 80088be:	189b      	addlt	r3, r3, r2
 80088c0:	ea23 0301 	bic.w	r3, r3, r1
 80088c4:	e7e5      	b.n	8008892 <floorf+0x32>
 80088c6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80088ca:	d3e4      	bcc.n	8008896 <floorf+0x36>
 80088cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088d0:	4770      	bx	lr
 80088d2:	2300      	movs	r3, #0
 80088d4:	e7dd      	b.n	8008892 <floorf+0x32>
 80088d6:	bf00      	nop
 80088d8:	7149f2ca 	.word	0x7149f2ca
 80088dc:	bf800000 	.word	0xbf800000
 80088e0:	007fffff 	.word	0x007fffff

080088e4 <scalbnf>:
 80088e4:	b508      	push	{r3, lr}
 80088e6:	ee10 2a10 	vmov	r2, s0
 80088ea:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80088ee:	ed2d 8b02 	vpush	{d8}
 80088f2:	eef0 0a40 	vmov.f32	s1, s0
 80088f6:	d004      	beq.n	8008902 <scalbnf+0x1e>
 80088f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80088fc:	d306      	bcc.n	800890c <scalbnf+0x28>
 80088fe:	ee70 0a00 	vadd.f32	s1, s0, s0
 8008902:	ecbd 8b02 	vpop	{d8}
 8008906:	eeb0 0a60 	vmov.f32	s0, s1
 800890a:	bd08      	pop	{r3, pc}
 800890c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008910:	d21c      	bcs.n	800894c <scalbnf+0x68>
 8008912:	4b1f      	ldr	r3, [pc, #124]	; (8008990 <scalbnf+0xac>)
 8008914:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008994 <scalbnf+0xb0>
 8008918:	4298      	cmp	r0, r3
 800891a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800891e:	db10      	blt.n	8008942 <scalbnf+0x5e>
 8008920:	ee10 2a90 	vmov	r2, s1
 8008924:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008928:	3b19      	subs	r3, #25
 800892a:	4403      	add	r3, r0
 800892c:	2bfe      	cmp	r3, #254	; 0xfe
 800892e:	dd0f      	ble.n	8008950 <scalbnf+0x6c>
 8008930:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008998 <scalbnf+0xb4>
 8008934:	eeb0 0a48 	vmov.f32	s0, s16
 8008938:	f000 f834 	bl	80089a4 <copysignf>
 800893c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8008940:	e7df      	b.n	8008902 <scalbnf+0x1e>
 8008942:	eddf 7a16 	vldr	s15, [pc, #88]	; 800899c <scalbnf+0xb8>
 8008946:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800894a:	e7da      	b.n	8008902 <scalbnf+0x1e>
 800894c:	0ddb      	lsrs	r3, r3, #23
 800894e:	e7ec      	b.n	800892a <scalbnf+0x46>
 8008950:	2b00      	cmp	r3, #0
 8008952:	dd06      	ble.n	8008962 <scalbnf+0x7e>
 8008954:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008958:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800895c:	ee00 3a90 	vmov	s1, r3
 8008960:	e7cf      	b.n	8008902 <scalbnf+0x1e>
 8008962:	f113 0f16 	cmn.w	r3, #22
 8008966:	da06      	bge.n	8008976 <scalbnf+0x92>
 8008968:	f24c 3350 	movw	r3, #50000	; 0xc350
 800896c:	4298      	cmp	r0, r3
 800896e:	dcdf      	bgt.n	8008930 <scalbnf+0x4c>
 8008970:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800899c <scalbnf+0xb8>
 8008974:	e7de      	b.n	8008934 <scalbnf+0x50>
 8008976:	3319      	adds	r3, #25
 8008978:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800897c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008980:	eddf 7a07 	vldr	s15, [pc, #28]	; 80089a0 <scalbnf+0xbc>
 8008984:	ee07 3a10 	vmov	s14, r3
 8008988:	ee67 0a27 	vmul.f32	s1, s14, s15
 800898c:	e7b9      	b.n	8008902 <scalbnf+0x1e>
 800898e:	bf00      	nop
 8008990:	ffff3cb0 	.word	0xffff3cb0
 8008994:	4c000000 	.word	0x4c000000
 8008998:	7149f2ca 	.word	0x7149f2ca
 800899c:	0da24260 	.word	0x0da24260
 80089a0:	33000000 	.word	0x33000000

080089a4 <copysignf>:
 80089a4:	ee10 3a10 	vmov	r3, s0
 80089a8:	ee10 2a90 	vmov	r2, s1
 80089ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80089b4:	4313      	orrs	r3, r2
 80089b6:	ee00 3a10 	vmov	s0, r3
 80089ba:	4770      	bx	lr

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
